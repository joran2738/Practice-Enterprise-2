
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001150  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b360  0800b360  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b360  0800b360  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b360  0800b360  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b360  0800b360  0001b360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b364  0800b364  0001b364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800b368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000288c  200000b0  0800b418  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000293c  0800b418  0002293c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011be6  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3b  00000000  00000000  00031cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00034808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00035768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188ac  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164a7  00000000  00000000  0004ee34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085dcd  00000000  00000000  000652db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb0a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  000eb0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1f8 	.word	0x0800a1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800a1f8 	.word	0x0800a1f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <initBrickbreaker>:
uint8_t highScore = 0;
uint8_t loopTester = 0;
uint8_t guardian = 0;
uint8_t guardianTimer = 100;

void initBrickbreaker() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000276:	4b46      	ldr	r3, [pc, #280]	; (8000390 <initBrickbreaker+0x120>)
 8000278:	2228      	movs	r2, #40	; 0x28
 800027a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800027c:	4b44      	ldr	r3, [pc, #272]	; (8000390 <initBrickbreaker+0x120>)
 800027e:	2237      	movs	r2, #55	; 0x37
 8000280:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000282:	4b44      	ldr	r3, [pc, #272]	; (8000394 <initBrickbreaker+0x124>)
 8000284:	2228      	movs	r2, #40	; 0x28
 8000286:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000288:	4b42      	ldr	r3, [pc, #264]	; (8000394 <initBrickbreaker+0x124>)
 800028a:	2236      	movs	r2, #54	; 0x36
 800028c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800028e:	4b41      	ldr	r3, [pc, #260]	; (8000394 <initBrickbreaker+0x124>)
 8000290:	2208      	movs	r2, #8
 8000292:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e041      	b.n	800031e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	e038      	b.n	8000312 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	00d9      	lsls	r1, r3, #3
 80002a4:	483c      	ldr	r0, [pc, #240]	; (8000398 <initBrickbreaker+0x128>)
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	4413      	add	r3, r2
 80002b4:	011b      	lsls	r3, r3, #4
 80002b6:	4403      	add	r3, r0
 80002b8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f103 0108 	add.w	r1, r3, #8
 80002c0:	4835      	ldr	r0, [pc, #212]	; (8000398 <initBrickbreaker+0x128>)
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4613      	mov	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	68ba      	ldr	r2, [r7, #8]
 80002ce:	4413      	add	r3, r2
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	4403      	add	r3, r0
 80002d4:	3304      	adds	r3, #4
 80002d6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002d8:	492f      	ldr	r1, [pc, #188]	; (8000398 <initBrickbreaker+0x128>)
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	4413      	add	r3, r2
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	440b      	add	r3, r1
 80002ec:	3308      	adds	r3, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 80002f2:	4929      	ldr	r1, [pc, #164]	; (8000398 <initBrickbreaker+0x128>)
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4613      	mov	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4413      	add	r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	4413      	add	r3, r2
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	440b      	add	r3, r1
 8000306:	330c      	adds	r3, #12
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	3301      	adds	r3, #1
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b09      	cmp	r3, #9
 8000316:	ddc3      	ble.n	80002a0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	2b2f      	cmp	r3, #47	; 0x2f
 8000322:	ddba      	ble.n	800029a <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e027      	b.n	800037a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	e01e      	b.n	800036e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000330:	4919      	ldr	r1, [pc, #100]	; (8000398 <initBrickbreaker+0x128>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4613      	mov	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	4413      	add	r3, r2
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	4413      	add	r3, r2
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	440b      	add	r3, r1
 8000344:	3308      	adds	r3, #8
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800034a:	f001 fdd1 	bl	8001ef0 <setBrickToughness>
 800034e:	4601      	mov	r1, r0
 8000350:	4811      	ldr	r0, [pc, #68]	; (8000398 <initBrickbreaker+0x128>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	683a      	ldr	r2, [r7, #0]
 800035e:	4413      	add	r3, r2
 8000360:	011b      	lsls	r3, r3, #4
 8000362:	4403      	add	r3, r0
 8000364:	330c      	adds	r3, #12
 8000366:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b09      	cmp	r3, #9
 8000372:	dddd      	ble.n	8000330 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b09      	cmp	r3, #9
 800037e:	ddd4      	ble.n	800032a <initBrickbreaker+0xba>
        }
    }

    Displ_CLS(D_GREEN);
 8000380:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000384:	f004 fbf2 	bl	8004b6c <Displ_CLS>
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000014 	.word	0x20000014
 8000394:	20000018 	.word	0x20000018
 8000398:	200000cc 	.word	0x200000cc

0800039c <playBall>:

void playBall() {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003a0:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <playBall+0xfc>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d102      	bne.n	80003ae <playBall+0x12>
        changeDirection(N);
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 f8ef 	bl	800058c <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003ae:	4b3a      	ldr	r3, [pc, #232]	; (8000498 <playBall+0xfc>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	2b36      	cmp	r3, #54	; 0x36
 80003b4:	d14d      	bne.n	8000452 <playBall+0xb6>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003b6:	4b38      	ldr	r3, [pc, #224]	; (8000498 <playBall+0xfc>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b38      	ldr	r3, [pc, #224]	; (800049c <playBall+0x100>)
 80003bc:	f993 3000 	ldrsb.w	r3, [r3]
 80003c0:	3b19      	subs	r3, #25
 80003c2:	429a      	cmp	r2, r3
 80003c4:	db0b      	blt.n	80003de <playBall+0x42>
 80003c6:	4b34      	ldr	r3, [pc, #208]	; (8000498 <playBall+0xfc>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b34      	ldr	r3, [pc, #208]	; (800049c <playBall+0x100>)
 80003cc:	f993 3000 	ldrsb.w	r3, [r3]
 80003d0:	3319      	adds	r3, #25
 80003d2:	429a      	cmp	r2, r3
 80003d4:	dc03      	bgt.n	80003de <playBall+0x42>
            changeDirection(S);
 80003d6:	2004      	movs	r0, #4
 80003d8:	f000 f8d8 	bl	800058c <changeDirection>
 80003dc:	e039      	b.n	8000452 <playBall+0xb6>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003de:	4b2e      	ldr	r3, [pc, #184]	; (8000498 <playBall+0xfc>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <playBall+0x100>)
 80003e4:	f993 3000 	ldrsb.w	r3, [r3]
 80003e8:	3b1a      	subs	r3, #26
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d110      	bne.n	8000410 <playBall+0x74>
                if (ball.dir == SE) {
 80003ee:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <playBall+0xfc>)
 80003f0:	7a1b      	ldrb	r3, [r3, #8]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d103      	bne.n	80003fe <playBall+0x62>
                    ball.dir = NW;
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <playBall+0xfc>)
 80003f8:	2207      	movs	r2, #7
 80003fa:	721a      	strb	r2, [r3, #8]
 80003fc:	e029      	b.n	8000452 <playBall+0xb6>
                } else {
                    lives1--;
 80003fe:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <playBall+0x104>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3b01      	subs	r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <playBall+0x104>)
 8000408:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800040a:	f000 f965 	bl	80006d8 <gameEnd>
 800040e:	e020      	b.n	8000452 <playBall+0xb6>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 8000410:	4b21      	ldr	r3, [pc, #132]	; (8000498 <playBall+0xfc>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b21      	ldr	r3, [pc, #132]	; (800049c <playBall+0x100>)
 8000416:	f993 3000 	ldrsb.w	r3, [r3]
 800041a:	331a      	adds	r3, #26
 800041c:	429a      	cmp	r2, r3
 800041e:	d110      	bne.n	8000442 <playBall+0xa6>
                    if (ball.dir == SW) {
 8000420:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <playBall+0xfc>)
 8000422:	7a1b      	ldrb	r3, [r3, #8]
 8000424:	2b05      	cmp	r3, #5
 8000426:	d103      	bne.n	8000430 <playBall+0x94>
                        ball.dir = NE;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <playBall+0xfc>)
 800042a:	2201      	movs	r2, #1
 800042c:	721a      	strb	r2, [r3, #8]
 800042e:	e010      	b.n	8000452 <playBall+0xb6>
                    } else {
                        lives1--;
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <playBall+0x104>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <playBall+0x104>)
 800043a:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 800043c:	f000 f94c 	bl	80006d8 <gameEnd>
 8000440:	e007      	b.n	8000452 <playBall+0xb6>
                    }
                } else {
                    lives1--;
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <playBall+0x104>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <playBall+0x104>)
 800044c:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800044e:	f000 f943 	bl	80006d8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <playBall+0xfc>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d102      	bne.n	8000460 <playBall+0xc4>
        changeDirection(W);
 800045a:	2006      	movs	r0, #6
 800045c:	f000 f896 	bl	800058c <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <playBall+0xfc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b4f      	cmp	r3, #79	; 0x4f
 8000466:	d102      	bne.n	800046e <playBall+0xd2>
        changeDirection(E);
 8000468:	2002      	movs	r0, #2
 800046a:	f000 f88f 	bl	800058c <changeDirection>
    }

    if (guardian == 1) {
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <playBall+0x108>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d10a      	bne.n	800048c <playBall+0xf0>
        if (ball.y == person.y - 2) {
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <playBall+0xfc>)
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <playBall+0x100>)
 800047c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000480:	3b02      	subs	r3, #2
 8000482:	429a      	cmp	r2, r3
 8000484:	d102      	bne.n	800048c <playBall+0xf0>
            changeDirection(S);
 8000486:	2004      	movs	r0, #4
 8000488:	f000 f880 	bl	800058c <changeDirection>
        }
    }

    checkBrickHit();
 800048c:	f000 f9fa 	bl	8000884 <checkBrickHit>
    moveBall();
 8000490:	f000 f80a 	bl	80004a8 <moveBall>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000018 	.word	0x20000018
 800049c:	20000014 	.word	0x20000014
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20001ece 	.word	0x20001ece

080004a8 <moveBall>:

void moveBall() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004ae:	4b36      	ldr	r3, [pc, #216]	; (8000588 <moveBall+0xe0>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	b298      	uxth	r0, r3
 80004b8:	4b33      	ldr	r3, [pc, #204]	; (8000588 <moveBall+0xe0>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b299      	uxth	r1, r3
 80004c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2304      	movs	r3, #4
 80004ca:	2204      	movs	r2, #4
 80004cc:	f004 f99a 	bl	8004804 <Displ_FillArea>
    switch (ball.dir) {
 80004d0:	4b2d      	ldr	r3, [pc, #180]	; (8000588 <moveBall+0xe0>)
 80004d2:	7a1b      	ldrb	r3, [r3, #8]
 80004d4:	2b08      	cmp	r3, #8
 80004d6:	d84d      	bhi.n	8000574 <moveBall+0xcc>
 80004d8:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <moveBall+0x38>)
 80004da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004de:	bf00      	nop
 80004e0:	08000505 	.word	0x08000505
 80004e4:	0800051d 	.word	0x0800051d
 80004e8:	08000575 	.word	0x08000575
 80004ec:	08000549 	.word	0x08000549
 80004f0:	08000511 	.word	0x08000511
 80004f4:	0800055f 	.word	0x0800055f
 80004f8:	08000575 	.word	0x08000575
 80004fc:	08000533 	.word	0x08000533
 8000500:	0800057f 	.word	0x0800057f
    case N:
        ball.y -= 1;
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <moveBall+0xe0>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	3b01      	subs	r3, #1
 800050a:	4a1f      	ldr	r2, [pc, #124]	; (8000588 <moveBall+0xe0>)
 800050c:	6053      	str	r3, [r2, #4]
        break;
 800050e:	e037      	b.n	8000580 <moveBall+0xd8>
    case S:
        ball.y += 1;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <moveBall+0xe0>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <moveBall+0xe0>)
 8000518:	6053      	str	r3, [r2, #4]
        break;
 800051a:	e031      	b.n	8000580 <moveBall+0xd8>
    case NE:
        ball.y -= 1;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <moveBall+0xe0>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a19      	ldr	r2, [pc, #100]	; (8000588 <moveBall+0xe0>)
 8000524:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <moveBall+0xe0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	4a16      	ldr	r2, [pc, #88]	; (8000588 <moveBall+0xe0>)
 800052e:	6013      	str	r3, [r2, #0]
        break;
 8000530:	e026      	b.n	8000580 <moveBall+0xd8>
    case NW:
        ball.y -= 1;
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <moveBall+0xe0>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	3b01      	subs	r3, #1
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <moveBall+0xe0>)
 800053a:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <moveBall+0xe0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <moveBall+0xe0>)
 8000544:	6013      	str	r3, [r2, #0]
        break;
 8000546:	e01b      	b.n	8000580 <moveBall+0xd8>
    case SE:
        ball.y += 1;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <moveBall+0xe0>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <moveBall+0xe0>)
 8000550:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <moveBall+0xe0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <moveBall+0xe0>)
 800055a:	6013      	str	r3, [r2, #0]
        break;
 800055c:	e010      	b.n	8000580 <moveBall+0xd8>
    case SW:
        ball.y += 1;
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <moveBall+0xe0>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <moveBall+0xe0>)
 8000566:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <moveBall+0xe0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a06      	ldr	r2, [pc, #24]	; (8000588 <moveBall+0xe0>)
 8000570:	6013      	str	r3, [r2, #0]
        break;
 8000572:	e005      	b.n	8000580 <moveBall+0xd8>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here!";
        ball.x = ball.x;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <moveBall+0xe0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <moveBall+0xe0>)
 800057a:	6013      	str	r3, [r2, #0]
    }

}
 800057c:	e000      	b.n	8000580 <moveBall+0xd8>
        break;
 800057e:	bf00      	nop
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000018 	.word	0x20000018

0800058c <changeDirection>:

void changeDirection(directions inDir) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
    if (inDir == N) {
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d12a      	bne.n	80005f2 <changeDirection+0x66>
        switch (ball.dir) {
 800059c:	4b4d      	ldr	r3, [pc, #308]	; (80006d4 <changeDirection+0x148>)
 800059e:	7a1b      	ldrb	r3, [r3, #8]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d821      	bhi.n	80005e8 <changeDirection+0x5c>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <changeDirection+0x20>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	080005d1 	.word	0x080005d1
 80005b0:	080005e1 	.word	0x080005e1
 80005b4:	080005e9 	.word	0x080005e9
 80005b8:	080005e9 	.word	0x080005e9
 80005bc:	080005e9 	.word	0x080005e9
 80005c0:	080005e9 	.word	0x080005e9
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	080005f7 	.word	0x080005f7
        case N:
            ball.dir = S;
 80005d0:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <changeDirection+0x148>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	721a      	strb	r2, [r3, #8]
            break;
 80005d6:	e00f      	b.n	80005f8 <changeDirection+0x6c>
        case NW:
            ball.dir = SW;
 80005d8:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <changeDirection+0x148>)
 80005da:	2205      	movs	r2, #5
 80005dc:	721a      	strb	r2, [r3, #8]
            break;
 80005de:	e00b      	b.n	80005f8 <changeDirection+0x6c>
        case NE:
            ball.dir = SE;
 80005e0:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <changeDirection+0x148>)
 80005e2:	2203      	movs	r2, #3
 80005e4:	721a      	strb	r2, [r3, #8]
            break;
 80005e6:	e007      	b.n	80005f8 <changeDirection+0x6c>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80005e8:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <changeDirection+0x148>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a39      	ldr	r2, [pc, #228]	; (80006d4 <changeDirection+0x148>)
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	e002      	b.n	80005f8 <changeDirection+0x6c>
        }
    }
 80005f2:	bf00      	nop
 80005f4:	e000      	b.n	80005f8 <changeDirection+0x6c>
            break;
 80005f6:	bf00      	nop

    if (inDir == E) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d117      	bne.n	800062e <changeDirection+0xa2>
        switch (ball.dir) {
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <changeDirection+0x148>)
 8000600:	7a1b      	ldrb	r3, [r3, #8]
 8000602:	2b08      	cmp	r3, #8
 8000604:	d015      	beq.n	8000632 <changeDirection+0xa6>
 8000606:	2b08      	cmp	r3, #8
 8000608:	dc0c      	bgt.n	8000624 <changeDirection+0x98>
 800060a:	2b01      	cmp	r3, #1
 800060c:	d002      	beq.n	8000614 <changeDirection+0x88>
 800060e:	2b03      	cmp	r3, #3
 8000610:	d004      	beq.n	800061c <changeDirection+0x90>
 8000612:	e007      	b.n	8000624 <changeDirection+0x98>
        case NE:
            ball.dir = NW;
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <changeDirection+0x148>)
 8000616:	2207      	movs	r2, #7
 8000618:	721a      	strb	r2, [r3, #8]
            break;
 800061a:	e00b      	b.n	8000634 <changeDirection+0xa8>
        case SE:
            ball.dir = SW;
 800061c:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <changeDirection+0x148>)
 800061e:	2205      	movs	r2, #5
 8000620:	721a      	strb	r2, [r3, #8]
            break;
 8000622:	e007      	b.n	8000634 <changeDirection+0xa8>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <changeDirection+0x148>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <changeDirection+0x148>)
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	e002      	b.n	8000634 <changeDirection+0xa8>
        }
    }
 800062e:	bf00      	nop
 8000630:	e000      	b.n	8000634 <changeDirection+0xa8>
            break;
 8000632:	bf00      	nop

    if (inDir == S) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b04      	cmp	r3, #4
 8000638:	d125      	bne.n	8000686 <changeDirection+0xfa>
        switch (ball.dir) {
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <changeDirection+0x148>)
 800063c:	7a1b      	ldrb	r3, [r3, #8]
 800063e:	3b03      	subs	r3, #3
 8000640:	2b05      	cmp	r3, #5
 8000642:	d81b      	bhi.n	800067c <changeDirection+0xf0>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <changeDirection+0xc0>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	0800066d 	.word	0x0800066d
 8000650:	08000665 	.word	0x08000665
 8000654:	08000675 	.word	0x08000675
 8000658:	0800067d 	.word	0x0800067d
 800065c:	0800067d 	.word	0x0800067d
 8000660:	0800068b 	.word	0x0800068b
        case S:
            ball.dir = N;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <changeDirection+0x148>)
 8000666:	2200      	movs	r2, #0
 8000668:	721a      	strb	r2, [r3, #8]
            break;
 800066a:	e00f      	b.n	800068c <changeDirection+0x100>
        case SE:
            ball.dir = NE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <changeDirection+0x148>)
 800066e:	2201      	movs	r2, #1
 8000670:	721a      	strb	r2, [r3, #8]
            break;
 8000672:	e00b      	b.n	800068c <changeDirection+0x100>
        case SW:
            ball.dir = NW;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <changeDirection+0x148>)
 8000676:	2207      	movs	r2, #7
 8000678:	721a      	strb	r2, [r3, #8]
            break;
 800067a:	e007      	b.n	800068c <changeDirection+0x100>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.dir = ball.dir;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <changeDirection+0x148>)
 800067e:	7a1a      	ldrb	r2, [r3, #8]
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <changeDirection+0x148>)
 8000682:	721a      	strb	r2, [r3, #8]
 8000684:	e002      	b.n	800068c <changeDirection+0x100>
        }
    }
 8000686:	bf00      	nop
 8000688:	e000      	b.n	800068c <changeDirection+0x100>
            break;
 800068a:	bf00      	nop

    if (inDir == W) {
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b06      	cmp	r3, #6
 8000690:	d116      	bne.n	80006c0 <changeDirection+0x134>
        switch (ball.dir) {
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <changeDirection+0x148>)
 8000694:	7a1b      	ldrb	r3, [r3, #8]
 8000696:	2b08      	cmp	r3, #8
 8000698:	d014      	beq.n	80006c4 <changeDirection+0x138>
 800069a:	2b08      	cmp	r3, #8
 800069c:	dc0b      	bgt.n	80006b6 <changeDirection+0x12a>
 800069e:	2b05      	cmp	r3, #5
 80006a0:	d005      	beq.n	80006ae <changeDirection+0x122>
 80006a2:	2b07      	cmp	r3, #7
 80006a4:	d107      	bne.n	80006b6 <changeDirection+0x12a>
        case NW:
            ball.dir = NE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <changeDirection+0x148>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	721a      	strb	r2, [r3, #8]
            break;
 80006ac:	e00b      	b.n	80006c6 <changeDirection+0x13a>
        case SW:
            ball.dir = SE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <changeDirection+0x148>)
 80006b0:	2203      	movs	r2, #3
 80006b2:	721a      	strb	r2, [r3, #8]
            break;
 80006b4:	e007      	b.n	80006c6 <changeDirection+0x13a>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <changeDirection+0x148>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <changeDirection+0x148>)
 80006bc:	6013      	str	r3, [r2, #0]
        }
    }
}
 80006be:	e002      	b.n	80006c6 <changeDirection+0x13a>
    }
 80006c0:	bf00      	nop
 80006c2:	e000      	b.n	80006c6 <changeDirection+0x13a>
            break;
 80006c4:	bf00      	nop
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000018 	.word	0x20000018

080006d8 <gameEnd>:

void gameEnd() {
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
    person.x = (SCREEN_WIDTH)/2;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <gameEnd+0x5c>)
 80006de:	2228      	movs	r2, #40	; 0x28
 80006e0:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <gameEnd+0x5c>)
 80006e4:	f993 3000 	ldrsb.w	r3, [r3]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <gameEnd+0x60>)
 80006ec:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <gameEnd+0x60>)
 80006f0:	2236      	movs	r2, #54	; 0x36
 80006f2:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <gameEnd+0x60>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <gameEnd+0x64>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d112      	bne.n	8000728 <gameEnd+0x50>
        if (points > highScore) {
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <gameEnd+0x68>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <gameEnd+0x6c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d903      	bls.n	8000716 <gameEnd+0x3e>
            highScore = points;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <gameEnd+0x68>)
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <gameEnd+0x6c>)
 8000714:	701a      	strb	r2, [r3, #0]
            //////QD << highScore;
        }

        start = 0;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <gameEnd+0x70>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
        points = 0;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <gameEnd+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <gameEnd+0x64>)
 8000724:	2203      	movs	r2, #3
 8000726:	701a      	strb	r2, [r3, #0]
    }
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000014 	.word	0x20000014
 8000738:	20000018 	.word	0x20000018
 800073c:	20000000 	.word	0x20000000
 8000740:	20001ecc 	.word	0x20001ecc
 8000744:	20001ecd 	.word	0x20001ecd
 8000748:	20001ed2 	.word	0x20001ed2

0800074c <lowerBricks>:

void lowerBricks() {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 8000752:	232e      	movs	r3, #46	; 0x2e
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e03d      	b.n	80007d4 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	e034      	b.n	80007c8 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	482d      	ldr	r0, [pc, #180]	; (8000818 <lowerBricks+0xcc>)
 8000764:	68f9      	ldr	r1, [r7, #12]
 8000766:	460b      	mov	r3, r1
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	440b      	add	r3, r1
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	440b      	add	r3, r1
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	4403      	add	r3, r0
 8000776:	3308      	adds	r3, #8
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	4827      	ldr	r0, [pc, #156]	; (8000818 <lowerBricks+0xcc>)
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	4413      	add	r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	4403      	add	r3, r0
 800078c:	3308      	adds	r3, #8
 800078e:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	4820      	ldr	r0, [pc, #128]	; (8000818 <lowerBricks+0xcc>)
 8000796:	68f9      	ldr	r1, [r7, #12]
 8000798:	460b      	mov	r3, r1
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	440b      	add	r3, r1
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	440b      	add	r3, r1
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	4403      	add	r3, r0
 80007a8:	330c      	adds	r3, #12
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	481a      	ldr	r0, [pc, #104]	; (8000818 <lowerBricks+0xcc>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	4403      	add	r3, r0
 80007be:	330c      	adds	r3, #12
 80007c0:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b09      	cmp	r3, #9
 80007cc:	ddc7      	ble.n	800075e <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dabe      	bge.n	8000758 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	e012      	b.n	8000806 <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <lowerBricks+0xcc>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	4413      	add	r3, r2
 80007e8:	3308      	adds	r3, #8
 80007ea:	2201      	movs	r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 80007ee:	f001 fb7f 	bl	8001ef0 <setBrickToughness>
 80007f2:	4602      	mov	r2, r0
 80007f4:	4908      	ldr	r1, [pc, #32]	; (8000818 <lowerBricks+0xcc>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	440b      	add	r3, r1
 80007fc:	330c      	adds	r3, #12
 80007fe:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b09      	cmp	r3, #9
 800080a:	dde9      	ble.n	80007e0 <lowerBricks+0x94>
    }
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000cc 	.word	0x200000cc

0800081c <checkGameOver>:

void checkGameOver() {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e01d      	b.n	8000864 <checkGameOver+0x48>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <checkGameOver+0x58>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	4413      	add	r3, r2
 8000830:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000834:	3308      	adds	r3, #8
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d110      	bne.n	800085e <checkGameOver+0x42>
            lives1 = 0;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <checkGameOver+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <checkGameOver+0x60>)
 8000844:	f993 3000 	ldrsb.w	r3, [r3]
 8000848:	461a      	mov	r2, r3
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <checkGameOver+0x64>)
 800084c:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <checkGameOver+0x64>)
 8000850:	2236      	movs	r2, #54	; 0x36
 8000852:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <checkGameOver+0x64>)
 8000856:	2208      	movs	r2, #8
 8000858:	721a      	strb	r2, [r3, #8]
            gameEnd();
 800085a:	f7ff ff3d 	bl	80006d8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3301      	adds	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b09      	cmp	r3, #9
 8000868:	ddde      	ble.n	8000828 <checkGameOver+0xc>
            //////QD << "Game Over, noob";
        }
    }
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000cc 	.word	0x200000cc
 8000878:	20000000 	.word	0x20000000
 800087c:	20000014 	.word	0x20000014
 8000880:	20000018 	.word	0x20000018

08000884 <checkBrickHit>:

void checkBrickHit() {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <checkBrickHit+0x3c>)
 8000890:	7a1b      	ldrb	r3, [r3, #8]
 8000892:	3b01      	subs	r3, #1
 8000894:	2b07      	cmp	r3, #7
 8000896:	f201 8117 	bhi.w	8001ac8 <checkBrickHit+0x1244>
 800089a:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <checkBrickHit+0x1c>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	08000d55 	.word	0x08000d55
 80008a4:	08001ac9 	.word	0x08001ac9
 80008a8:	080011e5 	.word	0x080011e5
 80008ac:	08001ac9 	.word	0x08001ac9
 80008b0:	0800165d 	.word	0x0800165d
 80008b4:	08001ac9 	.word	0x08001ac9
 80008b8:	080008c5 	.word	0x080008c5
 80008bc:	08001ad3 	.word	0x08001ad3
 80008c0:	20000018 	.word	0x20000018
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 80008c4:	4bb5      	ldr	r3, [pc, #724]	; (8000b9c <checkBrickHit+0x318>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f1a3 0209 	sub.w	r2, r3, #9
 80008cc:	4bb3      	ldr	r3, [pc, #716]	; (8000b9c <checkBrickHit+0x318>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da00      	bge.n	80008d6 <checkBrickHit+0x52>
 80008d4:	3307      	adds	r3, #7
 80008d6:	10db      	asrs	r3, r3, #3
 80008d8:	4618      	mov	r0, r3
 80008da:	49b1      	ldr	r1, [pc, #708]	; (8000ba0 <checkBrickHit+0x31c>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4403      	add	r3, r0
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	440b      	add	r3, r1
 80008ea:	3308      	adds	r3, #8
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	f040 809d 	bne.w	8000a2e <checkBrickHit+0x1aa>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 80008f4:	4ba9      	ldr	r3, [pc, #676]	; (8000b9c <checkBrickHit+0x318>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f1a3 0209 	sub.w	r2, r3, #9
 80008fc:	4ba7      	ldr	r3, [pc, #668]	; (8000b9c <checkBrickHit+0x318>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	da00      	bge.n	8000906 <checkBrickHit+0x82>
 8000904:	3307      	adds	r3, #7
 8000906:	10db      	asrs	r3, r3, #3
 8000908:	4619      	mov	r1, r3
 800090a:	48a5      	ldr	r0, [pc, #660]	; (8000ba0 <checkBrickHit+0x31c>)
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	440b      	add	r3, r1
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	4403      	add	r3, r0
 800091a:	330c      	adds	r3, #12
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1e58      	subs	r0, r3, #1
 8000920:	4c9f      	ldr	r4, [pc, #636]	; (8000ba0 <checkBrickHit+0x31c>)
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	440b      	add	r3, r1
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	4423      	add	r3, r4
 8000930:	330c      	adds	r3, #12
 8000932:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000934:	4b99      	ldr	r3, [pc, #612]	; (8000b9c <checkBrickHit+0x318>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f1a3 0209 	sub.w	r2, r3, #9
 800093c:	4b97      	ldr	r3, [pc, #604]	; (8000b9c <checkBrickHit+0x318>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	da00      	bge.n	8000946 <checkBrickHit+0xc2>
 8000944:	3307      	adds	r3, #7
 8000946:	10db      	asrs	r3, r3, #3
 8000948:	4618      	mov	r0, r3
 800094a:	4995      	ldr	r1, [pc, #596]	; (8000ba0 <checkBrickHit+0x31c>)
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4403      	add	r3, r0
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	440b      	add	r3, r1
 800095a:	330c      	adds	r3, #12
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	dc5f      	bgt.n	8000a22 <checkBrickHit+0x19e>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000962:	4b8e      	ldr	r3, [pc, #568]	; (8000b9c <checkBrickHit+0x318>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f1a3 0209 	sub.w	r2, r3, #9
 800096a:	4b8c      	ldr	r3, [pc, #560]	; (8000b9c <checkBrickHit+0x318>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	da00      	bge.n	8000974 <checkBrickHit+0xf0>
 8000972:	3307      	adds	r3, #7
 8000974:	10db      	asrs	r3, r3, #3
 8000976:	4618      	mov	r0, r3
 8000978:	4989      	ldr	r1, [pc, #548]	; (8000ba0 <checkBrickHit+0x31c>)
 800097a:	4613      	mov	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4403      	add	r3, r0
 8000984:	011b      	lsls	r3, r3, #4
 8000986:	440b      	add	r3, r1
 8000988:	3308      	adds	r3, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
                points++;
 800098e:	4b85      	ldr	r3, [pc, #532]	; (8000ba4 <checkBrickHit+0x320>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b83      	ldr	r3, [pc, #524]	; (8000ba4 <checkBrickHit+0x320>)
 8000998:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, D_GREEN);
 800099a:	4b80      	ldr	r3, [pc, #512]	; (8000b9c <checkBrickHit+0x318>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f1a3 0209 	sub.w	r2, r3, #9
 80009a2:	4b7e      	ldr	r3, [pc, #504]	; (8000b9c <checkBrickHit+0x318>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da00      	bge.n	80009ac <checkBrickHit+0x128>
 80009aa:	3307      	adds	r3, #7
 80009ac:	10db      	asrs	r3, r3, #3
 80009ae:	4618      	mov	r0, r3
 80009b0:	497b      	ldr	r1, [pc, #492]	; (8000ba0 <checkBrickHit+0x31c>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4403      	add	r3, r0
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	440b      	add	r3, r1
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	b298      	uxth	r0, r3
 80009c8:	4b74      	ldr	r3, [pc, #464]	; (8000b9c <checkBrickHit+0x318>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f1a3 0209 	sub.w	r2, r3, #9
 80009d0:	4b72      	ldr	r3, [pc, #456]	; (8000b9c <checkBrickHit+0x318>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	da00      	bge.n	80009da <checkBrickHit+0x156>
 80009d8:	3307      	adds	r3, #7
 80009da:	10db      	asrs	r3, r3, #3
 80009dc:	461c      	mov	r4, r3
 80009de:	4970      	ldr	r1, [pc, #448]	; (8000ba0 <checkBrickHit+0x31c>)
 80009e0:	4613      	mov	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4423      	add	r3, r4
 80009ea:	011b      	lsls	r3, r3, #4
 80009ec:	440b      	add	r3, r1
 80009ee:	3304      	adds	r3, #4
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	b299      	uxth	r1, r3
 80009f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2304      	movs	r3, #4
 8000a00:	2220      	movs	r2, #32
 8000a02:	f003 feff 	bl	8004804 <Displ_FillArea>
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000a06:	4b65      	ldr	r3, [pc, #404]	; (8000b9c <checkBrickHit+0x318>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da00      	bge.n	8000a10 <checkBrickHit+0x18c>
 8000a0e:	3307      	adds	r3, #7
 8000a10:	10db      	asrs	r3, r3, #3
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b61      	ldr	r3, [pc, #388]	; (8000b9c <checkBrickHit+0x318>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	3b09      	subs	r3, #9
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	f001 f86b 	bl	8001af8 <dropPowerUp>
            }
            bricksHit++;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	3301      	adds	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000a28:	4b5c      	ldr	r3, [pc, #368]	; (8000b9c <checkBrickHit+0x318>)
 8000a2a:	2205      	movs	r2, #5
 8000a2c:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000a2e:	4b5b      	ldr	r3, [pc, #364]	; (8000b9c <checkBrickHit+0x318>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f1a3 0208 	sub.w	r2, r3, #8
 8000a36:	4b59      	ldr	r3, [pc, #356]	; (8000b9c <checkBrickHit+0x318>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	da00      	bge.n	8000a42 <checkBrickHit+0x1be>
 8000a40:	3307      	adds	r3, #7
 8000a42:	10db      	asrs	r3, r3, #3
 8000a44:	4618      	mov	r0, r3
 8000a46:	4956      	ldr	r1, [pc, #344]	; (8000ba0 <checkBrickHit+0x31c>)
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4403      	add	r3, r0
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	440b      	add	r3, r1
 8000a56:	3308      	adds	r3, #8
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	f040 80b5 	bne.w	8000bca <checkBrickHit+0x346>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000a60:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <checkBrickHit+0x318>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f1a3 0208 	sub.w	r2, r3, #8
 8000a68:	4b4c      	ldr	r3, [pc, #304]	; (8000b9c <checkBrickHit+0x318>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da00      	bge.n	8000a74 <checkBrickHit+0x1f0>
 8000a72:	3307      	adds	r3, #7
 8000a74:	10db      	asrs	r3, r3, #3
 8000a76:	4619      	mov	r1, r3
 8000a78:	4849      	ldr	r0, [pc, #292]	; (8000ba0 <checkBrickHit+0x31c>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	440b      	add	r3, r1
 8000a84:	011b      	lsls	r3, r3, #4
 8000a86:	4403      	add	r3, r0
 8000a88:	330c      	adds	r3, #12
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1e58      	subs	r0, r3, #1
 8000a8e:	4c44      	ldr	r4, [pc, #272]	; (8000ba0 <checkBrickHit+0x31c>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	440b      	add	r3, r1
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	4423      	add	r3, r4
 8000a9e:	330c      	adds	r3, #12
 8000aa0:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <checkBrickHit+0x318>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f1a3 0208 	sub.w	r2, r3, #8
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <checkBrickHit+0x318>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	da00      	bge.n	8000ab6 <checkBrickHit+0x232>
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	10db      	asrs	r3, r3, #3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	4939      	ldr	r1, [pc, #228]	; (8000ba0 <checkBrickHit+0x31c>)
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4403      	add	r3, r0
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	440b      	add	r3, r1
 8000aca:	330c      	adds	r3, #12
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dc6a      	bgt.n	8000ba8 <checkBrickHit+0x324>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <checkBrickHit+0x318>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f1a3 0208 	sub.w	r2, r3, #8
 8000ada:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <checkBrickHit+0x318>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	da00      	bge.n	8000ae6 <checkBrickHit+0x262>
 8000ae4:	3307      	adds	r3, #7
 8000ae6:	10db      	asrs	r3, r3, #3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	492d      	ldr	r1, [pc, #180]	; (8000ba0 <checkBrickHit+0x31c>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4403      	add	r3, r0
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	440b      	add	r3, r1
 8000afa:	3308      	adds	r3, #8
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
                points++;
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <checkBrickHit+0x320>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <checkBrickHit+0x320>)
 8000b0a:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, D_GREEN);
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <checkBrickHit+0x318>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f1a3 0208 	sub.w	r2, r3, #8
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <checkBrickHit+0x318>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da00      	bge.n	8000b20 <checkBrickHit+0x29c>
 8000b1e:	3307      	adds	r3, #7
 8000b20:	10db      	asrs	r3, r3, #3
 8000b22:	4618      	mov	r0, r3
 8000b24:	491e      	ldr	r1, [pc, #120]	; (8000ba0 <checkBrickHit+0x31c>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4403      	add	r3, r0
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	440b      	add	r3, r1
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	b298      	uxth	r0, r3
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <checkBrickHit+0x318>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f1a3 0208 	sub.w	r2, r3, #8
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <checkBrickHit+0x318>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da00      	bge.n	8000b50 <checkBrickHit+0x2cc>
 8000b4e:	3307      	adds	r3, #7
 8000b50:	10db      	asrs	r3, r3, #3
 8000b52:	461c      	mov	r4, r3
 8000b54:	4912      	ldr	r1, [pc, #72]	; (8000ba0 <checkBrickHit+0x31c>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4423      	add	r3, r4
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	440b      	add	r3, r1
 8000b64:	3304      	adds	r3, #4
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	b299      	uxth	r1, r3
 8000b6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2304      	movs	r3, #4
 8000b76:	2220      	movs	r2, #32
 8000b78:	f003 fe44 	bl	8004804 <Displ_FillArea>
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <checkBrickHit+0x318>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da00      	bge.n	8000b88 <checkBrickHit+0x304>
 8000b86:	3307      	adds	r3, #7
 8000b88:	10db      	asrs	r3, r3, #3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <checkBrickHit+0x318>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	3b08      	subs	r3, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f000 ffaf 	bl	8001af8 <dropPowerUp>
 8000b9a:	e005      	b.n	8000ba8 <checkBrickHit+0x324>
 8000b9c:	20000018 	.word	0x20000018
 8000ba0:	200000cc 	.word	0x200000cc
 8000ba4:	20001ecc 	.word	0x20001ecc
            }
            bricksHit++;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3301      	adds	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000bae:	4b66      	ldr	r3, [pc, #408]	; (8000d48 <checkBrickHit+0x4c4>)
 8000bb0:	7a1b      	ldrb	r3, [r3, #8]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	d102      	bne.n	8000bbc <checkBrickHit+0x338>
                ball.dir = NE;
 8000bb6:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <checkBrickHit+0x4c4>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000bbc:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <checkBrickHit+0x4c4>)
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d102      	bne.n	8000bca <checkBrickHit+0x346>
                ball.dir = SE;
 8000bc4:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <checkBrickHit+0x4c4>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f040 8782 	bne.w	8001ad6 <checkBrickHit+0x1252>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <checkBrickHit+0x4c4>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f1a3 0209 	sub.w	r2, r3, #9
 8000bda:	4b5b      	ldr	r3, [pc, #364]	; (8000d48 <checkBrickHit+0x4c4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	da00      	bge.n	8000be6 <checkBrickHit+0x362>
 8000be4:	3307      	adds	r3, #7
 8000be6:	10db      	asrs	r3, r3, #3
 8000be8:	4618      	mov	r0, r3
 8000bea:	4958      	ldr	r1, [pc, #352]	; (8000d4c <checkBrickHit+0x4c8>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4403      	add	r3, r0
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	f040 8769 	bne.w	8001ad6 <checkBrickHit+0x1252>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000c04:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <checkBrickHit+0x4c4>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f1a3 0209 	sub.w	r2, r3, #9
 8000c0c:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <checkBrickHit+0x4c4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da00      	bge.n	8000c18 <checkBrickHit+0x394>
 8000c16:	3307      	adds	r3, #7
 8000c18:	10db      	asrs	r3, r3, #3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	484b      	ldr	r0, [pc, #300]	; (8000d4c <checkBrickHit+0x4c8>)
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	440b      	add	r3, r1
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4403      	add	r3, r0
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1e58      	subs	r0, r3, #1
 8000c32:	4c46      	ldr	r4, [pc, #280]	; (8000d4c <checkBrickHit+0x4c8>)
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	440b      	add	r3, r1
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	4423      	add	r3, r4
 8000c42:	330c      	adds	r3, #12
 8000c44:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000c46:	4b40      	ldr	r3, [pc, #256]	; (8000d48 <checkBrickHit+0x4c4>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f1a3 0209 	sub.w	r2, r3, #9
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <checkBrickHit+0x4c4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da00      	bge.n	8000c5a <checkBrickHit+0x3d6>
 8000c58:	3307      	adds	r3, #7
 8000c5a:	10db      	asrs	r3, r3, #3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	493b      	ldr	r1, [pc, #236]	; (8000d4c <checkBrickHit+0x4c8>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4403      	add	r3, r0
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	440b      	add	r3, r1
 8000c6e:	330c      	adds	r3, #12
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dc63      	bgt.n	8000d3e <checkBrickHit+0x4ba>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <checkBrickHit+0x4c4>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f1a3 0209 	sub.w	r2, r3, #9
 8000c7e:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <checkBrickHit+0x4c4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da00      	bge.n	8000c8a <checkBrickHit+0x406>
 8000c88:	3307      	adds	r3, #7
 8000c8a:	10db      	asrs	r3, r3, #3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	492f      	ldr	r1, [pc, #188]	; (8000d4c <checkBrickHit+0x4c8>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4403      	add	r3, r0
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3308      	adds	r3, #8
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
                    points++;
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <checkBrickHit+0x4cc>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <checkBrickHit+0x4cc>)
 8000cae:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, D_GREEN);
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <checkBrickHit+0x4c4>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f1a3 0209 	sub.w	r2, r3, #9
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <checkBrickHit+0x4c4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da00      	bge.n	8000cc4 <checkBrickHit+0x440>
 8000cc2:	3307      	adds	r3, #7
 8000cc4:	10db      	asrs	r3, r3, #3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	4920      	ldr	r1, [pc, #128]	; (8000d4c <checkBrickHit+0x4c8>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4403      	add	r3, r0
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	440b      	add	r3, r1
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	b298      	uxth	r0, r3
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <checkBrickHit+0x4c4>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f1a3 0209 	sub.w	r2, r3, #9
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <checkBrickHit+0x4c4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	da00      	bge.n	8000cf4 <checkBrickHit+0x470>
 8000cf2:	3307      	adds	r3, #7
 8000cf4:	10db      	asrs	r3, r3, #3
 8000cf6:	461c      	mov	r4, r3
 8000cf8:	4914      	ldr	r1, [pc, #80]	; (8000d4c <checkBrickHit+0x4c8>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4423      	add	r3, r4
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	440b      	add	r3, r1
 8000d08:	3304      	adds	r3, #4
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	b299      	uxth	r1, r3
 8000d12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2304      	movs	r3, #4
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	f003 fd72 	bl	8004804 <Displ_FillArea>
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <checkBrickHit+0x4c4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da00      	bge.n	8000d2c <checkBrickHit+0x4a8>
 8000d2a:	3307      	adds	r3, #7
 8000d2c:	10db      	asrs	r3, r3, #3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <checkBrickHit+0x4c4>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	3b09      	subs	r3, #9
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f000 fedd 	bl	8001af8 <dropPowerUp>
                }
                ball.dir = SE;
 8000d3e:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <checkBrickHit+0x4c4>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000d44:	f000 bec7 	b.w	8001ad6 <checkBrickHit+0x1252>
 8000d48:	20000018 	.word	0x20000018
 8000d4c:	200000cc 	.word	0x200000cc
 8000d50:	20001ecc 	.word	0x20001ecc
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000d54:	4bb5      	ldr	r3, [pc, #724]	; (800102c <checkBrickHit+0x7a8>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f1a3 0209 	sub.w	r2, r3, #9
 8000d5c:	4bb3      	ldr	r3, [pc, #716]	; (800102c <checkBrickHit+0x7a8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da00      	bge.n	8000d66 <checkBrickHit+0x4e2>
 8000d64:	3307      	adds	r3, #7
 8000d66:	10db      	asrs	r3, r3, #3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	49b1      	ldr	r1, [pc, #708]	; (8001030 <checkBrickHit+0x7ac>)
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4403      	add	r3, r0
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	440b      	add	r3, r1
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	f040 809d 	bne.w	8000ebe <checkBrickHit+0x63a>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000d84:	4ba9      	ldr	r3, [pc, #676]	; (800102c <checkBrickHit+0x7a8>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f1a3 0209 	sub.w	r2, r3, #9
 8000d8c:	4ba7      	ldr	r3, [pc, #668]	; (800102c <checkBrickHit+0x7a8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da00      	bge.n	8000d96 <checkBrickHit+0x512>
 8000d94:	3307      	adds	r3, #7
 8000d96:	10db      	asrs	r3, r3, #3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	48a5      	ldr	r0, [pc, #660]	; (8001030 <checkBrickHit+0x7ac>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	440b      	add	r3, r1
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4403      	add	r3, r0
 8000daa:	330c      	adds	r3, #12
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	1e58      	subs	r0, r3, #1
 8000db0:	4c9f      	ldr	r4, [pc, #636]	; (8001030 <checkBrickHit+0x7ac>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	440b      	add	r3, r1
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	4423      	add	r3, r4
 8000dc0:	330c      	adds	r3, #12
 8000dc2:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000dc4:	4b99      	ldr	r3, [pc, #612]	; (800102c <checkBrickHit+0x7a8>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f1a3 0209 	sub.w	r2, r3, #9
 8000dcc:	4b97      	ldr	r3, [pc, #604]	; (800102c <checkBrickHit+0x7a8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da00      	bge.n	8000dd6 <checkBrickHit+0x552>
 8000dd4:	3307      	adds	r3, #7
 8000dd6:	10db      	asrs	r3, r3, #3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	4995      	ldr	r1, [pc, #596]	; (8001030 <checkBrickHit+0x7ac>)
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4403      	add	r3, r0
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	440b      	add	r3, r1
 8000dea:	330c      	adds	r3, #12
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dc5f      	bgt.n	8000eb2 <checkBrickHit+0x62e>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000df2:	4b8e      	ldr	r3, [pc, #568]	; (800102c <checkBrickHit+0x7a8>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f1a3 0209 	sub.w	r2, r3, #9
 8000dfa:	4b8c      	ldr	r3, [pc, #560]	; (800102c <checkBrickHit+0x7a8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da00      	bge.n	8000e04 <checkBrickHit+0x580>
 8000e02:	3307      	adds	r3, #7
 8000e04:	10db      	asrs	r3, r3, #3
 8000e06:	4618      	mov	r0, r3
 8000e08:	4989      	ldr	r1, [pc, #548]	; (8001030 <checkBrickHit+0x7ac>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4403      	add	r3, r0
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	440b      	add	r3, r1
 8000e18:	3308      	adds	r3, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
                points++;
 8000e1e:	4b85      	ldr	r3, [pc, #532]	; (8001034 <checkBrickHit+0x7b0>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b83      	ldr	r3, [pc, #524]	; (8001034 <checkBrickHit+0x7b0>)
 8000e28:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, D_GREEN);
 8000e2a:	4b80      	ldr	r3, [pc, #512]	; (800102c <checkBrickHit+0x7a8>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f1a3 0209 	sub.w	r2, r3, #9
 8000e32:	4b7e      	ldr	r3, [pc, #504]	; (800102c <checkBrickHit+0x7a8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da00      	bge.n	8000e3c <checkBrickHit+0x5b8>
 8000e3a:	3307      	adds	r3, #7
 8000e3c:	10db      	asrs	r3, r3, #3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	497b      	ldr	r1, [pc, #492]	; (8001030 <checkBrickHit+0x7ac>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4403      	add	r3, r0
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	440b      	add	r3, r1
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	b298      	uxth	r0, r3
 8000e58:	4b74      	ldr	r3, [pc, #464]	; (800102c <checkBrickHit+0x7a8>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e60:	4b72      	ldr	r3, [pc, #456]	; (800102c <checkBrickHit+0x7a8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da00      	bge.n	8000e6a <checkBrickHit+0x5e6>
 8000e68:	3307      	adds	r3, #7
 8000e6a:	10db      	asrs	r3, r3, #3
 8000e6c:	461c      	mov	r4, r3
 8000e6e:	4970      	ldr	r1, [pc, #448]	; (8001030 <checkBrickHit+0x7ac>)
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4423      	add	r3, r4
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	b299      	uxth	r1, r3
 8000e88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2304      	movs	r3, #4
 8000e90:	2220      	movs	r2, #32
 8000e92:	f003 fcb7 	bl	8004804 <Displ_FillArea>
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000e96:	4b65      	ldr	r3, [pc, #404]	; (800102c <checkBrickHit+0x7a8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da00      	bge.n	8000ea0 <checkBrickHit+0x61c>
 8000e9e:	3307      	adds	r3, #7
 8000ea0:	10db      	asrs	r3, r3, #3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b61      	ldr	r3, [pc, #388]	; (800102c <checkBrickHit+0x7a8>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	3b09      	subs	r3, #9
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4610      	mov	r0, r2
 8000eae:	f000 fe23 	bl	8001af8 <dropPowerUp>
            }
            bricksHit++;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8000eb8:	4b5c      	ldr	r3, [pc, #368]	; (800102c <checkBrickHit+0x7a8>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8000ebe:	4b5b      	ldr	r3, [pc, #364]	; (800102c <checkBrickHit+0x7a8>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f1a3 0208 	sub.w	r2, r3, #8
 8000ec6:	4b59      	ldr	r3, [pc, #356]	; (800102c <checkBrickHit+0x7a8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	da00      	bge.n	8000ed2 <checkBrickHit+0x64e>
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	10db      	asrs	r3, r3, #3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	4956      	ldr	r1, [pc, #344]	; (8001030 <checkBrickHit+0x7ac>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4403      	add	r3, r0
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	f040 80b5 	bne.w	800105a <checkBrickHit+0x7d6>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8000ef0:	4b4e      	ldr	r3, [pc, #312]	; (800102c <checkBrickHit+0x7a8>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f1a3 0208 	sub.w	r2, r3, #8
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <checkBrickHit+0x7a8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	da00      	bge.n	8000f04 <checkBrickHit+0x680>
 8000f02:	3307      	adds	r3, #7
 8000f04:	10db      	asrs	r3, r3, #3
 8000f06:	4619      	mov	r1, r3
 8000f08:	4849      	ldr	r0, [pc, #292]	; (8001030 <checkBrickHit+0x7ac>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	440b      	add	r3, r1
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	4403      	add	r3, r0
 8000f18:	330c      	adds	r3, #12
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	1e58      	subs	r0, r3, #1
 8000f1e:	4c44      	ldr	r4, [pc, #272]	; (8001030 <checkBrickHit+0x7ac>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	440b      	add	r3, r1
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	4423      	add	r3, r4
 8000f2e:	330c      	adds	r3, #12
 8000f30:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8000f32:	4b3e      	ldr	r3, [pc, #248]	; (800102c <checkBrickHit+0x7a8>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f1a3 0208 	sub.w	r2, r3, #8
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	; (800102c <checkBrickHit+0x7a8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da00      	bge.n	8000f46 <checkBrickHit+0x6c2>
 8000f44:	3307      	adds	r3, #7
 8000f46:	10db      	asrs	r3, r3, #3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	4939      	ldr	r1, [pc, #228]	; (8001030 <checkBrickHit+0x7ac>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4403      	add	r3, r0
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	440b      	add	r3, r1
 8000f5a:	330c      	adds	r3, #12
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dc6a      	bgt.n	8001038 <checkBrickHit+0x7b4>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <checkBrickHit+0x7a8>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f1a3 0208 	sub.w	r2, r3, #8
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <checkBrickHit+0x7a8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da00      	bge.n	8000f76 <checkBrickHit+0x6f2>
 8000f74:	3307      	adds	r3, #7
 8000f76:	10db      	asrs	r3, r3, #3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	492d      	ldr	r1, [pc, #180]	; (8001030 <checkBrickHit+0x7ac>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4403      	add	r3, r0
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	440b      	add	r3, r1
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
                points++;
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <checkBrickHit+0x7b0>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <checkBrickHit+0x7b0>)
 8000f9a:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, D_GREEN);
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <checkBrickHit+0x7a8>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f1a3 0208 	sub.w	r2, r3, #8
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <checkBrickHit+0x7a8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da00      	bge.n	8000fb0 <checkBrickHit+0x72c>
 8000fae:	3307      	adds	r3, #7
 8000fb0:	10db      	asrs	r3, r3, #3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	491e      	ldr	r1, [pc, #120]	; (8001030 <checkBrickHit+0x7ac>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4403      	add	r3, r0
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	440b      	add	r3, r1
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	b298      	uxth	r0, r3
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <checkBrickHit+0x7a8>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f1a3 0208 	sub.w	r2, r3, #8
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <checkBrickHit+0x7a8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da00      	bge.n	8000fe0 <checkBrickHit+0x75c>
 8000fde:	3307      	adds	r3, #7
 8000fe0:	10db      	asrs	r3, r3, #3
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	4912      	ldr	r1, [pc, #72]	; (8001030 <checkBrickHit+0x7ac>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4423      	add	r3, r4
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2304      	movs	r3, #4
 8001006:	2220      	movs	r2, #32
 8001008:	f003 fbfc 	bl	8004804 <Displ_FillArea>
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <checkBrickHit+0x7a8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	da00      	bge.n	8001018 <checkBrickHit+0x794>
 8001016:	3307      	adds	r3, #7
 8001018:	10db      	asrs	r3, r3, #3
 800101a:	461a      	mov	r2, r3
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <checkBrickHit+0x7a8>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	3b08      	subs	r3, #8
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f000 fd67 	bl	8001af8 <dropPowerUp>
 800102a:	e005      	b.n	8001038 <checkBrickHit+0x7b4>
 800102c:	20000018 	.word	0x20000018
 8001030:	200000cc 	.word	0x200000cc
 8001034:	20001ecc 	.word	0x20001ecc
            }
            bricksHit++;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	3301      	adds	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 800103e:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <checkBrickHit+0x954>)
 8001040:	7a1b      	ldrb	r3, [r3, #8]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <checkBrickHit+0x7c8>
                ball.dir = NW;
 8001046:	4b64      	ldr	r3, [pc, #400]	; (80011d8 <checkBrickHit+0x954>)
 8001048:	2207      	movs	r2, #7
 800104a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 800104c:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <checkBrickHit+0x954>)
 800104e:	7a1b      	ldrb	r3, [r3, #8]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d102      	bne.n	800105a <checkBrickHit+0x7d6>
                ball.dir = SW;
 8001054:	4b60      	ldr	r3, [pc, #384]	; (80011d8 <checkBrickHit+0x954>)
 8001056:	2205      	movs	r2, #5
 8001058:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 853c 	bne.w	8001ada <checkBrickHit+0x1256>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <checkBrickHit+0x954>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f1a3 0209 	sub.w	r2, r3, #9
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <checkBrickHit+0x954>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	da00      	bge.n	8001076 <checkBrickHit+0x7f2>
 8001074:	3307      	adds	r3, #7
 8001076:	10db      	asrs	r3, r3, #3
 8001078:	4618      	mov	r0, r3
 800107a:	4958      	ldr	r1, [pc, #352]	; (80011dc <checkBrickHit+0x958>)
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4403      	add	r3, r0
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	f040 8523 	bne.w	8001ada <checkBrickHit+0x1256>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 8001094:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <checkBrickHit+0x954>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f1a3 0209 	sub.w	r2, r3, #9
 800109c:	4b4e      	ldr	r3, [pc, #312]	; (80011d8 <checkBrickHit+0x954>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da00      	bge.n	80010a8 <checkBrickHit+0x824>
 80010a6:	3307      	adds	r3, #7
 80010a8:	10db      	asrs	r3, r3, #3
 80010aa:	4619      	mov	r1, r3
 80010ac:	484b      	ldr	r0, [pc, #300]	; (80011dc <checkBrickHit+0x958>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	440b      	add	r3, r1
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4403      	add	r3, r0
 80010bc:	330c      	adds	r3, #12
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1e58      	subs	r0, r3, #1
 80010c2:	4c46      	ldr	r4, [pc, #280]	; (80011dc <checkBrickHit+0x958>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	440b      	add	r3, r1
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4423      	add	r3, r4
 80010d2:	330c      	adds	r3, #12
 80010d4:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <checkBrickHit+0x954>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f1a3 0209 	sub.w	r2, r3, #9
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <checkBrickHit+0x954>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da00      	bge.n	80010ea <checkBrickHit+0x866>
 80010e8:	3307      	adds	r3, #7
 80010ea:	10db      	asrs	r3, r3, #3
 80010ec:	4618      	mov	r0, r3
 80010ee:	493b      	ldr	r1, [pc, #236]	; (80011dc <checkBrickHit+0x958>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4403      	add	r3, r0
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	440b      	add	r3, r1
 80010fe:	330c      	adds	r3, #12
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	dc63      	bgt.n	80011ce <checkBrickHit+0x94a>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <checkBrickHit+0x954>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f1a3 0209 	sub.w	r2, r3, #9
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <checkBrickHit+0x954>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	da00      	bge.n	800111a <checkBrickHit+0x896>
 8001118:	3307      	adds	r3, #7
 800111a:	10db      	asrs	r3, r3, #3
 800111c:	4618      	mov	r0, r3
 800111e:	492f      	ldr	r1, [pc, #188]	; (80011dc <checkBrickHit+0x958>)
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4403      	add	r3, r0
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	440b      	add	r3, r1
 800112e:	3308      	adds	r3, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
                    points++;
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <checkBrickHit+0x95c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <checkBrickHit+0x95c>)
 800113e:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, D_GREEN);
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <checkBrickHit+0x954>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f1a3 0209 	sub.w	r2, r3, #9
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <checkBrickHit+0x954>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <checkBrickHit+0x8d0>
 8001152:	3307      	adds	r3, #7
 8001154:	10db      	asrs	r3, r3, #3
 8001156:	4618      	mov	r0, r3
 8001158:	4920      	ldr	r1, [pc, #128]	; (80011dc <checkBrickHit+0x958>)
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4403      	add	r3, r0
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	440b      	add	r3, r1
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b298      	uxth	r0, r3
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <checkBrickHit+0x954>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f1a3 0209 	sub.w	r2, r3, #9
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <checkBrickHit+0x954>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	da00      	bge.n	8001184 <checkBrickHit+0x900>
 8001182:	3307      	adds	r3, #7
 8001184:	10db      	asrs	r3, r3, #3
 8001186:	461c      	mov	r4, r3
 8001188:	4914      	ldr	r1, [pc, #80]	; (80011dc <checkBrickHit+0x958>)
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4423      	add	r3, r4
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	3304      	adds	r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	b299      	uxth	r1, r3
 80011a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2304      	movs	r3, #4
 80011aa:	2220      	movs	r2, #32
 80011ac:	f003 fb2a 	bl	8004804 <Displ_FillArea>
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <checkBrickHit+0x954>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da00      	bge.n	80011bc <checkBrickHit+0x938>
 80011ba:	3307      	adds	r3, #7
 80011bc:	10db      	asrs	r3, r3, #3
 80011be:	461a      	mov	r2, r3
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <checkBrickHit+0x954>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	3b09      	subs	r3, #9
 80011c6:	4619      	mov	r1, r3
 80011c8:	4610      	mov	r0, r2
 80011ca:	f000 fc95 	bl	8001af8 <dropPowerUp>
                }
                ball.dir = SW;
 80011ce:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <checkBrickHit+0x954>)
 80011d0:	2205      	movs	r2, #5
 80011d2:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80011d4:	f000 bc81 	b.w	8001ada <checkBrickHit+0x1256>
 80011d8:	20000018 	.word	0x20000018
 80011dc:	200000cc 	.word	0x200000cc
 80011e0:	20001ecc 	.word	0x20001ecc
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 80011e4:	4bb6      	ldr	r3, [pc, #728]	; (80014c0 <checkBrickHit+0xc3c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	1fda      	subs	r2, r3, #7
 80011ea:	4bb5      	ldr	r3, [pc, #724]	; (80014c0 <checkBrickHit+0xc3c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da00      	bge.n	80011f4 <checkBrickHit+0x970>
 80011f2:	3307      	adds	r3, #7
 80011f4:	10db      	asrs	r3, r3, #3
 80011f6:	4618      	mov	r0, r3
 80011f8:	49b2      	ldr	r1, [pc, #712]	; (80014c4 <checkBrickHit+0xc40>)
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4403      	add	r3, r0
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	440b      	add	r3, r1
 8001208:	3308      	adds	r3, #8
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	f040 8098 	bne.w	8001342 <checkBrickHit+0xabe>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 8001212:	4bab      	ldr	r3, [pc, #684]	; (80014c0 <checkBrickHit+0xc3c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	1fda      	subs	r2, r3, #7
 8001218:	4ba9      	ldr	r3, [pc, #676]	; (80014c0 <checkBrickHit+0xc3c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	da00      	bge.n	8001222 <checkBrickHit+0x99e>
 8001220:	3307      	adds	r3, #7
 8001222:	10db      	asrs	r3, r3, #3
 8001224:	4619      	mov	r1, r3
 8001226:	48a7      	ldr	r0, [pc, #668]	; (80014c4 <checkBrickHit+0xc40>)
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	440b      	add	r3, r1
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4403      	add	r3, r0
 8001236:	330c      	adds	r3, #12
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1e58      	subs	r0, r3, #1
 800123c:	4ca1      	ldr	r4, [pc, #644]	; (80014c4 <checkBrickHit+0xc40>)
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	440b      	add	r3, r1
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4423      	add	r3, r4
 800124c:	330c      	adds	r3, #12
 800124e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 8001250:	4b9b      	ldr	r3, [pc, #620]	; (80014c0 <checkBrickHit+0xc3c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	1fda      	subs	r2, r3, #7
 8001256:	4b9a      	ldr	r3, [pc, #616]	; (80014c0 <checkBrickHit+0xc3c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	da00      	bge.n	8001260 <checkBrickHit+0x9dc>
 800125e:	3307      	adds	r3, #7
 8001260:	10db      	asrs	r3, r3, #3
 8001262:	4618      	mov	r0, r3
 8001264:	4997      	ldr	r1, [pc, #604]	; (80014c4 <checkBrickHit+0xc40>)
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4403      	add	r3, r0
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	440b      	add	r3, r1
 8001274:	330c      	adds	r3, #12
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dc5c      	bgt.n	8001336 <checkBrickHit+0xab2>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 800127c:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <checkBrickHit+0xc3c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	1fda      	subs	r2, r3, #7
 8001282:	4b8f      	ldr	r3, [pc, #572]	; (80014c0 <checkBrickHit+0xc3c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da00      	bge.n	800128c <checkBrickHit+0xa08>
 800128a:	3307      	adds	r3, #7
 800128c:	10db      	asrs	r3, r3, #3
 800128e:	4618      	mov	r0, r3
 8001290:	498c      	ldr	r1, [pc, #560]	; (80014c4 <checkBrickHit+0xc40>)
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4403      	add	r3, r0
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	440b      	add	r3, r1
 80012a0:	3308      	adds	r3, #8
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
                points++;
 80012a6:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <checkBrickHit+0xc44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b86      	ldr	r3, [pc, #536]	; (80014c8 <checkBrickHit+0xc44>)
 80012b0:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, D_GREEN);
 80012b2:	4b83      	ldr	r3, [pc, #524]	; (80014c0 <checkBrickHit+0xc3c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	1fda      	subs	r2, r3, #7
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <checkBrickHit+0xc3c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da00      	bge.n	80012c2 <checkBrickHit+0xa3e>
 80012c0:	3307      	adds	r3, #7
 80012c2:	10db      	asrs	r3, r3, #3
 80012c4:	4618      	mov	r0, r3
 80012c6:	497f      	ldr	r1, [pc, #508]	; (80014c4 <checkBrickHit+0xc40>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4403      	add	r3, r0
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	440b      	add	r3, r1
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	b298      	uxth	r0, r3
 80012de:	4b78      	ldr	r3, [pc, #480]	; (80014c0 <checkBrickHit+0xc3c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	1fda      	subs	r2, r3, #7
 80012e4:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <checkBrickHit+0xc3c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da00      	bge.n	80012ee <checkBrickHit+0xa6a>
 80012ec:	3307      	adds	r3, #7
 80012ee:	10db      	asrs	r3, r3, #3
 80012f0:	461c      	mov	r4, r3
 80012f2:	4974      	ldr	r1, [pc, #464]	; (80014c4 <checkBrickHit+0xc40>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4423      	add	r3, r4
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	b299      	uxth	r1, r3
 800130c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2304      	movs	r3, #4
 8001314:	2220      	movs	r2, #32
 8001316:	f003 fa75 	bl	8004804 <Displ_FillArea>
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800131a:	4b69      	ldr	r3, [pc, #420]	; (80014c0 <checkBrickHit+0xc3c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	da00      	bge.n	8001324 <checkBrickHit+0xaa0>
 8001322:	3307      	adds	r3, #7
 8001324:	10db      	asrs	r3, r3, #3
 8001326:	461a      	mov	r2, r3
 8001328:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <checkBrickHit+0xc3c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	3b07      	subs	r3, #7
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f000 fbe1 	bl	8001af8 <dropPowerUp>
            }
            bricksHit++;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3301      	adds	r3, #1
 800133a:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <checkBrickHit+0xc3c>)
 800133e:	2201      	movs	r2, #1
 8001340:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <checkBrickHit+0xc3c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f1a3 0208 	sub.w	r2, r3, #8
 800134a:	4b5d      	ldr	r3, [pc, #372]	; (80014c0 <checkBrickHit+0xc3c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	da00      	bge.n	8001356 <checkBrickHit+0xad2>
 8001354:	3307      	adds	r3, #7
 8001356:	10db      	asrs	r3, r3, #3
 8001358:	4618      	mov	r0, r3
 800135a:	495a      	ldr	r1, [pc, #360]	; (80014c4 <checkBrickHit+0xc40>)
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4403      	add	r3, r0
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	440b      	add	r3, r1
 800136a:	3308      	adds	r3, #8
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	f040 80b6 	bne.w	80014e0 <checkBrickHit+0xc5c>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8001374:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <checkBrickHit+0xc3c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f1a3 0208 	sub.w	r2, r3, #8
 800137c:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <checkBrickHit+0xc3c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	da00      	bge.n	8001388 <checkBrickHit+0xb04>
 8001386:	3307      	adds	r3, #7
 8001388:	10db      	asrs	r3, r3, #3
 800138a:	4619      	mov	r1, r3
 800138c:	484d      	ldr	r0, [pc, #308]	; (80014c4 <checkBrickHit+0xc40>)
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	440b      	add	r3, r1
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4403      	add	r3, r0
 800139c:	330c      	adds	r3, #12
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1e58      	subs	r0, r3, #1
 80013a2:	4c48      	ldr	r4, [pc, #288]	; (80014c4 <checkBrickHit+0xc40>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	440b      	add	r3, r1
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4423      	add	r3, r4
 80013b2:	330c      	adds	r3, #12
 80013b4:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 80013b6:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <checkBrickHit+0xc3c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f1a3 0208 	sub.w	r2, r3, #8
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <checkBrickHit+0xc3c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da00      	bge.n	80013ca <checkBrickHit+0xb46>
 80013c8:	3307      	adds	r3, #7
 80013ca:	10db      	asrs	r3, r3, #3
 80013cc:	4618      	mov	r0, r3
 80013ce:	493d      	ldr	r1, [pc, #244]	; (80014c4 <checkBrickHit+0xc40>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4403      	add	r3, r0
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	440b      	add	r3, r1
 80013de:	330c      	adds	r3, #12
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dc63      	bgt.n	80014ae <checkBrickHit+0xc2a>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <checkBrickHit+0xc3c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f1a3 0208 	sub.w	r2, r3, #8
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <checkBrickHit+0xc3c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da00      	bge.n	80013fa <checkBrickHit+0xb76>
 80013f8:	3307      	adds	r3, #7
 80013fa:	10db      	asrs	r3, r3, #3
 80013fc:	4618      	mov	r0, r3
 80013fe:	4931      	ldr	r1, [pc, #196]	; (80014c4 <checkBrickHit+0xc40>)
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4403      	add	r3, r0
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	440b      	add	r3, r1
 800140e:	3308      	adds	r3, #8
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
                points++;
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <checkBrickHit+0xc44>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <checkBrickHit+0xc44>)
 800141e:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, D_GREEN);
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <checkBrickHit+0xc3c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f1a3 0208 	sub.w	r2, r3, #8
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <checkBrickHit+0xc3c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	da00      	bge.n	8001434 <checkBrickHit+0xbb0>
 8001432:	3307      	adds	r3, #7
 8001434:	10db      	asrs	r3, r3, #3
 8001436:	4618      	mov	r0, r3
 8001438:	4922      	ldr	r1, [pc, #136]	; (80014c4 <checkBrickHit+0xc40>)
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4403      	add	r3, r0
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	440b      	add	r3, r1
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	b298      	uxth	r0, r3
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <checkBrickHit+0xc3c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f1a3 0208 	sub.w	r2, r3, #8
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <checkBrickHit+0xc3c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	da00      	bge.n	8001464 <checkBrickHit+0xbe0>
 8001462:	3307      	adds	r3, #7
 8001464:	10db      	asrs	r3, r3, #3
 8001466:	461c      	mov	r4, r3
 8001468:	4916      	ldr	r1, [pc, #88]	; (80014c4 <checkBrickHit+0xc40>)
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4423      	add	r3, r4
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	440b      	add	r3, r1
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	b299      	uxth	r1, r3
 8001482:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2304      	movs	r3, #4
 800148a:	2220      	movs	r2, #32
 800148c:	f003 f9ba 	bl	8004804 <Displ_FillArea>
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <checkBrickHit+0xc3c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	da00      	bge.n	800149c <checkBrickHit+0xc18>
 800149a:	3307      	adds	r3, #7
 800149c:	10db      	asrs	r3, r3, #3
 800149e:	461a      	mov	r2, r3
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <checkBrickHit+0xc3c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	3b08      	subs	r3, #8
 80014a6:	4619      	mov	r1, r3
 80014a8:	4610      	mov	r0, r2
 80014aa:	f000 fb25 	bl	8001af8 <dropPowerUp>
            }
            bricksHit++;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	3301      	adds	r3, #1
 80014b2:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <checkBrickHit+0xc3c>)
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d10a      	bne.n	80014d2 <checkBrickHit+0xc4e>
 80014bc:	e006      	b.n	80014cc <checkBrickHit+0xc48>
 80014be:	bf00      	nop
 80014c0:	20000018 	.word	0x20000018
 80014c4:	200000cc 	.word	0x200000cc
 80014c8:	20001ecc 	.word	0x20001ecc
                ball.dir = SW;
 80014cc:	4b60      	ldr	r3, [pc, #384]	; (8001650 <checkBrickHit+0xdcc>)
 80014ce:	2205      	movs	r2, #5
 80014d0:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 80014d2:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <checkBrickHit+0xdcc>)
 80014d4:	7a1b      	ldrb	r3, [r3, #8]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <checkBrickHit+0xc5c>
                ball.dir = NW;
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <checkBrickHit+0xdcc>)
 80014dc:	2207      	movs	r2, #7
 80014de:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 82fb 	bne.w	8001ade <checkBrickHit+0x125a>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 80014e8:	4b59      	ldr	r3, [pc, #356]	; (8001650 <checkBrickHit+0xdcc>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	1fda      	subs	r2, r3, #7
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <checkBrickHit+0xdcc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da00      	bge.n	80014fa <checkBrickHit+0xc76>
 80014f8:	3307      	adds	r3, #7
 80014fa:	10db      	asrs	r3, r3, #3
 80014fc:	4618      	mov	r0, r3
 80014fe:	4955      	ldr	r1, [pc, #340]	; (8001654 <checkBrickHit+0xdd0>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4403      	add	r3, r0
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	440b      	add	r3, r1
 800150e:	3308      	adds	r3, #8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 82e3 	bne.w	8001ade <checkBrickHit+0x125a>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 8001518:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <checkBrickHit+0xdcc>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	1fda      	subs	r2, r3, #7
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <checkBrickHit+0xdcc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	da00      	bge.n	800152a <checkBrickHit+0xca6>
 8001528:	3307      	adds	r3, #7
 800152a:	10db      	asrs	r3, r3, #3
 800152c:	4619      	mov	r1, r3
 800152e:	4849      	ldr	r0, [pc, #292]	; (8001654 <checkBrickHit+0xdd0>)
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	440b      	add	r3, r1
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4403      	add	r3, r0
 800153e:	330c      	adds	r3, #12
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1e58      	subs	r0, r3, #1
 8001544:	4c43      	ldr	r4, [pc, #268]	; (8001654 <checkBrickHit+0xdd0>)
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4423      	add	r3, r4
 8001554:	330c      	adds	r3, #12
 8001556:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <checkBrickHit+0xdcc>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	1fda      	subs	r2, r3, #7
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <checkBrickHit+0xdcc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	da00      	bge.n	800156a <checkBrickHit+0xce6>
 8001568:	3307      	adds	r3, #7
 800156a:	10db      	asrs	r3, r3, #3
 800156c:	4618      	mov	r0, r3
 800156e:	4939      	ldr	r1, [pc, #228]	; (8001654 <checkBrickHit+0xdd0>)
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4403      	add	r3, r0
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	440b      	add	r3, r1
 800157e:	330c      	adds	r3, #12
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	dc60      	bgt.n	8001648 <checkBrickHit+0xdc4>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <checkBrickHit+0xdcc>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	1fda      	subs	r2, r3, #7
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <checkBrickHit+0xdcc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	da00      	bge.n	8001598 <checkBrickHit+0xd14>
 8001596:	3307      	adds	r3, #7
 8001598:	10db      	asrs	r3, r3, #3
 800159a:	4618      	mov	r0, r3
 800159c:	492d      	ldr	r1, [pc, #180]	; (8001654 <checkBrickHit+0xdd0>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4403      	add	r3, r0
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	440b      	add	r3, r1
 80015ac:	3308      	adds	r3, #8
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
                    points++;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <checkBrickHit+0xdd4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <checkBrickHit+0xdd4>)
 80015bc:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, D_GREEN);
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <checkBrickHit+0xdcc>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	1fda      	subs	r2, r3, #7
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <checkBrickHit+0xdcc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da00      	bge.n	80015d0 <checkBrickHit+0xd4c>
 80015ce:	3307      	adds	r3, #7
 80015d0:	10db      	asrs	r3, r3, #3
 80015d2:	4618      	mov	r0, r3
 80015d4:	491f      	ldr	r1, [pc, #124]	; (8001654 <checkBrickHit+0xdd0>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4403      	add	r3, r0
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	440b      	add	r3, r1
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	b298      	uxth	r0, r3
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <checkBrickHit+0xdcc>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	1fda      	subs	r2, r3, #7
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <checkBrickHit+0xdcc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da00      	bge.n	80015fe <checkBrickHit+0xd7a>
 80015fc:	3307      	adds	r3, #7
 80015fe:	10db      	asrs	r3, r3, #3
 8001600:	461c      	mov	r4, r3
 8001602:	4914      	ldr	r1, [pc, #80]	; (8001654 <checkBrickHit+0xdd0>)
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4423      	add	r3, r4
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	440b      	add	r3, r1
 8001612:	3304      	adds	r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	b299      	uxth	r1, r3
 800161c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	2220      	movs	r2, #32
 8001626:	f003 f8ed 	bl	8004804 <Displ_FillArea>
                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <checkBrickHit+0xdcc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	da00      	bge.n	8001636 <checkBrickHit+0xdb2>
 8001634:	3307      	adds	r3, #7
 8001636:	10db      	asrs	r3, r3, #3
 8001638:	461a      	mov	r2, r3
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <checkBrickHit+0xdcc>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	3b07      	subs	r3, #7
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f000 fa58 	bl	8001af8 <dropPowerUp>
                }
                ball.dir = NW;
 8001648:	4b01      	ldr	r3, [pc, #4]	; (8001650 <checkBrickHit+0xdcc>)
 800164a:	2207      	movs	r2, #7
 800164c:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 800164e:	e246      	b.n	8001ade <checkBrickHit+0x125a>
 8001650:	20000018 	.word	0x20000018
 8001654:	200000cc 	.word	0x200000cc
 8001658:	20001ecc 	.word	0x20001ecc
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 800165c:	4bb6      	ldr	r3, [pc, #728]	; (8001938 <checkBrickHit+0x10b4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	1fda      	subs	r2, r3, #7
 8001662:	4bb5      	ldr	r3, [pc, #724]	; (8001938 <checkBrickHit+0x10b4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	da00      	bge.n	800166c <checkBrickHit+0xde8>
 800166a:	3307      	adds	r3, #7
 800166c:	10db      	asrs	r3, r3, #3
 800166e:	4618      	mov	r0, r3
 8001670:	49b2      	ldr	r1, [pc, #712]	; (800193c <checkBrickHit+0x10b8>)
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4403      	add	r3, r0
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	440b      	add	r3, r1
 8001680:	3308      	adds	r3, #8
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 8098 	bne.w	80017ba <checkBrickHit+0xf36>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800168a:	4bab      	ldr	r3, [pc, #684]	; (8001938 <checkBrickHit+0x10b4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	1fda      	subs	r2, r3, #7
 8001690:	4ba9      	ldr	r3, [pc, #676]	; (8001938 <checkBrickHit+0x10b4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	da00      	bge.n	800169a <checkBrickHit+0xe16>
 8001698:	3307      	adds	r3, #7
 800169a:	10db      	asrs	r3, r3, #3
 800169c:	4619      	mov	r1, r3
 800169e:	48a7      	ldr	r0, [pc, #668]	; (800193c <checkBrickHit+0x10b8>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4403      	add	r3, r0
 80016ae:	330c      	adds	r3, #12
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1e58      	subs	r0, r3, #1
 80016b4:	4ca1      	ldr	r4, [pc, #644]	; (800193c <checkBrickHit+0x10b8>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	440b      	add	r3, r1
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4423      	add	r3, r4
 80016c4:	330c      	adds	r3, #12
 80016c6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80016c8:	4b9b      	ldr	r3, [pc, #620]	; (8001938 <checkBrickHit+0x10b4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	1fda      	subs	r2, r3, #7
 80016ce:	4b9a      	ldr	r3, [pc, #616]	; (8001938 <checkBrickHit+0x10b4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	da00      	bge.n	80016d8 <checkBrickHit+0xe54>
 80016d6:	3307      	adds	r3, #7
 80016d8:	10db      	asrs	r3, r3, #3
 80016da:	4618      	mov	r0, r3
 80016dc:	4997      	ldr	r1, [pc, #604]	; (800193c <checkBrickHit+0x10b8>)
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4403      	add	r3, r0
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	440b      	add	r3, r1
 80016ec:	330c      	adds	r3, #12
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	dc5c      	bgt.n	80017ae <checkBrickHit+0xf2a>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80016f4:	4b90      	ldr	r3, [pc, #576]	; (8001938 <checkBrickHit+0x10b4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	1fda      	subs	r2, r3, #7
 80016fa:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <checkBrickHit+0x10b4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da00      	bge.n	8001704 <checkBrickHit+0xe80>
 8001702:	3307      	adds	r3, #7
 8001704:	10db      	asrs	r3, r3, #3
 8001706:	4618      	mov	r0, r3
 8001708:	498c      	ldr	r1, [pc, #560]	; (800193c <checkBrickHit+0x10b8>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4403      	add	r3, r0
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	440b      	add	r3, r1
 8001718:	3308      	adds	r3, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
                points++;
 800171e:	4b88      	ldr	r3, [pc, #544]	; (8001940 <checkBrickHit+0x10bc>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b86      	ldr	r3, [pc, #536]	; (8001940 <checkBrickHit+0x10bc>)
 8001728:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, D_GREEN);
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <checkBrickHit+0x10b4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	1fda      	subs	r2, r3, #7
 8001730:	4b81      	ldr	r3, [pc, #516]	; (8001938 <checkBrickHit+0x10b4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da00      	bge.n	800173a <checkBrickHit+0xeb6>
 8001738:	3307      	adds	r3, #7
 800173a:	10db      	asrs	r3, r3, #3
 800173c:	4618      	mov	r0, r3
 800173e:	497f      	ldr	r1, [pc, #508]	; (800193c <checkBrickHit+0x10b8>)
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4403      	add	r3, r0
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	440b      	add	r3, r1
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	b298      	uxth	r0, r3
 8001756:	4b78      	ldr	r3, [pc, #480]	; (8001938 <checkBrickHit+0x10b4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	1fda      	subs	r2, r3, #7
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <checkBrickHit+0x10b4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	da00      	bge.n	8001766 <checkBrickHit+0xee2>
 8001764:	3307      	adds	r3, #7
 8001766:	10db      	asrs	r3, r3, #3
 8001768:	461c      	mov	r4, r3
 800176a:	4974      	ldr	r1, [pc, #464]	; (800193c <checkBrickHit+0x10b8>)
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4423      	add	r3, r4
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	b299      	uxth	r1, r3
 8001784:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2304      	movs	r3, #4
 800178c:	2220      	movs	r2, #32
 800178e:	f003 f839 	bl	8004804 <Displ_FillArea>
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 8001792:	4b69      	ldr	r3, [pc, #420]	; (8001938 <checkBrickHit+0x10b4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	da00      	bge.n	800179c <checkBrickHit+0xf18>
 800179a:	3307      	adds	r3, #7
 800179c:	10db      	asrs	r3, r3, #3
 800179e:	461a      	mov	r2, r3
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <checkBrickHit+0x10b4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	3b07      	subs	r3, #7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4610      	mov	r0, r2
 80017aa:	f000 f9a5 	bl	8001af8 <dropPowerUp>
            }
            bricksHit++;
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	3301      	adds	r3, #1
 80017b2:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <checkBrickHit+0x10b4>)
 80017b6:	2207      	movs	r2, #7
 80017b8:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <checkBrickHit+0x10b4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f1a3 0208 	sub.w	r2, r3, #8
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <checkBrickHit+0x10b4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da00      	bge.n	80017ce <checkBrickHit+0xf4a>
 80017cc:	3307      	adds	r3, #7
 80017ce:	10db      	asrs	r3, r3, #3
 80017d0:	4618      	mov	r0, r3
 80017d2:	495a      	ldr	r1, [pc, #360]	; (800193c <checkBrickHit+0x10b8>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4403      	add	r3, r0
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	440b      	add	r3, r1
 80017e2:	3308      	adds	r3, #8
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	f040 80b6 	bne.w	8001958 <checkBrickHit+0x10d4>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 80017ec:	4b52      	ldr	r3, [pc, #328]	; (8001938 <checkBrickHit+0x10b4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f1a3 0208 	sub.w	r2, r3, #8
 80017f4:	4b50      	ldr	r3, [pc, #320]	; (8001938 <checkBrickHit+0x10b4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da00      	bge.n	8001800 <checkBrickHit+0xf7c>
 80017fe:	3307      	adds	r3, #7
 8001800:	10db      	asrs	r3, r3, #3
 8001802:	4619      	mov	r1, r3
 8001804:	484d      	ldr	r0, [pc, #308]	; (800193c <checkBrickHit+0x10b8>)
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	440b      	add	r3, r1
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4403      	add	r3, r0
 8001814:	330c      	adds	r3, #12
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	1e58      	subs	r0, r3, #1
 800181a:	4c48      	ldr	r4, [pc, #288]	; (800193c <checkBrickHit+0x10b8>)
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	440b      	add	r3, r1
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4423      	add	r3, r4
 800182a:	330c      	adds	r3, #12
 800182c:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <checkBrickHit+0x10b4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f1a3 0208 	sub.w	r2, r3, #8
 8001836:	4b40      	ldr	r3, [pc, #256]	; (8001938 <checkBrickHit+0x10b4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3b01      	subs	r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	da00      	bge.n	8001842 <checkBrickHit+0xfbe>
 8001840:	3307      	adds	r3, #7
 8001842:	10db      	asrs	r3, r3, #3
 8001844:	4618      	mov	r0, r3
 8001846:	493d      	ldr	r1, [pc, #244]	; (800193c <checkBrickHit+0x10b8>)
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4403      	add	r3, r0
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	440b      	add	r3, r1
 8001856:	330c      	adds	r3, #12
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	dc63      	bgt.n	8001926 <checkBrickHit+0x10a2>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <checkBrickHit+0x10b4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f1a3 0208 	sub.w	r2, r3, #8
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <checkBrickHit+0x10b4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	da00      	bge.n	8001872 <checkBrickHit+0xfee>
 8001870:	3307      	adds	r3, #7
 8001872:	10db      	asrs	r3, r3, #3
 8001874:	4618      	mov	r0, r3
 8001876:	4931      	ldr	r1, [pc, #196]	; (800193c <checkBrickHit+0x10b8>)
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	440b      	add	r3, r1
 8001886:	3308      	adds	r3, #8
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
                points++;
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <checkBrickHit+0x10bc>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <checkBrickHit+0x10bc>)
 8001896:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, D_GREEN);
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <checkBrickHit+0x10b4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f1a3 0208 	sub.w	r2, r3, #8
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <checkBrickHit+0x10b4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da00      	bge.n	80018ac <checkBrickHit+0x1028>
 80018aa:	3307      	adds	r3, #7
 80018ac:	10db      	asrs	r3, r3, #3
 80018ae:	4618      	mov	r0, r3
 80018b0:	4922      	ldr	r1, [pc, #136]	; (800193c <checkBrickHit+0x10b8>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4403      	add	r3, r0
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	440b      	add	r3, r1
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	b298      	uxth	r0, r3
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <checkBrickHit+0x10b4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f1a3 0208 	sub.w	r2, r3, #8
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <checkBrickHit+0x10b4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da00      	bge.n	80018dc <checkBrickHit+0x1058>
 80018da:	3307      	adds	r3, #7
 80018dc:	10db      	asrs	r3, r3, #3
 80018de:	461c      	mov	r4, r3
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <checkBrickHit+0x10b8>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4423      	add	r3, r4
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	440b      	add	r3, r1
 80018f0:	3304      	adds	r3, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	b299      	uxth	r1, r3
 80018fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2304      	movs	r3, #4
 8001902:	2220      	movs	r2, #32
 8001904:	f002 ff7e 	bl	8004804 <Displ_FillArea>
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <checkBrickHit+0x10b4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	da00      	bge.n	8001914 <checkBrickHit+0x1090>
 8001912:	3307      	adds	r3, #7
 8001914:	10db      	asrs	r3, r3, #3
 8001916:	461a      	mov	r2, r3
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <checkBrickHit+0x10b4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	3b08      	subs	r3, #8
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f000 f8e9 	bl	8001af8 <dropPowerUp>
            }
            bricksHit++;
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	3301      	adds	r3, #1
 800192a:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <checkBrickHit+0x10b4>)
 800192e:	7a1b      	ldrb	r3, [r3, #8]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d10a      	bne.n	800194a <checkBrickHit+0x10c6>
 8001934:	e006      	b.n	8001944 <checkBrickHit+0x10c0>
 8001936:	bf00      	nop
 8001938:	20000018 	.word	0x20000018
 800193c:	200000cc 	.word	0x200000cc
 8001940:	20001ecc 	.word	0x20001ecc
                ball.dir = SE;
 8001944:	4b69      	ldr	r3, [pc, #420]	; (8001aec <checkBrickHit+0x1268>)
 8001946:	2203      	movs	r2, #3
 8001948:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 800194a:	4b68      	ldr	r3, [pc, #416]	; (8001aec <checkBrickHit+0x1268>)
 800194c:	7a1b      	ldrb	r3, [r3, #8]
 800194e:	2b07      	cmp	r3, #7
 8001950:	d102      	bne.n	8001958 <checkBrickHit+0x10d4>
                ball.dir = NE;
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <checkBrickHit+0x1268>)
 8001954:	2201      	movs	r2, #1
 8001956:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 80c1 	bne.w	8001ae2 <checkBrickHit+0x125e>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001960:	4b62      	ldr	r3, [pc, #392]	; (8001aec <checkBrickHit+0x1268>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	1fda      	subs	r2, r3, #7
 8001966:	4b61      	ldr	r3, [pc, #388]	; (8001aec <checkBrickHit+0x1268>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	da00      	bge.n	8001972 <checkBrickHit+0x10ee>
 8001970:	3307      	adds	r3, #7
 8001972:	10db      	asrs	r3, r3, #3
 8001974:	4618      	mov	r0, r3
 8001976:	495e      	ldr	r1, [pc, #376]	; (8001af0 <checkBrickHit+0x126c>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4403      	add	r3, r0
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	440b      	add	r3, r1
 8001986:	3308      	adds	r3, #8
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	f040 80a9 	bne.w	8001ae2 <checkBrickHit+0x125e>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <checkBrickHit+0x1268>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	1fda      	subs	r2, r3, #7
 8001996:	4b55      	ldr	r3, [pc, #340]	; (8001aec <checkBrickHit+0x1268>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3b01      	subs	r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	da00      	bge.n	80019a2 <checkBrickHit+0x111e>
 80019a0:	3307      	adds	r3, #7
 80019a2:	10db      	asrs	r3, r3, #3
 80019a4:	4619      	mov	r1, r3
 80019a6:	4852      	ldr	r0, [pc, #328]	; (8001af0 <checkBrickHit+0x126c>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4403      	add	r3, r0
 80019b6:	330c      	adds	r3, #12
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1e58      	subs	r0, r3, #1
 80019bc:	4c4c      	ldr	r4, [pc, #304]	; (8001af0 <checkBrickHit+0x126c>)
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	440b      	add	r3, r1
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4423      	add	r3, r4
 80019cc:	330c      	adds	r3, #12
 80019ce:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 80019d0:	4b46      	ldr	r3, [pc, #280]	; (8001aec <checkBrickHit+0x1268>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	1fda      	subs	r2, r3, #7
 80019d6:	4b45      	ldr	r3, [pc, #276]	; (8001aec <checkBrickHit+0x1268>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3b01      	subs	r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da00      	bge.n	80019e2 <checkBrickHit+0x115e>
 80019e0:	3307      	adds	r3, #7
 80019e2:	10db      	asrs	r3, r3, #3
 80019e4:	4618      	mov	r0, r3
 80019e6:	4942      	ldr	r1, [pc, #264]	; (8001af0 <checkBrickHit+0x126c>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4403      	add	r3, r0
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	440b      	add	r3, r1
 80019f6:	330c      	adds	r3, #12
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dc60      	bgt.n	8001ac0 <checkBrickHit+0x123c>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <checkBrickHit+0x1268>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	1fda      	subs	r2, r3, #7
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <checkBrickHit+0x1268>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da00      	bge.n	8001a10 <checkBrickHit+0x118c>
 8001a0e:	3307      	adds	r3, #7
 8001a10:	10db      	asrs	r3, r3, #3
 8001a12:	4618      	mov	r0, r3
 8001a14:	4936      	ldr	r1, [pc, #216]	; (8001af0 <checkBrickHit+0x126c>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4403      	add	r3, r0
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	440b      	add	r3, r1
 8001a24:	3308      	adds	r3, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
                    points++;
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <checkBrickHit+0x1270>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <checkBrickHit+0x1270>)
 8001a34:	701a      	strb	r2, [r3, #0]
                    ////QD << "score:" << points;
                    Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, D_GREEN);
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <checkBrickHit+0x1268>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	1fda      	subs	r2, r3, #7
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <checkBrickHit+0x1268>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da00      	bge.n	8001a48 <checkBrickHit+0x11c4>
 8001a46:	3307      	adds	r3, #7
 8001a48:	10db      	asrs	r3, r3, #3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4928      	ldr	r1, [pc, #160]	; (8001af0 <checkBrickHit+0x126c>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4403      	add	r3, r0
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	440b      	add	r3, r1
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	b298      	uxth	r0, r3
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <checkBrickHit+0x1268>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	1fda      	subs	r2, r3, #7
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <checkBrickHit+0x1268>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <checkBrickHit+0x11f2>
 8001a74:	3307      	adds	r3, #7
 8001a76:	10db      	asrs	r3, r3, #3
 8001a78:	461c      	mov	r4, r3
 8001a7a:	491d      	ldr	r1, [pc, #116]	; (8001af0 <checkBrickHit+0x126c>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4423      	add	r3, r4
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	440b      	add	r3, r1
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	b299      	uxth	r1, r3
 8001a94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f002 feb1 	bl	8004804 <Displ_FillArea>
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <checkBrickHit+0x1268>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da00      	bge.n	8001aae <checkBrickHit+0x122a>
 8001aac:	3307      	adds	r3, #7
 8001aae:	10db      	asrs	r3, r3, #3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <checkBrickHit+0x1268>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	3b07      	subs	r3, #7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 f81c 	bl	8001af8 <dropPowerUp>
                }
                ball.dir = NE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <checkBrickHit+0x1268>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8001ac6:	e00c      	b.n	8001ae2 <checkBrickHit+0x125e>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here";
        ball.dir = ball.dir;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <checkBrickHit+0x1268>)
 8001aca:	7a1a      	ldrb	r2, [r3, #8]
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <checkBrickHit+0x1268>)
 8001ace:	721a      	strb	r2, [r3, #8]
    }
}
 8001ad0:	e008      	b.n	8001ae4 <checkBrickHit+0x1260>
        break;
 8001ad2:	bf00      	nop
 8001ad4:	e006      	b.n	8001ae4 <checkBrickHit+0x1260>
        break;
 8001ad6:	bf00      	nop
 8001ad8:	e004      	b.n	8001ae4 <checkBrickHit+0x1260>
        break;
 8001ada:	bf00      	nop
 8001adc:	e002      	b.n	8001ae4 <checkBrickHit+0x1260>
        break;
 8001ade:	bf00      	nop
 8001ae0:	e000      	b.n	8001ae4 <checkBrickHit+0x1260>
        break;
 8001ae2:	bf00      	nop
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	20000018 	.word	0x20000018
 8001af0:	200000cc 	.word	0x200000cc
 8001af4:	20001ecc 	.word	0x20001ecc

08001af8 <dropPowerUp>:

void dropPowerUp(int x, int y) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <dropPowerUp+0x70>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d114      	bne.n	8001b38 <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001b0e:	f003 fc99 	bl	8005444 <HAL_GetTick>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f007 fb09 	bl	800912c <srand>
        dropChance = rand() % 100;
 8001b1a:	f007 fb35 	bl	8009188 <rand>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <dropPowerUp+0x74>)
 8001b22:	fb82 1203 	smull	r1, r2, r2, r3
 8001b26:	1151      	asrs	r1, r2, #5
 8001b28:	17da      	asrs	r2, r3, #31
 8001b2a:	1a8a      	subs	r2, r1, r2
 8001b2c:	2164      	movs	r1, #100	; 0x64
 8001b2e:	fb01 f202 	mul.w	r2, r1, r2
 8001b32:	1a9a      	subs	r2, r3, r2
 8001b34:	4613      	mov	r3, r2
 8001b36:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b0a      	cmp	r3, #10
 8001b3c:	d805      	bhi.n	8001b4a <dropPowerUp+0x52>
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <dropPowerUp+0x52>
        guardian = 1;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <dropPowerUp+0x70>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
        //////QD << "A power up just dropped from brick at x =" << x << "y =" << y;
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d806      	bhi.n	8001b5e <dropPowerUp+0x66>
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b0a      	cmp	r3, #10
 8001b54:	d903      	bls.n	8001b5e <dropPowerUp+0x66>
        //////QD << "test";
        explodeBricks(x, y);
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f957 	bl	8001e0c <explodeBricks>
        //////QD << "An explosion just happened at x =" << x << "y =" << y;
    }
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20001ece 	.word	0x20001ece
 8001b6c:	51eb851f 	.word	0x51eb851f

08001b70 <printScreen>:

void printScreen() {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
    for (int i = 0; i < lives1; i++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e00f      	b.n	8001b9c <printScreen+0x2c>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	b298      	uxth	r0, r3
 8001b88:	2318      	movs	r3, #24
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	2204      	movs	r2, #4
 8001b90:	2104      	movs	r1, #4
 8001b92:	f002 fe37 	bl	8004804 <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4b7d      	ldr	r3, [pc, #500]	; (8001d94 <printScreen+0x224>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	dbe9      	blt.n	8001b7c <printScreen+0xc>
    }

    if (guardian == 1) {
 8001ba8:	4b7b      	ldr	r3, [pc, #492]	; (8001d98 <printScreen+0x228>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10f      	bne.n	8001bd0 <printScreen+0x60>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001bb0:	4b7a      	ldr	r3, [pc, #488]	; (8001d9c <printScreen+0x22c>)
 8001bb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	f249 6396 	movw	r3, #38550	; 0x9696
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f002 fe1a 	bl	8004804 <Displ_FillArea>
//                    game_screen[i][y] = ENC_RED;
//                }
//            }
//        }
//    }
    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001bd0:	4b72      	ldr	r3, [pc, #456]	; (8001d9c <printScreen+0x22c>)
 8001bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bd6:	3b19      	subs	r3, #25
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	b298      	uxth	r0, r3
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <printScreen+0x22c>)
 8001be0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	b299      	uxth	r1, r3
 8001bea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	22c8      	movs	r2, #200	; 0xc8
 8001bf4:	f002 fe06 	bl	8004804 <Displ_FillArea>
//
//    game_screen[ball.x][ball.y] = ENC_BLUE;
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001bf8:	4b69      	ldr	r3, [pc, #420]	; (8001da0 <printScreen+0x230>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	b298      	uxth	r0, r3
 8001c02:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <printScreen+0x230>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	2318      	movs	r3, #24
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2304      	movs	r3, #4
 8001c12:	2204      	movs	r2, #4
 8001c14:	f002 fdf6 	bl	8004804 <Displ_FillArea>
//
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	e0b0      	b.n	8001d80 <printScreen+0x210>
        for(int j = 0; j < 10; j++) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e0a6      	b.n	8001d72 <printScreen+0x202>
            if(bricks[i][j].visible == 1) {
 8001c24:	495f      	ldr	r1, [pc, #380]	; (8001da4 <printScreen+0x234>)
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	440b      	add	r3, r1
 8001c38:	3308      	adds	r3, #8
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	f040 8095 	bne.w	8001d6c <printScreen+0x1fc>
                if (bricks[i][j].toughness == 3) {
 8001c42:	4958      	ldr	r1, [pc, #352]	; (8001da4 <printScreen+0x234>)
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	440b      	add	r3, r1
 8001c56:	330c      	adds	r3, #12
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d122      	bne.n	8001ca4 <printScreen+0x134>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8001c5e:	4951      	ldr	r1, [pc, #324]	; (8001da4 <printScreen+0x234>)
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	440b      	add	r3, r1
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	b298      	uxth	r0, r3
 8001c7a:	494a      	ldr	r1, [pc, #296]	; (8001da4 <printScreen+0x234>)
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3304      	adds	r3, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	b299      	uxth	r1, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f002 fdb0 	bl	8004804 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 8001ca4:	493f      	ldr	r1, [pc, #252]	; (8001da4 <printScreen+0x234>)
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	440b      	add	r3, r1
 8001cb8:	330c      	adds	r3, #12
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d123      	bne.n	8001d08 <printScreen+0x198>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 8001cc0:	4938      	ldr	r1, [pc, #224]	; (8001da4 <printScreen+0x234>)
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	b298      	uxth	r0, r3
 8001cdc:	4931      	ldr	r1, [pc, #196]	; (8001da4 <printScreen+0x234>)
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2304      	movs	r3, #4
 8001d02:	2220      	movs	r2, #32
 8001d04:	f002 fd7e 	bl	8004804 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 8001d08:	4926      	ldr	r1, [pc, #152]	; (8001da4 <printScreen+0x234>)
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	440b      	add	r3, r1
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d123      	bne.n	8001d6c <printScreen+0x1fc>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 8001d24:	491f      	ldr	r1, [pc, #124]	; (8001da4 <printScreen+0x234>)
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	440b      	add	r3, r1
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	b298      	uxth	r0, r3
 8001d40:	4918      	ldr	r1, [pc, #96]	; (8001da4 <printScreen+0x234>)
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	440b      	add	r3, r1
 8001d54:	3304      	adds	r3, #4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f249 6396 	movw	r3, #38550	; 0x9696
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2304      	movs	r3, #4
 8001d66:	2220      	movs	r2, #32
 8001d68:	f002 fd4c 	bl	8004804 <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b09      	cmp	r3, #9
 8001d76:	f77f af55 	ble.w	8001c24 <printScreen+0xb4>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b2f      	cmp	r3, #47	; 0x2f
 8001d84:	f77f af4b 	ble.w	8001c1e <printScreen+0xae>
    //char str[12];
    //snprintf(str, 12, "%u", points);
    //displayText(game_screen, str, score.x, score.y, WHITE);
    //snprintf(str, 12, "%u", highScore);
    //displayText(game_screen, str, highScorePoint.x, highScorePoint.y, WHITE);
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20001ece 	.word	0x20001ece
 8001d9c:	20000014 	.word	0x20000014
 8001da0:	20000018 	.word	0x20000018
 8001da4:	200000cc 	.word	0x200000cc

08001da8 <checkGuardianTimer>:

void checkGuardianTimer() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <checkGuardianTimer+0x58>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d120      	bne.n	8001df8 <checkGuardianTimer+0x50>
        if (guardianTimer <= 0) {
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <checkGuardianTimer+0x5c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <checkGuardianTimer+0x44>
            guardian = 0;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <checkGuardianTimer+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <checkGuardianTimer+0x5c>)
 8001dc6:	2264      	movs	r2, #100	; 0x64
 8001dc8:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <checkGuardianTimer+0x60>)
 8001dcc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	b299      	uxth	r1, r3
 8001dd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2304      	movs	r3, #4
 8001de0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001de4:	2000      	movs	r0, #0
 8001de6:	f002 fd0d 	bl	8004804 <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8001dea:	e005      	b.n	8001df8 <checkGuardianTimer+0x50>
            guardianTimer--;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <checkGuardianTimer+0x5c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <checkGuardianTimer+0x5c>)
 8001df6:	701a      	strb	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20001ece 	.word	0x20001ece
 8001e04:	20000001 	.word	0x20000001
 8001e08:	20000014 	.word	0x20000014

08001e0c <explodeBricks>:

void explodeBricks(int x, int y) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <explodeBricks+0x2c>
        ymin = y;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b30      	cmp	r3, #48	; 0x30
 8001e3c:	d101      	bne.n	8001e42 <explodeBricks+0x36>
        ymax = y;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <explodeBricks+0x40>
        xmin = x;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d101      	bne.n	8001e56 <explodeBricks+0x4a>
        xmax = x;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e03a      	b.n	8001ed2 <explodeBricks+0xc6>
        for(int j = xmin; j <= xmax; j++) {
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	e030      	b.n	8001ec4 <explodeBricks+0xb8>
            if(bricks[i][j].visible == 1) {
 8001e62:	4921      	ldr	r1, [pc, #132]	; (8001ee8 <explodeBricks+0xdc>)
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4413      	add	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	440b      	add	r3, r1
 8001e76:	3308      	adds	r3, #8
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d11f      	bne.n	8001ebe <explodeBricks+0xb2>
                bricks[i][j].toughness = 0;
 8001e7e:	491a      	ldr	r1, [pc, #104]	; (8001ee8 <explodeBricks+0xdc>)
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	440b      	add	r3, r1
 8001e92:	330c      	adds	r3, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8001e98:	4913      	ldr	r1, [pc, #76]	; (8001ee8 <explodeBricks+0xdc>)
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	440b      	add	r3, r1
 8001eac:	3308      	adds	r3, #8
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
                points++;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <explodeBricks+0xe0>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <explodeBricks+0xe0>)
 8001ebc:	701a      	strb	r2, [r3, #0]
        for(int j = xmin; j <= xmax; j++) {
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	ddca      	ble.n	8001e62 <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	ddc0      	ble.n	8001e5c <explodeBricks+0x50>
            }
        }
    }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	3724      	adds	r7, #36	; 0x24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	200000cc 	.word	0x200000cc
 8001eec:	20001ecc 	.word	0x20001ecc

08001ef0 <setBrickToughness>:

int setBrickToughness(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]

    toughnessPercent = rand() % (100) + 1;
 8001efa:	f007 f945 	bl	8009188 <rand>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <setBrickToughness+0x68>)
 8001f02:	fb83 1302 	smull	r1, r3, r3, r2
 8001f06:	1159      	asrs	r1, r3, #5
 8001f08:	17d3      	asrs	r3, r2, #31
 8001f0a:	1acb      	subs	r3, r1, r3
 8001f0c:	2164      	movs	r1, #100	; 0x64
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	dd05      	ble.n	8001f2a <setBrickToughness+0x3a>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b3c      	cmp	r3, #60	; 0x3c
 8001f22:	dc02      	bgt.n	8001f2a <setBrickToughness+0x3a>
        toughness = 1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	e010      	b.n	8001f4c <setBrickToughness+0x5c>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b3c      	cmp	r3, #60	; 0x3c
 8001f2e:	dd05      	ble.n	8001f3c <setBrickToughness+0x4c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b59      	cmp	r3, #89	; 0x59
 8001f34:	dc02      	bgt.n	8001f3c <setBrickToughness+0x4c>
        toughness = 2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	e007      	b.n	8001f4c <setBrickToughness+0x5c>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b5a      	cmp	r3, #90	; 0x5a
 8001f40:	dd04      	ble.n	8001f4c <setBrickToughness+0x5c>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b63      	cmp	r3, #99	; 0x63
 8001f46:	dc01      	bgt.n	8001f4c <setBrickToughness+0x5c>
        toughness = 3;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	51eb851f 	.word	0x51eb851f

08001f5c <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    choice = 0;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <init+0x28>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <init+0x2c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <init+0x18>
        initSpaceInvaders();
 8001f6e:	f000 ffc7 	bl	8002f00 <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 8001f72:	e005      	b.n	8001f80 <init+0x24>
    }else if(gamechoice == 2){
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <init+0x2c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d101      	bne.n	8001f80 <init+0x24>
        initBrickbreaker();
 8001f7c:	f7fe f978 	bl	8000270 <initBrickbreaker>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20001ed0 	.word	0x20001ed0
 8001f88:	20001ed1 	.word	0x20001ed1

08001f8c <loop>:

int loop (int key) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	6078      	str	r0, [r7, #4]
    updateScreen();
 8001f94:	f000 f9ce 	bl	8002334 <updateScreen>
    if (play == menu){
 8001f98:	4b9b      	ldr	r3, [pc, #620]	; (8002208 <loop+0x27c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d104      	bne.n	8001faa <loop+0x1e>
        max_choice = total_games;
 8001fa0:	4b9a      	ldr	r3, [pc, #616]	; (800220c <loop+0x280>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b9a      	ldr	r3, [pc, #616]	; (8002210 <loop+0x284>)
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e002      	b.n	8001fb0 <loop+0x24>
    }else{
        max_choice = 1;
 8001faa:	4b99      	ldr	r3, [pc, #612]	; (8002210 <loop+0x284>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d164      	bne.n	8002080 <loop+0xf4>
        if(play < paused){
 8001fb6:	4b94      	ldr	r3, [pc, #592]	; (8002208 <loop+0x27c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d84f      	bhi.n	800205e <loop+0xd2>
        	if(gamechoice == 1){
 8001fbe:	4b95      	ldr	r3, [pc, #596]	; (8002214 <loop+0x288>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d104      	bne.n	8001fd0 <loop+0x44>
        		moveSpaceship(-1);
 8001fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fca:	f001 fc99 	bl	8003900 <moveSpaceship>
 8001fce:	e055      	b.n	800207c <loop+0xf0>
        	}else if(gamechoice == 2) {
 8001fd0:	4b90      	ldr	r3, [pc, #576]	; (8002214 <loop+0x288>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d151      	bne.n	800207c <loop+0xf0>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <loop+0x28c>)
 8001fda:	f993 3000 	ldrsb.w	r3, [r3]
 8001fde:	3b19      	subs	r3, #25
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	b298      	uxth	r0, r3
 8001fe6:	4b8c      	ldr	r3, [pc, #560]	; (8002218 <loop+0x28c>)
 8001fe8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	b299      	uxth	r1, r3
 8001ff2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	22c8      	movs	r2, #200	; 0xc8
 8001ffc:	f002 fc02 	bl	8004804 <Displ_FillArea>
                person.x--;
 8002000:	4b85      	ldr	r3, [pc, #532]	; (8002218 <loop+0x28c>)
 8002002:	f993 3000 	ldrsb.w	r3, [r3]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	b25a      	sxtb	r2, r3
 800200e:	4b82      	ldr	r3, [pc, #520]	; (8002218 <loop+0x28c>)
 8002010:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 8002012:	4b81      	ldr	r3, [pc, #516]	; (8002218 <loop+0x28c>)
 8002014:	f993 3000 	ldrsb.w	r3, [r3]
 8002018:	2b18      	cmp	r3, #24
 800201a:	dc02      	bgt.n	8002022 <loop+0x96>
                    person.x = (BAR_SIZE/2);
 800201c:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <loop+0x28c>)
 800201e:	2219      	movs	r2, #25
 8002020:	701a      	strb	r2, [r3, #0]
                }
                if (ball.dir == still) {
 8002022:	4b7e      	ldr	r3, [pc, #504]	; (800221c <loop+0x290>)
 8002024:	7a1b      	ldrb	r3, [r3, #8]
 8002026:	2b08      	cmp	r3, #8
 8002028:	d128      	bne.n	800207c <loop+0xf0>
                    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 800202a:	4b7c      	ldr	r3, [pc, #496]	; (800221c <loop+0x290>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	b298      	uxth	r0, r3
 8002034:	4b79      	ldr	r3, [pc, #484]	; (800221c <loop+0x290>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b29b      	uxth	r3, r3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	b299      	uxth	r1, r3
 800203e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2304      	movs	r3, #4
 8002046:	2204      	movs	r2, #4
 8002048:	f002 fbdc 	bl	8004804 <Displ_FillArea>
                    ball.x--;
 800204c:	4b73      	ldr	r3, [pc, #460]	; (800221c <loop+0x290>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3b01      	subs	r3, #1
 8002052:	4a72      	ldr	r2, [pc, #456]	; (800221c <loop+0x290>)
 8002054:	6013      	str	r3, [r2, #0]
                    ballDirection = NW;
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <loop+0x294>)
 8002058:	2207      	movs	r2, #7
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e00e      	b.n	800207c <loop+0xf0>
                }
            }
        }else{
            if (choice == 0){
 800205e:	4b71      	ldr	r3, [pc, #452]	; (8002224 <loop+0x298>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <loop+0xe4>
                choice = max_choice;
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <loop+0x284>)
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4b6e      	ldr	r3, [pc, #440]	; (8002224 <loop+0x298>)
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e005      	b.n	800207c <loop+0xf0>
            }else{
                choice--;
 8002070:	4b6c      	ldr	r3, [pc, #432]	; (8002224 <loop+0x298>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <loop+0x298>)
 800207a:	701a      	strb	r2, [r3, #0]
            }
            //QD << choice; // change to uart debug
        }
        key = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d164      	bne.n	8002150 <loop+0x1c4>
        if(play < paused){
 8002086:	4b60      	ldr	r3, [pc, #384]	; (8002208 <loop+0x27c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d84e      	bhi.n	800212c <loop+0x1a0>
        	if(gamechoice == 1){
 800208e:	4b61      	ldr	r3, [pc, #388]	; (8002214 <loop+0x288>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d103      	bne.n	800209e <loop+0x112>
        		moveSpaceship(1);
 8002096:	2001      	movs	r0, #1
 8002098:	f001 fc32 	bl	8003900 <moveSpaceship>
 800209c:	e056      	b.n	800214c <loop+0x1c0>
        	}else if (gamechoice == 2) {
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <loop+0x288>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d152      	bne.n	800214c <loop+0x1c0>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80020a6:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <loop+0x28c>)
 80020a8:	f993 3000 	ldrsb.w	r3, [r3]
 80020ac:	3b19      	subs	r3, #25
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	b298      	uxth	r0, r3
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <loop+0x28c>)
 80020b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	b299      	uxth	r1, r3
 80020c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2304      	movs	r3, #4
 80020c8:	22c8      	movs	r2, #200	; 0xc8
 80020ca:	f002 fb9b 	bl	8004804 <Displ_FillArea>
                person.x++;
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <loop+0x28c>)
 80020d0:	f993 3000 	ldrsb.w	r3, [r3]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	b25a      	sxtb	r2, r3
 80020dc:	4b4e      	ldr	r3, [pc, #312]	; (8002218 <loop+0x28c>)
 80020de:	701a      	strb	r2, [r3, #0]
                if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <loop+0x28c>)
 80020e2:	f993 3000 	ldrsb.w	r3, [r3]
 80020e6:	2b36      	cmp	r3, #54	; 0x36
 80020e8:	dd02      	ble.n	80020f0 <loop+0x164>
                    person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 80020ea:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <loop+0x28c>)
 80020ec:	2236      	movs	r2, #54	; 0x36
 80020ee:	701a      	strb	r2, [r3, #0]
                }
                if (ball.dir == still) {
 80020f0:	4b4a      	ldr	r3, [pc, #296]	; (800221c <loop+0x290>)
 80020f2:	7a1b      	ldrb	r3, [r3, #8]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d129      	bne.n	800214c <loop+0x1c0>
                    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <loop+0x290>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	b298      	uxth	r0, r3
 8002102:	4b46      	ldr	r3, [pc, #280]	; (800221c <loop+0x290>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	b29b      	uxth	r3, r3
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	b299      	uxth	r1, r3
 800210c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2304      	movs	r3, #4
 8002114:	2204      	movs	r2, #4
 8002116:	f002 fb75 	bl	8004804 <Displ_FillArea>
                    ball.x++;
 800211a:	4b40      	ldr	r3, [pc, #256]	; (800221c <loop+0x290>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a3e      	ldr	r2, [pc, #248]	; (800221c <loop+0x290>)
 8002122:	6013      	str	r3, [r2, #0]
                    ballDirection = NE;
 8002124:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <loop+0x294>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e00f      	b.n	800214c <loop+0x1c0>
                }
            }
        }else{
            if (choice == max_choice){
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <loop+0x298>)
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <loop+0x284>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d103      	bne.n	8002140 <loop+0x1b4>
                choice = 0;
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <loop+0x298>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e005      	b.n	800214c <loop+0x1c0>
            }else{
                choice++;
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <loop+0x298>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <loop+0x298>)
 800214a:	701a      	strb	r2, [r3, #0]
            }
        }
        key = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b04      	cmp	r3, #4
 8002154:	f040 8083 	bne.w	800225e <loop+0x2d2>
        if (play == notPlay){
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <loop+0x27c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10c      	bne.n	800217a <loop+0x1ee>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 8002160:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2314      	movs	r3, #20
 8002168:	228c      	movs	r2, #140	; 0x8c
 800216a:	2178      	movs	r1, #120	; 0x78
 800216c:	205a      	movs	r0, #90	; 0x5a
 800216e:	f002 fb49 	bl	8004804 <Displ_FillArea>
            play = inPlay;
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <loop+0x27c>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e06f      	b.n	800225a <loop+0x2ce>
        }else if(play == inPlay) {
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <loop+0x27c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10d      	bne.n	800219e <loop+0x212>
            if (ball.dir == still) {
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <loop+0x290>)
 8002184:	7a1b      	ldrb	r3, [r3, #8]
 8002186:	2b08      	cmp	r3, #8
 8002188:	d167      	bne.n	800225a <loop+0x2ce>
                ball.dir = ballDirection;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <loop+0x294>)
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <loop+0x290>)
 8002190:	721a      	strb	r2, [r3, #8]
                start = 1;
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <loop+0x29c>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
                playBall();
 8002198:	f7fe f900 	bl	800039c <playBall>
 800219c:	e05d      	b.n	800225a <loop+0x2ce>
            }
//            if(!hit){                  not sure if this was yours or I added for fixing bug
//                spawnBullet(0);
//            }
        }else if(play == paused){
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <loop+0x27c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d118      	bne.n	80021d8 <loop+0x24c>
            if(choice == 0){
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <loop+0x298>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <loop+0x22e>
                play = menu;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <loop+0x27c>)
 80021b0:	2203      	movs	r2, #3
 80021b2:	701a      	strb	r2, [r3, #0]
                init();
 80021b4:	f7ff fed2 	bl	8001f5c <init>
 80021b8:	e04f      	b.n	800225a <loop+0x2ce>
            }
            else if(choice == 1){
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <loop+0x298>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d106      	bne.n	80021d0 <loop+0x244>
            	displayPauseMenu(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fc9e 	bl	8002b04 <displayPauseMenu>
                play = inPlay;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <loop+0x27c>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e044      	b.n	800225a <loop+0x2ce>
            }else{
                displayPauseMenu(0);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 fc97 	bl	8002b04 <displayPauseMenu>
 80021d6:	e040      	b.n	800225a <loop+0x2ce>
            }

        }else if(play == menu){
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <loop+0x27c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d135      	bne.n	800224c <loop+0x2c0>
            if(choice == 0){
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <loop+0x298>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <loop+0x262>
                toggle_multiplayer();
 80021e8:	f000 fe7a 	bl	8002ee0 <toggle_multiplayer>
 80021ec:	e035      	b.n	800225a <loop+0x2ce>
            }else if(choice == 1){
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <loop+0x298>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d11a      	bne.n	800222c <loop+0x2a0>
                gamechoice = 2;
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <loop+0x288>)
 80021f8:	2202      	movs	r2, #2
 80021fa:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <loop+0x27c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]

                init();
 8002202:	f7ff feab 	bl	8001f5c <init>
 8002206:	e028      	b.n	800225a <loop+0x2ce>
 8002208:	2000002f 	.word	0x2000002f
 800220c:	20000028 	.word	0x20000028
 8002210:	20000011 	.word	0x20000011
 8002214:	20001ed1 	.word	0x20001ed1
 8002218:	20000014 	.word	0x20000014
 800221c:	20000018 	.word	0x20000018
 8002220:	20000025 	.word	0x20000025
 8002224:	20001ed0 	.word	0x20001ed0
 8002228:	20001ed2 	.word	0x20001ed2
            }
            else if(choice == 2){
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <loop+0x388>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d108      	bne.n	8002246 <loop+0x2ba>
                gamechoice = 1;
 8002234:	4b38      	ldr	r3, [pc, #224]	; (8002318 <loop+0x38c>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <loop+0x390>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

                init();
 8002240:	f7ff fe8c 	bl	8001f5c <init>
 8002244:	e009      	b.n	800225a <loop+0x2ce>
            }else{
                displayMenu();
 8002246:	f000 fcbf 	bl	8002bc8 <displayMenu>
 800224a:	e006      	b.n	800225a <loop+0x2ce>
            }
        }
        else if(!hit){
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <loop+0x394>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <loop+0x2ce>
            spawnBullet(0);
 8002254:	2000      	movs	r0, #0
 8002256:	f000 ffa3 	bl	80031a0 <spawnBullet>
        }
        key = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d10e      	bne.n	8002282 <loop+0x2f6>
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <loop+0x390>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d80a      	bhi.n	8002282 <loop+0x2f6>
        play = paused;
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <loop+0x390>)
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <loop+0x388>)
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <loop+0x398>)
 800227a:	2228      	movs	r2, #40	; 0x28
 800227c:	701a      	strb	r2, [r3, #0]
        key = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <loop+0x390>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d132      	bne.n	80022f0 <loop+0x364>
    	if(gamechoice == 1){
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <loop+0x38c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10a      	bne.n	80022a8 <loop+0x31c>
    		spawnComet();
 8002292:	f000 fef9 	bl	8003088 <spawnComet>
    		delayBullet();
 8002296:	f001 fde7 	bl	8003e68 <delayBullet>
    		moveComets();
 800229a:	f001 f9b7 	bl	800360c <moveComets>
    		moveBullets();
 800229e:	f001 f831 	bl	8003304 <moveBullets>
    		moveEnemyBullets();
 80022a2:	f001 f8eb 	bl	800347c <moveEnemyBullets>
 80022a6:	e021      	b.n	80022ec <loop+0x360>
    	}else if(gamechoice == 2) {
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <loop+0x38c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d11d      	bne.n	80022ec <loop+0x360>
            if (start == 1 && ball.dir != still) {
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <loop+0x39c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d115      	bne.n	80022e4 <loop+0x358>
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <loop+0x3a0>)
 80022ba:	7a1b      	ldrb	r3, [r3, #8]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d011      	beq.n	80022e4 <loop+0x358>
                if (delay <= 0) {
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <loop+0x3a4>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <loop+0x348>
                    lowerBricks();
 80022c8:	f7fe fa40 	bl	800074c <lowerBricks>
                    delay = BRICK_SPEED;
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <loop+0x3a4>)
 80022ce:	228c      	movs	r2, #140	; 0x8c
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e005      	b.n	80022e0 <loop+0x354>
                } else {
                    delay--;
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <loop+0x3a4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3b01      	subs	r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <loop+0x3a4>)
 80022de:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 80022e0:	f7fe fa9c 	bl	800081c <checkGameOver>
            }
            checkGuardianTimer();
 80022e4:	f7ff fd60 	bl	8001da8 <checkGuardianTimer>
            playBall();
 80022e8:	f7fe f858 	bl	800039c <playBall>
        }

    	updateScreen();
 80022ec:	f000 f822 	bl	8002334 <updateScreen>
    }if(play < paused){
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <loop+0x390>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d807      	bhi.n	8002308 <loop+0x37c>
    	if(gamechoice == 1){
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <loop+0x38c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d103      	bne.n	8002308 <loop+0x37c>
    		spawnStar();
 8002300:	f000 ffa2 	bl	8003248 <spawnStar>
    		moveStars();
 8002304:	f001 fa9a 	bl	800383c <moveStars>
    	}

    }
    return key;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20001ed0 	.word	0x20001ed0
 8002318:	20001ed1 	.word	0x20001ed1
 800231c:	2000002f 	.word	0x2000002f
 8002320:	20001ecf 	.word	0x20001ecf
 8002324:	20000010 	.word	0x20000010
 8002328:	20001ed2 	.word	0x20001ed2
 800232c:	20000018 	.word	0x20000018
 8002330:	20000024 	.word	0x20000024

08002334 <updateScreen>:


void updateScreen()
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b087      	sub	sp, #28
 8002338:	af06      	add	r7, sp, #24
    if (play == menu){
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <updateScreen+0x8c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d102      	bne.n	8002348 <updateScreen+0x14>
    	displayMenu();
 8002342:	f000 fc41 	bl	8002bc8 <displayMenu>
        return;
 8002346:	e037      	b.n	80023b8 <updateScreen+0x84>
    }

    if (gamechoice == 1){
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <updateScreen+0x90>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10c      	bne.n	800236a <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <updateScreen+0x94>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002358:	f001 fd3c 	bl	8003dd4 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 800235c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002360:	f001 fcac 	bl	8003cbc <displaySpaceShip>

        //lives
        displayLives();
 8002364:	f001 fcec 	bl	8003d40 <displayLives>
 8002368:	e005      	b.n	8002376 <updateScreen+0x42>
    }else if(gamechoice == 2) {
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <updateScreen+0x90>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d101      	bne.n	8002376 <updateScreen+0x42>
        printScreen();
 8002372:	f7ff fbfd 	bl	8001b70 <printScreen>
    }

    //start
    if(!play){
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <updateScreen+0x8c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <updateScreen+0x98>)
 8002380:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002384:	9204      	str	r2, [sp, #16]
 8002386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238a:	9203      	str	r2, [sp, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	9202      	str	r2, [sp, #8]
 8002390:	466c      	mov	r4, sp
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002398:	e884 0003 	stmia.w	r4, {r0, r1}
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <updateScreen+0x9c>)
 80023a0:	2178      	movs	r1, #120	; 0x78
 80023a2:	205a      	movs	r0, #90	; 0x5a
 80023a4:	f002 ff8a 	bl	80052bc <Displ_WString>
 80023a8:	e006      	b.n	80023b8 <updateScreen+0x84>
    }
    else if(play == paused){
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <updateScreen+0x8c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d102      	bne.n	80023b8 <updateScreen+0x84>
    	displayPauseMenu(0);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f000 fba6 	bl	8002b04 <displayPauseMenu>
    }
}
 80023b8:	3704      	adds	r7, #4
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000002f 	.word	0x2000002f
 80023c4:	20001ed1 	.word	0x20001ed1
 80023c8:	20001ecf 	.word	0x20001ecf
 80023cc:	20000004 	.word	0x20000004
 80023d0:	0800a210 	.word	0x0800a210

080023d4 <_write>:
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;
extern uint8_t game_screen[SCREEN_WIDTH][SCREEN_HEIGHT];

int _write(int file, char *ptr, int len) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d003      	beq.n	80023ee <_write+0x1a>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d015      	beq.n	8002418 <_write+0x44>
 80023ec:	e029      	b.n	8002442 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	481a      	ldr	r0, [pc, #104]	; (8002464 <_write+0x90>)
 80023fa:	f006 fa01 	bl	8008800 <HAL_UART_Transmit>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d024      	beq.n	8002452 <_write+0x7e>
			errno = EIO;
 8002408:	f006 fdd0 	bl	8008fac <__errno>
 800240c:	4603      	mov	r3, r0
 800240e:	2205      	movs	r2, #5
 8002410:	601a      	str	r2, [r3, #0]
			return -1;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	e020      	b.n	800245a <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	b29a      	uxth	r2, r3
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	4810      	ldr	r0, [pc, #64]	; (8002464 <_write+0x90>)
 8002424:	f006 f9ec 	bl	8008800 <HAL_UART_Transmit>
 8002428:	4603      	mov	r3, r0
 800242a:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d011      	beq.n	8002456 <_write+0x82>
			errno = EIO;
 8002432:	f006 fdbb 	bl	8008fac <__errno>
 8002436:	4603      	mov	r3, r0
 8002438:	2205      	movs	r2, #5
 800243a:	601a      	str	r2, [r3, #0]
			return -1;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	e00b      	b.n	800245a <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8002442:	f006 fdb3 	bl	8008fac <__errno>
 8002446:	4603      	mov	r3, r0
 8002448:	2209      	movs	r2, #9
 800244a:	601a      	str	r2, [r3, #0]
        return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	e003      	b.n	800245a <_write+0x86>
        break;
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <_write+0x84>
        break;
 8002456:	bf00      	nop
    }
    return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20002014 	.word	0x20002014

08002468 <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af04      	add	r7, sp, #16
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	b29a      	uxth	r2, r3
 8002476:	2364      	movs	r3, #100	; 0x64
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	2301      	movs	r3, #1
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	f107 030f 	add.w	r3, r7, #15
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2301      	movs	r3, #1
 8002486:	21d0      	movs	r1, #208	; 0xd0
 8002488:	4807      	ldr	r0, [pc, #28]	; (80024a8 <read_MPU_mem+0x40>)
 800248a:	f003 fc7b 	bl	8005d84 <HAL_I2C_Mem_Read>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <read_MPU_mem+0x30>
		return data;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	e003      	b.n	80024a0 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8002498:	4804      	ldr	r0, [pc, #16]	; (80024ac <read_MPU_mem+0x44>)
 800249a:	f006 fe3f 	bl	800911c <puts>
		return 0;
 800249e:	2300      	movs	r3, #0
	}
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20001ed4 	.word	0x20001ed4
 80024ac:	0800a218 	.word	0x0800a218

080024b0 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af04      	add	r7, sp, #16
 80024b6:	4603      	mov	r3, r0
 80024b8:	460a      	mov	r2, r1
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	4613      	mov	r3, r2
 80024be:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	2364      	movs	r3, #100	; 0x64
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2301      	movs	r3, #1
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2301      	movs	r3, #1
 80024d2:	21d1      	movs	r1, #209	; 0xd1
 80024d4:	4806      	ldr	r0, [pc, #24]	; (80024f0 <write_MPU_mem+0x40>)
 80024d6:	f003 fb41 	bl	8005b5c <HAL_I2C_Mem_Write>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 80024e0:	4804      	ldr	r0, [pc, #16]	; (80024f4 <write_MPU_mem+0x44>)
 80024e2:	f006 fe1b 	bl	800911c <puts>
    }
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20001ed4 	.word	0x20001ed4
 80024f4:	0800a228 	.word	0x0800a228

080024f8 <read_y_accel>:

void read_y_accel(){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 80024fe:	203e      	movs	r0, #62	; 0x3e
 8002500:	f7ff ffb2 	bl	8002468 <read_MPU_mem>
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8002508:	203d      	movs	r0, #61	; 0x3d
 800250a:	f7ff ffad 	bl	8002468 <read_MPU_mem>
 800250e:	4603      	mov	r3, r0
 8002510:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8002512:	79bb      	ldrb	r3, [r7, #6]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	b21b      	sxth	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b21a      	sxth	r2, r3
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <read_y_accel+0x34>)
 8002522:	801a      	strh	r2, [r3, #0]

}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2000209c 	.word	0x2000209c

08002530 <init_MPU>:

void init_MPU(){
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002534:	2100      	movs	r1, #0
 8002536:	206b      	movs	r0, #107	; 0x6b
 8002538:	f7ff ffba 	bl	80024b0 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 800253c:	2107      	movs	r1, #7
 800253e:	2019      	movs	r0, #25
 8002540:	f7ff ffb6 	bl	80024b0 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8002544:	2100      	movs	r1, #0
 8002546:	201b      	movs	r0, #27
 8002548:	f7ff ffb2 	bl	80024b0 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 800254c:	2100      	movs	r1, #0
 800254e:	201c      	movs	r0, #28
 8002550:	f7ff ffae 	bl	80024b0 <write_MPU_mem>
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}

08002558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800255e:	f002 ff17 	bl	8005390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002562:	f000 f883 	bl	800266c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002566:	f000 f9b5 	bl	80028d4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800256a:	f000 f8d5 	bl	8002718 <MX_I2C2_Init>
  MX_SPI2_Init();
 800256e:	f000 f913 	bl	8002798 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002572:	f000 f94f 	bl	8002814 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002576:	f000 f97d 	bl	8002874 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800257a:	2064      	movs	r0, #100	; 0x64
 800257c:	f002 ff6e 	bl	800545c <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002580:	2364      	movs	r3, #100	; 0x64
 8002582:	2201      	movs	r2, #1
 8002584:	21d0      	movs	r1, #208	; 0xd0
 8002586:	4830      	ldr	r0, [pc, #192]	; (8002648 <main+0xf0>)
 8002588:	f003 fd16 	bl	8005fb8 <HAL_I2C_IsDeviceReady>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <main+0x46>
	  printf("succesfully communicated\n\r");
 8002592:	482e      	ldr	r0, [pc, #184]	; (800264c <main+0xf4>)
 8002594:	f006 fd3c 	bl	8009010 <iprintf>
	  init_MPU();
 8002598:	f7ff ffca 	bl	8002530 <init_MPU>
 800259c:	e002      	b.n	80025a4 <main+0x4c>
  }
  else{
	  printf("i2C not found\n\r");
 800259e:	482c      	ldr	r0, [pc, #176]	; (8002650 <main+0xf8>)
 80025a0:	f006 fd36 	bl	8009010 <iprintf>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80025a4:	2001      	movs	r0, #1
 80025a6:	f002 f8b7 	bl	8004718 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 80025aa:	2000      	movs	r0, #0
 80025ac:	f002 fade 	bl	8004b6c <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 80025b0:	2064      	movs	r0, #100	; 0x64
 80025b2:	f002 ff53 	bl	800545c <HAL_Delay>

      read_y_accel();
 80025b6:	f7ff ff9f 	bl	80024f8 <read_y_accel>
      if (ay > 2000){
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <main+0xfc>)
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025c4:	dd07      	ble.n	80025d6 <main+0x7e>
          if(x < 320 - 88){
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <main+0x100>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	2be7      	cmp	r3, #231	; 0xe7
 80025cc:	d810      	bhi.n	80025f0 <main+0x98>
        	  key = right;
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <main+0x104>)
 80025d0:	2203      	movs	r2, #3
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e00c      	b.n	80025f0 <main+0x98>
          }
      }
      else if (ay < -2000){
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <main+0xfc>)
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80025e0:	da06      	bge.n	80025f0 <main+0x98>
          if(x > 0){
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <main+0x100>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <main+0x98>
        	  key = left;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <main+0x104>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <main+0x104>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fcc9 	bl	8001f8c <loop>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <main+0x104>)
 8002600:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	e017      	b.n	8002638 <main+0xe0>
    	  printf("hello?\r\n");
 8002608:	4815      	ldr	r0, [pc, #84]	; (8002660 <main+0x108>)
 800260a:	f006 fd87 	bl	800911c <puts>
    	  printf("ammo %d: x:%d, y:%d\r\n",i,ammo.bullet_ar[i].x,ammo.bullet_ar[i].y);
 800260e:	4a15      	ldr	r2, [pc, #84]	; (8002664 <main+0x10c>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800261a:	4619      	mov	r1, r3
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <main+0x10c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002628:	460a      	mov	r2, r1
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	480e      	ldr	r0, [pc, #56]	; (8002668 <main+0x110>)
 800262e:	f006 fcef 	bl	8009010 <iprintf>
      for (int i = 0; i < ammo.in_play; i++){
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3301      	adds	r3, #1
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <main+0x10c>)
 800263a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800263e:	461a      	mov	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4293      	cmp	r3, r2
 8002644:	dbe0      	blt.n	8002608 <main+0xb0>
      HAL_Delay(100);
 8002646:	e7b3      	b.n	80025b0 <main+0x58>
 8002648:	20001ed4 	.word	0x20001ed4
 800264c:	0800a23c 	.word	0x0800a23c
 8002650:	0800a258 	.word	0x0800a258
 8002654:	2000209c 	.word	0x2000209c
 8002658:	20000026 	.word	0x20000026
 800265c:	200020a4 	.word	0x200020a4
 8002660:	0800a268 	.word	0x0800a268
 8002664:	200020a8 	.word	0x200020a8
 8002668:	0800a270 	.word	0x0800a270

0800266c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b09c      	sub	sp, #112	; 0x70
 8002670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002676:	2228      	movs	r2, #40	; 0x28
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f006 fcc0 	bl	8009000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2230      	movs	r2, #48	; 0x30
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f006 fcb2 	bl	8009000 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800269c:	2302      	movs	r3, #2
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026a0:	2301      	movs	r3, #1
 80026a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026a4:	2310      	movs	r3, #16
 80026a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a8:	2302      	movs	r3, #2
 80026aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026ac:	2300      	movs	r3, #0
 80026ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80026b0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80026b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 f8d6 	bl	800686c <HAL_RCC_OscConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80026c6:	f000 fa17 	bl	8002af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ca:	230f      	movs	r3, #15
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ce:	2302      	movs	r3, #2
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026dc:	2300      	movs	r3, #0
 80026de:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026e4:	2102      	movs	r1, #2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f005 f8fe 	bl	80078e8 <HAL_RCC_ClockConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80026f2:	f000 fa01 	bl	8002af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026f6:	2340      	movs	r3, #64	; 0x40
 80026f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	4618      	mov	r0, r3
 8002702:	f005 fb27 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800270c:	f000 f9f4 	bl	8002af8 <Error_Handler>
  }
}
 8002710:	bf00      	nop
 8002712:	3770      	adds	r7, #112	; 0x70
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_I2C2_Init+0x74>)
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <MX_I2C2_Init+0x78>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <MX_I2C2_Init+0x74>)
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <MX_I2C2_Init+0x7c>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_I2C2_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <MX_I2C2_Init+0x74>)
 8002730:	2201      	movs	r2, #1
 8002732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_I2C2_Init+0x74>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <MX_I2C2_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_I2C2_Init+0x74>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_I2C2_Init+0x74>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_I2C2_Init+0x74>)
 800274e:	2200      	movs	r2, #0
 8002750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002752:	480e      	ldr	r0, [pc, #56]	; (800278c <MX_I2C2_Init+0x74>)
 8002754:	f003 f972 	bl	8005a3c <HAL_I2C_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800275e:	f000 f9cb 	bl	8002af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002762:	2100      	movs	r1, #0
 8002764:	4809      	ldr	r0, [pc, #36]	; (800278c <MX_I2C2_Init+0x74>)
 8002766:	f003 ffe9 	bl	800673c <HAL_I2CEx_ConfigAnalogFilter>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002770:	f000 f9c2 	bl	8002af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002774:	2100      	movs	r1, #0
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_I2C2_Init+0x74>)
 8002778:	f004 f82b 	bl	80067d2 <HAL_I2CEx_ConfigDigitalFilter>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002782:	f000 f9b9 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20001ed4 	.word	0x20001ed4
 8002790:	40005800 	.word	0x40005800
 8002794:	2000090e 	.word	0x2000090e

08002798 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_SPI2_Init+0x74>)
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <MX_SPI2_Init+0x78>)
 80027a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_SPI2_Init+0x74>)
 80027a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_SPI2_Init+0x74>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <MX_SPI2_Init+0x74>)
 80027b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_SPI2_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <MX_SPI2_Init+0x74>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_SPI2_Init+0x74>)
 80027c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <MX_SPI2_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <MX_SPI2_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <MX_SPI2_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <MX_SPI2_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_SPI2_Init+0x74>)
 80027e6:	2207      	movs	r2, #7
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <MX_SPI2_Init+0x74>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <MX_SPI2_Init+0x74>)
 80027f2:	2208      	movs	r2, #8
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_SPI2_Init+0x74>)
 80027f8:	f005 fc30 	bl	800805c <HAL_SPI_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002802:	f000 f979 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20001f28 	.word	0x20001f28
 8002810:	40003800 	.word	0x40003800

08002814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_USART2_UART_Init+0x58>)
 800281a:	4a15      	ldr	r2, [pc, #84]	; (8002870 <MX_USART2_UART_Init+0x5c>)
 800281c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <MX_USART2_UART_Init+0x58>)
 8002820:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_USART2_UART_Init+0x58>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_USART2_UART_Init+0x58>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_USART2_UART_Init+0x58>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_USART2_UART_Init+0x58>)
 800283a:	220c      	movs	r2, #12
 800283c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_USART2_UART_Init+0x58>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_USART2_UART_Init+0x58>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_USART2_UART_Init+0x58>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_USART2_UART_Init+0x58>)
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_USART2_UART_Init+0x58>)
 8002858:	f005 ff84 	bl	8008764 <HAL_UART_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002862:	f000 f949 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20001f8c 	.word	0x20001f8c
 8002870:	40004400 	.word	0x40004400

08002874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <MX_USART3_UART_Init+0x58>)
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <MX_USART3_UART_Init+0x5c>)
 800287c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <MX_USART3_UART_Init+0x58>)
 8002880:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_USART3_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_USART3_UART_Init+0x58>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_USART3_UART_Init+0x58>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_USART3_UART_Init+0x58>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <MX_USART3_UART_Init+0x58>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_USART3_UART_Init+0x58>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <MX_USART3_UART_Init+0x58>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_USART3_UART_Init+0x58>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_USART3_UART_Init+0x58>)
 80028b8:	f005 ff54 	bl	8008764 <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80028c2:	f000 f919 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20002014 	.word	0x20002014
 80028d0:	40004800 	.word	0x40004800

080028d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <MX_GPIO_Init+0x130>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4a45      	ldr	r2, [pc, #276]	; (8002a04 <MX_GPIO_Init+0x130>)
 80028f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028f4:	6153      	str	r3, [r2, #20]
 80028f6:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <MX_GPIO_Init+0x130>)
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002902:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4a3f      	ldr	r2, [pc, #252]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800290c:	6153      	str	r3, [r2, #20]
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <MX_GPIO_Init+0x130>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4a39      	ldr	r2, [pc, #228]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	6153      	str	r3, [r2, #20]
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6153      	str	r3, [r2, #20]
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <MX_GPIO_Init+0x130>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002950:	482d      	ldr	r0, [pc, #180]	; (8002a08 <MX_GPIO_Init+0x134>)
 8002952:	f003 f843 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002956:	2200      	movs	r2, #0
 8002958:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800295c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002960:	f003 f83c 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8002964:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800296a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002970:	2301      	movs	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	4824      	ldr	r0, [pc, #144]	; (8002a0c <MX_GPIO_Init+0x138>)
 800297c:	f002 fea4 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8002980:	2301      	movs	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002984:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002998:	f002 fe96 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800299c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4814      	ldr	r0, [pc, #80]	; (8002a08 <MX_GPIO_Init+0x134>)
 80029b6:	f002 fe87 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 80029ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80029be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d6:	f002 fe77 	bl	80056c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2006      	movs	r0, #6
 80029e0:	f002 fe3b 	bl	800565a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029e4:	2006      	movs	r0, #6
 80029e6:	f002 fe54 	bl	8005692 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2028      	movs	r0, #40	; 0x28
 80029f0:	f002 fe33 	bl	800565a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029f4:	2028      	movs	r0, #40	; 0x28
 80029f6:	f002 fe4c 	bl	8005692 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	48000800 	.word	0x48000800

08002a10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8002a1a:	f002 fd13 	bl	8005444 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b1e      	cmp	r3, #30
 8002a2a:	d951      	bls.n	8002ad0 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8002a32:	482a      	ldr	r0, [pc, #168]	; (8002adc <HAL_GPIO_EXTI_Callback+0xcc>)
 8002a34:	f006 fb72 	bl	800911c <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d10e      	bne.n	8002a5e <HAL_GPIO_EXTI_Callback+0x4e>
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	4619      	mov	r1, r3
 8002a44:	4826      	ldr	r0, [pc, #152]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002a46:	f002 ffb1 	bl	80059ac <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8002a56:	4824      	ldr	r0, [pc, #144]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002a58:	f006 fb60 	bl	800911c <puts>
 8002a5c:	e038      	b.n	8002ad0 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a64:	d10e      	bne.n	8002a84 <HAL_GPIO_EXTI_Callback+0x74>
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	481d      	ldr	r0, [pc, #116]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002a6c:	f002 ff9e 	bl	80059ac <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8002a7c:	481b      	ldr	r0, [pc, #108]	; (8002aec <HAL_GPIO_EXTI_Callback+0xdc>)
 8002a7e:	f006 fb4d 	bl	800911c <puts>
 8002a82:	e025      	b.n	8002ad0 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a8a:	d10e      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x9a>
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4813      	ldr	r0, [pc, #76]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002a92:	f002 ff8b 	bl	80059ac <HAL_GPIO_ReadPin>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8002aa2:	4813      	ldr	r0, [pc, #76]	; (8002af0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002aa4:	f006 fb3a 	bl	800911c <puts>
 8002aa8:	e012      	b.n	8002ad0 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10f      	bne.n	8002ad0 <HAL_GPIO_EXTI_Callback+0xc0>
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab8:	f002 ff78 	bl	80059ac <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8002ac8:	480a      	ldr	r0, [pc, #40]	; (8002af4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002aca:	f006 fb27 	bl	800911c <puts>
        }
    }
}
 8002ace:	e7ff      	b.n	8002ad0 <HAL_GPIO_EXTI_Callback+0xc0>
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200020a0 	.word	0x200020a0
 8002adc:	0800a288 	.word	0x0800a288
 8002ae0:	48000800 	.word	0x48000800
 8002ae4:	200020a4 	.word	0x200020a4
 8002ae8:	0800a294 	.word	0x0800a294
 8002aec:	0800a2a4 	.word	0x0800a2a4
 8002af0:	0800a2b0 	.word	0x0800a2b0
 8002af4:	0800a2c0 	.word	0x0800a2c0

08002af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
}
 8002afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <Error_Handler+0x8>
	...

08002b04 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af04      	add	r7, sp, #16
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8002b0e:	f249 6396 	movw	r3, #38550	; 0x9696
 8002b12:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8002b14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b18:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8002b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1e:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <displayPauseMenu+0xbc>)
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <displayPauseMenu+0xc0>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d102      	bne.n	8002b32 <displayPauseMenu+0x2e>
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d042      	beq.n	8002bb8 <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <displayPauseMenu+0xbc>)
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <displayPauseMenu+0xc0>)
 8002b38:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <displayPauseMenu+0xbc>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <displayPauseMenu+0x4c>
			back_color = RED;
 8002b42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b46:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8002b48:	f249 6396 	movw	r3, #38550	; 0x9696
 8002b4c:	81bb      	strh	r3, [r7, #12]
 8002b4e:	e00b      	b.n	8002b68 <displayPauseMenu+0x64>
		}
		else if(clear){
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 8002b56:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002b5a:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 8002b5c:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002b60:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8002b62:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002b66:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8002b68:	89fb      	ldrh	r3, [r7, #14]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2340      	movs	r3, #64	; 0x40
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	2158      	movs	r1, #88	; 0x58
 8002b72:	2054      	movs	r0, #84	; 0x54
 8002b74:	f001 fe46 	bl	8004804 <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8002b78:	89bb      	ldrh	r3, [r7, #12]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2340      	movs	r3, #64	; 0x40
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	2158      	movs	r1, #88	; 0x58
 8002b82:	20ac      	movs	r0, #172	; 0xac
 8002b84:	f001 fe3e 	bl	8004804 <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	2378      	movs	r3, #120	; 0x78
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	23e4      	movs	r3, #228	; 0xe4
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2390      	movs	r3, #144	; 0x90
 8002b96:	22b4      	movs	r2, #180	; 0xb4
 8002b98:	2160      	movs	r1, #96	; 0x60
 8002b9a:	20b4      	movs	r0, #180	; 0xb4
 8002b9c:	f002 f933 	bl	8004e06 <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8002ba0:	897b      	ldrh	r3, [r7, #10]
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	2378      	movs	r3, #120	; 0x78
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	235c      	movs	r3, #92	; 0x5c
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	2390      	movs	r3, #144	; 0x90
 8002bae:	228c      	movs	r2, #140	; 0x8c
 8002bb0:	2160      	movs	r1, #96	; 0x60
 8002bb2:	208c      	movs	r0, #140	; 0x8c
 8002bb4:	f002 f927 	bl	8004e06 <Displ_fillTriangle>
	}

}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20001ed0 	.word	0x20001ed0
 8002bc4:	20000010 	.word	0x20000010

08002bc8 <displayMenu>:

void displayMenu(){
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b08b      	sub	sp, #44	; 0x2c
 8002bcc:	af06      	add	r7, sp, #24
	int y_offset = 12;
 8002bce:	230c      	movs	r3, #12
 8002bd0:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8002bd6:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <displayMenu+0x140>)
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <displayMenu+0x144>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d03d      	beq.n	8002c5e <displayMenu+0x96>
		last_choice_menu =  choice;
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <displayMenu+0x140>)
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <displayMenu+0x144>)
 8002be8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	e02e      	b.n	8002c4e <displayMenu+0x86>
			if(i == choice){
 8002bf0:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <displayMenu+0x140>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10b      	bne.n	8002c14 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	b298      	uxth	r0, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	b299      	uxth	r1, r3
 8002c04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2340      	movs	r3, #64	; 0x40
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	f001 fdf9 	bl	8004804 <Displ_FillArea>
 8002c12:	e00a      	b.n	8002c2a <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	b298      	uxth	r0, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	f249 6396 	movw	r3, #38550	; 0x9696
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2340      	movs	r3, #64	; 0x40
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	f001 fded 	bl	8004804 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <displayMenu+0x7a>
				x_offset = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	334c      	adds	r3, #76	; 0x4c
 8002c3e:	60fb      	str	r3, [r7, #12]
				continue;
 8002c40:	e002      	b.n	8002c48 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	334c      	adds	r3, #76	; 0x4c
 8002c46:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <displayMenu+0x148>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dc02      	bgt.n	8002c5e <displayMenu+0x96>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b07      	cmp	r3, #7
 8002c5c:	ddc8      	ble.n	8002bf0 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8002c5e:	f000 f861 	bl	8002d24 <displayMenuIcons>

    // text
    switch (choice) {
 8002c62:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <displayMenu+0x140>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d032      	beq.n	8002cd0 <displayMenu+0x108>
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	dc46      	bgt.n	8002cfc <displayMenu+0x134>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <displayMenu+0xb0>
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d016      	beq.n	8002ca4 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 8002c76:	e041      	b.n	8002cfc <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 8002c78:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <displayMenu+0x14c>)
 8002c7a:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002c7e:	9204      	str	r2, [sp, #16]
 8002c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c84:	9203      	str	r2, [sp, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	9202      	str	r2, [sp, #8]
 8002c8a:	466c      	mov	r4, sp
 8002c8c:	1d1a      	adds	r2, r3, #4
 8002c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c92:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <displayMenu+0x150>)
 8002c9a:	21c8      	movs	r1, #200	; 0xc8
 8002c9c:	2008      	movs	r0, #8
 8002c9e:	f002 fb0d 	bl	80052bc <Displ_WString>
        break;
 8002ca2:	e02c      	b.n	8002cfe <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <displayMenu+0x14c>)
 8002ca6:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002caa:	9204      	str	r2, [sp, #16]
 8002cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb0:	9203      	str	r2, [sp, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	9202      	str	r2, [sp, #8]
 8002cb6:	466c      	mov	r4, sp
 8002cb8:	1d1a      	adds	r2, r3, #4
 8002cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cbe:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <displayMenu+0x154>)
 8002cc6:	21c8      	movs	r1, #200	; 0xc8
 8002cc8:	2008      	movs	r0, #8
 8002cca:	f002 faf7 	bl	80052bc <Displ_WString>
        break;
 8002cce:	e016      	b.n	8002cfe <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <displayMenu+0x14c>)
 8002cd2:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002cd6:	9204      	str	r2, [sp, #16]
 8002cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cdc:	9203      	str	r2, [sp, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	9202      	str	r2, [sp, #8]
 8002ce2:	466c      	mov	r4, sp
 8002ce4:	1d1a      	adds	r2, r3, #4
 8002ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cea:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <displayMenu+0x158>)
 8002cf2:	21c8      	movs	r1, #200	; 0xc8
 8002cf4:	2008      	movs	r0, #8
 8002cf6:	f002 fae1 	bl	80052bc <Displ_WString>
        break;
 8002cfa:	e000      	b.n	8002cfe <displayMenu+0x136>
        break;
 8002cfc:	bf00      	nop
    }
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20001ed0 	.word	0x20001ed0
 8002d0c:	2000002c 	.word	0x2000002c
 8002d10:	20000028 	.word	0x20000028
 8002d14:	20000004 	.word	0x20000004
 8002d18:	0800a2d0 	.word	0x0800a2d0
 8002d1c:	0800a2e0 	.word	0x0800a2e0
 8002d20:	0800a2f0 	.word	0x0800a2f0

08002d24 <displayMenuIcons>:

void displayMenuIcons(){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 8002d28:	f000 f806 	bl	8002d38 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8002d2c:	f000 f868 	bl	8002e00 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 8002d30:	f000 f890 	bl	8002e54 <displaySpaceIcon>
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af02      	add	r7, sp, #8
	if(connected){
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <displayMultiplayerIcon+0xc4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d023      	beq.n	8002d8e <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8002d46:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	2230      	movs	r2, #48	; 0x30
 8002d50:	2114      	movs	r1, #20
 8002d52:	2014      	movs	r0, #20
 8002d54:	f001 fd56 	bl	8004804 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 8002d58:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2308      	movs	r3, #8
 8002d60:	2204      	movs	r2, #4
 8002d62:	210c      	movs	r1, #12
 8002d64:	2014      	movs	r0, #20
 8002d66:	f001 fd4d 	bl	8004804 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 8002d6a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2308      	movs	r3, #8
 8002d72:	2204      	movs	r2, #4
 8002d74:	210c      	movs	r1, #12
 8002d76:	2040      	movs	r0, #64	; 0x40
 8002d78:	f001 fd44 	bl	8004804 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 8002d7c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	2328      	movs	r3, #40	; 0x28
 8002d84:	2208      	movs	r2, #8
 8002d86:	2118      	movs	r1, #24
 8002d88:	2028      	movs	r0, #40	; 0x28
 8002d8a:	f001 fd3b 	bl	8004804 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8002d8e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2304      	movs	r3, #4
 8002d96:	2230      	movs	r2, #48	; 0x30
 8002d98:	2140      	movs	r1, #64	; 0x40
 8002d9a:	2014      	movs	r0, #20
 8002d9c:	f001 fd32 	bl	8004804 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8002da0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2308      	movs	r3, #8
 8002da8:	2204      	movs	r2, #4
 8002daa:	2144      	movs	r1, #68	; 0x44
 8002dac:	2014      	movs	r0, #20
 8002dae:	f001 fd29 	bl	8004804 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8002db2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2308      	movs	r3, #8
 8002dba:	2204      	movs	r2, #4
 8002dbc:	2144      	movs	r1, #68	; 0x44
 8002dbe:	2040      	movs	r0, #64	; 0x40
 8002dc0:	f001 fd20 	bl	8004804 <Displ_FillArea>
	if(!connected){
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <displayMultiplayerIcon+0xc4>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d112      	bne.n	8002df2 <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8002dcc:	2318      	movs	r3, #24
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	e00c      	b.n	8002dec <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2304      	movs	r3, #4
 8002dde:	2208      	movs	r2, #8
 8002de0:	2028      	movs	r0, #40	; 0x28
 8002de2:	f001 fd0f 	bl	8004804 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3308      	adds	r3, #8
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b3f      	cmp	r3, #63	; 0x3f
 8002df0:	ddef      	ble.n	8002dd2 <displayMultiplayerIcon+0x9a>
		}
	}
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200020a5 	.word	0x200020a5

08002e00 <displayBricksIcon>:

void displayBricksIcon(){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 8002e06:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	2214      	movs	r2, #20
 8002e10:	2140      	movs	r1, #64	; 0x40
 8002e12:	2068      	movs	r0, #104	; 0x68
 8002e14:	f001 fcf6 	bl	8004804 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8002e18:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2340      	movs	r3, #64	; 0x40
 8002e20:	2204      	movs	r2, #4
 8002e22:	210c      	movs	r1, #12
 8002e24:	205c      	movs	r0, #92	; 0x5c
 8002e26:	f001 fced 	bl	8004804 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8002e2a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2340      	movs	r3, #64	; 0x40
 8002e32:	2204      	movs	r2, #4
 8002e34:	210c      	movs	r1, #12
 8002e36:	2090      	movs	r0, #144	; 0x90
 8002e38:	f001 fce4 	bl	8004804 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 8002e3c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2304      	movs	r3, #4
 8002e44:	2204      	movs	r2, #4
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	2068      	movs	r0, #104	; 0x68
 8002e4a:	f001 fcdb 	bl	8004804 <Displ_FillArea>
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <displaySpaceIcon>:

void displaySpaceIcon(){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8002e5a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2310      	movs	r3, #16
 8002e62:	2204      	movs	r2, #4
 8002e64:	2134      	movs	r1, #52	; 0x34
 8002e66:	20b4      	movs	r0, #180	; 0xb4
 8002e68:	f001 fccc 	bl	8004804 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8002e6c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2310      	movs	r3, #16
 8002e74:	2204      	movs	r2, #4
 8002e76:	2134      	movs	r1, #52	; 0x34
 8002e78:	20c4      	movs	r0, #196	; 0xc4
 8002e7a:	f001 fcc3 	bl	8004804 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 8002e7e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2304      	movs	r3, #4
 8002e86:	220c      	movs	r2, #12
 8002e88:	2138      	movs	r1, #56	; 0x38
 8002e8a:	20b8      	movs	r0, #184	; 0xb8
 8002e8c:	f001 fcba 	bl	8004804 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 8002e90:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2310      	movs	r3, #16
 8002e98:	2204      	movs	r2, #4
 8002e9a:	2130      	movs	r1, #48	; 0x30
 8002e9c:	20bc      	movs	r0, #188	; 0xbc
 8002e9e:	f001 fcb1 	bl	8004804 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8002ea2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	220c      	movs	r2, #12
 8002eac:	2118      	movs	r1, #24
 8002eae:	20c0      	movs	r0, #192	; 0xc0
 8002eb0:	f001 fca8 	bl	8004804 <Displ_FillArea>
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <check_availability>:

uint8_t emulate = 1;
uint8_t connected = 0;


void check_availability(){
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
    //QD << "(mockup) is player 2 there?";  // change to uart debug
    if(emulate /*or answer was received */){
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <check_availability+0x1c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <check_availability+0x12>
        connected = 1;
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <check_availability+0x20>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
        // QD << "(mockup) player 2 connected";  // change to uart debug
    }
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	2000002d 	.word	0x2000002d
 8002edc:	200020a5 	.word	0x200020a5

08002ee0 <toggle_multiplayer>:

void toggle_multiplayer(){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
    if(connected){
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <toggle_multiplayer+0x1c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <toggle_multiplayer+0x14>
        //QD << "(mockup) stoping multiplayer";  // change to uart debug
        connected = 0;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <toggle_multiplayer+0x1c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
    }else{
        //QD << "(mockup) starting multiplayer";  // change to uart debug
        check_availability();
    }

}
 8002ef2:	e001      	b.n	8002ef8 <toggle_multiplayer+0x18>
        check_availability();
 8002ef4:	f7ff ffe2 	bl	8002ebc <check_availability>
}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200020a5 	.word	0x200020a5

08002f00 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
    money = 0;
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <initSpaceInvaders+0x6c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
    lives = 3;
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <initSpaceInvaders+0x70>)
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 8002f10:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8002f14:	f001 fe2a 	bl	8004b6c <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 8002f18:	f002 fa94 	bl	8005444 <HAL_GetTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f006 f904 	bl	800912c <srand>
    comet_delay = rand() % ((20 + 1) - 5) + 5;
 8002f24:	f006 f930 	bl	8009188 <rand>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	425a      	negs	r2, r3
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	f002 020f 	and.w	r2, r2, #15
 8002f34:	bf58      	it	pl
 8002f36:	4253      	negpl	r3, r2
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	3305      	adds	r3, #5
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <initSpaceInvaders+0x74>)
 8002f40:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 8002f42:	f000 f81f 	bl	8002f84 <initSpaceShip>
    initAmmo(&ammo,0);
 8002f46:	2100      	movs	r1, #0
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <initSpaceInvaders+0x78>)
 8002f4a:	f000 f827 	bl	8002f9c <initAmmo>
    if(in_multiplayer){
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <initSpaceInvaders+0x7c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 8002f56:	2101      	movs	r1, #1
 8002f58:	4809      	ldr	r0, [pc, #36]	; (8002f80 <initSpaceInvaders+0x80>)
 8002f5a:	f000 f81f 	bl	8002f9c <initAmmo>
    }
    initComets();
 8002f5e:	f000 f845 	bl	8002fec <initComets>
    initStars();
 8002f62:	f000 f86d 	bl	8003040 <initStars>
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000210c 	.word	0x2000210c
 8002f70:	2000002e 	.word	0x2000002e
 8002f74:	20002110 	.word	0x20002110
 8002f78:	200020a8 	.word	0x200020a8
 8002f7c:	20000035 	.word	0x20000035
 8002f80:	200020b8 	.word	0x200020b8

08002f84 <initSpaceShip>:

void initSpaceShip(){
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <initSpaceShip+0x14>)
 8002f8a:	2228      	movs	r2, #40	; 0x28
 8002f8c:	701a      	strb	r2, [r3, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	20000030 	.word	0x20000030

08002f9c <initAmmo>:

void initAmmo(bullets *am,int enemy){
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b25a      	sxtb	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e00e      	b.n	8002fd8 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	dded      	ble.n	8002fba <initAmmo+0x1e>
    }
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <initComets>:

void initComets(){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <initComets+0x50>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	e014      	b.n	8003028 <initComets+0x3c>
        Comet.comet_ar[i].x = -1;
 8002ffe:	4a0f      	ldr	r2, [pc, #60]	; (800303c <initComets+0x50>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[i].y = -1;
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <initComets+0x50>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[i].size = 2;
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <initComets+0x50>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	2202      	movs	r2, #2
 8003020:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3301      	adds	r3, #1
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b09      	cmp	r3, #9
 800302c:	dde7      	ble.n	8002ffe <initComets+0x12>
    }
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	200020c8 	.word	0x200020c8

08003040 <initStars>:

void initStars(){
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <initStars+0x44>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 800304c:	2300      	movs	r3, #0
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	e00e      	b.n	8003070 <initStars+0x30>
        Star.star_ar[i].x = -1;
 8003052:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <initStars+0x44>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	22ff      	movs	r2, #255	; 0xff
 800305c:	705a      	strb	r2, [r3, #1]
        Star.star_ar[i].y = -1;
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <initStars+0x44>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	22ff      	movs	r2, #255	; 0xff
 8003068:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3301      	adds	r3, #1
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b09      	cmp	r3, #9
 8003074:	dded      	ble.n	8003052 <initStars+0x12>
    }
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	200020f4 	.word	0x200020f4

08003088 <spawnComet>:

void spawnComet(){
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 800308c:	4b3f      	ldr	r3, [pc, #252]	; (800318c <spawnComet+0x104>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d172      	bne.n	800317a <spawnComet+0xf2>
 8003094:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <spawnComet+0x108>)
 8003096:	f993 3000 	ldrsb.w	r3, [r3]
 800309a:	2b09      	cmp	r3, #9
 800309c:	dc6d      	bgt.n	800317a <spawnComet+0xf2>
        Comet.comet_ar[Comet.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 800309e:	f006 f873 	bl	8009188 <rand>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <spawnComet+0x10c>)
 80030a6:	fb83 2301 	smull	r2, r3, r3, r1
 80030aa:	115a      	asrs	r2, r3, #5
 80030ac:	17cb      	asrs	r3, r1, #31
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	1aca      	subs	r2, r1, r3
 80030bc:	b2d3      	uxtb	r3, r2
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <spawnComet+0x108>)
 80030c0:	f992 2000 	ldrsb.w	r2, [r2]
 80030c4:	4610      	mov	r0, r2
 80030c6:	3305      	adds	r3, #5
 80030c8:	b2d9      	uxtb	r1, r3
 80030ca:	4a31      	ldr	r2, [pc, #196]	; (8003190 <spawnComet+0x108>)
 80030cc:	0083      	lsls	r3, r0, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	460a      	mov	r2, r1
 80030d2:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[Comet.in_play].y = 0;
 80030d4:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <spawnComet+0x108>)
 80030d6:	f993 3000 	ldrsb.w	r3, [r3]
 80030da:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <spawnComet+0x108>)
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	2200      	movs	r2, #0
 80030e2:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[Comet.in_play].size = rand() % ((MAX_COMET_SIZE + 1) - MIN_COMET_SIZE) + MIN_COMET_SIZE;
 80030e4:	f006 f850 	bl	8009188 <rand>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <spawnComet+0x110>)
 80030ec:	fb83 3102 	smull	r3, r1, r3, r2
 80030f0:	17d3      	asrs	r3, r2, #31
 80030f2:	1ac9      	subs	r1, r1, r3
 80030f4:	460b      	mov	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	440b      	add	r3, r1
 80030fa:	1ad1      	subs	r1, r2, r3
 80030fc:	b2cb      	uxtb	r3, r1
 80030fe:	3302      	adds	r3, #2
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b23      	ldr	r3, [pc, #140]	; (8003190 <spawnComet+0x108>)
 8003104:	f993 3000 	ldrsb.w	r3, [r3]
 8003108:	b251      	sxtb	r1, r2
 800310a:	4a21      	ldr	r2, [pc, #132]	; (8003190 <spawnComet+0x108>)
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	460a      	mov	r2, r1
 8003112:	70da      	strb	r2, [r3, #3]

        Comet.comet_ar[Comet.in_play].coins = 7 - Comet.comet_ar[Comet.in_play].size;
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <spawnComet+0x108>)
 8003116:	f993 3000 	ldrsb.w	r3, [r3]
 800311a:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <spawnComet+0x108>)
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <spawnComet+0x108>)
 800312e:	f993 3000 	ldrsb.w	r3, [r3]
 8003132:	b251      	sxtb	r1, r2
 8003134:	4a16      	ldr	r2, [pc, #88]	; (8003190 <spawnComet+0x108>)
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	460a      	mov	r2, r1
 800313c:	711a      	strb	r2, [r3, #4]
        comet_delay = rand() % ((20 + 1) - 10) + 5;
 800313e:	f006 f823 	bl	8009188 <rand>
 8003142:	4601      	mov	r1, r0
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <spawnComet+0x114>)
 8003146:	fb83 2301 	smull	r2, r3, r3, r1
 800314a:	105a      	asrs	r2, r3, #1
 800314c:	17cb      	asrs	r3, r1, #31
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	1aca      	subs	r2, r1, r3
 800315c:	b2d3      	uxtb	r3, r2
 800315e:	3305      	adds	r3, #5
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <spawnComet+0x104>)
 8003164:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <spawnComet+0x108>)
 8003168:	f993 3000 	ldrsb.w	r3, [r3]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	3301      	adds	r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	b25a      	sxtb	r2, r3
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <spawnComet+0x108>)
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e006      	b.n	8003188 <spawnComet+0x100>
    }else{
        comet_delay--;
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <spawnComet+0x104>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	3b01      	subs	r3, #1
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4b02      	ldr	r3, [pc, #8]	; (800318c <spawnComet+0x104>)
 8003184:	701a      	strb	r2, [r3, #0]
    }

}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20002110 	.word	0x20002110
 8003190:	200020c8 	.word	0x200020c8
 8003194:	76b981db 	.word	0x76b981db
 8003198:	55555556 	.word	0x55555556
 800319c:	2e8ba2e9 	.word	0x2e8ba2e9

080031a0 <spawnBullet>:

void spawnBullet(int enemy){
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <spawnBullet+0x98>)
 80031aa:	f993 3000 	ldrsb.w	r3, [r3]
 80031ae:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <spawnBullet+0x98>)
 80031b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80031b6:	3b03      	subs	r3, #3
 80031b8:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <spawnBullet+0x26>
        am_p = &enemy_ammo;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <spawnBullet+0x9c>)
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e001      	b.n	80031ca <spawnBullet+0x2a>
    }else{
        am_p = &ammo;
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <spawnBullet+0xa0>)
 80031c8:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	dc2a      	bgt.n	800322a <spawnBullet+0x8a>
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <spawnBullet+0xa4>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d126      	bne.n	800322a <spawnBullet+0x8a>
        if(am_p->enemy){
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f993 3000 	ldrsb.w	r3, [r3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <spawnBullet+0x4a>
            //x_val = read the input from multiplayer;
            y_val = 3;
 80031e6:	2303      	movs	r3, #3
 80031e8:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	b251      	sxtb	r1, r2
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	460a      	mov	r2, r1
 80031fc:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	b251      	sxtb	r1, r2
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	460a      	mov	r2, r1
 8003210:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	b25a      	sxtb	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <spawnBullet+0xa4>)
 8003226:	220a      	movs	r2, #10
 8003228:	701a      	strb	r2, [r3, #0]
    }
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000030 	.word	0x20000030
 800323c:	200020b8 	.word	0x200020b8
 8003240:	200020a8 	.word	0x200020a8
 8003244:	20002109 	.word	0x20002109

08003248 <spawnStar>:

void spawnStar(){
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 800324c:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <spawnStar+0xac>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d145      	bne.n	80032e0 <spawnStar+0x98>
 8003254:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <spawnStar+0xb0>)
 8003256:	f993 3000 	ldrsb.w	r3, [r3]
 800325a:	2b09      	cmp	r3, #9
 800325c:	dc40      	bgt.n	80032e0 <spawnStar+0x98>
        Star.star_ar[Star.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 800325e:	f005 ff93 	bl	8009188 <rand>
 8003262:	4601      	mov	r1, r0
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <spawnStar+0xb4>)
 8003266:	fb83 2301 	smull	r2, r3, r3, r1
 800326a:	115a      	asrs	r2, r3, #5
 800326c:	17cb      	asrs	r3, r1, #31
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	1aca      	subs	r2, r1, r3
 800327c:	b2d3      	uxtb	r3, r2
 800327e:	3305      	adds	r3, #5
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <spawnStar+0xb0>)
 8003284:	f993 3000 	ldrsb.w	r3, [r3]
 8003288:	b251      	sxtb	r1, r2
 800328a:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <spawnStar+0xb0>)
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	460a      	mov	r2, r1
 8003292:	705a      	strb	r2, [r3, #1]
        Star.star_ar[Star.in_play].y = 0;
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <spawnStar+0xb0>)
 8003296:	f993 3000 	ldrsb.w	r3, [r3]
 800329a:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <spawnStar+0xb0>)
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	2200      	movs	r2, #0
 80032a2:	709a      	strb	r2, [r3, #2]
        star_delay = rand() % ((20 + 1) - 10) + 5;
 80032a4:	f005 ff70 	bl	8009188 <rand>
 80032a8:	4601      	mov	r1, r0
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <spawnStar+0xb8>)
 80032ac:	fb83 2301 	smull	r2, r3, r3, r1
 80032b0:	105a      	asrs	r2, r3, #1
 80032b2:	17cb      	asrs	r3, r1, #31
 80032b4:	1ad2      	subs	r2, r2, r3
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	1aca      	subs	r2, r1, r3
 80032c2:	b2d3      	uxtb	r3, r2
 80032c4:	3305      	adds	r3, #5
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <spawnStar+0xac>)
 80032ca:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <spawnStar+0xb0>)
 80032ce:	f993 3000 	ldrsb.w	r3, [r3]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	b25a      	sxtb	r2, r3
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <spawnStar+0xb0>)
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e006      	b.n	80032ee <spawnStar+0xa6>
    }else{
        star_delay--;
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <spawnStar+0xac>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b02      	ldr	r3, [pc, #8]	; (80032f4 <spawnStar+0xac>)
 80032ea:	701a      	strb	r2, [r3, #0]
    }
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20002111 	.word	0x20002111
 80032f8:	200020f4 	.word	0x200020f4
 80032fc:	76b981db 	.word	0x76b981db
 8003300:	2e8ba2e9 	.word	0x2e8ba2e9

08003304 <moveBullets>:

void moveBullets(){
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 800330a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800330e:	f000 fc37 	bl	8003b80 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e09c      	b.n	8003452 <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	e040      	b.n	80033a0 <moveBullets+0x9c>
			if(ammo.bullet_ar[i].x >= Comet.comet_ar[j].x && ammo.bullet_ar[i].x < Comet.comet_ar[j].x + Comet.comet_ar[j].size){
 800331e:	4a55      	ldr	r2, [pc, #340]	; (8003474 <moveBullets+0x170>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800332a:	4619      	mov	r1, r3
 800332c:	4a52      	ldr	r2, [pc, #328]	; (8003478 <moveBullets+0x174>)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	4299      	cmp	r1, r3
 8003338:	db2f      	blt.n	800339a <moveBullets+0x96>
 800333a:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <moveBullets+0x170>)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003346:	4619      	mov	r1, r3
 8003348:	4a4b      	ldr	r2, [pc, #300]	; (8003478 <moveBullets+0x174>)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	4618      	mov	r0, r3
 8003354:	4a48      	ldr	r2, [pc, #288]	; (8003478 <moveBullets+0x174>)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003360:	4403      	add	r3, r0
 8003362:	4299      	cmp	r1, r3
 8003364:	da19      	bge.n	800339a <moveBullets+0x96>
				if (ammo.bullet_ar[i].y <= Comet.comet_ar[j].y + Comet.comet_ar[j].size - 1){
 8003366:	4a44      	ldr	r2, [pc, #272]	; (8003478 <moveBullets+0x174>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	789b      	ldrb	r3, [r3, #2]
 8003370:	4619      	mov	r1, r3
 8003372:	4a41      	ldr	r2, [pc, #260]	; (8003478 <moveBullets+0x174>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800337e:	18ca      	adds	r2, r1, r3
 8003380:	493c      	ldr	r1, [pc, #240]	; (8003474 <moveBullets+0x170>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	440b      	add	r3, r1
 8003388:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800338c:	429a      	cmp	r2, r3
 800338e:	dd04      	ble.n	800339a <moveBullets+0x96>
					//QD << "hit a comet";
					hitComet(i,j);
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fb20 	bl	80039d8 <hitComet>
					continue;
 8003398:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3301      	adds	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <moveBullets+0x174>)
 80033a2:	f993 3000 	ldrsb.w	r3, [r3]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dbb7      	blt.n	800331e <moveBullets+0x1a>
				}
			}

		}
		ammo.bullet_ar[i].y--;
 80033ae:	4a31      	ldr	r2, [pc, #196]	; (8003474 <moveBullets+0x170>)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	b259      	sxtb	r1, r3
 80033c2:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <moveBullets+0x170>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	460a      	mov	r2, r1
 80033cc:	70da      	strb	r2, [r3, #3]
		if (ammo.bullet_ar[i].y < 0){
 80033ce:	4a29      	ldr	r2, [pc, #164]	; (8003474 <moveBullets+0x170>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4413      	add	r3, r2
 80033d6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da36      	bge.n	800344c <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);
 80033de:	4a25      	ldr	r2, [pc, #148]	; (8003474 <moveBullets+0x170>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	885a      	ldrh	r2, [r3, #2]
 80033e8:	2300      	movs	r3, #0
 80033ea:	f362 030f 	bfi	r3, r2, #0, #16
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fd6e 	bl	8003ed0 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	e01c      	b.n	8003434 <moveBullets+0x130>
				ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <moveBullets+0x170>)
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <moveBullets+0x170>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	460a      	mov	r2, r1
 8003412:	709a      	strb	r2, [r3, #2]
				ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3301      	adds	r3, #1
 8003418:	4a16      	ldr	r2, [pc, #88]	; (8003474 <moveBullets+0x170>)
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003422:	4a14      	ldr	r2, [pc, #80]	; (8003474 <moveBullets+0x170>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	460a      	mov	r2, r1
 800342c:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3301      	adds	r3, #1
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b04      	cmp	r3, #4
 8003438:	dddf      	ble.n	80033fa <moveBullets+0xf6>
			}
			ammo.in_play--;
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <moveBullets+0x170>)
 800343c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b2db      	uxtb	r3, r3
 8003446:	b25a      	sxtb	r2, r3
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <moveBullets+0x170>)
 800344a:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <moveBullets+0x170>)
 8003454:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003458:	461a      	mov	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4293      	cmp	r3, r2
 800345e:	f6ff af5b 	blt.w	8003318 <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 8003462:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003466:	f000 fb8b 	bl	8003b80 <displayAmmo>
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200020a8 	.word	0x200020a8
 8003478:	200020c8 	.word	0x200020c8

0800347c <moveEnemyBullets>:

void moveEnemyBullets(void){
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 8003482:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <moveEnemyBullets+0x180>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80b4 	beq.w	80035f4 <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 800348c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003490:	f000 fb76 	bl	8003b80 <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e09f      	b.n	80035da <moveEnemyBullets+0x15e>
        if(enemy_ammo.bullet_ar[i].x <= SpaceShip.x + SPACESHIP_WIDTH / 2 && enemy_ammo.bullet_ar[i].x >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <moveEnemyBullets+0x184>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b56      	ldr	r3, [pc, #344]	; (8003604 <moveEnemyBullets+0x188>)
 80034aa:	f993 3000 	ldrsb.w	r3, [r3]
 80034ae:	3302      	adds	r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dc4b      	bgt.n	800354c <moveEnemyBullets+0xd0>
 80034b4:	4a52      	ldr	r2, [pc, #328]	; (8003600 <moveEnemyBullets+0x184>)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b50      	ldr	r3, [pc, #320]	; (8003604 <moveEnemyBullets+0x188>)
 80034c4:	f993 3000 	ldrsb.w	r3, [r3]
 80034c8:	3b02      	subs	r3, #2
 80034ca:	429a      	cmp	r2, r3
 80034cc:	db3e      	blt.n	800354c <moveEnemyBullets+0xd0>
            if (enemy_ammo.bullet_ar[i].y >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 80034ce:	4a4c      	ldr	r2, [pc, #304]	; (8003600 <moveEnemyBullets+0x184>)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b49      	ldr	r3, [pc, #292]	; (8003604 <moveEnemyBullets+0x188>)
 80034de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80034e2:	3b02      	subs	r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	db31      	blt.n	800354c <moveEnemyBullets+0xd0>
 80034e8:	4b47      	ldr	r3, [pc, #284]	; (8003608 <moveEnemyBullets+0x18c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d12d      	bne.n	800354c <moveEnemyBullets+0xd0>
                beenHit();
 80034f0:	f000 fcce 	bl	8003e90 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	e01c      	b.n	8003534 <moveEnemyBullets+0xb8>
                    enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	3301      	adds	r3, #1
 80034fe:	4a40      	ldr	r2, [pc, #256]	; (8003600 <moveEnemyBullets+0x184>)
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003508:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <moveEnemyBullets+0x184>)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	460a      	mov	r2, r1
 8003512:	709a      	strb	r2, [r3, #2]
                    enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3301      	adds	r3, #1
 8003518:	4a39      	ldr	r2, [pc, #228]	; (8003600 <moveEnemyBullets+0x184>)
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003522:	4a37      	ldr	r2, [pc, #220]	; (8003600 <moveEnemyBullets+0x184>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	460a      	mov	r2, r1
 800352c:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3301      	adds	r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b04      	cmp	r3, #4
 8003538:	dddf      	ble.n	80034fa <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <moveEnemyBullets+0x184>)
 800353c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	b25a      	sxtb	r2, r3
 8003548:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <moveEnemyBullets+0x184>)
 800354a:	705a      	strb	r2, [r3, #1]
            }
        }
        enemy_ammo.bullet_ar[i].y++;
 800354c:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <moveEnemyBullets+0x184>)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3301      	adds	r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	b259      	sxtb	r1, r3
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <moveEnemyBullets+0x184>)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	460a      	mov	r2, r1
 800356a:	70da      	strb	r2, [r3, #3]
        if (enemy_ammo.bullet_ar[i].y > SCREEN_HEIGHT - 1){
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <moveEnemyBullets+0x184>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003578:	2b3b      	cmp	r3, #59	; 0x3b
 800357a:	dd2b      	ble.n	80035d4 <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	e01c      	b.n	80035bc <moveEnemyBullets+0x140>
                enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3301      	adds	r3, #1
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <moveEnemyBullets+0x184>)
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003590:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <moveEnemyBullets+0x184>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	460a      	mov	r2, r1
 800359a:	709a      	strb	r2, [r3, #2]
                enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3301      	adds	r3, #1
 80035a0:	4a17      	ldr	r2, [pc, #92]	; (8003600 <moveEnemyBullets+0x184>)
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <moveEnemyBullets+0x184>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	460a      	mov	r2, r1
 80035b4:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3301      	adds	r3, #1
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	dddf      	ble.n	8003582 <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <moveEnemyBullets+0x184>)
 80035c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	b25a      	sxtb	r2, r3
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <moveEnemyBullets+0x184>)
 80035d2:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <moveEnemyBullets+0x184>)
 80035dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	f6ff af58 	blt.w	800349a <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 80035ea:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80035ee:	f000 fac7 	bl	8003b80 <displayAmmo>
 80035f2:	e000      	b.n	80035f6 <moveEnemyBullets+0x17a>
        return;
 80035f4:	bf00      	nop
}
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000035 	.word	0x20000035
 8003600:	200020b8 	.word	0x200020b8
 8003604:	20000030 	.word	0x20000030
 8003608:	20001ecf 	.word	0x20001ecf

0800360c <moveComets>:

void moveComets(){
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003612:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003616:	f000 fb11 	bl	8003c3c <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e0f2      	b.n	8003806 <moveComets+0x1fa>
		for(int j = 0; j < Comet.comet_ar[i].size; j++){
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	e05f      	b.n	80036e6 <moveComets+0xda>
			if(Comet.comet_ar[i].x + j <= SpaceShip.x + SPACESHIP_WIDTH / 2 && Comet.comet_ar[i].x + j >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 8003626:	4a80      	ldr	r2, [pc, #512]	; (8003828 <moveComets+0x21c>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	441a      	add	r2, r3
 8003636:	4b7d      	ldr	r3, [pc, #500]	; (800382c <moveComets+0x220>)
 8003638:	f993 3000 	ldrsb.w	r3, [r3]
 800363c:	3302      	adds	r3, #2
 800363e:	429a      	cmp	r2, r3
 8003640:	dc4e      	bgt.n	80036e0 <moveComets+0xd4>
 8003642:	4a79      	ldr	r2, [pc, #484]	; (8003828 <moveComets+0x21c>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	441a      	add	r2, r3
 8003652:	4b76      	ldr	r3, [pc, #472]	; (800382c <moveComets+0x220>)
 8003654:	f993 3000 	ldrsb.w	r3, [r3]
 8003658:	3b02      	subs	r3, #2
 800365a:	429a      	cmp	r2, r3
 800365c:	db40      	blt.n	80036e0 <moveComets+0xd4>
				if(powerUp == 2 && Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2){
 800365e:	4b74      	ldr	r3, [pc, #464]	; (8003830 <moveComets+0x224>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11e      	bne.n	80036a4 <moveComets+0x98>
 8003666:	4a70      	ldr	r2, [pc, #448]	; (8003828 <moveComets+0x21c>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	789b      	ldrb	r3, [r3, #2]
 8003670:	4619      	mov	r1, r3
 8003672:	4a6d      	ldr	r2, [pc, #436]	; (8003828 <moveComets+0x21c>)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800367e:	18ca      	adds	r2, r1, r3
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <moveComets+0x220>)
 8003682:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003686:	3b01      	subs	r3, #1
 8003688:	429a      	cmp	r2, r3
 800368a:	db0b      	blt.n	80036a4 <moveComets+0x98>
					hitComet(420,i);
 800368c:	68f9      	ldr	r1, [r7, #12]
 800368e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003692:	f000 f9a1 	bl	80039d8 <hitComet>
					displayPowerup(DARK_GREY);
 8003696:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800369a:	f000 fcaf 	bl	8003ffc <displayPowerup>
					powerUp = 0;
 800369e:	4b64      	ldr	r3, [pc, #400]	; (8003830 <moveComets+0x224>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
				}
                if (Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 80036a4:	4a60      	ldr	r2, [pc, #384]	; (8003828 <moveComets+0x21c>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	789b      	ldrb	r3, [r3, #2]
 80036ae:	4619      	mov	r1, r3
 80036b0:	4a5d      	ldr	r2, [pc, #372]	; (8003828 <moveComets+0x21c>)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036bc:	18ca      	adds	r2, r1, r3
 80036be:	4b5b      	ldr	r3, [pc, #364]	; (800382c <moveComets+0x220>)
 80036c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	429a      	cmp	r2, r3
 80036c8:	db0a      	blt.n	80036e0 <moveComets+0xd4>
 80036ca:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <moveComets+0x228>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <moveComets+0xd4>
                    hitComet(420,i);
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80036d8:	f000 f97e 	bl	80039d8 <hitComet>
                    beenHit();
 80036dc:	f000 fbd8 	bl	8003e90 <beenHit>
		for(int j = 0; j < Comet.comet_ar[i].size; j++){
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3301      	adds	r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	4a50      	ldr	r2, [pc, #320]	; (8003828 <moveComets+0x21c>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4293      	cmp	r3, r2
 80036f8:	db95      	blt.n	8003626 <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= Comet.comet_ar[i].x && SpaceShip.x <= Comet.comet_ar[i].x + Comet.comet_ar[i].size){
 80036fa:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <moveComets+0x224>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d133      	bne.n	800376a <moveComets+0x15e>
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <moveComets+0x220>)
 8003704:	f993 3000 	ldrsb.w	r3, [r3]
 8003708:	4619      	mov	r1, r3
 800370a:	4a47      	ldr	r2, [pc, #284]	; (8003828 <moveComets+0x21c>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	785b      	ldrb	r3, [r3, #1]
 8003714:	4299      	cmp	r1, r3
 8003716:	db28      	blt.n	800376a <moveComets+0x15e>
 8003718:	4b44      	ldr	r3, [pc, #272]	; (800382c <moveComets+0x220>)
 800371a:	f993 3000 	ldrsb.w	r3, [r3]
 800371e:	4619      	mov	r1, r3
 8003720:	4a41      	ldr	r2, [pc, #260]	; (8003828 <moveComets+0x21c>)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	4618      	mov	r0, r3
 800372c:	4a3e      	ldr	r2, [pc, #248]	; (8003828 <moveComets+0x21c>)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003738:	4403      	add	r3, r0
 800373a:	4299      	cmp	r1, r3
 800373c:	dc15      	bgt.n	800376a <moveComets+0x15e>
        	hitComet(420,i);
 800373e:	68f9      	ldr	r1, [r7, #12]
 8003740:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003744:	f000 f948 	bl	80039d8 <hitComet>
        	if(powerUp_delay == 0){
 8003748:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <moveComets+0x22c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d106      	bne.n	800375e <moveComets+0x152>
        		displayPowerup(DARK_GREY);
 8003750:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003754:	f000 fc52 	bl	8003ffc <displayPowerup>
        		powerUp = 0;
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <moveComets+0x224>)
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <moveComets+0x22c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	3b01      	subs	r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b34      	ldr	r3, [pc, #208]	; (8003838 <moveComets+0x22c>)
 8003768:	701a      	strb	r2, [r3, #0]
        }
        Comet.comet_ar[i].y++;
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <moveComets+0x21c>)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	789b      	ldrb	r3, [r3, #2]
 8003774:	3301      	adds	r3, #1
 8003776:	b2d9      	uxtb	r1, r3
 8003778:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <moveComets+0x21c>)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	460a      	mov	r2, r1
 8003782:	709a      	strb	r2, [r3, #2]
        if (Comet.comet_ar[i].y > SCREEN_HEIGHT - 1){
 8003784:	4a28      	ldr	r2, [pc, #160]	; (8003828 <moveComets+0x21c>)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	789b      	ldrb	r3, [r3, #2]
 800378e:	2b3b      	cmp	r3, #59	; 0x3b
 8003790:	d936      	bls.n	8003800 <moveComets+0x1f4>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	e027      	b.n	80037e8 <moveComets+0x1dc>
                Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3301      	adds	r3, #1
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <moveComets+0x21c>)
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	7859      	ldrb	r1, [r3, #1]
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <moveComets+0x21c>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	460a      	mov	r2, r1
 80037ae:	705a      	strb	r2, [r3, #1]
                Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <moveComets+0x21c>)
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	7899      	ldrb	r1, [r3, #2]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <moveComets+0x21c>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	460a      	mov	r2, r1
 80037c6:	709a      	strb	r2, [r3, #2]
                Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3301      	adds	r3, #1
 80037cc:	4a16      	ldr	r2, [pc, #88]	; (8003828 <moveComets+0x21c>)
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <moveComets+0x21c>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	460a      	mov	r2, r1
 80037e0:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3301      	adds	r3, #1
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	ddd4      	ble.n	8003798 <moveComets+0x18c>
            }
            Comet.in_play--;
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <moveComets+0x21c>)
 80037f0:	f993 3000 	ldrsb.w	r3, [r3]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	b25a      	sxtb	r2, r3
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <moveComets+0x21c>)
 80037fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3301      	adds	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <moveComets+0x21c>)
 8003808:	f993 3000 	ldrsb.w	r3, [r3]
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4293      	cmp	r3, r2
 8003812:	f6ff af05 	blt.w	8003620 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8003816:	f249 6096 	movw	r0, #38550	; 0x9696
 800381a:	f000 fa0f 	bl	8003c3c <displayComets>
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200020c8 	.word	0x200020c8
 800382c:	20000030 	.word	0x20000030
 8003830:	20002112 	.word	0x20002112
 8003834:	20001ecf 	.word	0x20001ecf
 8003838:	20002113 	.word	0x20002113

0800383c <moveStars>:

void moveStars(){
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 8003842:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003846:	f000 f969 	bl	8003b1c <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	e046      	b.n	80038de <moveStars+0xa2>
        Star.star_ar[i].y++;
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <moveStars+0xc0>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	3301      	adds	r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	b259      	sxtb	r1, r3
 8003864:	4a25      	ldr	r2, [pc, #148]	; (80038fc <moveStars+0xc0>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	460a      	mov	r2, r1
 800386e:	709a      	strb	r2, [r3, #2]
        if (Star.star_ar[i].y > SCREEN_HEIGHT - 4){
 8003870:	4a22      	ldr	r2, [pc, #136]	; (80038fc <moveStars+0xc0>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800387c:	2b38      	cmp	r3, #56	; 0x38
 800387e:	dd2b      	ble.n	80038d8 <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	e01c      	b.n	80038c0 <moveStars+0x84>
                Star.star_ar[j].x = Star.star_ar[j+1].x;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <moveStars+0xc0>)
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <moveStars+0xc0>)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	460a      	mov	r2, r1
 800389e:	705a      	strb	r2, [r3, #1]
                Star.star_ar[j].y = Star.star_ar[j+1].y;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <moveStars+0xc0>)
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <moveStars+0xc0>)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	460a      	mov	r2, r1
 80038b8:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	dddf      	ble.n	8003886 <moveStars+0x4a>
            }
            Star.in_play--;
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <moveStars+0xc0>)
 80038c8:	f993 3000 	ldrsb.w	r3, [r3]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	b25a      	sxtb	r2, r3
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <moveStars+0xc0>)
 80038d6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3301      	adds	r3, #1
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <moveStars+0xc0>)
 80038e0:	f993 3000 	ldrsb.w	r3, [r3]
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	dbb1      	blt.n	8003850 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 80038ec:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80038f0:	f000 f914 	bl	8003b1c <displayStars>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200020f4 	.word	0x200020f4

08003900 <moveSpaceship>:

void moveSpaceship(int direction){
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 8003908:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800390c:	f000 f9d6 	bl	8003cbc <displaySpaceShip>
	if(powerUp > 0){
 8003910:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <moveSpaceship+0xcc>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 8003918:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800391c:	f000 fb6e 	bl	8003ffc <displayPowerup>
	}
    if(direction < 0){
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	da26      	bge.n	8003974 <moveSpaceship+0x74>
        SpaceShip.x--;
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <moveSpaceship+0xd0>)
 8003928:	f993 3000 	ldrsb.w	r3, [r3]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b25a      	sxtb	r2, r3
 8003934:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <moveSpaceship+0xd0>)
 8003936:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <moveSpaceship+0xd0>)
 800393a:	f993 3000 	ldrsb.w	r3, [r3]
 800393e:	2b01      	cmp	r3, #1
 8003940:	dc02      	bgt.n	8003948 <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8003942:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <moveSpaceship+0xd0>)
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8003948:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <moveSpaceship+0xd4>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f9b5 	bl	8003cbc <displaySpaceShip>
        if(powerUp == 1){
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <moveSpaceship+0xcc>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d103      	bne.n	8003962 <moveSpaceship+0x62>
        	displayPowerup(RED);
 800395a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800395e:	f000 fb4d 	bl	8003ffc <displayPowerup>
        }
        if(powerUp == 2){
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <moveSpaceship+0xcc>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d12b      	bne.n	80039c2 <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 800396a:	f24f 70db 	movw	r0, #63451	; 0xf7db
 800396e:	f000 fb45 	bl	8003ffc <displayPowerup>
        }
        return;
 8003972:	e026      	b.n	80039c2 <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <moveSpaceship+0xd0>)
 8003976:	f993 3000 	ldrsb.w	r3, [r3]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	b25a      	sxtb	r2, r3
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <moveSpaceship+0xd0>)
 8003984:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <moveSpaceship+0xd0>)
 8003988:	f993 3000 	ldrsb.w	r3, [r3]
 800398c:	2b4d      	cmp	r3, #77	; 0x4d
 800398e:	dd02      	ble.n	8003996 <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <moveSpaceship+0xd0>)
 8003992:	224d      	movs	r2, #77	; 0x4d
 8003994:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <moveSpaceship+0xd4>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f98e 	bl	8003cbc <displaySpaceShip>
    if(powerUp == 1){
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <moveSpaceship+0xcc>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d103      	bne.n	80039b0 <moveSpaceship+0xb0>
    	displayPowerup(RED);
 80039a8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80039ac:	f000 fb26 	bl	8003ffc <displayPowerup>
    }
	if(powerUp == 2){
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <moveSpaceship+0xcc>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d105      	bne.n	80039c4 <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 80039b8:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80039bc:	f000 fb1e 	bl	8003ffc <displayPowerup>
 80039c0:	e000      	b.n	80039c4 <moveSpaceship+0xc4>
        return;
 80039c2:	bf00      	nop
	}
}
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20002112 	.word	0x20002112
 80039d0:	20000030 	.word	0x20000030
 80039d4:	20000032 	.word	0x20000032

080039d8 <hitComet>:

void hitComet(int bul,int com){
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b087      	sub	sp, #28
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
    money += Comet.comet_ar[com].coins;
 80039e2:	4a4b      	ldr	r2, [pc, #300]	; (8003b10 <hitComet+0x138>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b48      	ldr	r3, [pc, #288]	; (8003b14 <hitComet+0x13c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4413      	add	r3, r2
 80039f6:	4a47      	ldr	r2, [pc, #284]	; (8003b14 <hitComet+0x13c>)
 80039f8:	6013      	str	r3, [r2, #0]
    Displ_FillArea(Comet.comet_ar[com].x * 4, Comet.comet_ar[com].y * 4, Comet.comet_ar[com].size * 4, Comet.comet_ar[com].size * 4, DARK_GREY);
 80039fa:	4a45      	ldr	r2, [pc, #276]	; (8003b10 <hitComet+0x138>)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	b298      	uxth	r0, r3
 8003a0a:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <hitComet+0x138>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	789b      	ldrb	r3, [r3, #2]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	b299      	uxth	r1, r3
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <hitComet+0x138>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	4c38      	ldr	r4, [pc, #224]	; (8003b10 <hitComet+0x138>)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4423      	add	r3, r4
 8003a34:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8003a42:	9400      	str	r4, [sp, #0]
 8003a44:	f000 fede 	bl	8004804 <Displ_FillArea>
    if(bul != 420){
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8003a4e:	d024      	beq.n	8003a9a <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e01c      	b.n	8003a90 <hitComet+0xb8>
            ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <hitComet+0x140>)
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	; (8003b18 <hitComet+0x140>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	460a      	mov	r2, r1
 8003a6e:	709a      	strb	r2, [r3, #2]
            ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <hitComet+0x140>)
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003a7e:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <hitComet+0x140>)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	460a      	mov	r2, r1
 8003a88:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	dddf      	ble.n	8003a56 <hitComet+0x7e>
        }
        powerups();
 8003a96:	f000 fa6d 	bl	8003f74 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	e027      	b.n	8003af0 <hitComet+0x118>
        Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	; (8003b10 <hitComet+0x138>)
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	7859      	ldrb	r1, [r3, #1]
 8003aac:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <hitComet+0x138>)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3301      	adds	r3, #1
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <hitComet+0x138>)
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	7899      	ldrb	r1, [r3, #2]
 8003ac4:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <hitComet+0x138>)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	460a      	mov	r2, r1
 8003ace:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <hitComet+0x138>)
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003ade:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <hitComet+0x138>)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	ddd4      	ble.n	8003aa0 <hitComet+0xc8>
    }
    Comet.in_play--;
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <hitComet+0x138>)
 8003af8:	f993 3000 	ldrsb.w	r3, [r3]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	b25a      	sxtb	r2, r3
 8003b04:	4b02      	ldr	r3, [pc, #8]	; (8003b10 <hitComet+0x138>)
 8003b06:	701a      	strb	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}
 8003b10:	200020c8 	.word	0x200020c8
 8003b14:	2000210c 	.word	0x2000210c
 8003b18:	200020a8 	.word	0x200020a8

08003b1c <displayStars>:




void displayStars(uint16_t color){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	4603      	mov	r3, r0
 8003b24:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e01a      	b.n	8003b62 <displayStars+0x46>
    	Displ_FillArea(Star.star_ar[i].x * 4, Star.star_ar[i].y * 4, 4, 4, color);
 8003b2c:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <displayStars+0x60>)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	b298      	uxth	r0, r3
 8003b3e:	4a0f      	ldr	r2, [pc, #60]	; (8003b7c <displayStars+0x60>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	b299      	uxth	r1, r3
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2304      	movs	r3, #4
 8003b56:	2204      	movs	r2, #4
 8003b58:	f000 fe54 	bl	8004804 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <displayStars+0x60>)
 8003b64:	f993 3000 	ldrsb.w	r3, [r3]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	dbdd      	blt.n	8003b2c <displayStars+0x10>
    }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200020f4 	.word	0x200020f4

08003b80 <displayAmmo>:

void displayAmmo(uint16_t color){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	4603      	mov	r3, r0
 8003b88:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e01a      	b.n	8003bc6 <displayAmmo+0x46>
        Displ_FillArea(ammo.bullet_ar[i].x * 4, ammo.bullet_ar[i].y * 4, 4, 4, color);
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <displayAmmo+0xb0>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	b298      	uxth	r0, r3
 8003ba2:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <displayAmmo+0xb0>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	b299      	uxth	r1, r3
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2304      	movs	r3, #4
 8003bba:	2204      	movs	r2, #4
 8003bbc:	f000 fe22 	bl	8004804 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <displayAmmo+0xb0>)
 8003bc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	dbdd      	blt.n	8003b90 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8003bd4:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <displayAmmo+0xb4>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d025      	beq.n	8003c28 <displayAmmo+0xa8>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	e01b      	b.n	8003c1a <displayAmmo+0x9a>
            Displ_FillArea(enemy_ammo.bullet_ar[i].x * 4, enemy_ammo.bullet_ar[i].y * 4, 4, 4, LIGHT_BLUE);
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <displayAmmo+0xb8>)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	b298      	uxth	r0, r3
 8003bf4:	4a10      	ldr	r2, [pc, #64]	; (8003c38 <displayAmmo+0xb8>)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	b299      	uxth	r1, r3
 8003c06:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	2204      	movs	r2, #4
 8003c10:	f000 fdf8 	bl	8004804 <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <displayAmmo+0xb8>)
 8003c1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4293      	cmp	r3, r2
 8003c26:	dbdc      	blt.n	8003be2 <displayAmmo+0x62>
        }
    }
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200020a8 	.word	0x200020a8
 8003c34:	20000035 	.word	0x20000035
 8003c38:	200020b8 	.word	0x200020b8

08003c3c <displayComets>:

void displayComets(uint16_t color){
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	4603      	mov	r3, r0
 8003c44:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e029      	b.n	8003ca0 <displayComets+0x64>
        Displ_FillArea(Comet.comet_ar[i].x * 4, Comet.comet_ar[i].y  * 4, Comet.comet_ar[i].size * 4, Comet.comet_ar[i].size * 4, color);
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <displayComets+0x7c>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	b298      	uxth	r0, r3
 8003c5c:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <displayComets+0x7c>)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	789b      	ldrb	r3, [r3, #2]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	b299      	uxth	r1, r3
 8003c6c:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <displayComets+0x7c>)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	4c0e      	ldr	r4, [pc, #56]	; (8003cb8 <displayComets+0x7c>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4423      	add	r3, r4
 8003c86:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	b29c      	uxth	r4, r3
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	4623      	mov	r3, r4
 8003c96:	f000 fdb5 	bl	8004804 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <displayComets+0x7c>)
 8003ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4293      	cmp	r3, r2
 8003cac:	dbce      	blt.n	8003c4c <displayComets+0x10>
    }
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd90      	pop	{r4, r7, pc}
 8003cb8:	200020c8 	.word	0x200020c8

08003cbc <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <displaySpaceShip+0x80>)
 8003cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ccc:	3b02      	subs	r3, #2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	b298      	uxth	r0, r3
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2310      	movs	r3, #16
 8003cda:	2204      	movs	r2, #4
 8003cdc:	21d8      	movs	r1, #216	; 0xd8
 8003cde:	f000 fd91 	bl	8004804 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <displaySpaceShip+0x80>)
 8003ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ce8:	3302      	adds	r3, #2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	b298      	uxth	r0, r3
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	21d8      	movs	r1, #216	; 0xd8
 8003cfa:	f000 fd83 	bl	8004804 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <displaySpaceShip+0x80>)
 8003d00:	f993 3000 	ldrsb.w	r3, [r3]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	b298      	uxth	r0, r3
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2304      	movs	r3, #4
 8003d12:	220c      	movs	r2, #12
 8003d14:	21dc      	movs	r1, #220	; 0xdc
 8003d16:	f000 fd75 	bl	8004804 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <displaySpaceShip+0x80>)
 8003d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	b298      	uxth	r0, r3
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	21d4      	movs	r1, #212	; 0xd4
 8003d30:	f000 fd68 	bl	8004804 <Displ_FillArea>

}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000030 	.word	0x20000030

08003d40 <displayLives>:

void displayLives(){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	e013      	b.n	8003d74 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	0052      	lsls	r2, r2, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	b298      	uxth	r0, r3
 8003d5e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2304      	movs	r3, #4
 8003d66:	2204      	movs	r2, #4
 8003d68:	2108      	movs	r1, #8
 8003d6a:	f000 fd4b 	bl	8004804 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3301      	adds	r3, #1
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <displayLives+0x90>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	dbe5      	blt.n	8003d4c <displayLives+0xc>
    }
    if(lives < 3){
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <displayLives+0x90>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d81f      	bhi.n	8003dc8 <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 8003d88:	2300      	movs	r3, #0
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	e015      	b.n	8003dba <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f1c3 0303 	rsb	r3, r3, #3
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	0052      	lsls	r2, r2, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3308      	adds	r3, #8
 8003da2:	b298      	uxth	r0, r3
 8003da4:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2304      	movs	r3, #4
 8003dac:	2204      	movs	r2, #4
 8003dae:	2108      	movs	r1, #8
 8003db0:	f000 fd28 	bl	8004804 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	3301      	adds	r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <displayLives+0x90>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	f1c3 0303 	rsb	r3, r3, #3
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	dbe2      	blt.n	8003d8e <displayLives+0x4e>
    	}
    }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	2000002e 	.word	0x2000002e

08003dd4 <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <spaceShipHitColorToggle+0x84>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8003de0:	d112      	bne.n	8003e08 <spaceShipHitColorToggle+0x34>
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <spaceShipHitColorToggle+0x88>)
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <spaceShipHitColorToggle+0x8c>)
 8003de8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dec:	08d9      	lsrs	r1, r3, #3
 8003dee:	460b      	mov	r3, r1
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <spaceShipHitColorToggle+0x84>)
 8003e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e04:	801a      	strh	r2, [r3, #0]
 8003e06:	e011      	b.n	8003e2c <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 8003e08:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <spaceShipHitColorToggle+0x88>)
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <spaceShipHitColorToggle+0x8c>)
 8003e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e12:	08d9      	lsrs	r1, r3, #3
 8003e14:	460b      	mov	r3, r1
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <spaceShipHitColorToggle+0x84>)
 8003e26:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003e2a:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <spaceShipHitColorToggle+0x88>)
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <spaceShipHitColorToggle+0x90>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d206      	bcs.n	8003e46 <spaceShipHitColorToggle+0x72>
        hit++;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <spaceShipHitColorToggle+0x88>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <spaceShipHitColorToggle+0x88>)
 8003e42:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8003e44:	e002      	b.n	8003e4c <spaceShipHitColorToggle+0x78>
        hit = 0;
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <spaceShipHitColorToggle+0x88>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000032 	.word	0x20000032
 8003e5c:	20001ecf 	.word	0x20001ecf
 8003e60:	cccccccd 	.word	0xcccccccd
 8003e64:	20000034 	.word	0x20000034

08003e68 <delayBullet>:

void delayBullet(){
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <delayBullet+0x24>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <delayBullet+0x18>
        bullet_delay--;
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <delayBullet+0x24>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <delayBullet+0x24>)
 8003e7e:	701a      	strb	r2, [r3, #0]
    }
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20002109 	.word	0x20002109

08003e90 <beenHit>:

void beenHit(){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
    hit = 1;
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <beenHit+0x34>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
    lives--;
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <beenHit+0x38>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <beenHit+0x38>)
 8003ea4:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <beenHit+0x38>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d107      	bne.n	8003ebe <beenHit+0x2e>
        play = 0;
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <beenHit+0x3c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <beenHit+0x34>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 8003eba:	f7ff f821 	bl	8002f00 <initSpaceInvaders>

    }
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20001ecf 	.word	0x20001ecf
 8003ec8:	2000002e 	.word	0x2000002e
 8003ecc:	2000002f 	.word	0x2000002f

08003ed0 <send_Bullet>:

void send_Bullet(point bullet){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	80b8      	strh	r0, [r7, #4]
    if(connected && bullet.y != -2){
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <send_Bullet+0x94>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d03c      	beq.n	8003f5a <send_Bullet+0x8a>
 8003ee0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003ee4:	f113 0f02 	cmn.w	r3, #2
 8003ee8:	d037      	beq.n	8003f5a <send_Bullet+0x8a>
        //QD << "a bullet has been send to the other player at x:" << bullet.x;  // change to uart debug
        if(enemy_ammo.in_play < MAX_BULLETS){
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <send_Bullet+0x98>)
 8003eec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	dc2c      	bgt.n	8003f4e <send_Bullet+0x7e>
            enemy_ammo.bullet_ar[enemy_ammo.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8003ef4:	f005 f948 	bl	8009188 <rand>
 8003ef8:	4601      	mov	r1, r0
 8003efa:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <send_Bullet+0x9c>)
 8003efc:	fb83 2301 	smull	r2, r3, r3, r1
 8003f00:	115a      	asrs	r2, r3, #5
 8003f02:	17cb      	asrs	r3, r1, #31
 8003f04:	1ad2      	subs	r2, r2, r3
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	1aca      	subs	r2, r1, r3
 8003f12:	b2d3      	uxtb	r3, r2
 8003f14:	3305      	adds	r3, #5
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <send_Bullet+0x98>)
 8003f1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f1e:	b251      	sxtb	r1, r2
 8003f20:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <send_Bullet+0x98>)
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	460a      	mov	r2, r1
 8003f28:	709a      	strb	r2, [r3, #2]
            enemy_ammo.bullet_ar[enemy_ammo.in_play].y = 3;
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <send_Bullet+0x98>)
 8003f2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f30:	4a0d      	ldr	r2, [pc, #52]	; (8003f68 <send_Bullet+0x98>)
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	4413      	add	r3, r2
 8003f36:	2203      	movs	r2, #3
 8003f38:	70da      	strb	r2, [r3, #3]
            enemy_ammo.in_play++;
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <send_Bullet+0x98>)
 8003f3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	b25a      	sxtb	r2, r3
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <send_Bullet+0x98>)
 8003f4a:	705a      	strb	r2, [r3, #1]
        }else{
            star_delay--;
        }
    }
}
 8003f4c:	e005      	b.n	8003f5a <send_Bullet+0x8a>
            star_delay--;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <send_Bullet+0xa0>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <send_Bullet+0xa0>)
 8003f58:	701a      	strb	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200020a5 	.word	0x200020a5
 8003f68:	200020b8 	.word	0x200020b8
 8003f6c:	76b981db 	.word	0x76b981db
 8003f70:	20002111 	.word	0x20002111

08003f74 <powerups>:

void powerups(){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
    uint8_t powerupornot = rand() % ((3 - 0) - 0) + 0;
 8003f7a:	f005 f905 	bl	8009188 <rand>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <powerups+0x7c>)
 8003f82:	fb83 3102 	smull	r3, r1, r3, r2
 8003f86:	17d3      	asrs	r3, r2, #31
 8003f88:	1ac9      	subs	r1, r1, r3
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	440b      	add	r3, r1
 8003f90:	1ad1      	subs	r1, r2, r3
 8003f92:	460b      	mov	r3, r1
 8003f94:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <powerups+0x80>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d123      	bne.n	8003fe6 <powerups+0x72>
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d120      	bne.n	8003fe6 <powerups+0x72>
        powerUp = rand() % ((3 - 1) - 0) + 1;
 8003fa4:	f005 f8f0 	bl	8009188 <rand>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	bfb8      	it	lt
 8003fb2:	425b      	neglt	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <powerups+0x80>)
 8003fbc:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <powerups+0x80>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d104      	bne.n	8003fd0 <powerups+0x5c>
        	displayPowerup(RED);
 8003fc6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003fca:	f000 f817 	bl	8003ffc <displayPowerup>
 8003fce:	e007      	b.n	8003fe0 <powerups+0x6c>
        }
        else if(powerUp == 2){
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <powerups+0x80>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d103      	bne.n	8003fe0 <powerups+0x6c>
        	displayPowerup(LIGHT_BLUE);
 8003fd8:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003fdc:	f000 f80e 	bl	8003ffc <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <powerups+0x84>)
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	701a      	strb	r2, [r3, #0]
    }
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	55555556 	.word	0x55555556
 8003ff4:	20002112 	.word	0x20002112
 8003ff8:	20002113 	.word	0x20002113

08003ffc <displayPowerup>:

void displayPowerup(uint16_t color){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af02      	add	r7, sp, #8
 8004002:	4603      	mov	r3, r0
 8004004:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 8004006:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <displayPowerup+0x88>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d11c      	bne.n	8004048 <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <displayPowerup+0x8c>)
 8004010:	f993 3000 	ldrsb.w	r3, [r3]
 8004014:	b29b      	uxth	r3, r3
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	b298      	uxth	r0, r3
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	23b4      	movs	r3, #180	; 0xb4
 8004020:	2204      	movs	r2, #4
 8004022:	2100      	movs	r1, #0
 8004024:	f000 fbee 	bl	8004804 <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <displayPowerup+0x8c>)
 800402a:	f993 3000 	ldrsb.w	r3, [r3]
 800402e:	b29b      	uxth	r3, r3
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	b29b      	uxth	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	b298      	uxth	r0, r3
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	231e      	movs	r3, #30
 800403e:	2202      	movs	r2, #2
 8004040:	21b4      	movs	r1, #180	; 0xb4
 8004042:	f000 fbdf 	bl	8004804 <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 8004046:	e019      	b.n	800407c <displayPowerup+0x80>
    else if(powerUp == 2){
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <displayPowerup+0x88>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d115      	bne.n	800407c <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <displayPowerup+0x8c>)
 8004052:	f993 3000 	ldrsb.w	r3, [r3]
 8004056:	b29b      	uxth	r3, r3
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	b29b      	uxth	r3, r3
 800405c:	3301      	adds	r3, #1
 800405e:	b29b      	uxth	r3, r3
 8004060:	b218      	sxth	r0, r3
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <displayPowerup+0x8c>)
 8004064:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004068:	b29b      	uxth	r3, r3
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	b29b      	uxth	r3, r3
 800406e:	3302      	adds	r3, #2
 8004070:	b29b      	uxth	r3, r3
 8004072:	b219      	sxth	r1, r3
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	220e      	movs	r2, #14
 8004078:	f000 fca4 	bl	80049c4 <Displ_drawCircle>
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20002112 	.word	0x20002112
 8004088:	20000030 	.word	0x20000030

0800408c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <HAL_MspInit+0x44>)
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <HAL_MspInit+0x44>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6193      	str	r3, [r2, #24]
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <HAL_MspInit+0x44>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_MspInit+0x44>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <HAL_MspInit+0x44>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_MspInit+0x44>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a17      	ldr	r2, [pc, #92]	; (8004150 <HAL_I2C_MspInit+0x7c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d127      	bne.n	8004146 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <HAL_I2C_MspInit+0x80>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4a16      	ldr	r2, [pc, #88]	; (8004154 <HAL_I2C_MspInit+0x80>)
 80040fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004100:	6153      	str	r3, [r2, #20]
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <HAL_I2C_MspInit+0x80>)
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800410e:	2303      	movs	r3, #3
 8004110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004112:	2312      	movs	r3, #18
 8004114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004116:	2301      	movs	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800411a:	2303      	movs	r3, #3
 800411c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800411e:	2304      	movs	r3, #4
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	4619      	mov	r1, r3
 8004128:	480b      	ldr	r0, [pc, #44]	; (8004158 <HAL_I2C_MspInit+0x84>)
 800412a:	f001 facd 	bl	80056c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_I2C_MspInit+0x80>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <HAL_I2C_MspInit+0x80>)
 8004134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004138:	61d3      	str	r3, [r2, #28]
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_I2C_MspInit+0x80>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004146:	bf00      	nop
 8004148:	3728      	adds	r7, #40	; 0x28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40005800 	.word	0x40005800
 8004154:	40021000 	.word	0x40021000
 8004158:	48001400 	.word	0x48001400

0800415c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <HAL_SPI_MspInit+0x7c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d128      	bne.n	80041d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <HAL_SPI_MspInit+0x80>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <HAL_SPI_MspInit+0x80>)
 8004184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004188:	61d3      	str	r3, [r2, #28]
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_SPI_MspInit+0x80>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_SPI_MspInit+0x80>)
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	4a10      	ldr	r2, [pc, #64]	; (80041dc <HAL_SPI_MspInit+0x80>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6153      	str	r3, [r2, #20]
 80041a2:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_SPI_MspInit+0x80>)
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80041ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80041b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041bc:	2303      	movs	r3, #3
 80041be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041c0:	2305      	movs	r3, #5
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	4619      	mov	r1, r3
 80041ca:	4805      	ldr	r0, [pc, #20]	; (80041e0 <HAL_SPI_MspInit+0x84>)
 80041cc:	f001 fa7c 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80041d0:	bf00      	nop
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40003800 	.word	0x40003800
 80041dc:	40021000 	.word	0x40021000
 80041e0:	48000400 	.word	0x48000400

080041e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	; 0x30
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 031c 	add.w	r3, r7, #28
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2f      	ldr	r2, [pc, #188]	; (80042c0 <HAL_UART_MspInit+0xdc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d129      	bne.n	800425a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004206:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4a2e      	ldr	r2, [pc, #184]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	61d3      	str	r3, [r2, #28]
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421e:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4a28      	ldr	r2, [pc, #160]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	6153      	str	r3, [r2, #20]
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004236:	230c      	movs	r3, #12
 8004238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004242:	2303      	movs	r3, #3
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004246:	2307      	movs	r3, #7
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424a:	f107 031c 	add.w	r3, r7, #28
 800424e:	4619      	mov	r1, r3
 8004250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004254:	f001 fa38 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004258:	e02d      	b.n	80042b6 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <HAL_UART_MspInit+0xe4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d128      	bne.n	80042b6 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 800426a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800426e:	61d3      	str	r3, [r2, #28]
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 8004282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004286:	6153      	str	r3, [r2, #20]
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004294:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429a:	2302      	movs	r3, #2
 800429c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042a2:	2303      	movs	r3, #3
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042a6:	2307      	movs	r3, #7
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042aa:	f107 031c 	add.w	r3, r7, #28
 80042ae:	4619      	mov	r1, r3
 80042b0:	4806      	ldr	r0, [pc, #24]	; (80042cc <HAL_UART_MspInit+0xe8>)
 80042b2:	f001 fa09 	bl	80056c8 <HAL_GPIO_Init>
}
 80042b6:	bf00      	nop
 80042b8:	3730      	adds	r7, #48	; 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40004400 	.word	0x40004400
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40004800 	.word	0x40004800
 80042cc:	48000400 	.word	0x48000400

080042d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <NMI_Handler+0x4>

080042d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042da:	e7fe      	b.n	80042da <HardFault_Handler+0x4>

080042dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042e0:	e7fe      	b.n	80042e0 <MemManage_Handler+0x4>

080042e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e6:	e7fe      	b.n	80042e6 <BusFault_Handler+0x4>

080042e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ec:	e7fe      	b.n	80042ec <UsageFault_Handler+0x4>

080042ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800431c:	f001 f87e 	bl	800541c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}

08004324 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8004328:	2001      	movs	r0, #1
 800432a:	f001 fb6f 	bl	8005a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}

08004332 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8004336:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800433a:	f001 fb67 	bl	8005a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 800433e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004342:	f001 fb63 	bl	8005a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8004346:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800434a:	f001 fb5f 	bl	8005a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}

08004352 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0
  return 1;
 8004356:	2301      	movs	r3, #1
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <_kill>:

int _kill(int pid, int sig)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800436c:	f004 fe1e 	bl	8008fac <__errno>
 8004370:	4603      	mov	r3, r0
 8004372:	2216      	movs	r2, #22
 8004374:	601a      	str	r2, [r3, #0]
  return -1;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <_exit>:

void _exit (int status)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800438a:	f04f 31ff 	mov.w	r1, #4294967295
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ffe7 	bl	8004362 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004394:	e7fe      	b.n	8004394 <_exit+0x12>

08004396 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e00a      	b.n	80043be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043a8:	f3af 8000 	nop.w
 80043ac:	4601      	mov	r1, r0
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	60ba      	str	r2, [r7, #8]
 80043b4:	b2ca      	uxtb	r2, r1
 80043b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	dbf0      	blt.n	80043a8 <_read+0x12>
  }

  return len;
 80043c6:	687b      	ldr	r3, [r7, #4]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f8:	605a      	str	r2, [r3, #4]
  return 0;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <_isatty>:

int _isatty(int file)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004410:	2301      	movs	r3, #1
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004440:	4a14      	ldr	r2, [pc, #80]	; (8004494 <_sbrk+0x5c>)
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <_sbrk+0x60>)
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <_sbrk+0x64>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <_sbrk+0x64>)
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <_sbrk+0x68>)
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <_sbrk+0x64>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d207      	bcs.n	8004478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004468:	f004 fda0 	bl	8008fac <__errno>
 800446c:	4603      	mov	r3, r0
 800446e:	220c      	movs	r2, #12
 8004470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	e009      	b.n	800448c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <_sbrk+0x64>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <_sbrk+0x64>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	4a05      	ldr	r2, [pc, #20]	; (800449c <_sbrk+0x64>)
 8004488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20004000 	.word	0x20004000
 8004498:	00000400 	.word	0x00000400
 800449c:	20002114 	.word	0x20002114
 80044a0:	20002940 	.word	0x20002940

080044a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <SystemInit+0x20>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <SystemInit+0x20>)
 80044b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 80044cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044d4:	f001 fa6a 	bl	80059ac <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d017      	beq.n	800450e <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 80044de:	2201      	movs	r2, #1
 80044e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044e4:	480b      	ldr	r0, [pc, #44]	; (8004514 <Displ_Select+0x4c>)
 80044e6:	f001 fa79 	bl	80059dc <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <Displ_Select+0x50>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	490a      	ldr	r1, [pc, #40]	; (8004518 <Displ_Select+0x50>)
 80044f0:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80044f4:	4013      	ands	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <Displ_Select+0x50>)
 80044fa:	4a07      	ldr	r2, [pc, #28]	; (8004518 <Displ_Select+0x50>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800450a:	f001 fa67 	bl	80059dc <HAL_GPIO_WritePin>
        }
    }
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	48000400 	.word	0x48000400
 8004518:	40003800 	.word	0x40003800

0800451c <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6039      	str	r1, [r7, #0]
 8004524:	4611      	mov	r1, r2
 8004526:	461a      	mov	r2, r3
 8004528:	4603      	mov	r3, r0
 800452a:	71fb      	strb	r3, [r7, #7]
 800452c:	460b      	mov	r3, r1
 800452e:	80bb      	strh	r3, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004534:	bf00      	nop
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <Displ_Transmit+0x90>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0fa      	beq.n	8004536 <Displ_Transmit+0x1a>

    Displ_Select();
 8004540:	f7ff ffc2 	bl	80044c8 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	461a      	mov	r2, r3
 8004548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800454c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004550:	f001 fa44 	bl	80059dc <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8004554:	79bb      	ldrb	r3, [r7, #6]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 800455a:	88bb      	ldrh	r3, [r7, #4]
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	4413      	add	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e00b      	b.n	8004580 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	ba5b      	rev16	r3, r3
 8004572:	60bb      	str	r3, [r7, #8]
  return result;
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3304      	adds	r3, #4
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d3ef      	bcc.n	8004568 <Displ_Transmit+0x4c>
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <Displ_Transmit+0x90>)
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 800458e:	88ba      	ldrh	r2, [r7, #4]
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	4806      	ldr	r0, [pc, #24]	; (80045b0 <Displ_Transmit+0x94>)
 8004598:	f003 fe0b 	bl	80081b2 <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <Displ_Transmit+0x90>)
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 80045a2:	bf00      	nop
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	2000003c 	.word	0x2000003c
 80045b0:	20001f28 	.word	0x20001f28

080045b4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80045be:	1df9      	adds	r1, r7, #7
 80045c0:	2300      	movs	r3, #0
 80045c2:	2201      	movs	r2, #1
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7ff ffa9 	bl	800451c <Displ_Transmit>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7ff ff94 	bl	800451c <Displ_Transmit>
 80045f4:	e000      	b.n	80045f8 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 80045f6:	bf00      	nop
}
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
    Displ_Select();
 8004604:	f7ff ff60 	bl	80044c8 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004608:	2200      	movs	r2, #0
 800460a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800460e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004612:	f001 f9e3 	bl	80059dc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004616:	2001      	movs	r0, #1
 8004618:	f000 ff20 	bl	800545c <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 800461c:	2201      	movs	r2, #1
 800461e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004626:	f001 f9d9 	bl	80059dc <HAL_GPIO_WritePin>
    HAL_Delay(150);
 800462a:	2096      	movs	r0, #150	; 0x96
 800462c:	f000 ff16 	bl	800545c <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004630:	203a      	movs	r0, #58	; 0x3a
 8004632:	f7ff ffbf 	bl	80045b4 <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8004636:	2200      	movs	r2, #0
 8004638:	2101      	movs	r1, #1
 800463a:	4810      	ldr	r0, [pc, #64]	; (800467c <ILI9XXX_Init+0x7c>)
 800463c:	f7ff ffc9 	bl	80045d2 <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004640:	20b0      	movs	r0, #176	; 0xb0
 8004642:	f7ff ffb7 	bl	80045b4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004646:	2200      	movs	r2, #0
 8004648:	2101      	movs	r1, #1
 800464a:	480d      	ldr	r0, [pc, #52]	; (8004680 <ILI9XXX_Init+0x80>)
 800464c:	f7ff ffc1 	bl	80045d2 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004650:	20b0      	movs	r0, #176	; 0xb0
 8004652:	f7ff ffaf 	bl	80045b4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004656:	2200      	movs	r2, #0
 8004658:	2101      	movs	r1, #1
 800465a:	4809      	ldr	r0, [pc, #36]	; (8004680 <ILI9XXX_Init+0x80>)
 800465c:	f7ff ffb9 	bl	80045d2 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004660:	2011      	movs	r0, #17
 8004662:	f7ff ffa7 	bl	80045b4 <Displ_WriteCommand>
    HAL_Delay(120);
 8004666:	2078      	movs	r0, #120	; 0x78
 8004668:	f000 fef8 	bl	800545c <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 800466c:	2029      	movs	r0, #41	; 0x29
 800466e:	f7ff ffa1 	bl	80045b4 <Displ_WriteCommand>
    HAL_Delay(5);
 8004672:	2005      	movs	r0, #5
 8004674:	f000 fef2 	bl	800545c <HAL_Delay>

}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	0800a300 	.word	0x0800a300
 8004680:	0800a304 	.word	0x0800a304

08004684 <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	4611      	mov	r1, r2
 8004690:	461a      	mov	r2, r3
 8004692:	4623      	mov	r3, r4
 8004694:	80fb      	strh	r3, [r7, #6]
 8004696:	4603      	mov	r3, r0
 8004698:	80bb      	strh	r3, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	807b      	strh	r3, [r7, #2]
 800469e:	4613      	mov	r3, r2
 80046a0:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	061a      	lsls	r2, r3, #24
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046ae:	431a      	orrs	r2, r3
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4313      	orrs	r3, r2
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	0a12      	lsrs	r2, r2, #8
 80046bc:	b292      	uxth	r2, r2
 80046be:	431a      	orrs	r2, r3
 80046c0:	4b14      	ldr	r3, [pc, #80]	; (8004714 <Displ_SetAddressWindow+0x90>)
 80046c2:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80046c4:	202a      	movs	r0, #42	; 0x2a
 80046c6:	f7ff ff75 	bl	80045b4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 80046ca:	2200      	movs	r2, #0
 80046cc:	2104      	movs	r1, #4
 80046ce:	4811      	ldr	r0, [pc, #68]	; (8004714 <Displ_SetAddressWindow+0x90>)
 80046d0:	f7ff ff7f 	bl	80045d2 <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80046d4:	883b      	ldrh	r3, [r7, #0]
 80046d6:	061a      	lsls	r2, r3, #24
 80046d8:	883b      	ldrh	r3, [r7, #0]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046e0:	431a      	orrs	r2, r3
 80046e2:	88bb      	ldrh	r3, [r7, #4]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4313      	orrs	r3, r2
 80046ea:	88ba      	ldrh	r2, [r7, #4]
 80046ec:	0a12      	lsrs	r2, r2, #8
 80046ee:	b292      	uxth	r2, r2
 80046f0:	431a      	orrs	r2, r3
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <Displ_SetAddressWindow+0x90>)
 80046f4:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80046f6:	202b      	movs	r0, #43	; 0x2b
 80046f8:	f7ff ff5c 	bl	80045b4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 80046fc:	2200      	movs	r2, #0
 80046fe:	2104      	movs	r1, #4
 8004700:	4804      	ldr	r0, [pc, #16]	; (8004714 <Displ_SetAddressWindow+0x90>)
 8004702:	f7ff ff66 	bl	80045d2 <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8004706:	202c      	movs	r0, #44	; 0x2c
 8004708:	f7ff ff54 	bl	80045b4 <Displ_WriteCommand>
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	20002920 	.word	0x20002920

08004718 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8004722:	2201      	movs	r2, #1
 8004724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800472c:	f001 f956 	bl	80059dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8004730:	2201      	movs	r2, #1
 8004732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004736:	4806      	ldr	r0, [pc, #24]	; (8004750 <Displ_Init+0x38>)
 8004738:	f001 f950 	bl	80059dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 800473c:	f7ff ff60 	bl	8004600 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f806 	bl	8004754 <Displ_Orientation>
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	48000400 	.word	0x48000400

08004754 <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d837      	bhi.n	80047d4 <Displ_Orientation+0x80>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <Displ_Orientation+0x18>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	0800477d 	.word	0x0800477d
 8004770:	08004793 	.word	0x08004793
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047bf 	.word	0x080047bf
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <Displ_Orientation+0xa0>)
 800477e:	2288      	movs	r2, #136	; 0x88
 8004780:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <Displ_Orientation+0xa4>)
 8004784:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004788:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 800478a:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <Displ_Orientation+0xa8>)
 800478c:	22f0      	movs	r2, #240	; 0xf0
 800478e:	801a      	strh	r2, [r3, #0]
            break;
 8004790:	e020      	b.n	80047d4 <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <Displ_Orientation+0xa0>)
 8004794:	22e8      	movs	r2, #232	; 0xe8
 8004796:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004798:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <Displ_Orientation+0xa4>)
 800479a:	22f0      	movs	r2, #240	; 0xf0
 800479c:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 800479e:	4b17      	ldr	r3, [pc, #92]	; (80047fc <Displ_Orientation+0xa8>)
 80047a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80047a4:	801a      	strh	r2, [r3, #0]
            break;
 80047a6:	e015      	b.n	80047d4 <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <Displ_Orientation+0xa0>)
 80047aa:	2248      	movs	r2, #72	; 0x48
 80047ac:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <Displ_Orientation+0xa4>)
 80047b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80047b4:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <Displ_Orientation+0xa8>)
 80047b8:	22f0      	movs	r2, #240	; 0xf0
 80047ba:	801a      	strh	r2, [r3, #0]
            break;
 80047bc:	e00a      	b.n	80047d4 <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <Displ_Orientation+0xa0>)
 80047c0:	2228      	movs	r2, #40	; 0x28
 80047c2:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <Displ_Orientation+0xa4>)
 80047c6:	22f0      	movs	r2, #240	; 0xf0
 80047c8:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <Displ_Orientation+0xa8>)
 80047cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80047d0:	801a      	strh	r2, [r3, #0]
            break;
 80047d2:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 80047d4:	2036      	movs	r0, #54	; 0x36
 80047d6:	f7ff feed 	bl	80045b4 <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 80047da:	2200      	movs	r2, #0
 80047dc:	2101      	movs	r1, #1
 80047de:	4805      	ldr	r0, [pc, #20]	; (80047f4 <Displ_Orientation+0xa0>)
 80047e0:	f7ff fef7 	bl	80045d2 <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80047e4:	4a06      	ldr	r2, [pc, #24]	; (8004800 <Displ_Orientation+0xac>)
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	7013      	strb	r3, [r2, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20002924 	.word	0x20002924
 80047f8:	2000211c 	.word	0x2000211c
 80047fc:	2000211a 	.word	0x2000211a
 8004800:	20002118 	.word	0x20002118

08004804 <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b08b      	sub	sp, #44	; 0x2c
 8004808:	af00      	add	r7, sp, #0
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	80fb      	strh	r3, [r7, #6]
 8004816:	4603      	mov	r3, r0
 8004818:	80bb      	strh	r3, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	807b      	strh	r3, [r7, #2]
 800481e:	4613      	mov	r3, r2
 8004820:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	4a4f      	ldr	r2, [pc, #316]	; (8004964 <Displ_FillArea+0x160>)
 8004826:	f9b2 2000 	ldrsh.w	r2, [r2]
 800482a:	4293      	cmp	r3, r2
 800482c:	f280 8096 	bge.w	800495c <Displ_FillArea+0x158>
 8004830:	88bb      	ldrh	r3, [r7, #4]
 8004832:	4a4d      	ldr	r2, [pc, #308]	; (8004968 <Displ_FillArea+0x164>)
 8004834:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004838:	4293      	cmp	r3, r2
 800483a:	f280 808f 	bge.w	800495c <Displ_FillArea+0x158>
 800483e:	887b      	ldrh	r3, [r7, #2]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 808b 	beq.w	800495c <Displ_FillArea+0x158>
 8004846:	883b      	ldrh	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8087 	beq.w	800495c <Displ_FillArea+0x158>

    x1=x + w - 1;
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	4413      	add	r3, r2
 8004854:	3b01      	subs	r3, #1
 8004856:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 8004858:	4b42      	ldr	r3, [pc, #264]	; (8004964 <Displ_FillArea+0x160>)
 800485a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800485e:	461a      	mov	r2, r3
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	4293      	cmp	r3, r2
 8004864:	d903      	bls.n	800486e <Displ_FillArea+0x6a>
        x1=_width;
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <Displ_FillArea+0x160>)
 8004868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800486c:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 800486e:	88ba      	ldrh	r2, [r7, #4]
 8004870:	883b      	ldrh	r3, [r7, #0]
 8004872:	4413      	add	r3, r2
 8004874:	3b01      	subs	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8004878:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <Displ_FillArea+0x164>)
 800487a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800487e:	461a      	mov	r2, r3
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4293      	cmp	r3, r2
 8004884:	d903      	bls.n	800488e <Displ_FillArea+0x8a>
        y1=_height;
 8004886:	4b38      	ldr	r3, [pc, #224]	; (8004968 <Displ_FillArea+0x164>)
 8004888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800488c:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800488e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	431a      	orrs	r2, r3
 800489c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 80048a4:	88bb      	ldrh	r3, [r7, #4]
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	6a39      	ldr	r1, [r7, #32]
 80048b0:	1a8a      	subs	r2, r1, r2
 80048b2:	3201      	adds	r2, #1
 80048b4:	fb02 f303 	mul.w	r3, r2, r3
 80048b8:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 80048ba:	4b2c      	ldr	r3, [pc, #176]	; (800496c <Displ_FillArea+0x168>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c6:	d204      	bcs.n	80048d2 <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	3301      	adds	r3, #1
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e002      	b.n	80048d8 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 80048d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d6:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	e007      	b.n	80048ee <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1d1a      	adds	r2, r3, #4
 80048e2:	617a      	str	r2, [r7, #20]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	3301      	adds	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3f3      	bcc.n	80048de <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	88b9      	ldrh	r1, [r7, #4]
 8004900:	88f8      	ldrh	r0, [r7, #6]
 8004902:	f7ff febf 	bl	8004684 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	0a5b      	lsrs	r3, r3, #9
 800490a:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	e00a      	b.n	8004928 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <Displ_FillArea+0x168>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2200      	movs	r2, #0
 8004918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fe58 	bl	80045d2 <Displ_WriteData>
    for  (k=0;k<times;k++) {
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	3301      	adds	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3f0      	bcc.n	8004912 <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <Displ_FillArea+0x168>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	005a      	lsls	r2, r3, #1
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2200      	movs	r2, #0
 8004940:	4619      	mov	r1, r3
 8004942:	f7ff fe46 	bl	80045d2 <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <Displ_FillArea+0x168>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <Displ_FillArea+0x16c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <Displ_FillArea+0x150>
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <Displ_FillArea+0x170>)
 8004952:	e000      	b.n	8004956 <Displ_FillArea+0x152>
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <Displ_FillArea+0x16c>)
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <Displ_FillArea+0x168>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e000      	b.n	800495e <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800495c:	bf00      	nop

}
 800495e:	372c      	adds	r7, #44	; 0x2c
 8004960:	46bd      	mov	sp, r7
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	2000211a 	.word	0x2000211a
 8004968:	2000211c 	.word	0x2000211c
 800496c:	20000040 	.word	0x20000040
 8004970:	20002120 	.word	0x20002120
 8004974:	20002520 	.word	0x20002520

08004978 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af02      	add	r7, sp, #8
 800497e:	4603      	mov	r3, r0
 8004980:	80fb      	strh	r3, [r7, #6]
 8004982:	460b      	mov	r3, r1
 8004984:	80bb      	strh	r3, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <Displ_Pixel+0x44>)
 800498e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004992:	4293      	cmp	r3, r2
 8004994:	da0e      	bge.n	80049b4 <Displ_Pixel+0x3c>
 8004996:	88bb      	ldrh	r3, [r7, #4]
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <Displ_Pixel+0x48>)
 800499a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800499e:	4293      	cmp	r3, r2
 80049a0:	da08      	bge.n	80049b4 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 80049a2:	88b9      	ldrh	r1, [r7, #4]
 80049a4:	88f8      	ldrh	r0, [r7, #6]
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	2301      	movs	r3, #1
 80049ac:	2201      	movs	r2, #1
 80049ae:	f7ff ff29 	bl	8004804 <Displ_FillArea>
 80049b2:	e000      	b.n	80049b6 <Displ_Pixel+0x3e>
        return;
 80049b4:	bf00      	nop

}
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	2000211a 	.word	0x2000211a
 80049c0:	2000211c 	.word	0x2000211c

080049c4 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4604      	mov	r4, r0
 80049cc:	4608      	mov	r0, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	4623      	mov	r3, r4
 80049d4:	80fb      	strh	r3, [r7, #6]
 80049d6:	4603      	mov	r3, r0
 80049d8:	80bb      	strh	r3, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	807b      	strh	r3, [r7, #2]
 80049de:	4613      	mov	r3, r2
 80049e0:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80049e2:	887b      	ldrh	r3, [r7, #2]
 80049e4:	f1c3 0301 	rsb	r3, r3, #1
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80049ec:	2301      	movs	r3, #1
 80049ee:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	461a      	mov	r2, r3
 80049f4:	03d2      	lsls	r2, r2, #15
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8004a06:	88f8      	ldrh	r0, [r7, #6]
 8004a08:	88ba      	ldrh	r2, [r7, #4]
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	883a      	ldrh	r2, [r7, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	f7ff ffb0 	bl	8004978 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8004a18:	88f8      	ldrh	r0, [r7, #6]
 8004a1a:	88ba      	ldrh	r2, [r7, #4]
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	883a      	ldrh	r2, [r7, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	f7ff ffa7 	bl	8004978 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	887b      	ldrh	r3, [r7, #2]
 8004a2e:	4413      	add	r3, r2
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	88b9      	ldrh	r1, [r7, #4]
 8004a34:	883a      	ldrh	r2, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ff9e 	bl	8004978 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	88b9      	ldrh	r1, [r7, #4]
 8004a46:	883a      	ldrh	r2, [r7, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ff95 	bl	8004978 <Displ_Pixel>

    while (x<y) {
 8004a4e:	e081      	b.n	8004b54 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8004a50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	db0e      	blt.n	8004a76 <Displ_drawCircle+0xb2>
            y--;
 8004a58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004a64:	8a7b      	ldrh	r3, [r7, #18]
 8004a66:	3302      	adds	r3, #2
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8004a6c:	8afa      	ldrh	r2, [r7, #22]
 8004a6e:	8a7b      	ldrh	r3, [r7, #18]
 8004a70:	4413      	add	r3, r2
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004a76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004a82:	8abb      	ldrh	r3, [r7, #20]
 8004a84:	3302      	adds	r3, #2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8004a8a:	8afa      	ldrh	r2, [r7, #22]
 8004a8c:	8abb      	ldrh	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	8a3b      	ldrh	r3, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	b298      	uxth	r0, r3
 8004a9c:	88ba      	ldrh	r2, [r7, #4]
 8004a9e:	89fb      	ldrh	r3, [r7, #14]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	883a      	ldrh	r2, [r7, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f7ff ff66 	bl	8004978 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8004aac:	88fa      	ldrh	r2, [r7, #6]
 8004aae:	8a3b      	ldrh	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	b298      	uxth	r0, r3
 8004ab4:	88ba      	ldrh	r2, [r7, #4]
 8004ab6:	89fb      	ldrh	r3, [r7, #14]
 8004ab8:	4413      	add	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	883a      	ldrh	r2, [r7, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f7ff ff5a 	bl	8004978 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	8a3b      	ldrh	r3, [r7, #16]
 8004ac8:	4413      	add	r3, r2
 8004aca:	b298      	uxth	r0, r3
 8004acc:	88ba      	ldrh	r2, [r7, #4]
 8004ace:	89fb      	ldrh	r3, [r7, #14]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	883a      	ldrh	r2, [r7, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f7ff ff4e 	bl	8004978 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	8a3b      	ldrh	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	b298      	uxth	r0, r3
 8004ae4:	88ba      	ldrh	r2, [r7, #4]
 8004ae6:	89fb      	ldrh	r3, [r7, #14]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	883a      	ldrh	r2, [r7, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	f7ff ff42 	bl	8004978 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	89fb      	ldrh	r3, [r7, #14]
 8004af8:	4413      	add	r3, r2
 8004afa:	b298      	uxth	r0, r3
 8004afc:	88ba      	ldrh	r2, [r7, #4]
 8004afe:	8a3b      	ldrh	r3, [r7, #16]
 8004b00:	4413      	add	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	883a      	ldrh	r2, [r7, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f7ff ff36 	bl	8004978 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	b298      	uxth	r0, r3
 8004b14:	88ba      	ldrh	r2, [r7, #4]
 8004b16:	8a3b      	ldrh	r3, [r7, #16]
 8004b18:	4413      	add	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	883a      	ldrh	r2, [r7, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f7ff ff2a 	bl	8004978 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	4413      	add	r3, r2
 8004b2a:	b298      	uxth	r0, r3
 8004b2c:	88ba      	ldrh	r2, [r7, #4]
 8004b2e:	8a3b      	ldrh	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	883a      	ldrh	r2, [r7, #0]
 8004b36:	4619      	mov	r1, r3
 8004b38:	f7ff ff1e 	bl	8004978 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	89fb      	ldrh	r3, [r7, #14]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	b298      	uxth	r0, r3
 8004b44:	88ba      	ldrh	r2, [r7, #4]
 8004b46:	8a3b      	ldrh	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	883a      	ldrh	r2, [r7, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f7ff ff12 	bl	8004978 <Displ_Pixel>
    while (x<y) {
 8004b54:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	f6ff af77 	blt.w	8004a50 <Displ_drawCircle+0x8c>
    }
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd90      	pop	{r4, r7, pc}

08004b6c <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	4603      	mov	r3, r0
 8004b74:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <Displ_CLS+0x30>)
 8004b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <Displ_CLS+0x34>)
 8004b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b84:	b299      	uxth	r1, r3
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7ff fe38 	bl	8004804 <Displ_FillArea>
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	2000211a 	.word	0x2000211a
 8004ba0:	2000211c 	.word	0x2000211c

08004ba4 <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b08b      	sub	sp, #44	; 0x2c
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	4604      	mov	r4, r0
 8004bac:	4608      	mov	r0, r1
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	80fb      	strh	r3, [r7, #6]
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	80bb      	strh	r3, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	807b      	strh	r3, [r7, #2]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8004bc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d123      	bne.n	8004c16 <Displ_Line+0x72>
        if (y1>y0){
 8004bce:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004bd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	dd0e      	ble.n	8004bf8 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8004bda:	88f8      	ldrh	r0, [r7, #6]
 8004bdc:	88b9      	ldrh	r1, [r7, #4]
 8004bde:	883a      	ldrh	r2, [r7, #0]
 8004be0:	88bb      	ldrh	r3, [r7, #4]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f7ff fe07 	bl	8004804 <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 8004bf6:	e103      	b.n	8004e00 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8004bf8:	88f8      	ldrh	r0, [r7, #6]
 8004bfa:	8839      	ldrh	r1, [r7, #0]
 8004bfc:	88ba      	ldrh	r2, [r7, #4]
 8004bfe:	883b      	ldrh	r3, [r7, #0]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f7ff fdf8 	bl	8004804 <Displ_FillArea>
        return;
 8004c14:	e0f4      	b.n	8004e00 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8004c16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004c1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d121      	bne.n	8004c66 <Displ_Line+0xc2>
        if (x1>x0)
 8004c22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	dd0d      	ble.n	8004c4a <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8004c2e:	88f8      	ldrh	r0, [r7, #6]
 8004c30:	88b9      	ldrh	r1, [r7, #4]
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2301      	movs	r3, #1
 8004c44:	f7ff fdde 	bl	8004804 <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 8004c48:	e0da      	b.n	8004e00 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8004c4a:	8878      	ldrh	r0, [r7, #2]
 8004c4c:	8839      	ldrh	r1, [r7, #0]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	887b      	ldrh	r3, [r7, #2]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f7ff fdd0 	bl	8004804 <Displ_FillArea>
        return;
 8004c64:	e0cc      	b.n	8004e00 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8004c66:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004c6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	dd05      	ble.n	8004c7e <Displ_Line+0xda>
 8004c72:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	e004      	b.n	8004c88 <Displ_Line+0xe4>
 8004c7e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004c82:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c90:	4299      	cmp	r1, r3
 8004c92:	dd05      	ble.n	8004ca0 <Displ_Line+0xfc>
 8004c94:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9c:	1acb      	subs	r3, r1, r3
 8004c9e:	e004      	b.n	8004caa <Displ_Line+0x106>
 8004ca0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004ca4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ca8:	1acb      	subs	r3, r1, r3
 8004caa:	429a      	cmp	r2, r3
 8004cac:	bfcc      	ite	gt
 8004cae:	2301      	movgt	r3, #1
 8004cb0:	2300      	movle	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8004cb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	827b      	strh	r3, [r7, #18]
 8004cc2:	88bb      	ldrh	r3, [r7, #4]
 8004cc4:	80fb      	strh	r3, [r7, #6]
 8004cc6:	8a7b      	ldrh	r3, [r7, #18]
 8004cc8:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	823b      	strh	r3, [r7, #16]
 8004cce:	883b      	ldrh	r3, [r7, #0]
 8004cd0:	807b      	strh	r3, [r7, #2]
 8004cd2:	8a3b      	ldrh	r3, [r7, #16]
 8004cd4:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8004cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	dd0b      	ble.n	8004cfa <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	81fb      	strh	r3, [r7, #14]
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	80fb      	strh	r3, [r7, #6]
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8004cee:	88bb      	ldrh	r3, [r7, #4]
 8004cf0:	81bb      	strh	r3, [r7, #12]
 8004cf2:	883b      	ldrh	r3, [r7, #0]
 8004cf4:	80bb      	strh	r3, [r7, #4]
 8004cf6:	89bb      	ldrh	r3, [r7, #12]
 8004cf8:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8004d04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d08:	105b      	asrs	r3, r3, #1
 8004d0a:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8004d0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004d10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	da07      	bge.n	8004d28 <Displ_Line+0x184>
        dy = y1-y0;
 8004d18:	883a      	ldrh	r2, [r7, #0]
 8004d1a:	88bb      	ldrh	r3, [r7, #4]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8004d22:	2301      	movs	r3, #1
 8004d24:	837b      	strh	r3, [r7, #26]
 8004d26:	e007      	b.n	8004d38 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8004d28:	88ba      	ldrh	r2, [r7, #4]
 8004d2a:	883b      	ldrh	r3, [r7, #0]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8004d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d36:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	83bb      	strh	r3, [r7, #28]
 8004d40:	e03a      	b.n	8004db8 <Displ_Line+0x214>
        l++;
 8004d42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8004d4e:	8b3a      	ldrh	r2, [r7, #24]
 8004d50:	8afb      	ldrh	r3, [r7, #22]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8004d58:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da25      	bge.n	8004dac <Displ_Line+0x208>
            if (steep) {
 8004d60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 8004d68:	88b8      	ldrh	r0, [r7, #4]
 8004d6a:	88f9      	ldrh	r1, [r7, #6]
 8004d6c:	8bfa      	ldrh	r2, [r7, #30]
 8004d6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	2201      	movs	r2, #1
 8004d76:	f7ff fd45 	bl	8004804 <Displ_FillArea>
 8004d7a:	e007      	b.n	8004d8c <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 8004d7c:	88f8      	ldrh	r0, [r7, #6]
 8004d7e:	88b9      	ldrh	r1, [r7, #4]
 8004d80:	8bfa      	ldrh	r2, [r7, #30]
 8004d82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	2301      	movs	r3, #1
 8004d88:	f7ff fd3c 	bl	8004804 <Displ_FillArea>
            }
            y0 += ystep;
 8004d8c:	88ba      	ldrh	r2, [r7, #4]
 8004d8e:	8b7b      	ldrh	r3, [r7, #26]
 8004d90:	4413      	add	r3, r2
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	80bb      	strh	r3, [r7, #4]
            l=0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8004d9a:	8bbb      	ldrh	r3, [r7, #28]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8004da2:	8b3a      	ldrh	r2, [r7, #24]
 8004da4:	897b      	ldrh	r3, [r7, #10]
 8004da6:	4413      	add	r3, r2
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8004dac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	83bb      	strh	r3, [r7, #28]
 8004db8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004dbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	ddbe      	ble.n	8004d42 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8004dc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d019      	beq.n	8004e00 <Displ_Line+0x25c>
        if (steep) {
 8004dcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 8004dd4:	88b8      	ldrh	r0, [r7, #4]
 8004dd6:	88f9      	ldrh	r1, [r7, #6]
 8004dd8:	8bfb      	ldrh	r3, [r7, #30]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	2201      	movs	r2, #1
 8004de6:	f7ff fd0d 	bl	8004804 <Displ_FillArea>
 8004dea:	e009      	b.n	8004e00 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 8004dec:	88f8      	ldrh	r0, [r7, #6]
 8004dee:	88b9      	ldrh	r1, [r7, #4]
 8004df0:	8bfb      	ldrh	r3, [r7, #30]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f7ff fd02 	bl	8004804 <Displ_FillArea>
        }
    }
}
 8004e00:	3724      	adds	r7, #36	; 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd90      	pop	{r4, r7, pc}

08004e06 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8004e06:	b590      	push	{r4, r7, lr}
 8004e08:	b091      	sub	sp, #68	; 0x44
 8004e0a:	af02      	add	r7, sp, #8
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	461a      	mov	r2, r3
 8004e14:	4623      	mov	r3, r4
 8004e16:	80fb      	strh	r3, [r7, #6]
 8004e18:	4603      	mov	r3, r0
 8004e1a:	80bb      	strh	r3, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
 8004e20:	4613      	mov	r3, r2
 8004e22:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8004e24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e28:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	dd0b      	ble.n	8004e48 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8004e30:	88bb      	ldrh	r3, [r7, #4]
 8004e32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e34:	883b      	ldrh	r3, [r7, #0]
 8004e36:	80bb      	strh	r3, [r7, #4]
 8004e38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e3a:	803b      	strh	r3, [r7, #0]
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	80fb      	strh	r3, [r7, #6]
 8004e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e46:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8004e48:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e4c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004e50:	429a      	cmp	r2, r3
 8004e52:	dd0f      	ble.n	8004e74 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8004e54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e58:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e5a:	883b      	ldrh	r3, [r7, #0]
 8004e5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e62:	803b      	strh	r3, [r7, #0]
 8004e64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e68:	843b      	strh	r3, [r7, #32]
 8004e6a:	887b      	ldrh	r3, [r7, #2]
 8004e6c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e70:	8c3b      	ldrh	r3, [r7, #32]
 8004e72:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8004e74:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e78:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	dd0b      	ble.n	8004e98 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8004e80:	88bb      	ldrh	r3, [r7, #4]
 8004e82:	83fb      	strh	r3, [r7, #30]
 8004e84:	883b      	ldrh	r3, [r7, #0]
 8004e86:	80bb      	strh	r3, [r7, #4]
 8004e88:	8bfb      	ldrh	r3, [r7, #30]
 8004e8a:	803b      	strh	r3, [r7, #0]
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	83bb      	strh	r3, [r7, #28]
 8004e90:	887b      	ldrh	r3, [r7, #2]
 8004e92:	80fb      	strh	r3, [r7, #6]
 8004e94:	8bbb      	ldrh	r3, [r7, #28]
 8004e96:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8004e98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d136      	bne.n	8004f12 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ea8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004eaa:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8004eac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004eb0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	da02      	bge.n	8004ebe <Displ_fillTriangle+0xb8>
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ebc:	e007      	b.n	8004ece <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8004ebe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ec2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	dd01      	ble.n	8004ece <Displ_fillTriangle+0xc8>
 8004eca:	887b      	ldrh	r3, [r7, #2]
 8004ecc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8004ece:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8004ed2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	da03      	bge.n	8004ee2 <Displ_fillTriangle+0xdc>
 8004eda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ede:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ee0:	e008      	b.n	8004ef4 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8004ee2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8004ee6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004eea:	429a      	cmp	r2, r3
 8004eec:	dd02      	ble.n	8004ef4 <Displ_fillTriangle+0xee>
 8004eee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ef2:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8004ef4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004ef8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8004efc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f00:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004f04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	f7ff fe4a 	bl	8004ba4 <Displ_Line>
        return;
 8004f10:	e0d2      	b.n	80050b8 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8004f1c:	883a      	ldrh	r2, [r7, #0]
 8004f1e:	88bb      	ldrh	r3, [r7, #4]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8004f26:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8004f32:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004f36:	88bb      	ldrh	r3, [r7, #4]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8004f3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004f42:	887b      	ldrh	r3, [r7, #2]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8004f4a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004f4e:	883b      	ldrh	r3, [r7, #0]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8004f56:	2300      	movs	r3, #0
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8004f5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f62:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d102      	bne.n	8004f70 <Displ_fillTriangle+0x16a>
 8004f6a:	883b      	ldrh	r3, [r7, #0]
 8004f6c:	863b      	strh	r3, [r7, #48]	; 0x30
 8004f6e:	e003      	b.n	8004f78 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8004f70:	883b      	ldrh	r3, [r7, #0]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8004f78:	88bb      	ldrh	r3, [r7, #4]
 8004f7a:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f7c:	e03d      	b.n	8004ffa <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8004f7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f84:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8004f92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8004fa6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fac:	4413      	add	r3, r2
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8004fb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb6:	4413      	add	r3, r2
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8004fba:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004fbe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	dd05      	ble.n	8004fd2 <Displ_fillTriangle+0x1cc>
 8004fc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fc8:	81bb      	strh	r3, [r7, #12]
 8004fca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fcc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004fce:	89bb      	ldrh	r3, [r7, #12]
 8004fd0:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8004fd2:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8004fd6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8004fda:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004fde:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004fe2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4623      	mov	r3, r4
 8004fea:	f7ff fddb 	bl	8004ba4 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8004fee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	867b      	strh	r3, [r7, #50]	; 0x32
 8004ffa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004ffe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005002:	429a      	cmp	r2, r3
 8005004:	ddbb      	ble.n	8004f7e <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800500a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800500e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005012:	1a8a      	subs	r2, r1, r2
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800501a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800501e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005022:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005026:	1a8a      	subs	r2, r1, r2
 8005028:	fb02 f303 	mul.w	r3, r2, r3
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800502e:	e03d      	b.n	80050ac <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005030:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005036:	fb92 f3f3 	sdiv	r3, r2, r3
 800503a:	b29a      	uxth	r2, r3
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	4413      	add	r3, r2
 8005040:	b29b      	uxth	r3, r3
 8005042:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005044:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504a:	fb92 f3f3 	sdiv	r3, r2, r3
 800504e:	b29a      	uxth	r2, r3
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	4413      	add	r3, r2
 8005054:	b29b      	uxth	r3, r3
 8005056:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800505c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505e:	4413      	add	r3, r2
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005062:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005068:	4413      	add	r3, r2
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800506c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005070:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005074:	429a      	cmp	r2, r3
 8005076:	dd05      	ble.n	8005084 <Displ_fillTriangle+0x27e>
 8005078:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800507a:	81fb      	strh	r3, [r7, #14]
 800507c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800507e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005080:	89fb      	ldrh	r3, [r7, #14]
 8005082:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005084:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005088:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800508c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005090:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005094:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4623      	mov	r3, r4
 800509c:	f7ff fd82 	bl	8004ba4 <Displ_Line>
    for(; y<=y2; y++) {
 80050a0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3301      	adds	r3, #1
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	867b      	strh	r3, [r7, #50]	; 0x32
 80050ac:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80050b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80050b4:	429a      	cmp	r2, r3
 80050b6:	ddbb      	ble.n	8005030 <Displ_fillTriangle+0x22a>
    }
}
 80050b8:	373c      	adds	r7, #60	; 0x3c
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd90      	pop	{r4, r7, pc}
	...

080050c0 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80050c0:	b082      	sub	sp, #8
 80050c2:	b590      	push	{r4, r7, lr}
 80050c4:	b08d      	sub	sp, #52	; 0x34
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ca:	4603      	mov	r3, r0
 80050cc:	80fb      	strh	r3, [r7, #6]
 80050ce:	460b      	mov	r3, r1
 80050d0:	80bb      	strh	r3, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 80050d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050da:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 80050dc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d102      	bne.n	80050ea <Displ_WChar+0x2a>
        wsize<<= 1;
 80050e4:	7efb      	ldrb	r3, [r7, #27]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 80050ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050f2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80050fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	3b20      	subs	r3, #32
 8005102:	4619      	mov	r1, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	4413      	add	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 800510e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005112:	2b02      	cmp	r3, #2
 8005114:	d005      	beq.n	8005122 <Displ_WChar+0x62>
 8005116:	2b03      	cmp	r3, #3
 8005118:	d107      	bne.n	800512a <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 800511a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800511e:	61fb      	str	r3, [r7, #28]
            break;
 8005120:	e005      	b.n	800512e <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 8005122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005126:	61fb      	str	r3, [r7, #28]
            break;
 8005128:	e001      	b.n	800512e <Displ_WChar+0x6e>
        default:
            mask=0x80;
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 800512e:	4b60      	ldr	r3, [pc, #384]	; (80052b0 <Displ_WChar+0x1f0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005134:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b21a      	sxth	r2, r3
 800513c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	b29b      	uxth	r3, r3
 8005144:	b21b      	sxth	r3, r3
 8005146:	4313      	orrs	r3, r2
 8005148:	b21b      	sxth	r3, r3
 800514a:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 800514c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	b21a      	sxth	r2, r3
 8005154:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	b29b      	uxth	r3, r3
 800515c:	b21b      	sxth	r3, r3
 800515e:	4313      	orrs	r3, r2
 8005160:	b21b      	sxth	r3, r3
 8005162:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 8005164:	2300      	movs	r3, #0
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005168:	e06f      	b.n	800524a <Displ_WChar+0x18a>
        b=0;
 800516a:	2300      	movs	r3, #0
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 800516e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005172:	2b02      	cmp	r3, #2
 8005174:	d015      	beq.n	80051a2 <Displ_WChar+0xe2>
 8005176:	2b03      	cmp	r3, #3
 8005178:	d120      	bne.n	80051bc <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	4413      	add	r3, r2
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	041a      	lsls	r2, r3, #16
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	3301      	adds	r3, #1
 8005188:	6939      	ldr	r1, [r7, #16]
 800518a:	440b      	add	r3, r1
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	4313      	orrs	r3, r2
 8005192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005194:	3202      	adds	r2, #2
 8005196:	6939      	ldr	r1, [r7, #16]
 8005198:	440a      	add	r2, r1
 800519a:	7812      	ldrb	r2, [r2, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80051a0:	e011      	b.n	80051c6 <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	4413      	add	r3, r2
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ae:	3201      	adds	r2, #1
 80051b0:	6939      	ldr	r1, [r7, #16]
 80051b2:	440a      	add	r2, r1
 80051b4:	7812      	ldrb	r2, [r2, #0]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80051ba:	e004      	b.n	80051c6 <Displ_WChar+0x106>
            default:
                b=pos[i];
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	4413      	add	r3, r2
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	e032      	b.n	8005232 <Displ_WChar+0x172>
            if((b << j) & mask)  {
 80051cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	409a      	lsls	r2, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	623a      	str	r2, [r7, #32]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	897a      	ldrh	r2, [r7, #10]
 80051e8:	801a      	strh	r2, [r3, #0]
                if (size==2){
 80051ea:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d11c      	bne.n	800522c <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	623a      	str	r2, [r7, #32]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	897a      	ldrh	r2, [r7, #10]
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	e013      	b.n	800522c <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	623a      	str	r2, [r7, #32]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	893a      	ldrh	r2, [r7, #8]
 8005212:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005214:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005218:	2b02      	cmp	r3, #2
 800521a:	d107      	bne.n	800522c <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	623a      	str	r2, [r7, #32]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	893a      	ldrh	r2, [r7, #8]
 800522a:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	3301      	adds	r3, #1
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005236:	461a      	mov	r2, r3
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	4293      	cmp	r3, r2
 800523c:	d3c6      	bcc.n	80051cc <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 800523e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005242:	461a      	mov	r2, r3
 8005244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005246:	4413      	add	r3, r2
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	429a      	cmp	r2, r3
 8005250:	d38b      	bcc.n	800516a <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005258:	7efb      	ldrb	r3, [r7, #27]
 800525a:	b29a      	uxth	r2, r3
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	4413      	add	r3, r2
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29c      	uxth	r4, r3
 8005266:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800526a:	88bb      	ldrh	r3, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	88b9      	ldrh	r1, [r7, #4]
 8005276:	88f8      	ldrh	r0, [r7, #6]
 8005278:	4622      	mov	r2, r4
 800527a:	f7ff fa03 	bl	8004684 <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <Displ_WChar+0x1f0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	6a39      	ldr	r1, [r7, #32]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff f9a3 	bl	80045d2 <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <Displ_WChar+0x1f0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <Displ_WChar+0x1f4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d101      	bne.n	800529a <Displ_WChar+0x1da>
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <Displ_WChar+0x1f8>)
 8005298:	e000      	b.n	800529c <Displ_WChar+0x1dc>
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <Displ_WChar+0x1f4>)
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <Displ_WChar+0x1f0>)
 800529e:	6013      	str	r3, [r2, #0]

}
 80052a0:	bf00      	nop
 80052a2:	3734      	adds	r7, #52	; 0x34
 80052a4:	46bd      	mov	sp, r7
 80052a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80052aa:	b002      	add	sp, #8
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000040 	.word	0x20000040
 80052b4:	20002120 	.word	0x20002120
 80052b8:	20002520 	.word	0x20002520

080052bc <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80052bc:	b082      	sub	sp, #8
 80052be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c0:	b08b      	sub	sp, #44	; 0x2c
 80052c2:	af06      	add	r7, sp, #24
 80052c4:	603a      	str	r2, [r7, #0]
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c8:	4603      	mov	r3, r0
 80052ca:	80fb      	strh	r3, [r7, #6]
 80052cc:	460b      	mov	r3, r1
 80052ce:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 80052d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052d2:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 80052d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d922      	bls.n	8005322 <Displ_WString+0x66>
        delta<<=1;
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 80052e2:	e01e      	b.n	8005322 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781a      	ldrb	r2, [r3, #0]
 80052e8:	88bd      	ldrh	r5, [r7, #4]
 80052ea:	88fc      	ldrh	r4, [r7, #6]
 80052ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80052fa:	9302      	str	r3, [sp, #8]
 80052fc:	466e      	mov	r6, sp
 80052fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005302:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005306:	e886 0003 	stmia.w	r6, {r0, r1}
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	4629      	mov	r1, r5
 800530e:	4620      	mov	r0, r4
 8005310:	f7ff fed6 	bl	80050c0 <Displ_WChar>
        x += delta;
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	89fb      	ldrh	r3, [r7, #14]
 8005318:	4413      	add	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
        str++;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1dc      	bne.n	80052e4 <Displ_WString+0x28>
    }
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005336:	b002      	add	sp, #8
 8005338:	4770      	bx	lr
	...

0800533c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800533c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005374 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005340:	f7ff f8b0 	bl	80044a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005344:	480c      	ldr	r0, [pc, #48]	; (8005378 <LoopForever+0x6>)
  ldr r1, =_edata
 8005346:	490d      	ldr	r1, [pc, #52]	; (800537c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005348:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <LoopForever+0xe>)
  movs r3, #0
 800534a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800534c:	e002      	b.n	8005354 <LoopCopyDataInit>

0800534e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800534e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005352:	3304      	adds	r3, #4

08005354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005358:	d3f9      	bcc.n	800534e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800535c:	4c0a      	ldr	r4, [pc, #40]	; (8005388 <LoopForever+0x16>)
  movs r3, #0
 800535e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005360:	e001      	b.n	8005366 <LoopFillZerobss>

08005362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005364:	3204      	adds	r2, #4

08005366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005368:	d3fb      	bcc.n	8005362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800536a:	f003 fe25 	bl	8008fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800536e:	f7fd f8f3 	bl	8002558 <main>

08005372 <LoopForever>:

LoopForever:
    b LoopForever
 8005372:	e7fe      	b.n	8005372 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005374:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800537c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8005380:	0800b368 	.word	0x0800b368
  ldr r2, =_sbss
 8005384:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8005388:	2000293c 	.word	0x2000293c

0800538c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800538c:	e7fe      	b.n	800538c <ADC1_IRQHandler>
	...

08005390 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <HAL_Init+0x28>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <HAL_Init+0x28>)
 800539a:	f043 0310 	orr.w	r3, r3, #16
 800539e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053a0:	2003      	movs	r0, #3
 80053a2:	f000 f94f 	bl	8005644 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053a6:	200f      	movs	r0, #15
 80053a8:	f000 f808 	bl	80053bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053ac:	f7fe fe6e 	bl	800408c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40022000 	.word	0x40022000

080053bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053c4:	4b12      	ldr	r3, [pc, #72]	; (8005410 <HAL_InitTick+0x54>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_InitTick+0x58>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	4619      	mov	r1, r3
 80053ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f967 	bl	80056ae <HAL_SYSTICK_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e00e      	b.n	8005408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b0f      	cmp	r3, #15
 80053ee:	d80a      	bhi.n	8005406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053f0:	2200      	movs	r2, #0
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	f000 f92f 	bl	800565a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053fc:	4a06      	ldr	r2, [pc, #24]	; (8005418 <HAL_InitTick+0x5c>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e000      	b.n	8005408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000038 	.word	0x20000038
 8005414:	20000048 	.word	0x20000048
 8005418:	20000044 	.word	0x20000044

0800541c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_IncTick+0x20>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_IncTick+0x24>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4413      	add	r3, r2
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <HAL_IncTick+0x24>)
 800542e:	6013      	str	r3, [r2, #0]
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000048 	.word	0x20000048
 8005440:	20002928 	.word	0x20002928

08005444 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return uwTick;  
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <HAL_GetTick+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20002928 	.word	0x20002928

0800545c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005464:	f7ff ffee 	bl	8005444 <HAL_GetTick>
 8005468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d005      	beq.n	8005482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_Delay+0x44>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005482:	bf00      	nop
 8005484:	f7ff ffde 	bl	8005444 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	429a      	cmp	r2, r3
 8005492:	d8f7      	bhi.n	8005484 <HAL_Delay+0x28>
  {
  }
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000048 	.word	0x20000048

080054a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <__NVIC_SetPriorityGrouping+0x44>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054c0:	4013      	ands	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054d6:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <__NVIC_SetPriorityGrouping+0x44>)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	60d3      	str	r3, [r2, #12]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	e000ed00 	.word	0xe000ed00

080054ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <__NVIC_GetPriorityGrouping+0x18>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	0a1b      	lsrs	r3, r3, #8
 80054f6:	f003 0307 	and.w	r3, r3, #7
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	e000ed00 	.word	0xe000ed00

08005508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	2b00      	cmp	r3, #0
 8005518:	db0b      	blt.n	8005532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	f003 021f 	and.w	r2, r3, #31
 8005520:	4907      	ldr	r1, [pc, #28]	; (8005540 <__NVIC_EnableIRQ+0x38>)
 8005522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2001      	movs	r0, #1
 800552a:	fa00 f202 	lsl.w	r2, r0, r2
 800552e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000e100 	.word	0xe000e100

08005544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	6039      	str	r1, [r7, #0]
 800554e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005554:	2b00      	cmp	r3, #0
 8005556:	db0a      	blt.n	800556e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	490c      	ldr	r1, [pc, #48]	; (8005590 <__NVIC_SetPriority+0x4c>)
 800555e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005562:	0112      	lsls	r2, r2, #4
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	440b      	add	r3, r1
 8005568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800556c:	e00a      	b.n	8005584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	4908      	ldr	r1, [pc, #32]	; (8005594 <__NVIC_SetPriority+0x50>)
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	3b04      	subs	r3, #4
 800557c:	0112      	lsls	r2, r2, #4
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	440b      	add	r3, r1
 8005582:	761a      	strb	r2, [r3, #24]
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000e100 	.word	0xe000e100
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f1c3 0307 	rsb	r3, r3, #7
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	bf28      	it	cs
 80055b6:	2304      	movcs	r3, #4
 80055b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3304      	adds	r3, #4
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d902      	bls.n	80055c8 <NVIC_EncodePriority+0x30>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3b03      	subs	r3, #3
 80055c6:	e000      	b.n	80055ca <NVIC_EncodePriority+0x32>
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43da      	mvns	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	401a      	ands	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055e0:	f04f 31ff 	mov.w	r1, #4294967295
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ea:	43d9      	mvns	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f0:	4313      	orrs	r3, r2
         );
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3724      	adds	r7, #36	; 0x24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3b01      	subs	r3, #1
 800560c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005610:	d301      	bcc.n	8005616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005612:	2301      	movs	r3, #1
 8005614:	e00f      	b.n	8005636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005616:	4a0a      	ldr	r2, [pc, #40]	; (8005640 <SysTick_Config+0x40>)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3b01      	subs	r3, #1
 800561c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800561e:	210f      	movs	r1, #15
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	f7ff ff8e 	bl	8005544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <SysTick_Config+0x40>)
 800562a:	2200      	movs	r2, #0
 800562c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <SysTick_Config+0x40>)
 8005630:	2207      	movs	r2, #7
 8005632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	e000e010 	.word	0xe000e010

08005644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ff29 	bl	80054a4 <__NVIC_SetPriorityGrouping>
}
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b086      	sub	sp, #24
 800565e:	af00      	add	r7, sp, #0
 8005660:	4603      	mov	r3, r0
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800566c:	f7ff ff3e 	bl	80054ec <__NVIC_GetPriorityGrouping>
 8005670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	6978      	ldr	r0, [r7, #20]
 8005678:	f7ff ff8e 	bl	8005598 <NVIC_EncodePriority>
 800567c:	4602      	mov	r2, r0
 800567e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ff5d 	bl	8005544 <__NVIC_SetPriority>
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	4603      	mov	r3, r0
 800569a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800569c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff ff31 	bl	8005508 <__NVIC_EnableIRQ>
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff ffa2 	bl	8005600 <SysTick_Config>
 80056bc:	4603      	mov	r3, r0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056d6:	e14e      	b.n	8005976 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2101      	movs	r1, #1
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8140 	beq.w	8005970 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d005      	beq.n	8005708 <HAL_GPIO_Init+0x40>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d130      	bne.n	800576a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800573e:	2201      	movs	r2, #1
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4013      	ands	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 0201 	and.w	r2, r3, #1
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b03      	cmp	r3, #3
 8005774:	d017      	beq.n	80057a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d123      	bne.n	80057fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	08da      	lsrs	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3208      	adds	r2, #8
 80057ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	220f      	movs	r2, #15
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	08da      	lsrs	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3208      	adds	r2, #8
 80057f4:	6939      	ldr	r1, [r7, #16]
 80057f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 809a 	beq.w	8005970 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583c:	4b55      	ldr	r3, [pc, #340]	; (8005994 <HAL_GPIO_Init+0x2cc>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	4a54      	ldr	r2, [pc, #336]	; (8005994 <HAL_GPIO_Init+0x2cc>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6193      	str	r3, [r2, #24]
 8005848:	4b52      	ldr	r3, [pc, #328]	; (8005994 <HAL_GPIO_Init+0x2cc>)
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005854:	4a50      	ldr	r2, [pc, #320]	; (8005998 <HAL_GPIO_Init+0x2d0>)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	3302      	adds	r3, #2
 800585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800587e:	d013      	beq.n	80058a8 <HAL_GPIO_Init+0x1e0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a46      	ldr	r2, [pc, #280]	; (800599c <HAL_GPIO_Init+0x2d4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00d      	beq.n	80058a4 <HAL_GPIO_Init+0x1dc>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a45      	ldr	r2, [pc, #276]	; (80059a0 <HAL_GPIO_Init+0x2d8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <HAL_GPIO_Init+0x1d8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a44      	ldr	r2, [pc, #272]	; (80059a4 <HAL_GPIO_Init+0x2dc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_GPIO_Init+0x1d4>
 8005898:	2303      	movs	r3, #3
 800589a:	e006      	b.n	80058aa <HAL_GPIO_Init+0x1e2>
 800589c:	2305      	movs	r3, #5
 800589e:	e004      	b.n	80058aa <HAL_GPIO_Init+0x1e2>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e002      	b.n	80058aa <HAL_GPIO_Init+0x1e2>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <HAL_GPIO_Init+0x1e2>
 80058a8:	2300      	movs	r3, #0
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	f002 0203 	and.w	r2, r2, #3
 80058b0:	0092      	lsls	r2, r2, #2
 80058b2:	4093      	lsls	r3, r2
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058ba:	4937      	ldr	r1, [pc, #220]	; (8005998 <HAL_GPIO_Init+0x2d0>)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	3302      	adds	r3, #2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058c8:	4b37      	ldr	r3, [pc, #220]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80058ec:	4a2e      	ldr	r2, [pc, #184]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058f2:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005916:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800591c:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43db      	mvns	r3, r3
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005940:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005946:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	43db      	mvns	r3, r3
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4013      	ands	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800596a:	4a0f      	ldr	r2, [pc, #60]	; (80059a8 <HAL_GPIO_Init+0x2e0>)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3301      	adds	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f aea9 	bne.w	80056d8 <HAL_GPIO_Init+0x10>
  }
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40021000 	.word	0x40021000
 8005998:	40010000 	.word	0x40010000
 800599c:	48000400 	.word	0x48000400
 80059a0:	48000800 	.word	0x48000800
 80059a4:	48000c00 	.word	0x48000c00
 80059a8:	40010400 	.word	0x40010400

080059ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	887b      	ldrh	r3, [r7, #2]
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	e001      	b.n	80059ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
 80059e8:	4613      	mov	r3, r2
 80059ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059ec:	787b      	ldrb	r3, [r7, #1]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059f2:	887a      	ldrh	r2, [r7, #2]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059f8:	e002      	b.n	8005a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d006      	beq.n	8005a30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a22:	4a05      	ldr	r2, [pc, #20]	; (8005a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fc fff0 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40010400 	.word	0x40010400

08005a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e081      	b.n	8005b52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fe fb36 	bl	80040d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	e006      	b.n	8005ac4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ac2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d104      	bne.n	8005ad6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ad4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005af8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69d9      	ldr	r1, [r3, #28]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	813b      	strh	r3, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	f040 80f9 	bne.w	8005d76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_I2C_Mem_Write+0x34>
 8005b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e0ed      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_I2C_Mem_Write+0x4e>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e0e6      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bb2:	f7ff fc47 	bl	8005444 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2319      	movs	r3, #25
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fbcd 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0d1      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2221      	movs	r2, #33	; 0x21
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2240      	movs	r2, #64	; 0x40
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bfc:	88f8      	ldrh	r0, [r7, #6]
 8005bfe:	893a      	ldrh	r2, [r7, #8]
 8005c00:	8979      	ldrh	r1, [r7, #10]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fadd 	bl	80061cc <I2C_RequestMemoryWrite>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0a9      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2bff      	cmp	r3, #255	; 0xff
 8005c2c:	d90e      	bls.n	8005c4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	8979      	ldrh	r1, [r7, #10]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fd47 	bl	80066d8 <I2C_TransferConfig>
 8005c4a:	e00f      	b.n	8005c6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	8979      	ldrh	r1, [r7, #10]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fd36 	bl	80066d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fbc6 	bl	8006402 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e07b      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d034      	beq.n	8005d24 <HAL_I2C_Mem_Write+0x1c8>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d130      	bne.n	8005d24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2180      	movs	r1, #128	; 0x80
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fb49 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e04d      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2bff      	cmp	r3, #255	; 0xff
 8005ce4:	d90e      	bls.n	8005d04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	22ff      	movs	r2, #255	; 0xff
 8005cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	8979      	ldrh	r1, [r7, #10]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fceb 	bl	80066d8 <I2C_TransferConfig>
 8005d02:	e00f      	b.n	8005d24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	8979      	ldrh	r1, [r7, #10]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fcda 	bl	80066d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d19e      	bne.n	8005c6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fbac 	bl	8006490 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e01a      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2220      	movs	r2, #32
 8005d48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6859      	ldr	r1, [r3, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_I2C_Mem_Write+0x224>)
 8005d56:	400b      	ands	r3, r1
 8005d58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e000      	b.n	8005d78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	fe00e800 	.word	0xfe00e800

08005d84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	f040 80fd 	bne.w	8005fa6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_I2C_Mem_Read+0x34>
 8005db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0f1      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2C_Mem_Read+0x4e>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0ea      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dda:	f7ff fb33 	bl	8005444 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2319      	movs	r3, #25
 8005de6:	2201      	movs	r2, #1
 8005de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fab9 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0d5      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2222      	movs	r2, #34	; 0x22
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2240      	movs	r2, #64	; 0x40
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e24:	88f8      	ldrh	r0, [r7, #6]
 8005e26:	893a      	ldrh	r2, [r7, #8]
 8005e28:	8979      	ldrh	r1, [r7, #10]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4603      	mov	r3, r0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fa1d 	bl	8006274 <I2C_RequestMemoryRead>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0ad      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2bff      	cmp	r3, #255	; 0xff
 8005e54:	d90e      	bls.n	8005e74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	22ff      	movs	r2, #255	; 0xff
 8005e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	8979      	ldrh	r1, [r7, #10]
 8005e64:	4b52      	ldr	r3, [pc, #328]	; (8005fb0 <HAL_I2C_Mem_Read+0x22c>)
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fc33 	bl	80066d8 <I2C_TransferConfig>
 8005e72:	e00f      	b.n	8005e94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	8979      	ldrh	r1, [r7, #10]
 8005e86:	4b4a      	ldr	r3, [pc, #296]	; (8005fb0 <HAL_I2C_Mem_Read+0x22c>)
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fc22 	bl	80066d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fa60 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e07c      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d034      	beq.n	8005f54 <HAL_I2C_Mem_Read+0x1d0>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d130      	bne.n	8005f54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa31 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e04d      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2bff      	cmp	r3, #255	; 0xff
 8005f14:	d90e      	bls.n	8005f34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	8979      	ldrh	r1, [r7, #10]
 8005f24:	2300      	movs	r3, #0
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fbd3 	bl	80066d8 <I2C_TransferConfig>
 8005f32:	e00f      	b.n	8005f54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	8979      	ldrh	r1, [r7, #10]
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fbc2 	bl	80066d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d19a      	bne.n	8005e94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fa94 	bl	8006490 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e01a      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2220      	movs	r2, #32
 8005f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_I2C_Mem_Read+0x230>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e000      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
  }
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	80002400 	.word	0x80002400
 8005fb4:	fe00e800 	.word	0xfe00e800

08005fb8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	f040 80f3 	bne.w	80061c0 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe8:	d101      	bne.n	8005fee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005fea:	2302      	movs	r3, #2
 8005fec:	e0e9      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_I2C_IsDeviceReady+0x44>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e0e2      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2224      	movs	r2, #36	; 0x24
 8006008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <HAL_I2C_IsDeviceReady+0x72>
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006028:	e006      	b.n	8006038 <HAL_I2C_IsDeviceReady+0x80>
 800602a:	897b      	ldrh	r3, [r7, #10]
 800602c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006034:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800603e:	f7ff fa01 	bl	8005444 <HAL_GetTick>
 8006042:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b20      	cmp	r3, #32
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b10      	cmp	r3, #16
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006070:	e034      	b.n	80060dc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d01a      	beq.n	80060b0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800607a:	f7ff f9e3 	bl	8005444 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d302      	bcc.n	8006090 <HAL_I2C_IsDeviceReady+0xd8>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10f      	bne.n	80060b0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609c:	f043 0220 	orr.w	r2, r3, #32
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e088      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80060dc:	7ffb      	ldrb	r3, [r7, #31]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <HAL_I2C_IsDeviceReady+0x130>
 80060e2:	7fbb      	ldrb	r3, [r7, #30]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0c4      	beq.n	8006072 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d01a      	beq.n	800612c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2120      	movs	r1, #32
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f92f 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e058      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2220      	movs	r2, #32
 8006116:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e04a      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	2120      	movs	r1, #32
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f914 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e03d      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2210      	movs	r2, #16
 800614c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2220      	movs	r2, #32
 8006154:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	429a      	cmp	r2, r3
 800615c:	d118      	bne.n	8006190 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800616c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2200      	movs	r2, #0
 8006176:	2120      	movs	r1, #32
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f8f3 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e01c      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2220      	movs	r2, #32
 800618e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	3301      	adds	r3, #1
 8006194:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	429a      	cmp	r2, r3
 800619c:	f63f af39 	bhi.w	8006012 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ac:	f043 0220 	orr.w	r2, r3, #32
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80061c0:	2302      	movs	r3, #2
  }
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	4608      	mov	r0, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	4603      	mov	r3, r0
 80061dc:	817b      	strh	r3, [r7, #10]
 80061de:	460b      	mov	r3, r1
 80061e0:	813b      	strh	r3, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	8979      	ldrh	r1, [r7, #10]
 80061ec:	4b20      	ldr	r3, [pc, #128]	; (8006270 <I2C_RequestMemoryWrite+0xa4>)
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fa6f 	bl	80066d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f8ff 	bl	8006402 <I2C_WaitOnTXISFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e02c      	b.n	8006268 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d105      	bne.n	8006220 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006214:	893b      	ldrh	r3, [r7, #8]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	629a      	str	r2, [r3, #40]	; 0x28
 800621e:	e015      	b.n	800624c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006220:	893b      	ldrh	r3, [r7, #8]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	b29b      	uxth	r3, r3
 8006226:	b2da      	uxtb	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	69b9      	ldr	r1, [r7, #24]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f8e5 	bl	8006402 <I2C_WaitOnTXISFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e012      	b.n	8006268 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006242:	893b      	ldrh	r3, [r7, #8]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2200      	movs	r2, #0
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f884 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	80002000 	.word	0x80002000

08006274 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	8979      	ldrh	r1, [r7, #10]
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <I2C_RequestMemoryRead+0xa4>)
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa1c 	bl	80066d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	69b9      	ldr	r1, [r7, #24]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f8ac 	bl	8006402 <I2C_WaitOnTXISFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e02c      	b.n	800630e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d105      	bne.n	80062c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ba:	893b      	ldrh	r3, [r7, #8]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
 80062c4:	e015      	b.n	80062f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062c6:	893b      	ldrh	r3, [r7, #8]
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	69b9      	ldr	r1, [r7, #24]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f892 	bl	8006402 <I2C_WaitOnTXISFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e012      	b.n	800630e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062e8:	893b      	ldrh	r3, [r7, #8]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2200      	movs	r2, #0
 80062fa:	2140      	movs	r1, #64	; 0x40
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f831 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e000      	b.n	800630e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	80002000 	.word	0x80002000

0800631c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d103      	bne.n	800633a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	d007      	beq.n	8006358 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	619a      	str	r2, [r3, #24]
  }
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006374:	e031      	b.n	80063da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d02d      	beq.n	80063da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637e:	f7ff f861 	bl	8005444 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d122      	bne.n	80063da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4013      	ands	r3, r2
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d113      	bne.n	80063da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e00f      	b.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d0be      	beq.n	8006376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800640e:	e033      	b.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f87f 	bl	8006518 <I2C_IsErrorOccurred>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e031      	b.n	8006488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d025      	beq.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642c:	f7ff f80a 	bl	8005444 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	429a      	cmp	r2, r3
 800643a:	d302      	bcc.n	8006442 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d11a      	bne.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	d013      	beq.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006454:	f043 0220 	orr.w	r2, r3, #32
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e007      	b.n	8006488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b02      	cmp	r3, #2
 8006484:	d1c4      	bne.n	8006410 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800649c:	e02f      	b.n	80064fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f838 	bl	8006518 <I2C_IsErrorOccurred>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e02d      	b.n	800650e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b2:	f7fe ffc7 	bl	8005444 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d302      	bcc.n	80064c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11a      	bne.n	80064fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d013      	beq.n	80064fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e007      	b.n	800650e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b20      	cmp	r3, #32
 800650a:	d1c8      	bne.n	800649e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d068      	beq.n	8006616 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2210      	movs	r2, #16
 800654a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800654c:	e049      	b.n	80065e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d045      	beq.n	80065e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006556:	f7fe ff75 	bl	8005444 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <I2C_IsErrorOccurred+0x54>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d13a      	bne.n	80065e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006576:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800657e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800658a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658e:	d121      	bne.n	80065d4 <I2C_IsErrorOccurred+0xbc>
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006596:	d01d      	beq.n	80065d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006598:	7cfb      	ldrb	r3, [r7, #19]
 800659a:	2b20      	cmp	r3, #32
 800659c:	d01a      	beq.n	80065d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065ae:	f7fe ff49 	bl	8005444 <HAL_GetTick>
 80065b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065b4:	e00e      	b.n	80065d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065b6:	f7fe ff45 	bl	8005444 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b19      	cmp	r3, #25
 80065c2:	d907      	bls.n	80065d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	f043 0320 	orr.w	r3, r3, #32
 80065ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80065d2:	e006      	b.n	80065e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d1e9      	bne.n	80065b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d003      	beq.n	80065f8 <I2C_IsErrorOccurred+0xe0>
 80065f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0aa      	beq.n	800654e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2220      	movs	r2, #32
 8006606:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f043 0304 	orr.w	r3, r3, #4
 800660e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	f043 0308 	orr.w	r3, r3, #8
 8006650:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800665a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	f043 0302 	orr.w	r3, r3, #2
 8006672:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01c      	beq.n	80066c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff fe45 	bl	800631c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <I2C_IsErrorOccurred+0x1bc>)
 800669e:	400b      	ands	r3, r1
 80066a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80066c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3728      	adds	r7, #40	; 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	fe00e800 	.word	0xfe00e800

080066d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	817b      	strh	r3, [r7, #10]
 80066e6:	4613      	mov	r3, r2
 80066e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066ea:	897b      	ldrh	r3, [r7, #10]
 80066ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066f0:	7a7b      	ldrb	r3, [r7, #9]
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	4313      	orrs	r3, r2
 8006702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006706:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	0d5b      	lsrs	r3, r3, #21
 8006712:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <I2C_TransferConfig+0x60>)
 8006718:	430b      	orrs	r3, r1
 800671a:	43db      	mvns	r3, r3
 800671c:	ea02 0103 	and.w	r1, r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	03ff63ff 	.word	0x03ff63ff

0800673c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b20      	cmp	r3, #32
 8006750:	d138      	bne.n	80067c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800675c:	2302      	movs	r3, #2
 800675e:	e032      	b.n	80067c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2224      	movs	r2, #36	; 0x24
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800678e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6819      	ldr	r1, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e000      	b.n	80067c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d139      	bne.n	800685c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e033      	b.n	800685e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2224      	movs	r2, #36	; 0x24
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006824:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	e000      	b.n	800685e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800685c:	2302      	movs	r3, #2
  }
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006872:	af00      	add	r7, sp, #0
 8006874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800687c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800687e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f001 b823 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 817d 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80068a8:	4bbc      	ldr	r3, [pc, #752]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d00c      	beq.n	80068ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068b4:	4bb9      	ldr	r3, [pc, #740]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f003 030c 	and.w	r3, r3, #12
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d15c      	bne.n	800697a <HAL_RCC_OscConfig+0x10e>
 80068c0:	4bb6      	ldr	r3, [pc, #728]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068cc:	d155      	bne.n	800697a <HAL_RCC_OscConfig+0x10e>
 80068ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80068da:	fa93 f3a3 	rbit	r3, r3
 80068de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80068e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e6:	fab3 f383 	clz	r3, r3
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d102      	bne.n	8006900 <HAL_RCC_OscConfig+0x94>
 80068fa:	4ba8      	ldr	r3, [pc, #672]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	e015      	b.n	800692c <HAL_RCC_OscConfig+0xc0>
 8006900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006904:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006908:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800690c:	fa93 f3a3 	rbit	r3, r3
 8006910:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006918:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800691c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006920:	fa93 f3a3 	rbit	r3, r3
 8006924:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006928:	4b9c      	ldr	r3, [pc, #624]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006930:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006934:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006938:	fa92 f2a2 	rbit	r2, r2
 800693c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006940:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006944:	fab2 f282 	clz	r2, r2
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	f042 0220 	orr.w	r2, r2, #32
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	f002 021f 	and.w	r2, r2, #31
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f202 	lsl.w	r2, r1, r2
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 811f 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x334>
 8006962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 8116 	bne.w	8006ba0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f000 bfaf 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800697a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800697e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698a:	d106      	bne.n	800699a <HAL_RCC_OscConfig+0x12e>
 800698c:	4b83      	ldr	r3, [pc, #524]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a82      	ldr	r2, [pc, #520]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	e036      	b.n	8006a08 <HAL_RCC_OscConfig+0x19c>
 800699a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800699e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCC_OscConfig+0x158>
 80069aa:	4b7c      	ldr	r3, [pc, #496]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a7b      	ldr	r2, [pc, #492]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	4b79      	ldr	r3, [pc, #484]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a78      	ldr	r2, [pc, #480]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e021      	b.n	8006a08 <HAL_RCC_OscConfig+0x19c>
 80069c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCC_OscConfig+0x184>
 80069d6:	4b71      	ldr	r3, [pc, #452]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a70      	ldr	r2, [pc, #448]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4b6e      	ldr	r3, [pc, #440]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a6d      	ldr	r2, [pc, #436]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e00b      	b.n	8006a08 <HAL_RCC_OscConfig+0x19c>
 80069f0:	4b6a      	ldr	r3, [pc, #424]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a69      	ldr	r2, [pc, #420]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	4b67      	ldr	r3, [pc, #412]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a66      	ldr	r2, [pc, #408]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a08:	4b64      	ldr	r3, [pc, #400]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	f023 020f 	bic.w	r2, r3, #15
 8006a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	495f      	ldr	r1, [pc, #380]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d059      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a32:	f7fe fd07 	bl	8005444 <HAL_GetTick>
 8006a36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a3c:	f7fe fd02 	bl	8005444 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b64      	cmp	r3, #100	; 0x64
 8006a4a:	d902      	bls.n	8006a52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	f000 bf43 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
 8006a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a56:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006a66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	fab3 f383 	clz	r3, r3
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f043 0301 	orr.w	r3, r3, #1
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d102      	bne.n	8006a84 <HAL_RCC_OscConfig+0x218>
 8006a7e:	4b47      	ldr	r3, [pc, #284]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	e015      	b.n	8006ab0 <HAL_RCC_OscConfig+0x244>
 8006a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a88:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006a90:	fa93 f3a3 	rbit	r3, r3
 8006a94:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a9c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006aa0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006aa4:	fa93 f3a3 	rbit	r3, r3
 8006aa8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006aac:	4b3b      	ldr	r3, [pc, #236]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ab4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006ab8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006abc:	fa92 f2a2 	rbit	r2, r2
 8006ac0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006ac4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006ac8:	fab2 f282 	clz	r2, r2
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	f042 0220 	orr.w	r2, r2, #32
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	f002 021f 	and.w	r2, r2, #31
 8006ad8:	2101      	movs	r1, #1
 8006ada:	fa01 f202 	lsl.w	r2, r1, r2
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0ab      	beq.n	8006a3c <HAL_RCC_OscConfig+0x1d0>
 8006ae4:	e05d      	b.n	8006ba2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae6:	f7fe fcad 	bl	8005444 <HAL_GetTick>
 8006aea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aee:	e00a      	b.n	8006b06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fe fca8 	bl	8005444 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b64      	cmp	r3, #100	; 0x64
 8006afe:	d902      	bls.n	8006b06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	f000 bee9 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
 8006b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006b12:	fa93 f3a3 	rbit	r3, r3
 8006b16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006b1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1e:	fab3 f383 	clz	r3, r3
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d102      	bne.n	8006b38 <HAL_RCC_OscConfig+0x2cc>
 8006b32:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	e015      	b.n	8006b64 <HAL_RCC_OscConfig+0x2f8>
 8006b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b3c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006b44:	fa93 f3a3 	rbit	r3, r3
 8006b48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b50:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006b54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006b58:	fa93 f3a3 	rbit	r3, r3
 8006b5c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006b60:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <HAL_RCC_OscConfig+0x330>)
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b68:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006b6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006b70:	fa92 f2a2 	rbit	r2, r2
 8006b74:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006b78:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006b7c:	fab2 f282 	clz	r2, r2
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	f042 0220 	orr.w	r2, r2, #32
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	f002 021f 	and.w	r2, r2, #31
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1ab      	bne.n	8006af0 <HAL_RCC_OscConfig+0x284>
 8006b98:	e003      	b.n	8006ba2 <HAL_RCC_OscConfig+0x336>
 8006b9a:	bf00      	nop
 8006b9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 817d 	beq.w	8006eb2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006bb8:	4ba6      	ldr	r3, [pc, #664]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f003 030c 	and.w	r3, r3, #12
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006bc4:	4ba3      	ldr	r3, [pc, #652]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f003 030c 	and.w	r3, r3, #12
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d172      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x44a>
 8006bd0:	4ba0      	ldr	r3, [pc, #640]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d16c      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x44a>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006be6:	fa93 f3a3 	rbit	r3, r3
 8006bea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006bee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf2:	fab3 f383 	clz	r3, r3
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d102      	bne.n	8006c0c <HAL_RCC_OscConfig+0x3a0>
 8006c06:	4b93      	ldr	r3, [pc, #588]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	e013      	b.n	8006c34 <HAL_RCC_OscConfig+0x3c8>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c12:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006c16:	fa93 f3a3 	rbit	r3, r3
 8006c1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006c1e:	2302      	movs	r3, #2
 8006c20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006c24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006c28:	fa93 f3a3 	rbit	r3, r3
 8006c2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006c30:	4b88      	ldr	r3, [pc, #544]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	2202      	movs	r2, #2
 8006c36:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006c3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006c3e:	fa92 f2a2 	rbit	r2, r2
 8006c42:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006c46:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006c4a:	fab2 f282 	clz	r2, r2
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	f042 0220 	orr.w	r2, r2, #32
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	f002 021f 	and.w	r2, r2, #31
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c60:	4013      	ands	r3, r2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HAL_RCC_OscConfig+0x410>
 8006c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d002      	beq.n	8006c7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f000 be2e 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7c:	4b75      	ldr	r3, [pc, #468]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	21f8      	movs	r1, #248	; 0xf8
 8006c92:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006c9a:	fa91 f1a1 	rbit	r1, r1
 8006c9e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006ca2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006ca6:	fab1 f181 	clz	r1, r1
 8006caa:	b2c9      	uxtb	r1, r1
 8006cac:	408b      	lsls	r3, r1
 8006cae:	4969      	ldr	r1, [pc, #420]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cb4:	e0fd      	b.n	8006eb2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8088 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x56c>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006cd2:	fa93 f3a3 	rbit	r3, r3
 8006cd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006cda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cde:	fab3 f383 	clz	r3, r3
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf4:	f7fe fba6 	bl	8005444 <HAL_GetTick>
 8006cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cfc:	e00a      	b.n	8006d14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cfe:	f7fe fba1 	bl	8005444 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d902      	bls.n	8006d14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	f000 bde2 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
 8006d14:	2302      	movs	r3, #2
 8006d16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006d1e:	fa93 f3a3 	rbit	r3, r3
 8006d22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006d26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d2a:	fab3 f383 	clz	r3, r3
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d102      	bne.n	8006d44 <HAL_RCC_OscConfig+0x4d8>
 8006d3e:	4b45      	ldr	r3, [pc, #276]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	e013      	b.n	8006d6c <HAL_RCC_OscConfig+0x500>
 8006d44:	2302      	movs	r3, #2
 8006d46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006d4e:	fa93 f3a3 	rbit	r3, r3
 8006d52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006d56:	2302      	movs	r3, #2
 8006d58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006d5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006d60:	fa93 f3a3 	rbit	r3, r3
 8006d64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006d68:	4b3a      	ldr	r3, [pc, #232]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006d72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006d76:	fa92 f2a2 	rbit	r2, r2
 8006d7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006d7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006d82:	fab2 f282 	clz	r2, r2
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	f042 0220 	orr.w	r2, r2, #32
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	f002 021f 	and.w	r2, r2, #31
 8006d92:	2101      	movs	r1, #1
 8006d94:	fa01 f202 	lsl.w	r2, r1, r2
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0af      	beq.n	8006cfe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d9e:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	21f8      	movs	r1, #248	; 0xf8
 8006db4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006dbc:	fa91 f1a1 	rbit	r1, r1
 8006dc0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006dc4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006dc8:	fab1 f181 	clz	r1, r1
 8006dcc:	b2c9      	uxtb	r1, r1
 8006dce:	408b      	lsls	r3, r1
 8006dd0:	4920      	ldr	r1, [pc, #128]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]
 8006dd6:	e06c      	b.n	8006eb2 <HAL_RCC_OscConfig+0x646>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006de2:	fa93 f3a3 	rbit	r3, r3
 8006de6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006dea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dee:	fab3 f383 	clz	r3, r3
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006df8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2300      	movs	r3, #0
 8006e02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e04:	f7fe fb1e 	bl	8005444 <HAL_GetTick>
 8006e08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e0c:	e00a      	b.n	8006e24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e0e:	f7fe fb19 	bl	8005444 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d902      	bls.n	8006e24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	f000 bd5a 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
 8006e24:	2302      	movs	r3, #2
 8006e26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006e2e:	fa93 f3a3 	rbit	r3, r3
 8006e32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3a:	fab3 f383 	clz	r3, r3
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d104      	bne.n	8006e58 <HAL_RCC_OscConfig+0x5ec>
 8006e4e:	4b01      	ldr	r3, [pc, #4]	; (8006e54 <HAL_RCC_OscConfig+0x5e8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	e015      	b.n	8006e80 <HAL_RCC_OscConfig+0x614>
 8006e54:	40021000 	.word	0x40021000
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e62:	fa93 f3a3 	rbit	r3, r3
 8006e66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e74:	fa93 f3a3 	rbit	r3, r3
 8006e78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e7c:	4bc8      	ldr	r3, [pc, #800]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	2202      	movs	r2, #2
 8006e82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006e86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006e8a:	fa92 f2a2 	rbit	r2, r2
 8006e8e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006e92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006e96:	fab2 f282 	clz	r2, r2
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	f042 0220 	orr.w	r2, r2, #32
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	f002 021f 	and.w	r2, r2, #31
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1ad      	bne.n	8006e0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8110 	beq.w	80070e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d079      	beq.n	8006fcc <HAL_RCC_OscConfig+0x760>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ede:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ee2:	fa93 f3a3 	rbit	r3, r3
 8006ee6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eee:	fab3 f383 	clz	r3, r3
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4bab      	ldr	r3, [pc, #684]	; (80071a4 <HAL_RCC_OscConfig+0x938>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	461a      	mov	r2, r3
 8006efe:	2301      	movs	r3, #1
 8006f00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f02:	f7fe fa9f 	bl	8005444 <HAL_GetTick>
 8006f06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f0a:	e00a      	b.n	8006f22 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f0c:	f7fe fa9a 	bl	8005444 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d902      	bls.n	8006f22 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	f000 bcdb 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
 8006f22:	2302      	movs	r3, #2
 8006f24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f2c:	fa93 f3a3 	rbit	r3, r3
 8006f30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	fa93 f2a3 	rbit	r2, r3
 8006f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f60:	2202      	movs	r2, #2
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	fa93 f2a3 	rbit	r2, r3
 8006f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7c:	4b88      	ldr	r3, [pc, #544]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 8006f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006f88:	2102      	movs	r1, #2
 8006f8a:	6019      	str	r1, [r3, #0]
 8006f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	fa93 f1a3 	rbit	r1, r3
 8006f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006fa2:	6019      	str	r1, [r3, #0]
  return result;
 8006fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fa8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	fab3 f383 	clz	r3, r3
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0a0      	beq.n	8006f0c <HAL_RCC_OscConfig+0x6a0>
 8006fca:	e08d      	b.n	80070e8 <HAL_RCC_OscConfig+0x87c>
 8006fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	fa93 f2a3 	rbit	r2, r3
 8006fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006fee:	601a      	str	r2, [r3, #0]
  return result;
 8006ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ff4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ff8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ffa:	fab3 f383 	clz	r3, r3
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	461a      	mov	r2, r3
 8007002:	4b68      	ldr	r3, [pc, #416]	; (80071a4 <HAL_RCC_OscConfig+0x938>)
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	461a      	mov	r2, r3
 800700a:	2300      	movs	r3, #0
 800700c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800700e:	f7fe fa19 	bl	8005444 <HAL_GetTick>
 8007012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007016:	e00a      	b.n	800702e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007018:	f7fe fa14 	bl	8005444 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d902      	bls.n	800702e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	f000 bc55 	b.w	80078d8 <HAL_RCC_OscConfig+0x106c>
 800702e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007032:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007036:	2202      	movs	r2, #2
 8007038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800703e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	fa93 f2a3 	rbit	r2, r3
 8007048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800704c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007056:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800705a:	2202      	movs	r2, #2
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007062:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	fa93 f2a3 	rbit	r2, r3
 800706c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	2202      	movs	r2, #2
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	fa93 f2a3 	rbit	r2, r3
 8007090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007094:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007098:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800709a:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 800709c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800709e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80070a6:	2102      	movs	r1, #2
 80070a8:	6019      	str	r1, [r3, #0]
 80070aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	fa93 f1a3 	rbit	r1, r3
 80070b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80070c0:	6019      	str	r1, [r3, #0]
  return result;
 80070c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	fab3 f383 	clz	r3, r3
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	4013      	ands	r3, r2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d197      	bne.n	8007018 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 81a1 	beq.w	8007440 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070fe:	2300      	movs	r3, #0
 8007100:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007104:	4b26      	ldr	r3, [pc, #152]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d116      	bne.n	800713e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007110:	4b23      	ldr	r3, [pc, #140]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	4a22      	ldr	r2, [pc, #136]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 8007116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711a:	61d3      	str	r3, [r2, #28]
 800711c:	4b20      	ldr	r3, [pc, #128]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007128:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007132:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007136:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713e:	4b1a      	ldr	r3, [pc, #104]	; (80071a8 <HAL_RCC_OscConfig+0x93c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d11a      	bne.n	8007180 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800714a:	4b17      	ldr	r3, [pc, #92]	; (80071a8 <HAL_RCC_OscConfig+0x93c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a16      	ldr	r2, [pc, #88]	; (80071a8 <HAL_RCC_OscConfig+0x93c>)
 8007150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007154:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007156:	f7fe f975 	bl	8005444 <HAL_GetTick>
 800715a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800715e:	e009      	b.n	8007174 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007160:	f7fe f970 	bl	8005444 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b64      	cmp	r3, #100	; 0x64
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e3b1      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <HAL_RCC_OscConfig+0x93c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0ef      	beq.n	8007160 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d10d      	bne.n	80071ac <HAL_RCC_OscConfig+0x940>
 8007190:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	4a02      	ldr	r2, [pc, #8]	; (80071a0 <HAL_RCC_OscConfig+0x934>)
 8007196:	f043 0301 	orr.w	r3, r3, #1
 800719a:	6213      	str	r3, [r2, #32]
 800719c:	e03c      	b.n	8007218 <HAL_RCC_OscConfig+0x9ac>
 800719e:	bf00      	nop
 80071a0:	40021000 	.word	0x40021000
 80071a4:	10908120 	.word	0x10908120
 80071a8:	40007000 	.word	0x40007000
 80071ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10c      	bne.n	80071d6 <HAL_RCC_OscConfig+0x96a>
 80071bc:	4bc1      	ldr	r3, [pc, #772]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	4ac0      	ldr	r2, [pc, #768]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	6213      	str	r3, [r2, #32]
 80071c8:	4bbe      	ldr	r3, [pc, #760]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	4abd      	ldr	r2, [pc, #756]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071ce:	f023 0304 	bic.w	r3, r3, #4
 80071d2:	6213      	str	r3, [r2, #32]
 80071d4:	e020      	b.n	8007218 <HAL_RCC_OscConfig+0x9ac>
 80071d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d10c      	bne.n	8007200 <HAL_RCC_OscConfig+0x994>
 80071e6:	4bb7      	ldr	r3, [pc, #732]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	4ab6      	ldr	r2, [pc, #728]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071ec:	f043 0304 	orr.w	r3, r3, #4
 80071f0:	6213      	str	r3, [r2, #32]
 80071f2:	4bb4      	ldr	r3, [pc, #720]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	4ab3      	ldr	r2, [pc, #716]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	6213      	str	r3, [r2, #32]
 80071fe:	e00b      	b.n	8007218 <HAL_RCC_OscConfig+0x9ac>
 8007200:	4bb0      	ldr	r3, [pc, #704]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	4aaf      	ldr	r2, [pc, #700]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	6213      	str	r3, [r2, #32]
 800720c:	4bad      	ldr	r3, [pc, #692]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	4aac      	ldr	r2, [pc, #688]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 8007212:	f023 0304 	bic.w	r3, r3, #4
 8007216:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800721c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8081 	beq.w	800732c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800722a:	f7fe f90b 	bl	8005444 <HAL_GetTick>
 800722e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007232:	e00b      	b.n	800724c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007234:	f7fe f906 	bl	8005444 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	f241 3288 	movw	r2, #5000	; 0x1388
 8007244:	4293      	cmp	r3, r2
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e345      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
 800724c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007250:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007254:	2202      	movs	r2, #2
 8007256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800725c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	fa93 f2a3 	rbit	r2, r3
 8007266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800726a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007274:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007278:	2202      	movs	r2, #2
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007280:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	fa93 f2a3 	rbit	r2, r3
 800728a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800728e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007292:	601a      	str	r2, [r3, #0]
  return result;
 8007294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007298:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800729c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729e:	fab3 f383 	clz	r3, r3
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	f043 0302 	orr.w	r3, r3, #2
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d102      	bne.n	80072b8 <HAL_RCC_OscConfig+0xa4c>
 80072b2:	4b84      	ldr	r3, [pc, #528]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	e013      	b.n	80072e0 <HAL_RCC_OscConfig+0xa74>
 80072b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80072c0:	2202      	movs	r2, #2
 80072c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	fa93 f2a3 	rbit	r2, r3
 80072d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	4b79      	ldr	r3, [pc, #484]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80072e8:	2102      	movs	r1, #2
 80072ea:	6011      	str	r1, [r2, #0]
 80072ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	fa92 f1a2 	rbit	r1, r2
 80072fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007302:	6011      	str	r1, [r2, #0]
  return result;
 8007304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007308:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	fab2 f282 	clz	r2, r2
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	f002 021f 	and.w	r2, r2, #31
 800731e:	2101      	movs	r1, #1
 8007320:	fa01 f202 	lsl.w	r2, r1, r2
 8007324:	4013      	ands	r3, r2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d084      	beq.n	8007234 <HAL_RCC_OscConfig+0x9c8>
 800732a:	e07f      	b.n	800742c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800732c:	f7fe f88a 	bl	8005444 <HAL_GetTick>
 8007330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007334:	e00b      	b.n	800734e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007336:	f7fe f885 	bl	8005444 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f241 3288 	movw	r2, #5000	; 0x1388
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e2c4      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
 800734e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007352:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007356:	2202      	movs	r2, #2
 8007358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800735e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	fa93 f2a3 	rbit	r2, r3
 8007368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800736c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007376:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800737a:	2202      	movs	r2, #2
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007382:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	fa93 f2a3 	rbit	r2, r3
 800738c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007390:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007394:	601a      	str	r2, [r3, #0]
  return result;
 8007396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800739a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800739e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073a0:	fab3 f383 	clz	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f043 0302 	orr.w	r3, r3, #2
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d102      	bne.n	80073ba <HAL_RCC_OscConfig+0xb4e>
 80073b4:	4b43      	ldr	r3, [pc, #268]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	e013      	b.n	80073e2 <HAL_RCC_OscConfig+0xb76>
 80073ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80073c2:	2202      	movs	r2, #2
 80073c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	fa93 f2a3 	rbit	r2, r3
 80073d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	4b39      	ldr	r3, [pc, #228]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80073e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80073ea:	2102      	movs	r1, #2
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80073f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80073f6:	6812      	ldr	r2, [r2, #0]
 80073f8:	fa92 f1a2 	rbit	r1, r2
 80073fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007400:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007404:	6011      	str	r1, [r2, #0]
  return result;
 8007406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800740a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	fab2 f282 	clz	r2, r2
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	f002 021f 	and.w	r2, r2, #31
 8007420:	2101      	movs	r1, #1
 8007422:	fa01 f202 	lsl.w	r2, r1, r2
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d184      	bne.n	8007336 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800742c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007430:	2b01      	cmp	r3, #1
 8007432:	d105      	bne.n	8007440 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007434:	4b23      	ldr	r3, [pc, #140]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007444:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8242 	beq.w	80078d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <HAL_RCC_OscConfig+0xc58>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f003 030c 	and.w	r3, r3, #12
 800745a:	2b08      	cmp	r3, #8
 800745c:	f000 8213 	beq.w	8007886 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	2b02      	cmp	r3, #2
 800746e:	f040 8162 	bne.w	8007736 <HAL_RCC_OscConfig+0xeca>
 8007472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007476:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800747a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800747e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007484:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	fa93 f2a3 	rbit	r2, r3
 800748e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007492:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007496:	601a      	str	r2, [r3, #0]
  return result;
 8007498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800749c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80074a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a2:	fab3 f383 	clz	r3, r3
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	461a      	mov	r2, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b8:	f7fd ffc4 	bl	8005444 <HAL_GetTick>
 80074bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074c0:	e00c      	b.n	80074dc <HAL_RCC_OscConfig+0xc70>
 80074c2:	bf00      	nop
 80074c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074c8:	f7fd ffbc 	bl	8005444 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e1fd      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
 80074dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80074e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	fa93 f2a3 	rbit	r2, r3
 80074f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007500:	601a      	str	r2, [r3, #0]
  return result;
 8007502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007506:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800750a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800750c:	fab3 f383 	clz	r3, r3
 8007510:	b2db      	uxtb	r3, r3
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	d102      	bne.n	8007526 <HAL_RCC_OscConfig+0xcba>
 8007520:	4bb0      	ldr	r3, [pc, #704]	; (80077e4 <HAL_RCC_OscConfig+0xf78>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	e027      	b.n	8007576 <HAL_RCC_OscConfig+0xd0a>
 8007526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800752e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007538:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	fa93 f2a3 	rbit	r2, r3
 8007542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007546:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007550:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	fa93 f2a3 	rbit	r2, r3
 8007568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	4b9c      	ldr	r3, [pc, #624]	; (80077e4 <HAL_RCC_OscConfig+0xf78>)
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800757a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800757e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007582:	6011      	str	r1, [r2, #0]
 8007584:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007588:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	fa92 f1a2 	rbit	r1, r2
 8007592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007596:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800759a:	6011      	str	r1, [r2, #0]
  return result;
 800759c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80075a4:	6812      	ldr	r2, [r2, #0]
 80075a6:	fab2 f282 	clz	r2, r2
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	f042 0220 	orr.w	r2, r2, #32
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	f002 021f 	and.w	r2, r2, #31
 80075b6:	2101      	movs	r1, #1
 80075b8:	fa01 f202 	lsl.w	r2, r1, r2
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d182      	bne.n	80074c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075c2:	4b88      	ldr	r3, [pc, #544]	; (80077e4 <HAL_RCC_OscConfig+0xf78>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80075ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	430b      	orrs	r3, r1
 80075e4:	497f      	ldr	r1, [pc, #508]	; (80077e4 <HAL_RCC_OscConfig+0xf78>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	604b      	str	r3, [r1, #4]
 80075ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80075f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	fa93 f2a3 	rbit	r2, r3
 8007606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800760a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800760e:	601a      	str	r2, [r3, #0]
  return result;
 8007610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007614:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007618:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800761a:	fab3 f383 	clz	r3, r3
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	461a      	mov	r2, r3
 800762c:	2301      	movs	r3, #1
 800762e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007630:	f7fd ff08 	bl	8005444 <HAL_GetTick>
 8007634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007638:	e009      	b.n	800764e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800763a:	f7fd ff03 	bl	8005444 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e144      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
 800764e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007652:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800765a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800765c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007660:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	fa93 f2a3 	rbit	r2, r3
 800766a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800766e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007672:	601a      	str	r2, [r3, #0]
  return result;
 8007674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007678:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800767c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800767e:	fab3 f383 	clz	r3, r3
 8007682:	b2db      	uxtb	r3, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	d102      	bne.n	8007698 <HAL_RCC_OscConfig+0xe2c>
 8007692:	4b54      	ldr	r3, [pc, #336]	; (80077e4 <HAL_RCC_OscConfig+0xf78>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	e027      	b.n	80076e8 <HAL_RCC_OscConfig+0xe7c>
 8007698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80076a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	fa93 f2a3 	rbit	r2, r3
 80076b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80076c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	fa93 f2a3 	rbit	r2, r3
 80076da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	4b3f      	ldr	r3, [pc, #252]	; (80077e4 <HAL_RCC_OscConfig+0xf78>)
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80076f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	fa92 f1a2 	rbit	r1, r2
 8007704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007708:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800770c:	6011      	str	r1, [r2, #0]
  return result;
 800770e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007712:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	fab2 f282 	clz	r2, r2
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	f042 0220 	orr.w	r2, r2, #32
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	f002 021f 	and.w	r2, r2, #31
 8007728:	2101      	movs	r1, #1
 800772a:	fa01 f202 	lsl.w	r2, r1, r2
 800772e:	4013      	ands	r3, r2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d082      	beq.n	800763a <HAL_RCC_OscConfig+0xdce>
 8007734:	e0cf      	b.n	80078d6 <HAL_RCC_OscConfig+0x106a>
 8007736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800773e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007748:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	fa93 f2a3 	rbit	r2, r3
 8007752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007756:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800775a:	601a      	str	r2, [r3, #0]
  return result;
 800775c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007760:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007764:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007766:	fab3 f383 	clz	r3, r3
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007770:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	461a      	mov	r2, r3
 8007778:	2300      	movs	r3, #0
 800777a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777c:	f7fd fe62 	bl	8005444 <HAL_GetTick>
 8007780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007784:	e009      	b.n	800779a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007786:	f7fd fe5d 	bl	8005444 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e09e      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
 800779a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800779e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80077a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	fa93 f2a3 	rbit	r2, r3
 80077b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80077be:	601a      	str	r2, [r3, #0]
  return result;
 80077c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80077c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077ca:	fab3 f383 	clz	r3, r3
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d104      	bne.n	80077e8 <HAL_RCC_OscConfig+0xf7c>
 80077de:	4b01      	ldr	r3, [pc, #4]	; (80077e4 <HAL_RCC_OscConfig+0xf78>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	e029      	b.n	8007838 <HAL_RCC_OscConfig+0xfcc>
 80077e4:	40021000 	.word	0x40021000
 80077e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80077f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	fa93 f2a3 	rbit	r2, r3
 8007804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007808:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007812:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007820:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	fa93 f2a3 	rbit	r2, r3
 800782a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	4b2b      	ldr	r3, [pc, #172]	; (80078e4 <HAL_RCC_OscConfig+0x1078>)
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800783c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007840:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007844:	6011      	str	r1, [r2, #0]
 8007846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800784a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800784e:	6812      	ldr	r2, [r2, #0]
 8007850:	fa92 f1a2 	rbit	r1, r2
 8007854:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007858:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800785c:	6011      	str	r1, [r2, #0]
  return result;
 800785e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007862:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	fab2 f282 	clz	r2, r2
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	f042 0220 	orr.w	r2, r2, #32
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	f002 021f 	and.w	r2, r2, #31
 8007878:	2101      	movs	r1, #1
 800787a:	fa01 f202 	lsl.w	r2, r1, r2
 800787e:	4013      	ands	r3, r2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d180      	bne.n	8007786 <HAL_RCC_OscConfig+0xf1a>
 8007884:	e027      	b.n	80078d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800788a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e01e      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800789a:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <HAL_RCC_OscConfig+0x1078>)
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80078a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80078a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80078aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d10b      	bne.n	80078d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80078ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80078be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80078c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d001      	beq.n	80078d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40021000 	.word	0x40021000

080078e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b09e      	sub	sp, #120	; 0x78
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e162      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007900:	4b90      	ldr	r3, [pc, #576]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d910      	bls.n	8007930 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790e:	4b8d      	ldr	r3, [pc, #564]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f023 0207 	bic.w	r2, r3, #7
 8007916:	498b      	ldr	r1, [pc, #556]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	4313      	orrs	r3, r2
 800791c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800791e:	4b89      	ldr	r3, [pc, #548]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d001      	beq.n	8007930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e14a      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d008      	beq.n	800794e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800793c:	4b82      	ldr	r3, [pc, #520]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	497f      	ldr	r1, [pc, #508]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 800794a:	4313      	orrs	r3, r2
 800794c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80dc 	beq.w	8007b14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d13c      	bne.n	80079de <HAL_RCC_ClockConfig+0xf6>
 8007964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007968:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800796a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800796c:	fa93 f3a3 	rbit	r3, r3
 8007970:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007974:	fab3 f383 	clz	r3, r3
 8007978:	b2db      	uxtb	r3, r3
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	b2db      	uxtb	r3, r3
 800797e:	f043 0301 	orr.w	r3, r3, #1
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d102      	bne.n	800798e <HAL_RCC_ClockConfig+0xa6>
 8007988:	4b6f      	ldr	r3, [pc, #444]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	e00f      	b.n	80079ae <HAL_RCC_ClockConfig+0xc6>
 800798e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007996:	fa93 f3a3 	rbit	r3, r3
 800799a:	667b      	str	r3, [r7, #100]	; 0x64
 800799c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079a0:	663b      	str	r3, [r7, #96]	; 0x60
 80079a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a4:	fa93 f3a3 	rbit	r3, r3
 80079a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079aa:	4b67      	ldr	r3, [pc, #412]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80079b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80079b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079b6:	fa92 f2a2 	rbit	r2, r2
 80079ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80079bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079be:	fab2 f282 	clz	r2, r2
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	f042 0220 	orr.w	r2, r2, #32
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	f002 021f 	and.w	r2, r2, #31
 80079ce:	2101      	movs	r1, #1
 80079d0:	fa01 f202 	lsl.w	r2, r1, r2
 80079d4:	4013      	ands	r3, r2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d17b      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e0f3      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d13c      	bne.n	8007a60 <HAL_RCC_ClockConfig+0x178>
 80079e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ee:	fa93 f3a3 	rbit	r3, r3
 80079f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80079f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079f6:	fab3 f383 	clz	r3, r3
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	095b      	lsrs	r3, r3, #5
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d102      	bne.n	8007a10 <HAL_RCC_ClockConfig+0x128>
 8007a0a:	4b4f      	ldr	r3, [pc, #316]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	e00f      	b.n	8007a30 <HAL_RCC_ClockConfig+0x148>
 8007a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a18:	fa93 f3a3 	rbit	r3, r3
 8007a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a22:	643b      	str	r3, [r7, #64]	; 0x40
 8007a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a26:	fa93 f3a3 	rbit	r3, r3
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a2c:	4b46      	ldr	r3, [pc, #280]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a34:	63ba      	str	r2, [r7, #56]	; 0x38
 8007a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a38:	fa92 f2a2 	rbit	r2, r2
 8007a3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a40:	fab2 f282 	clz	r2, r2
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	f042 0220 	orr.w	r2, r2, #32
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	f002 021f 	and.w	r2, r2, #31
 8007a50:	2101      	movs	r1, #1
 8007a52:	fa01 f202 	lsl.w	r2, r1, r2
 8007a56:	4013      	ands	r3, r2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d13a      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0b2      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x2de>
 8007a60:	2302      	movs	r3, #2
 8007a62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	fa93 f3a3 	rbit	r3, r3
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6e:	fab3 f383 	clz	r3, r3
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d102      	bne.n	8007a88 <HAL_RCC_ClockConfig+0x1a0>
 8007a82:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	e00d      	b.n	8007aa4 <HAL_RCC_ClockConfig+0x1bc>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	fa93 f3a3 	rbit	r3, r3
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
 8007a94:	2302      	movs	r3, #2
 8007a96:	623b      	str	r3, [r7, #32]
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	fa93 f3a3 	rbit	r3, r3
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	4b29      	ldr	r3, [pc, #164]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	61ba      	str	r2, [r7, #24]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	fa92 f2a2 	rbit	r2, r2
 8007aae:	617a      	str	r2, [r7, #20]
  return result;
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	fab2 f282 	clz	r2, r2
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	f042 0220 	orr.w	r2, r2, #32
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	f002 021f 	and.w	r2, r2, #31
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e079      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ad2:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f023 0203 	bic.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	491a      	ldr	r1, [pc, #104]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ae4:	f7fd fcae 	bl	8005444 <HAL_GetTick>
 8007ae8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aea:	e00a      	b.n	8007b02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aec:	f7fd fcaa 	bl	8005444 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e061      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <HAL_RCC_ClockConfig+0x260>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f003 020c 	and.w	r2, r3, #12
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d1eb      	bne.n	8007aec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b14:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d214      	bcs.n	8007b4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b22:	4b08      	ldr	r3, [pc, #32]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f023 0207 	bic.w	r2, r3, #7
 8007b2a:	4906      	ldr	r1, [pc, #24]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b32:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <HAL_RCC_ClockConfig+0x25c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d005      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e040      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x2de>
 8007b44:	40022000 	.word	0x40022000
 8007b48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d008      	beq.n	8007b6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b58:	4b1d      	ldr	r3, [pc, #116]	; (8007bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	491a      	ldr	r1, [pc, #104]	; (8007bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b76:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	4912      	ldr	r1, [pc, #72]	; (8007bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007b8a:	f000 f829 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 8007b8e:	4601      	mov	r1, r0
 8007b90:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b98:	22f0      	movs	r2, #240	; 0xf0
 8007b9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	fa92 f2a2 	rbit	r2, r2
 8007ba2:	60fa      	str	r2, [r7, #12]
  return result;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	fab2 f282 	clz	r2, r2
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	40d3      	lsrs	r3, r2
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <HAL_RCC_ClockConfig+0x2ec>)
 8007bb0:	5cd3      	ldrb	r3, [r2, r3]
 8007bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8007bb6:	4a08      	ldr	r2, [pc, #32]	; (8007bd8 <HAL_RCC_ClockConfig+0x2f0>)
 8007bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <HAL_RCC_ClockConfig+0x2f4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fd fbfc 	bl	80053bc <HAL_InitTick>
  
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3778      	adds	r7, #120	; 0x78
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	0800b1e0 	.word	0x0800b1e0
 8007bd8:	20000038 	.word	0x20000038
 8007bdc:	20000044 	.word	0x20000044

08007be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b08b      	sub	sp, #44	; 0x2c
 8007be4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	2300      	movs	r3, #0
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007bfa:	4b29      	ldr	r3, [pc, #164]	; (8007ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f003 030c 	and.w	r3, r3, #12
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d002      	beq.n	8007c10 <HAL_RCC_GetSysClockFreq+0x30>
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d003      	beq.n	8007c16 <HAL_RCC_GetSysClockFreq+0x36>
 8007c0e:	e03c      	b.n	8007c8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c10:	4b24      	ldr	r3, [pc, #144]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c12:	623b      	str	r3, [r7, #32]
      break;
 8007c14:	e03c      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007c1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007c20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	fa92 f2a2 	rbit	r2, r2
 8007c28:	607a      	str	r2, [r7, #4]
  return result;
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	fab2 f282 	clz	r2, r2
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	40d3      	lsrs	r3, r2
 8007c34:	4a1c      	ldr	r2, [pc, #112]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007c36:	5cd3      	ldrb	r3, [r2, r3]
 8007c38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007c3a:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	220f      	movs	r2, #15
 8007c44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	fa92 f2a2 	rbit	r2, r2
 8007c4c:	60fa      	str	r2, [r7, #12]
  return result;
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	fab2 f282 	clz	r2, r2
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	40d3      	lsrs	r3, r2
 8007c58:	4a14      	ldr	r2, [pc, #80]	; (8007cac <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c5a:	5cd3      	ldrb	r3, [r2, r3]
 8007c5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d008      	beq.n	8007c7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007c68:	4a0e      	ldr	r2, [pc, #56]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
 8007c78:	e004      	b.n	8007c84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	4a0c      	ldr	r2, [pc, #48]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	623b      	str	r3, [r7, #32]
      break;
 8007c88:	e002      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c8a:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c8c:	623b      	str	r3, [r7, #32]
      break;
 8007c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c90:	6a3b      	ldr	r3, [r7, #32]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	372c      	adds	r7, #44	; 0x2c
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	007a1200 	.word	0x007a1200
 8007ca8:	0800b1f8 	.word	0x0800b1f8
 8007cac:	0800b208 	.word	0x0800b208
 8007cb0:	003d0900 	.word	0x003d0900

08007cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cb8:	4b03      	ldr	r3, [pc, #12]	; (8007cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cba:	681b      	ldr	r3, [r3, #0]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20000038 	.word	0x20000038

08007ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007cd2:	f7ff ffef 	bl	8007cb4 <HAL_RCC_GetHCLKFreq>
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ce0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007ce4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	fa92 f2a2 	rbit	r2, r2
 8007cec:	603a      	str	r2, [r7, #0]
  return result;
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	fab2 f282 	clz	r2, r2
 8007cf4:	b2d2      	uxtb	r2, r2
 8007cf6:	40d3      	lsrs	r3, r2
 8007cf8:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8007cfa:	5cd3      	ldrb	r3, [r2, r3]
 8007cfc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	0800b1f0 	.word	0x0800b1f0

08007d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007d16:	f7ff ffcd 	bl	8007cb4 <HAL_RCC_GetHCLKFreq>
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007d24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007d28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	fa92 f2a2 	rbit	r2, r2
 8007d30:	603a      	str	r2, [r7, #0]
  return result;
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	fab2 f282 	clz	r2, r2
 8007d38:	b2d2      	uxtb	r2, r2
 8007d3a:	40d3      	lsrs	r3, r2
 8007d3c:	4a04      	ldr	r2, [pc, #16]	; (8007d50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007d3e:	5cd3      	ldrb	r3, [r2, r3]
 8007d40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40021000 	.word	0x40021000
 8007d50:	0800b1f0 	.word	0x0800b1f0

08007d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b092      	sub	sp, #72	; 0x48
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 80d4 	beq.w	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d78:	4b4e      	ldr	r3, [pc, #312]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10e      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d84:	4b4b      	ldr	r3, [pc, #300]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	4a4a      	ldr	r2, [pc, #296]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8e:	61d3      	str	r3, [r2, #28]
 8007d90:	4b48      	ldr	r3, [pc, #288]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da2:	4b45      	ldr	r3, [pc, #276]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d118      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dae:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a41      	ldr	r2, [pc, #260]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dba:	f7fd fb43 	bl	8005444 <HAL_GetTick>
 8007dbe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dc2:	f7fd fb3f 	bl	8005444 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b64      	cmp	r3, #100	; 0x64
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e13c      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dd4:	4b38      	ldr	r3, [pc, #224]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007de0:	4b34      	ldr	r3, [pc, #208]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8084 	beq.w	8007efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d07c      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e00:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	fa93 f3a3 	rbit	r3, r3
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e1a:	fab3 f383 	clz	r3, r3
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	4b26      	ldr	r3, [pc, #152]	; (8007ebc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	fa93 f3a3 	rbit	r3, r3
 8007e3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e3e:	fab3 f383 	clz	r3, r3
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e56:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04b      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e62:	f7fd faef 	bl	8005444 <HAL_GetTick>
 8007e66:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e68:	e00a      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e6a:	f7fd faeb 	bl	8005444 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e0e6      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8007e80:	2302      	movs	r3, #2
 8007e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	fa93 f3a3 	rbit	r3, r3
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	623b      	str	r3, [r7, #32]
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	fa93 f3a3 	rbit	r3, r3
 8007e96:	61fb      	str	r3, [r7, #28]
  return result;
 8007e98:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e9a:	fab3 f383 	clz	r3, r3
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f043 0302 	orr.w	r3, r3, #2
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d108      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007eae:	4b01      	ldr	r3, [pc, #4]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	e00d      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	40007000 	.word	0x40007000
 8007ebc:	10908100 	.word	0x10908100
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	fa93 f3a3 	rbit	r3, r3
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	4b62      	ldr	r3, [pc, #392]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	613a      	str	r2, [r7, #16]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	fa92 f2a2 	rbit	r2, r2
 8007eda:	60fa      	str	r2, [r7, #12]
  return result;
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	fab2 f282 	clz	r2, r2
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	f002 021f 	and.w	r2, r2, #31
 8007eee:	2101      	movs	r1, #1
 8007ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0b7      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007efa:	4b57      	ldr	r3, [pc, #348]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4954      	ldr	r1, [pc, #336]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007f0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d105      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f14:	4b50      	ldr	r3, [pc, #320]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	4a4f      	ldr	r2, [pc, #316]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f2c:	4b4a      	ldr	r3, [pc, #296]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	f023 0203 	bic.w	r2, r3, #3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	4947      	ldr	r1, [pc, #284]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f4a:	4b43      	ldr	r3, [pc, #268]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	f023 0210 	bic.w	r2, r3, #16
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	4940      	ldr	r1, [pc, #256]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d008      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f68:	4b3b      	ldr	r3, [pc, #236]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	f023 0220 	bic.w	r2, r3, #32
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	4938      	ldr	r1, [pc, #224]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d008      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f86:	4b34      	ldr	r3, [pc, #208]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	4931      	ldr	r1, [pc, #196]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d008      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fa4:	4b2c      	ldr	r3, [pc, #176]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	4929      	ldr	r1, [pc, #164]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d008      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8007fc2:	4b25      	ldr	r3, [pc, #148]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	4922      	ldr	r1, [pc, #136]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d008      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	491a      	ldr	r1, [pc, #104]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007ffe:	4b16      	ldr	r3, [pc, #88]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	4913      	ldr	r1, [pc, #76]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800800c:	4313      	orrs	r3, r2
 800800e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d008      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800801c:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	490b      	ldr	r1, [pc, #44]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800802a:	4313      	orrs	r3, r2
 800802c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d008      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800803a:	4b07      	ldr	r3, [pc, #28]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008046:	4904      	ldr	r1, [pc, #16]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008048:	4313      	orrs	r3, r2
 800804a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3748      	adds	r7, #72	; 0x48
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40021000 	.word	0x40021000

0800805c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e09d      	b.n	80081aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d108      	bne.n	8008088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800807e:	d009      	beq.n	8008094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	61da      	str	r2, [r3, #28]
 8008086:	e005      	b.n	8008094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fc f854 	bl	800415c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080d4:	d902      	bls.n	80080dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	e002      	b.n	80080e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80080dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80080ea:	d007      	beq.n	80080fc <HAL_SPI_Init+0xa0>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080f4:	d002      	beq.n	80080fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813e:	ea42 0103 	orr.w	r1, r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	0c1b      	lsrs	r3, r3, #16
 8008158:	f003 0204 	and.w	r2, r3, #4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008178:	ea42 0103 	orr.w	r1, r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69da      	ldr	r2, [r3, #28]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b088      	sub	sp, #32
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	4613      	mov	r3, r2
 80081c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_SPI_Transmit+0x22>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e15f      	b.n	8008494 <HAL_SPI_Transmit+0x2e2>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081dc:	f7fd f932 	bl	8005444 <HAL_GetTick>
 80081e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80081e2:	88fb      	ldrh	r3, [r7, #6]
 80081e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d002      	beq.n	80081f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
 80081f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081f6:	e148      	b.n	800848a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_SPI_Transmit+0x52>
 80081fe:	88fb      	ldrh	r3, [r7, #6]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008208:	e13f      	b.n	800848a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2203      	movs	r2, #3
 800820e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	88fa      	ldrh	r2, [r7, #6]
 8008222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	88fa      	ldrh	r2, [r7, #6]
 8008228:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008254:	d10f      	bne.n	8008276 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b40      	cmp	r3, #64	; 0x40
 8008282:	d007      	beq.n	8008294 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800829c:	d94f      	bls.n	800833e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_SPI_Transmit+0xfa>
 80082a6:	8afb      	ldrh	r3, [r7, #22]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d142      	bne.n	8008332 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b0:	881a      	ldrh	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	1c9a      	adds	r2, r3, #2
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80082d0:	e02f      	b.n	8008332 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d112      	bne.n	8008306 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	881a      	ldrh	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	1c9a      	adds	r2, r3, #2
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	3b01      	subs	r3, #1
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008304:	e015      	b.n	8008332 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008306:	f7fd f89d 	bl	8005444 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d803      	bhi.n	800831e <HAL_SPI_Transmit+0x16c>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d102      	bne.n	8008324 <HAL_SPI_Transmit+0x172>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008330:	e0ab      	b.n	800848a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1ca      	bne.n	80082d2 <HAL_SPI_Transmit+0x120>
 800833c:	e080      	b.n	8008440 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_SPI_Transmit+0x19a>
 8008346:	8afb      	ldrh	r3, [r7, #22]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d174      	bne.n	8008436 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b01      	cmp	r3, #1
 8008354:	d912      	bls.n	800837c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	881a      	ldrh	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	1c9a      	adds	r2, r3, #2
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b02      	subs	r3, #2
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800837a:	e05c      	b.n	8008436 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	330c      	adds	r3, #12
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80083a2:	e048      	b.n	8008436 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d12b      	bne.n	800840a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d912      	bls.n	80083e2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	881a      	ldrh	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	1c9a      	adds	r2, r3, #2
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b02      	subs	r3, #2
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083e0:	e029      	b.n	8008436 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	7812      	ldrb	r2, [r2, #0]
 80083ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008408:	e015      	b.n	8008436 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800840a:	f7fd f81b 	bl	8005444 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d803      	bhi.n	8008422 <HAL_SPI_Transmit+0x270>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008420:	d102      	bne.n	8008428 <HAL_SPI_Transmit+0x276>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008434:	e029      	b.n	800848a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800843a:	b29b      	uxth	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1b1      	bne.n	80083a4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f947 	bl	80086d8 <SPI_EndRxTxTransaction>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800845e:	2300      	movs	r3, #0
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	77fb      	strb	r3, [r7, #31]
 8008480:	e003      	b.n	800848a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008492:	7ffb      	ldrb	r3, [r7, #31]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	4613      	mov	r3, r2
 80084aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084ac:	f7fc ffca 	bl	8005444 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	4413      	add	r3, r2
 80084ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084bc:	f7fc ffc2 	bl	8005444 <HAL_GetTick>
 80084c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084c2:	4b39      	ldr	r3, [pc, #228]	; (80085a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	015b      	lsls	r3, r3, #5
 80084c8:	0d1b      	lsrs	r3, r3, #20
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	fb02 f303 	mul.w	r3, r2, r3
 80084d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084d2:	e054      	b.n	800857e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d050      	beq.n	800857e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084dc:	f7fc ffb2 	bl	8005444 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d902      	bls.n	80084f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d13d      	bne.n	800856e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800850a:	d111      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008514:	d004      	beq.n	8008520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851e:	d107      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008538:	d10f      	bne.n	800855a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e017      	b.n	800859e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3b01      	subs	r3, #1
 800857c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4013      	ands	r3, r2
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	429a      	cmp	r2, r3
 800858c:	bf0c      	ite	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	2300      	movne	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	429a      	cmp	r2, r3
 800859a:	d19b      	bne.n	80084d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000038 	.word	0x20000038

080085ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08a      	sub	sp, #40	; 0x28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80085be:	f7fc ff41 	bl	8005444 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	1a9b      	subs	r3, r3, r2
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	4413      	add	r3, r2
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80085ce:	f7fc ff39 	bl	8005444 <HAL_GetTick>
 80085d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80085dc:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	00da      	lsls	r2, r3, #3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	0d1b      	lsrs	r3, r3, #20
 80085ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
 80085f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80085f4:	e060      	b.n	80086b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80085fc:	d107      	bne.n	800860e <SPI_WaitFifoStateUntilTimeout+0x62>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800860c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d050      	beq.n	80086b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008616:	f7fc ff15 	bl	8005444 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	429a      	cmp	r2, r3
 8008624:	d902      	bls.n	800862c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	d13d      	bne.n	80086a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800863a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008644:	d111      	bne.n	800866a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864e:	d004      	beq.n	800865a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008658:	d107      	bne.n	800866a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008672:	d10f      	bne.n	8008694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e010      	b.n	80086ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	4013      	ands	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d196      	bne.n	80085f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3728      	adds	r7, #40	; 0x28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000038 	.word	0x20000038

080086d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff ff5b 	bl	80085ac <SPI_WaitFifoStateUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008700:	f043 0220 	orr.w	r2, r3, #32
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e027      	b.n	800875c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	2180      	movs	r1, #128	; 0x80
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f7ff fec0 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008726:	f043 0220 	orr.w	r2, r3, #32
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e014      	b.n	800875c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff ff34 	bl	80085ac <SPI_WaitFifoStateUntilTimeout>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874e:	f043 0220 	orr.w	r2, r3, #32
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e000      	b.n	800875c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e040      	b.n	80087f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7fb fd2c 	bl	80041e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2224      	movs	r2, #36	; 0x24
 8008790:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f8b6 	bl	8008914 <UART_SetConfig>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d101      	bne.n	80087b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e022      	b.n	80087f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9e0 	bl	8008b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa67 	bl	8008cc4 <UART_CheckIdleState>
 80087f6:	4603      	mov	r3, r0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08a      	sub	sp, #40	; 0x28
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008814:	2b20      	cmp	r3, #32
 8008816:	d178      	bne.n	800890a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_UART_Transmit+0x24>
 800881e:	88fb      	ldrh	r3, [r7, #6]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e071      	b.n	800890c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2221      	movs	r2, #33	; 0x21
 8008834:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008836:	f7fc fe05 	bl	8005444 <HAL_GetTick>
 800883a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	88fa      	ldrh	r2, [r7, #6]
 8008840:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	88fa      	ldrh	r2, [r7, #6]
 8008848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008854:	d108      	bne.n	8008868 <HAL_UART_Transmit+0x68>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	e003      	b.n	8008870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008870:	e030      	b.n	80088d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2200      	movs	r2, #0
 800887a:	2180      	movs	r1, #128	; 0x80
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fac9 	bl	8008e14 <UART_WaitOnFlagUntilTimeout>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2220      	movs	r2, #32
 800888c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e03c      	b.n	800890c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	881a      	ldrh	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088a4:	b292      	uxth	r2, r2
 80088a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	3302      	adds	r3, #2
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	e008      	b.n	80088c2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	b292      	uxth	r2, r2
 80088ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088da:	b29b      	uxth	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1c8      	bne.n	8008872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2200      	movs	r2, #0
 80088e8:	2140      	movs	r1, #64	; 0x40
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fa92 	bl	8008e14 <UART_WaitOnFlagUntilTimeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e005      	b.n	800890c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	e000      	b.n	800890c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800890a:	2302      	movs	r3, #2
  }
}
 800890c:	4618      	mov	r0, r3
 800890e:	3720      	adds	r7, #32
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	4b8a      	ldr	r3, [pc, #552]	; (8008b68 <UART_SetConfig+0x254>)
 8008940:	4013      	ands	r3, r2
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	6812      	ldr	r2, [r2, #0]
 8008946:	6979      	ldr	r1, [r7, #20]
 8008948:	430b      	orrs	r3, r1
 800894a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	430a      	orrs	r2, r1
 8008984:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a78      	ldr	r2, [pc, #480]	; (8008b6c <UART_SetConfig+0x258>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d120      	bne.n	80089d2 <UART_SetConfig+0xbe>
 8008990:	4b77      	ldr	r3, [pc, #476]	; (8008b70 <UART_SetConfig+0x25c>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	f003 0303 	and.w	r3, r3, #3
 8008998:	2b03      	cmp	r3, #3
 800899a:	d817      	bhi.n	80089cc <UART_SetConfig+0xb8>
 800899c:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0x90>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	080089b5 	.word	0x080089b5
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089c7 	.word	0x080089c7
 80089b0:	080089bb 	.word	0x080089bb
 80089b4:	2300      	movs	r3, #0
 80089b6:	77fb      	strb	r3, [r7, #31]
 80089b8:	e01d      	b.n	80089f6 <UART_SetConfig+0xe2>
 80089ba:	2302      	movs	r3, #2
 80089bc:	77fb      	strb	r3, [r7, #31]
 80089be:	e01a      	b.n	80089f6 <UART_SetConfig+0xe2>
 80089c0:	2304      	movs	r3, #4
 80089c2:	77fb      	strb	r3, [r7, #31]
 80089c4:	e017      	b.n	80089f6 <UART_SetConfig+0xe2>
 80089c6:	2308      	movs	r3, #8
 80089c8:	77fb      	strb	r3, [r7, #31]
 80089ca:	e014      	b.n	80089f6 <UART_SetConfig+0xe2>
 80089cc:	2310      	movs	r3, #16
 80089ce:	77fb      	strb	r3, [r7, #31]
 80089d0:	e011      	b.n	80089f6 <UART_SetConfig+0xe2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a67      	ldr	r2, [pc, #412]	; (8008b74 <UART_SetConfig+0x260>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d102      	bne.n	80089e2 <UART_SetConfig+0xce>
 80089dc:	2300      	movs	r3, #0
 80089de:	77fb      	strb	r3, [r7, #31]
 80089e0:	e009      	b.n	80089f6 <UART_SetConfig+0xe2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a64      	ldr	r2, [pc, #400]	; (8008b78 <UART_SetConfig+0x264>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d102      	bne.n	80089f2 <UART_SetConfig+0xde>
 80089ec:	2300      	movs	r3, #0
 80089ee:	77fb      	strb	r3, [r7, #31]
 80089f0:	e001      	b.n	80089f6 <UART_SetConfig+0xe2>
 80089f2:	2310      	movs	r3, #16
 80089f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fe:	d15a      	bne.n	8008ab6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8008a00:	7ffb      	ldrb	r3, [r7, #31]
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	d827      	bhi.n	8008a56 <UART_SetConfig+0x142>
 8008a06:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <UART_SetConfig+0xf8>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a31 	.word	0x08008a31
 8008a10:	08008a39 	.word	0x08008a39
 8008a14:	08008a41 	.word	0x08008a41
 8008a18:	08008a57 	.word	0x08008a57
 8008a1c:	08008a47 	.word	0x08008a47
 8008a20:	08008a57 	.word	0x08008a57
 8008a24:	08008a57 	.word	0x08008a57
 8008a28:	08008a57 	.word	0x08008a57
 8008a2c:	08008a4f 	.word	0x08008a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a30:	f7ff f94c 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 8008a34:	61b8      	str	r0, [r7, #24]
        break;
 8008a36:	e013      	b.n	8008a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a38:	f7ff f96a 	bl	8007d10 <HAL_RCC_GetPCLK2Freq>
 8008a3c:	61b8      	str	r0, [r7, #24]
        break;
 8008a3e:	e00f      	b.n	8008a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a40:	4b4e      	ldr	r3, [pc, #312]	; (8008b7c <UART_SetConfig+0x268>)
 8008a42:	61bb      	str	r3, [r7, #24]
        break;
 8008a44:	e00c      	b.n	8008a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a46:	f7ff f8cb 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 8008a4a:	61b8      	str	r0, [r7, #24]
        break;
 8008a4c:	e008      	b.n	8008a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a52:	61bb      	str	r3, [r7, #24]
        break;
 8008a54:	e004      	b.n	8008a60 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8008a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d074      	beq.n	8008b50 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	005a      	lsls	r2, r3, #1
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	441a      	add	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b0f      	cmp	r3, #15
 8008a80:	d916      	bls.n	8008ab0 <UART_SetConfig+0x19c>
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a88:	d212      	bcs.n	8008ab0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f023 030f 	bic.w	r3, r3, #15
 8008a92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	89fb      	ldrh	r3, [r7, #14]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	89fa      	ldrh	r2, [r7, #14]
 8008aac:	60da      	str	r2, [r3, #12]
 8008aae:	e04f      	b.n	8008b50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	77bb      	strb	r3, [r7, #30]
 8008ab4:	e04c      	b.n	8008b50 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ab6:	7ffb      	ldrb	r3, [r7, #31]
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d828      	bhi.n	8008b0e <UART_SetConfig+0x1fa>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x1b0>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008ae9 	.word	0x08008ae9
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008b0f 	.word	0x08008b0f
 8008ad4:	08008aff 	.word	0x08008aff
 8008ad8:	08008b0f 	.word	0x08008b0f
 8008adc:	08008b0f 	.word	0x08008b0f
 8008ae0:	08008b0f 	.word	0x08008b0f
 8008ae4:	08008b07 	.word	0x08008b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae8:	f7ff f8f0 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 8008aec:	61b8      	str	r0, [r7, #24]
        break;
 8008aee:	e013      	b.n	8008b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af0:	f7ff f90e 	bl	8007d10 <HAL_RCC_GetPCLK2Freq>
 8008af4:	61b8      	str	r0, [r7, #24]
        break;
 8008af6:	e00f      	b.n	8008b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af8:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <UART_SetConfig+0x268>)
 8008afa:	61bb      	str	r3, [r7, #24]
        break;
 8008afc:	e00c      	b.n	8008b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afe:	f7ff f86f 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 8008b02:	61b8      	str	r0, [r7, #24]
        break;
 8008b04:	e008      	b.n	8008b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0a:	61bb      	str	r3, [r7, #24]
        break;
 8008b0c:	e004      	b.n	8008b18 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	77bb      	strb	r3, [r7, #30]
        break;
 8008b16:	bf00      	nop
    }

    if (pclk != 0U)
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d018      	beq.n	8008b50 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	085a      	lsrs	r2, r3, #1
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	441a      	add	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b0f      	cmp	r3, #15
 8008b36:	d909      	bls.n	8008b4c <UART_SetConfig+0x238>
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3e:	d205      	bcs.n	8008b4c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	e001      	b.n	8008b50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008b5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	efff69f3 	.word	0xefff69f3
 8008b6c:	40013800 	.word	0x40013800
 8008b70:	40021000 	.word	0x40021000
 8008b74:	40004400 	.word	0x40004400
 8008b78:	40004800 	.word	0x40004800
 8008b7c:	007a1200 	.word	0x007a1200

08008b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00a      	beq.n	8008bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01a      	beq.n	8008c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c7e:	d10a      	bne.n	8008c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
  }
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b098      	sub	sp, #96	; 0x60
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cd4:	f7fc fbb6 	bl	8005444 <HAL_GetTick>
 8008cd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0308 	and.w	r3, r3, #8
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d12e      	bne.n	8008d46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f88c 	bl	8008e14 <UART_WaitOnFlagUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d021      	beq.n	8008d46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d16:	653b      	str	r3, [r7, #80]	; 0x50
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d20:	647b      	str	r3, [r7, #68]	; 0x44
 8008d22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e6      	bne.n	8008d02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2220      	movs	r2, #32
 8008d38:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e062      	b.n	8008e0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0304 	and.w	r3, r3, #4
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d149      	bne.n	8008de8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f856 	bl	8008e14 <UART_WaitOnFlagUntilTimeout>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d03c      	beq.n	8008de8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e6      	bne.n	8008d6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0301 	bic.w	r3, r3, #1
 8008db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dc0:	61fa      	str	r2, [r7, #28]
 8008dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	69b9      	ldr	r1, [r7, #24]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e011      	b.n	8008e0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3758      	adds	r7, #88	; 0x58
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4613      	mov	r3, r2
 8008e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e24:	e049      	b.n	8008eba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d045      	beq.n	8008eba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e2e:	f7fc fb09 	bl	8005444 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d302      	bcc.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e048      	b.n	8008eda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d031      	beq.n	8008eba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d110      	bne.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 f838 	bl	8008ee2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2208      	movs	r2, #8
 8008e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e029      	b.n	8008eda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e94:	d111      	bne.n	8008eba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 f81e 	bl	8008ee2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e00f      	b.n	8008eda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	bf0c      	ite	eq
 8008eca:	2301      	moveq	r3, #1
 8008ecc:	2300      	movne	r3, #0
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d0a6      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b095      	sub	sp, #84	; 0x54
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f08:	643b      	str	r3, [r7, #64]	; 0x40
 8008f0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e5      	bne.n	8008f1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d118      	bne.n	8008f8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f023 0310 	bic.w	r3, r3, #16
 8008f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f76:	61bb      	str	r3, [r7, #24]
 8008f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6979      	ldr	r1, [r7, #20]
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	613b      	str	r3, [r7, #16]
   return(result);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e6      	bne.n	8008f58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008f9e:	bf00      	nop
 8008fa0:	3754      	adds	r7, #84	; 0x54
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <__errno>:
 8008fac:	4b01      	ldr	r3, [pc, #4]	; (8008fb4 <__errno+0x8>)
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	2000004c 	.word	0x2000004c

08008fb8 <__libc_init_array>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	4d0d      	ldr	r5, [pc, #52]	; (8008ff0 <__libc_init_array+0x38>)
 8008fbc:	4c0d      	ldr	r4, [pc, #52]	; (8008ff4 <__libc_init_array+0x3c>)
 8008fbe:	1b64      	subs	r4, r4, r5
 8008fc0:	10a4      	asrs	r4, r4, #2
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	42a6      	cmp	r6, r4
 8008fc6:	d109      	bne.n	8008fdc <__libc_init_array+0x24>
 8008fc8:	4d0b      	ldr	r5, [pc, #44]	; (8008ff8 <__libc_init_array+0x40>)
 8008fca:	4c0c      	ldr	r4, [pc, #48]	; (8008ffc <__libc_init_array+0x44>)
 8008fcc:	f001 f914 	bl	800a1f8 <_init>
 8008fd0:	1b64      	subs	r4, r4, r5
 8008fd2:	10a4      	asrs	r4, r4, #2
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	42a6      	cmp	r6, r4
 8008fd8:	d105      	bne.n	8008fe6 <__libc_init_array+0x2e>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe0:	4798      	blx	r3
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__libc_init_array+0xc>
 8008fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fea:	4798      	blx	r3
 8008fec:	3601      	adds	r6, #1
 8008fee:	e7f2      	b.n	8008fd6 <__libc_init_array+0x1e>
 8008ff0:	0800b360 	.word	0x0800b360
 8008ff4:	0800b360 	.word	0x0800b360
 8008ff8:	0800b360 	.word	0x0800b360
 8008ffc:	0800b364 	.word	0x0800b364

08009000 <memset>:
 8009000:	4402      	add	r2, r0
 8009002:	4603      	mov	r3, r0
 8009004:	4293      	cmp	r3, r2
 8009006:	d100      	bne.n	800900a <memset+0xa>
 8009008:	4770      	bx	lr
 800900a:	f803 1b01 	strb.w	r1, [r3], #1
 800900e:	e7f9      	b.n	8009004 <memset+0x4>

08009010 <iprintf>:
 8009010:	b40f      	push	{r0, r1, r2, r3}
 8009012:	4b0a      	ldr	r3, [pc, #40]	; (800903c <iprintf+0x2c>)
 8009014:	b513      	push	{r0, r1, r4, lr}
 8009016:	681c      	ldr	r4, [r3, #0]
 8009018:	b124      	cbz	r4, 8009024 <iprintf+0x14>
 800901a:	69a3      	ldr	r3, [r4, #24]
 800901c:	b913      	cbnz	r3, 8009024 <iprintf+0x14>
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fae8 	bl	80095f4 <__sinit>
 8009024:	ab05      	add	r3, sp, #20
 8009026:	9a04      	ldr	r2, [sp, #16]
 8009028:	68a1      	ldr	r1, [r4, #8]
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fd0b 	bl	8009a48 <_vfiprintf_r>
 8009032:	b002      	add	sp, #8
 8009034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009038:	b004      	add	sp, #16
 800903a:	4770      	bx	lr
 800903c:	2000004c 	.word	0x2000004c

08009040 <_puts_r>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	460e      	mov	r6, r1
 8009044:	4605      	mov	r5, r0
 8009046:	b118      	cbz	r0, 8009050 <_puts_r+0x10>
 8009048:	6983      	ldr	r3, [r0, #24]
 800904a:	b90b      	cbnz	r3, 8009050 <_puts_r+0x10>
 800904c:	f000 fad2 	bl	80095f4 <__sinit>
 8009050:	69ab      	ldr	r3, [r5, #24]
 8009052:	68ac      	ldr	r4, [r5, #8]
 8009054:	b913      	cbnz	r3, 800905c <_puts_r+0x1c>
 8009056:	4628      	mov	r0, r5
 8009058:	f000 facc 	bl	80095f4 <__sinit>
 800905c:	4b2c      	ldr	r3, [pc, #176]	; (8009110 <_puts_r+0xd0>)
 800905e:	429c      	cmp	r4, r3
 8009060:	d120      	bne.n	80090a4 <_puts_r+0x64>
 8009062:	686c      	ldr	r4, [r5, #4]
 8009064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009066:	07db      	lsls	r3, r3, #31
 8009068:	d405      	bmi.n	8009076 <_puts_r+0x36>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	0598      	lsls	r0, r3, #22
 800906e:	d402      	bmi.n	8009076 <_puts_r+0x36>
 8009070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009072:	f000 fb6f 	bl	8009754 <__retarget_lock_acquire_recursive>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	0719      	lsls	r1, r3, #28
 800907a:	d51d      	bpl.n	80090b8 <_puts_r+0x78>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b1db      	cbz	r3, 80090b8 <_puts_r+0x78>
 8009080:	3e01      	subs	r6, #1
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009088:	3b01      	subs	r3, #1
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	bb39      	cbnz	r1, 80090de <_puts_r+0x9e>
 800908e:	2b00      	cmp	r3, #0
 8009090:	da38      	bge.n	8009104 <_puts_r+0xc4>
 8009092:	4622      	mov	r2, r4
 8009094:	210a      	movs	r1, #10
 8009096:	4628      	mov	r0, r5
 8009098:	f000 f8b4 	bl	8009204 <__swbuf_r>
 800909c:	3001      	adds	r0, #1
 800909e:	d011      	beq.n	80090c4 <_puts_r+0x84>
 80090a0:	250a      	movs	r5, #10
 80090a2:	e011      	b.n	80090c8 <_puts_r+0x88>
 80090a4:	4b1b      	ldr	r3, [pc, #108]	; (8009114 <_puts_r+0xd4>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <_puts_r+0x6e>
 80090aa:	68ac      	ldr	r4, [r5, #8]
 80090ac:	e7da      	b.n	8009064 <_puts_r+0x24>
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <_puts_r+0xd8>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68ec      	ldreq	r4, [r5, #12]
 80090b6:	e7d5      	b.n	8009064 <_puts_r+0x24>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f8f4 	bl	80092a8 <__swsetup_r>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d0dd      	beq.n	8009080 <_puts_r+0x40>
 80090c4:	f04f 35ff 	mov.w	r5, #4294967295
 80090c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ca:	07da      	lsls	r2, r3, #31
 80090cc:	d405      	bmi.n	80090da <_puts_r+0x9a>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	059b      	lsls	r3, r3, #22
 80090d2:	d402      	bmi.n	80090da <_puts_r+0x9a>
 80090d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090d6:	f000 fb3e 	bl	8009756 <__retarget_lock_release_recursive>
 80090da:	4628      	mov	r0, r5
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da04      	bge.n	80090ec <_puts_r+0xac>
 80090e2:	69a2      	ldr	r2, [r4, #24]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	dc06      	bgt.n	80090f6 <_puts_r+0xb6>
 80090e8:	290a      	cmp	r1, #10
 80090ea:	d004      	beq.n	80090f6 <_puts_r+0xb6>
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	6022      	str	r2, [r4, #0]
 80090f2:	7019      	strb	r1, [r3, #0]
 80090f4:	e7c5      	b.n	8009082 <_puts_r+0x42>
 80090f6:	4622      	mov	r2, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 f883 	bl	8009204 <__swbuf_r>
 80090fe:	3001      	adds	r0, #1
 8009100:	d1bf      	bne.n	8009082 <_puts_r+0x42>
 8009102:	e7df      	b.n	80090c4 <_puts_r+0x84>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	250a      	movs	r5, #10
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	6022      	str	r2, [r4, #0]
 800910c:	701d      	strb	r5, [r3, #0]
 800910e:	e7db      	b.n	80090c8 <_puts_r+0x88>
 8009110:	0800b2ec 	.word	0x0800b2ec
 8009114:	0800b30c 	.word	0x0800b30c
 8009118:	0800b2cc 	.word	0x0800b2cc

0800911c <puts>:
 800911c:	4b02      	ldr	r3, [pc, #8]	; (8009128 <puts+0xc>)
 800911e:	4601      	mov	r1, r0
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	f7ff bf8d 	b.w	8009040 <_puts_r>
 8009126:	bf00      	nop
 8009128:	2000004c 	.word	0x2000004c

0800912c <srand>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4b10      	ldr	r3, [pc, #64]	; (8009170 <srand+0x44>)
 8009130:	681d      	ldr	r5, [r3, #0]
 8009132:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009134:	4604      	mov	r4, r0
 8009136:	b9b3      	cbnz	r3, 8009166 <srand+0x3a>
 8009138:	2018      	movs	r0, #24
 800913a:	f000 fb73 	bl	8009824 <malloc>
 800913e:	4602      	mov	r2, r0
 8009140:	63a8      	str	r0, [r5, #56]	; 0x38
 8009142:	b920      	cbnz	r0, 800914e <srand+0x22>
 8009144:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <srand+0x48>)
 8009146:	480c      	ldr	r0, [pc, #48]	; (8009178 <srand+0x4c>)
 8009148:	2142      	movs	r1, #66	; 0x42
 800914a:	f000 f91b 	bl	8009384 <__assert_func>
 800914e:	490b      	ldr	r1, [pc, #44]	; (800917c <srand+0x50>)
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <srand+0x54>)
 8009152:	e9c0 1300 	strd	r1, r3, [r0]
 8009156:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <srand+0x58>)
 8009158:	6083      	str	r3, [r0, #8]
 800915a:	230b      	movs	r3, #11
 800915c:	8183      	strh	r3, [r0, #12]
 800915e:	2100      	movs	r1, #0
 8009160:	2001      	movs	r0, #1
 8009162:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009166:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009168:	2200      	movs	r2, #0
 800916a:	611c      	str	r4, [r3, #16]
 800916c:	615a      	str	r2, [r3, #20]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	2000004c 	.word	0x2000004c
 8009174:	0800b21c 	.word	0x0800b21c
 8009178:	0800b233 	.word	0x0800b233
 800917c:	abcd330e 	.word	0xabcd330e
 8009180:	e66d1234 	.word	0xe66d1234
 8009184:	0005deec 	.word	0x0005deec

08009188 <rand>:
 8009188:	4b16      	ldr	r3, [pc, #88]	; (80091e4 <rand+0x5c>)
 800918a:	b510      	push	{r4, lr}
 800918c:	681c      	ldr	r4, [r3, #0]
 800918e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009190:	b9b3      	cbnz	r3, 80091c0 <rand+0x38>
 8009192:	2018      	movs	r0, #24
 8009194:	f000 fb46 	bl	8009824 <malloc>
 8009198:	63a0      	str	r0, [r4, #56]	; 0x38
 800919a:	b928      	cbnz	r0, 80091a8 <rand+0x20>
 800919c:	4602      	mov	r2, r0
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <rand+0x60>)
 80091a0:	4812      	ldr	r0, [pc, #72]	; (80091ec <rand+0x64>)
 80091a2:	214e      	movs	r1, #78	; 0x4e
 80091a4:	f000 f8ee 	bl	8009384 <__assert_func>
 80091a8:	4a11      	ldr	r2, [pc, #68]	; (80091f0 <rand+0x68>)
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <rand+0x6c>)
 80091ac:	e9c0 2300 	strd	r2, r3, [r0]
 80091b0:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <rand+0x70>)
 80091b2:	6083      	str	r3, [r0, #8]
 80091b4:	230b      	movs	r3, #11
 80091b6:	8183      	strh	r3, [r0, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	2300      	movs	r3, #0
 80091bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80091c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80091c2:	4a0e      	ldr	r2, [pc, #56]	; (80091fc <rand+0x74>)
 80091c4:	6920      	ldr	r0, [r4, #16]
 80091c6:	6963      	ldr	r3, [r4, #20]
 80091c8:	490d      	ldr	r1, [pc, #52]	; (8009200 <rand+0x78>)
 80091ca:	4342      	muls	r2, r0
 80091cc:	fb01 2203 	mla	r2, r1, r3, r2
 80091d0:	fba0 0101 	umull	r0, r1, r0, r1
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	eb42 0001 	adc.w	r0, r2, r1
 80091da:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80091de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80091e2:	bd10      	pop	{r4, pc}
 80091e4:	2000004c 	.word	0x2000004c
 80091e8:	0800b21c 	.word	0x0800b21c
 80091ec:	0800b233 	.word	0x0800b233
 80091f0:	abcd330e 	.word	0xabcd330e
 80091f4:	e66d1234 	.word	0xe66d1234
 80091f8:	0005deec 	.word	0x0005deec
 80091fc:	5851f42d 	.word	0x5851f42d
 8009200:	4c957f2d 	.word	0x4c957f2d

08009204 <__swbuf_r>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	460e      	mov	r6, r1
 8009208:	4614      	mov	r4, r2
 800920a:	4605      	mov	r5, r0
 800920c:	b118      	cbz	r0, 8009216 <__swbuf_r+0x12>
 800920e:	6983      	ldr	r3, [r0, #24]
 8009210:	b90b      	cbnz	r3, 8009216 <__swbuf_r+0x12>
 8009212:	f000 f9ef 	bl	80095f4 <__sinit>
 8009216:	4b21      	ldr	r3, [pc, #132]	; (800929c <__swbuf_r+0x98>)
 8009218:	429c      	cmp	r4, r3
 800921a:	d12b      	bne.n	8009274 <__swbuf_r+0x70>
 800921c:	686c      	ldr	r4, [r5, #4]
 800921e:	69a3      	ldr	r3, [r4, #24]
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	071a      	lsls	r2, r3, #28
 8009226:	d52f      	bpl.n	8009288 <__swbuf_r+0x84>
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	b36b      	cbz	r3, 8009288 <__swbuf_r+0x84>
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	6820      	ldr	r0, [r4, #0]
 8009230:	1ac0      	subs	r0, r0, r3
 8009232:	6963      	ldr	r3, [r4, #20]
 8009234:	b2f6      	uxtb	r6, r6
 8009236:	4283      	cmp	r3, r0
 8009238:	4637      	mov	r7, r6
 800923a:	dc04      	bgt.n	8009246 <__swbuf_r+0x42>
 800923c:	4621      	mov	r1, r4
 800923e:	4628      	mov	r0, r5
 8009240:	f000 f944 	bl	80094cc <_fflush_r>
 8009244:	bb30      	cbnz	r0, 8009294 <__swbuf_r+0x90>
 8009246:	68a3      	ldr	r3, [r4, #8]
 8009248:	3b01      	subs	r3, #1
 800924a:	60a3      	str	r3, [r4, #8]
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	6022      	str	r2, [r4, #0]
 8009252:	701e      	strb	r6, [r3, #0]
 8009254:	6963      	ldr	r3, [r4, #20]
 8009256:	3001      	adds	r0, #1
 8009258:	4283      	cmp	r3, r0
 800925a:	d004      	beq.n	8009266 <__swbuf_r+0x62>
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	07db      	lsls	r3, r3, #31
 8009260:	d506      	bpl.n	8009270 <__swbuf_r+0x6c>
 8009262:	2e0a      	cmp	r6, #10
 8009264:	d104      	bne.n	8009270 <__swbuf_r+0x6c>
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f000 f92f 	bl	80094cc <_fflush_r>
 800926e:	b988      	cbnz	r0, 8009294 <__swbuf_r+0x90>
 8009270:	4638      	mov	r0, r7
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009274:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <__swbuf_r+0x9c>)
 8009276:	429c      	cmp	r4, r3
 8009278:	d101      	bne.n	800927e <__swbuf_r+0x7a>
 800927a:	68ac      	ldr	r4, [r5, #8]
 800927c:	e7cf      	b.n	800921e <__swbuf_r+0x1a>
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <__swbuf_r+0xa0>)
 8009280:	429c      	cmp	r4, r3
 8009282:	bf08      	it	eq
 8009284:	68ec      	ldreq	r4, [r5, #12]
 8009286:	e7ca      	b.n	800921e <__swbuf_r+0x1a>
 8009288:	4621      	mov	r1, r4
 800928a:	4628      	mov	r0, r5
 800928c:	f000 f80c 	bl	80092a8 <__swsetup_r>
 8009290:	2800      	cmp	r0, #0
 8009292:	d0cb      	beq.n	800922c <__swbuf_r+0x28>
 8009294:	f04f 37ff 	mov.w	r7, #4294967295
 8009298:	e7ea      	b.n	8009270 <__swbuf_r+0x6c>
 800929a:	bf00      	nop
 800929c:	0800b2ec 	.word	0x0800b2ec
 80092a0:	0800b30c 	.word	0x0800b30c
 80092a4:	0800b2cc 	.word	0x0800b2cc

080092a8 <__swsetup_r>:
 80092a8:	4b32      	ldr	r3, [pc, #200]	; (8009374 <__swsetup_r+0xcc>)
 80092aa:	b570      	push	{r4, r5, r6, lr}
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	4606      	mov	r6, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	b125      	cbz	r5, 80092be <__swsetup_r+0x16>
 80092b4:	69ab      	ldr	r3, [r5, #24]
 80092b6:	b913      	cbnz	r3, 80092be <__swsetup_r+0x16>
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 f99b 	bl	80095f4 <__sinit>
 80092be:	4b2e      	ldr	r3, [pc, #184]	; (8009378 <__swsetup_r+0xd0>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	d10f      	bne.n	80092e4 <__swsetup_r+0x3c>
 80092c4:	686c      	ldr	r4, [r5, #4]
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092cc:	0719      	lsls	r1, r3, #28
 80092ce:	d42c      	bmi.n	800932a <__swsetup_r+0x82>
 80092d0:	06dd      	lsls	r5, r3, #27
 80092d2:	d411      	bmi.n	80092f8 <__swsetup_r+0x50>
 80092d4:	2309      	movs	r3, #9
 80092d6:	6033      	str	r3, [r6, #0]
 80092d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	e03e      	b.n	8009362 <__swsetup_r+0xba>
 80092e4:	4b25      	ldr	r3, [pc, #148]	; (800937c <__swsetup_r+0xd4>)
 80092e6:	429c      	cmp	r4, r3
 80092e8:	d101      	bne.n	80092ee <__swsetup_r+0x46>
 80092ea:	68ac      	ldr	r4, [r5, #8]
 80092ec:	e7eb      	b.n	80092c6 <__swsetup_r+0x1e>
 80092ee:	4b24      	ldr	r3, [pc, #144]	; (8009380 <__swsetup_r+0xd8>)
 80092f0:	429c      	cmp	r4, r3
 80092f2:	bf08      	it	eq
 80092f4:	68ec      	ldreq	r4, [r5, #12]
 80092f6:	e7e6      	b.n	80092c6 <__swsetup_r+0x1e>
 80092f8:	0758      	lsls	r0, r3, #29
 80092fa:	d512      	bpl.n	8009322 <__swsetup_r+0x7a>
 80092fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092fe:	b141      	cbz	r1, 8009312 <__swsetup_r+0x6a>
 8009300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009304:	4299      	cmp	r1, r3
 8009306:	d002      	beq.n	800930e <__swsetup_r+0x66>
 8009308:	4630      	mov	r0, r6
 800930a:	f000 fa93 	bl	8009834 <_free_r>
 800930e:	2300      	movs	r3, #0
 8009310:	6363      	str	r3, [r4, #52]	; 0x34
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	2300      	movs	r3, #0
 800931c:	6063      	str	r3, [r4, #4]
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f043 0308 	orr.w	r3, r3, #8
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	b94b      	cbnz	r3, 8009342 <__swsetup_r+0x9a>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009338:	d003      	beq.n	8009342 <__swsetup_r+0x9a>
 800933a:	4621      	mov	r1, r4
 800933c:	4630      	mov	r0, r6
 800933e:	f000 fa31 	bl	80097a4 <__smakebuf_r>
 8009342:	89a0      	ldrh	r0, [r4, #12]
 8009344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009348:	f010 0301 	ands.w	r3, r0, #1
 800934c:	d00a      	beq.n	8009364 <__swsetup_r+0xbc>
 800934e:	2300      	movs	r3, #0
 8009350:	60a3      	str	r3, [r4, #8]
 8009352:	6963      	ldr	r3, [r4, #20]
 8009354:	425b      	negs	r3, r3
 8009356:	61a3      	str	r3, [r4, #24]
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	b943      	cbnz	r3, 800936e <__swsetup_r+0xc6>
 800935c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009360:	d1ba      	bne.n	80092d8 <__swsetup_r+0x30>
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	0781      	lsls	r1, r0, #30
 8009366:	bf58      	it	pl
 8009368:	6963      	ldrpl	r3, [r4, #20]
 800936a:	60a3      	str	r3, [r4, #8]
 800936c:	e7f4      	b.n	8009358 <__swsetup_r+0xb0>
 800936e:	2000      	movs	r0, #0
 8009370:	e7f7      	b.n	8009362 <__swsetup_r+0xba>
 8009372:	bf00      	nop
 8009374:	2000004c 	.word	0x2000004c
 8009378:	0800b2ec 	.word	0x0800b2ec
 800937c:	0800b30c 	.word	0x0800b30c
 8009380:	0800b2cc 	.word	0x0800b2cc

08009384 <__assert_func>:
 8009384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009386:	4614      	mov	r4, r2
 8009388:	461a      	mov	r2, r3
 800938a:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <__assert_func+0x2c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4605      	mov	r5, r0
 8009390:	68d8      	ldr	r0, [r3, #12]
 8009392:	b14c      	cbz	r4, 80093a8 <__assert_func+0x24>
 8009394:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <__assert_func+0x30>)
 8009396:	9100      	str	r1, [sp, #0]
 8009398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800939c:	4906      	ldr	r1, [pc, #24]	; (80093b8 <__assert_func+0x34>)
 800939e:	462b      	mov	r3, r5
 80093a0:	f000 f9a6 	bl	80096f0 <fiprintf>
 80093a4:	f000 fe7a 	bl	800a09c <abort>
 80093a8:	4b04      	ldr	r3, [pc, #16]	; (80093bc <__assert_func+0x38>)
 80093aa:	461c      	mov	r4, r3
 80093ac:	e7f3      	b.n	8009396 <__assert_func+0x12>
 80093ae:	bf00      	nop
 80093b0:	2000004c 	.word	0x2000004c
 80093b4:	0800b28e 	.word	0x0800b28e
 80093b8:	0800b29b 	.word	0x0800b29b
 80093bc:	0800b2c9 	.word	0x0800b2c9

080093c0 <__sflush_r>:
 80093c0:	898a      	ldrh	r2, [r1, #12]
 80093c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c6:	4605      	mov	r5, r0
 80093c8:	0710      	lsls	r0, r2, #28
 80093ca:	460c      	mov	r4, r1
 80093cc:	d458      	bmi.n	8009480 <__sflush_r+0xc0>
 80093ce:	684b      	ldr	r3, [r1, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc05      	bgt.n	80093e0 <__sflush_r+0x20>
 80093d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc02      	bgt.n	80093e0 <__sflush_r+0x20>
 80093da:	2000      	movs	r0, #0
 80093dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	d0f9      	beq.n	80093da <__sflush_r+0x1a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093ec:	682f      	ldr	r7, [r5, #0]
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	d032      	beq.n	8009458 <__sflush_r+0x98>
 80093f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	075a      	lsls	r2, r3, #29
 80093f8:	d505      	bpl.n	8009406 <__sflush_r+0x46>
 80093fa:	6863      	ldr	r3, [r4, #4]
 80093fc:	1ac0      	subs	r0, r0, r3
 80093fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009400:	b10b      	cbz	r3, 8009406 <__sflush_r+0x46>
 8009402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009404:	1ac0      	subs	r0, r0, r3
 8009406:	2300      	movs	r3, #0
 8009408:	4602      	mov	r2, r0
 800940a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800940c:	6a21      	ldr	r1, [r4, #32]
 800940e:	4628      	mov	r0, r5
 8009410:	47b0      	blx	r6
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	d106      	bne.n	8009426 <__sflush_r+0x66>
 8009418:	6829      	ldr	r1, [r5, #0]
 800941a:	291d      	cmp	r1, #29
 800941c:	d82c      	bhi.n	8009478 <__sflush_r+0xb8>
 800941e:	4a2a      	ldr	r2, [pc, #168]	; (80094c8 <__sflush_r+0x108>)
 8009420:	40ca      	lsrs	r2, r1
 8009422:	07d6      	lsls	r6, r2, #31
 8009424:	d528      	bpl.n	8009478 <__sflush_r+0xb8>
 8009426:	2200      	movs	r2, #0
 8009428:	6062      	str	r2, [r4, #4]
 800942a:	04d9      	lsls	r1, r3, #19
 800942c:	6922      	ldr	r2, [r4, #16]
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	d504      	bpl.n	800943c <__sflush_r+0x7c>
 8009432:	1c42      	adds	r2, r0, #1
 8009434:	d101      	bne.n	800943a <__sflush_r+0x7a>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b903      	cbnz	r3, 800943c <__sflush_r+0x7c>
 800943a:	6560      	str	r0, [r4, #84]	; 0x54
 800943c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800943e:	602f      	str	r7, [r5, #0]
 8009440:	2900      	cmp	r1, #0
 8009442:	d0ca      	beq.n	80093da <__sflush_r+0x1a>
 8009444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009448:	4299      	cmp	r1, r3
 800944a:	d002      	beq.n	8009452 <__sflush_r+0x92>
 800944c:	4628      	mov	r0, r5
 800944e:	f000 f9f1 	bl	8009834 <_free_r>
 8009452:	2000      	movs	r0, #0
 8009454:	6360      	str	r0, [r4, #52]	; 0x34
 8009456:	e7c1      	b.n	80093dc <__sflush_r+0x1c>
 8009458:	6a21      	ldr	r1, [r4, #32]
 800945a:	2301      	movs	r3, #1
 800945c:	4628      	mov	r0, r5
 800945e:	47b0      	blx	r6
 8009460:	1c41      	adds	r1, r0, #1
 8009462:	d1c7      	bne.n	80093f4 <__sflush_r+0x34>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0c4      	beq.n	80093f4 <__sflush_r+0x34>
 800946a:	2b1d      	cmp	r3, #29
 800946c:	d001      	beq.n	8009472 <__sflush_r+0xb2>
 800946e:	2b16      	cmp	r3, #22
 8009470:	d101      	bne.n	8009476 <__sflush_r+0xb6>
 8009472:	602f      	str	r7, [r5, #0]
 8009474:	e7b1      	b.n	80093da <__sflush_r+0x1a>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	e7ad      	b.n	80093dc <__sflush_r+0x1c>
 8009480:	690f      	ldr	r7, [r1, #16]
 8009482:	2f00      	cmp	r7, #0
 8009484:	d0a9      	beq.n	80093da <__sflush_r+0x1a>
 8009486:	0793      	lsls	r3, r2, #30
 8009488:	680e      	ldr	r6, [r1, #0]
 800948a:	bf08      	it	eq
 800948c:	694b      	ldreq	r3, [r1, #20]
 800948e:	600f      	str	r7, [r1, #0]
 8009490:	bf18      	it	ne
 8009492:	2300      	movne	r3, #0
 8009494:	eba6 0807 	sub.w	r8, r6, r7
 8009498:	608b      	str	r3, [r1, #8]
 800949a:	f1b8 0f00 	cmp.w	r8, #0
 800949e:	dd9c      	ble.n	80093da <__sflush_r+0x1a>
 80094a0:	6a21      	ldr	r1, [r4, #32]
 80094a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094a4:	4643      	mov	r3, r8
 80094a6:	463a      	mov	r2, r7
 80094a8:	4628      	mov	r0, r5
 80094aa:	47b0      	blx	r6
 80094ac:	2800      	cmp	r0, #0
 80094ae:	dc06      	bgt.n	80094be <__sflush_r+0xfe>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e78e      	b.n	80093dc <__sflush_r+0x1c>
 80094be:	4407      	add	r7, r0
 80094c0:	eba8 0800 	sub.w	r8, r8, r0
 80094c4:	e7e9      	b.n	800949a <__sflush_r+0xda>
 80094c6:	bf00      	nop
 80094c8:	20400001 	.word	0x20400001

080094cc <_fflush_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	4605      	mov	r5, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	b913      	cbnz	r3, 80094dc <_fflush_r+0x10>
 80094d6:	2500      	movs	r5, #0
 80094d8:	4628      	mov	r0, r5
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	b118      	cbz	r0, 80094e6 <_fflush_r+0x1a>
 80094de:	6983      	ldr	r3, [r0, #24]
 80094e0:	b90b      	cbnz	r3, 80094e6 <_fflush_r+0x1a>
 80094e2:	f000 f887 	bl	80095f4 <__sinit>
 80094e6:	4b14      	ldr	r3, [pc, #80]	; (8009538 <_fflush_r+0x6c>)
 80094e8:	429c      	cmp	r4, r3
 80094ea:	d11b      	bne.n	8009524 <_fflush_r+0x58>
 80094ec:	686c      	ldr	r4, [r5, #4]
 80094ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0ef      	beq.n	80094d6 <_fflush_r+0xa>
 80094f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094f8:	07d0      	lsls	r0, r2, #31
 80094fa:	d404      	bmi.n	8009506 <_fflush_r+0x3a>
 80094fc:	0599      	lsls	r1, r3, #22
 80094fe:	d402      	bmi.n	8009506 <_fflush_r+0x3a>
 8009500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009502:	f000 f927 	bl	8009754 <__retarget_lock_acquire_recursive>
 8009506:	4628      	mov	r0, r5
 8009508:	4621      	mov	r1, r4
 800950a:	f7ff ff59 	bl	80093c0 <__sflush_r>
 800950e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009510:	07da      	lsls	r2, r3, #31
 8009512:	4605      	mov	r5, r0
 8009514:	d4e0      	bmi.n	80094d8 <_fflush_r+0xc>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	059b      	lsls	r3, r3, #22
 800951a:	d4dd      	bmi.n	80094d8 <_fflush_r+0xc>
 800951c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800951e:	f000 f91a 	bl	8009756 <__retarget_lock_release_recursive>
 8009522:	e7d9      	b.n	80094d8 <_fflush_r+0xc>
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <_fflush_r+0x70>)
 8009526:	429c      	cmp	r4, r3
 8009528:	d101      	bne.n	800952e <_fflush_r+0x62>
 800952a:	68ac      	ldr	r4, [r5, #8]
 800952c:	e7df      	b.n	80094ee <_fflush_r+0x22>
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <_fflush_r+0x74>)
 8009530:	429c      	cmp	r4, r3
 8009532:	bf08      	it	eq
 8009534:	68ec      	ldreq	r4, [r5, #12]
 8009536:	e7da      	b.n	80094ee <_fflush_r+0x22>
 8009538:	0800b2ec 	.word	0x0800b2ec
 800953c:	0800b30c 	.word	0x0800b30c
 8009540:	0800b2cc 	.word	0x0800b2cc

08009544 <std>:
 8009544:	2300      	movs	r3, #0
 8009546:	b510      	push	{r4, lr}
 8009548:	4604      	mov	r4, r0
 800954a:	e9c0 3300 	strd	r3, r3, [r0]
 800954e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009552:	6083      	str	r3, [r0, #8]
 8009554:	8181      	strh	r1, [r0, #12]
 8009556:	6643      	str	r3, [r0, #100]	; 0x64
 8009558:	81c2      	strh	r2, [r0, #14]
 800955a:	6183      	str	r3, [r0, #24]
 800955c:	4619      	mov	r1, r3
 800955e:	2208      	movs	r2, #8
 8009560:	305c      	adds	r0, #92	; 0x5c
 8009562:	f7ff fd4d 	bl	8009000 <memset>
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <std+0x38>)
 8009568:	6263      	str	r3, [r4, #36]	; 0x24
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <std+0x3c>)
 800956c:	62a3      	str	r3, [r4, #40]	; 0x28
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <std+0x40>)
 8009570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009572:	4b05      	ldr	r3, [pc, #20]	; (8009588 <std+0x44>)
 8009574:	6224      	str	r4, [r4, #32]
 8009576:	6323      	str	r3, [r4, #48]	; 0x30
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	08009ff1 	.word	0x08009ff1
 8009580:	0800a013 	.word	0x0800a013
 8009584:	0800a04b 	.word	0x0800a04b
 8009588:	0800a06f 	.word	0x0800a06f

0800958c <_cleanup_r>:
 800958c:	4901      	ldr	r1, [pc, #4]	; (8009594 <_cleanup_r+0x8>)
 800958e:	f000 b8c1 	b.w	8009714 <_fwalk_reent>
 8009592:	bf00      	nop
 8009594:	080094cd 	.word	0x080094cd

08009598 <__sfmoreglue>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	2268      	movs	r2, #104	; 0x68
 800959c:	1e4d      	subs	r5, r1, #1
 800959e:	4355      	muls	r5, r2
 80095a0:	460e      	mov	r6, r1
 80095a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095a6:	f000 f9b1 	bl	800990c <_malloc_r>
 80095aa:	4604      	mov	r4, r0
 80095ac:	b140      	cbz	r0, 80095c0 <__sfmoreglue+0x28>
 80095ae:	2100      	movs	r1, #0
 80095b0:	e9c0 1600 	strd	r1, r6, [r0]
 80095b4:	300c      	adds	r0, #12
 80095b6:	60a0      	str	r0, [r4, #8]
 80095b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095bc:	f7ff fd20 	bl	8009000 <memset>
 80095c0:	4620      	mov	r0, r4
 80095c2:	bd70      	pop	{r4, r5, r6, pc}

080095c4 <__sfp_lock_acquire>:
 80095c4:	4801      	ldr	r0, [pc, #4]	; (80095cc <__sfp_lock_acquire+0x8>)
 80095c6:	f000 b8c5 	b.w	8009754 <__retarget_lock_acquire_recursive>
 80095ca:	bf00      	nop
 80095cc:	2000292d 	.word	0x2000292d

080095d0 <__sfp_lock_release>:
 80095d0:	4801      	ldr	r0, [pc, #4]	; (80095d8 <__sfp_lock_release+0x8>)
 80095d2:	f000 b8c0 	b.w	8009756 <__retarget_lock_release_recursive>
 80095d6:	bf00      	nop
 80095d8:	2000292d 	.word	0x2000292d

080095dc <__sinit_lock_acquire>:
 80095dc:	4801      	ldr	r0, [pc, #4]	; (80095e4 <__sinit_lock_acquire+0x8>)
 80095de:	f000 b8b9 	b.w	8009754 <__retarget_lock_acquire_recursive>
 80095e2:	bf00      	nop
 80095e4:	2000292e 	.word	0x2000292e

080095e8 <__sinit_lock_release>:
 80095e8:	4801      	ldr	r0, [pc, #4]	; (80095f0 <__sinit_lock_release+0x8>)
 80095ea:	f000 b8b4 	b.w	8009756 <__retarget_lock_release_recursive>
 80095ee:	bf00      	nop
 80095f0:	2000292e 	.word	0x2000292e

080095f4 <__sinit>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	4604      	mov	r4, r0
 80095f8:	f7ff fff0 	bl	80095dc <__sinit_lock_acquire>
 80095fc:	69a3      	ldr	r3, [r4, #24]
 80095fe:	b11b      	cbz	r3, 8009608 <__sinit+0x14>
 8009600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009604:	f7ff bff0 	b.w	80095e8 <__sinit_lock_release>
 8009608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800960c:	6523      	str	r3, [r4, #80]	; 0x50
 800960e:	4b13      	ldr	r3, [pc, #76]	; (800965c <__sinit+0x68>)
 8009610:	4a13      	ldr	r2, [pc, #76]	; (8009660 <__sinit+0x6c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	62a2      	str	r2, [r4, #40]	; 0x28
 8009616:	42a3      	cmp	r3, r4
 8009618:	bf04      	itt	eq
 800961a:	2301      	moveq	r3, #1
 800961c:	61a3      	streq	r3, [r4, #24]
 800961e:	4620      	mov	r0, r4
 8009620:	f000 f820 	bl	8009664 <__sfp>
 8009624:	6060      	str	r0, [r4, #4]
 8009626:	4620      	mov	r0, r4
 8009628:	f000 f81c 	bl	8009664 <__sfp>
 800962c:	60a0      	str	r0, [r4, #8]
 800962e:	4620      	mov	r0, r4
 8009630:	f000 f818 	bl	8009664 <__sfp>
 8009634:	2200      	movs	r2, #0
 8009636:	60e0      	str	r0, [r4, #12]
 8009638:	2104      	movs	r1, #4
 800963a:	6860      	ldr	r0, [r4, #4]
 800963c:	f7ff ff82 	bl	8009544 <std>
 8009640:	68a0      	ldr	r0, [r4, #8]
 8009642:	2201      	movs	r2, #1
 8009644:	2109      	movs	r1, #9
 8009646:	f7ff ff7d 	bl	8009544 <std>
 800964a:	68e0      	ldr	r0, [r4, #12]
 800964c:	2202      	movs	r2, #2
 800964e:	2112      	movs	r1, #18
 8009650:	f7ff ff78 	bl	8009544 <std>
 8009654:	2301      	movs	r3, #1
 8009656:	61a3      	str	r3, [r4, #24]
 8009658:	e7d2      	b.n	8009600 <__sinit+0xc>
 800965a:	bf00      	nop
 800965c:	0800b218 	.word	0x0800b218
 8009660:	0800958d 	.word	0x0800958d

08009664 <__sfp>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	4607      	mov	r7, r0
 8009668:	f7ff ffac 	bl	80095c4 <__sfp_lock_acquire>
 800966c:	4b1e      	ldr	r3, [pc, #120]	; (80096e8 <__sfp+0x84>)
 800966e:	681e      	ldr	r6, [r3, #0]
 8009670:	69b3      	ldr	r3, [r6, #24]
 8009672:	b913      	cbnz	r3, 800967a <__sfp+0x16>
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff ffbd 	bl	80095f4 <__sinit>
 800967a:	3648      	adds	r6, #72	; 0x48
 800967c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009680:	3b01      	subs	r3, #1
 8009682:	d503      	bpl.n	800968c <__sfp+0x28>
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	b30b      	cbz	r3, 80096cc <__sfp+0x68>
 8009688:	6836      	ldr	r6, [r6, #0]
 800968a:	e7f7      	b.n	800967c <__sfp+0x18>
 800968c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009690:	b9d5      	cbnz	r5, 80096c8 <__sfp+0x64>
 8009692:	4b16      	ldr	r3, [pc, #88]	; (80096ec <__sfp+0x88>)
 8009694:	60e3      	str	r3, [r4, #12]
 8009696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800969a:	6665      	str	r5, [r4, #100]	; 0x64
 800969c:	f000 f859 	bl	8009752 <__retarget_lock_init_recursive>
 80096a0:	f7ff ff96 	bl	80095d0 <__sfp_lock_release>
 80096a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096ac:	6025      	str	r5, [r4, #0]
 80096ae:	61a5      	str	r5, [r4, #24]
 80096b0:	2208      	movs	r2, #8
 80096b2:	4629      	mov	r1, r5
 80096b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096b8:	f7ff fca2 	bl	8009000 <memset>
 80096bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096c4:	4620      	mov	r0, r4
 80096c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c8:	3468      	adds	r4, #104	; 0x68
 80096ca:	e7d9      	b.n	8009680 <__sfp+0x1c>
 80096cc:	2104      	movs	r1, #4
 80096ce:	4638      	mov	r0, r7
 80096d0:	f7ff ff62 	bl	8009598 <__sfmoreglue>
 80096d4:	4604      	mov	r4, r0
 80096d6:	6030      	str	r0, [r6, #0]
 80096d8:	2800      	cmp	r0, #0
 80096da:	d1d5      	bne.n	8009688 <__sfp+0x24>
 80096dc:	f7ff ff78 	bl	80095d0 <__sfp_lock_release>
 80096e0:	230c      	movs	r3, #12
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	e7ee      	b.n	80096c4 <__sfp+0x60>
 80096e6:	bf00      	nop
 80096e8:	0800b218 	.word	0x0800b218
 80096ec:	ffff0001 	.word	0xffff0001

080096f0 <fiprintf>:
 80096f0:	b40e      	push	{r1, r2, r3}
 80096f2:	b503      	push	{r0, r1, lr}
 80096f4:	4601      	mov	r1, r0
 80096f6:	ab03      	add	r3, sp, #12
 80096f8:	4805      	ldr	r0, [pc, #20]	; (8009710 <fiprintf+0x20>)
 80096fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fe:	6800      	ldr	r0, [r0, #0]
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	f000 f9a1 	bl	8009a48 <_vfiprintf_r>
 8009706:	b002      	add	sp, #8
 8009708:	f85d eb04 	ldr.w	lr, [sp], #4
 800970c:	b003      	add	sp, #12
 800970e:	4770      	bx	lr
 8009710:	2000004c 	.word	0x2000004c

08009714 <_fwalk_reent>:
 8009714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009718:	4606      	mov	r6, r0
 800971a:	4688      	mov	r8, r1
 800971c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009720:	2700      	movs	r7, #0
 8009722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009726:	f1b9 0901 	subs.w	r9, r9, #1
 800972a:	d505      	bpl.n	8009738 <_fwalk_reent+0x24>
 800972c:	6824      	ldr	r4, [r4, #0]
 800972e:	2c00      	cmp	r4, #0
 8009730:	d1f7      	bne.n	8009722 <_fwalk_reent+0xe>
 8009732:	4638      	mov	r0, r7
 8009734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009738:	89ab      	ldrh	r3, [r5, #12]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d907      	bls.n	800974e <_fwalk_reent+0x3a>
 800973e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009742:	3301      	adds	r3, #1
 8009744:	d003      	beq.n	800974e <_fwalk_reent+0x3a>
 8009746:	4629      	mov	r1, r5
 8009748:	4630      	mov	r0, r6
 800974a:	47c0      	blx	r8
 800974c:	4307      	orrs	r7, r0
 800974e:	3568      	adds	r5, #104	; 0x68
 8009750:	e7e9      	b.n	8009726 <_fwalk_reent+0x12>

08009752 <__retarget_lock_init_recursive>:
 8009752:	4770      	bx	lr

08009754 <__retarget_lock_acquire_recursive>:
 8009754:	4770      	bx	lr

08009756 <__retarget_lock_release_recursive>:
 8009756:	4770      	bx	lr

08009758 <__swhatbuf_r>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	460e      	mov	r6, r1
 800975c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009760:	2900      	cmp	r1, #0
 8009762:	b096      	sub	sp, #88	; 0x58
 8009764:	4614      	mov	r4, r2
 8009766:	461d      	mov	r5, r3
 8009768:	da08      	bge.n	800977c <__swhatbuf_r+0x24>
 800976a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	602a      	str	r2, [r5, #0]
 8009772:	061a      	lsls	r2, r3, #24
 8009774:	d410      	bmi.n	8009798 <__swhatbuf_r+0x40>
 8009776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800977a:	e00e      	b.n	800979a <__swhatbuf_r+0x42>
 800977c:	466a      	mov	r2, sp
 800977e:	f000 fca5 	bl	800a0cc <_fstat_r>
 8009782:	2800      	cmp	r0, #0
 8009784:	dbf1      	blt.n	800976a <__swhatbuf_r+0x12>
 8009786:	9a01      	ldr	r2, [sp, #4]
 8009788:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800978c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009790:	425a      	negs	r2, r3
 8009792:	415a      	adcs	r2, r3
 8009794:	602a      	str	r2, [r5, #0]
 8009796:	e7ee      	b.n	8009776 <__swhatbuf_r+0x1e>
 8009798:	2340      	movs	r3, #64	; 0x40
 800979a:	2000      	movs	r0, #0
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	b016      	add	sp, #88	; 0x58
 80097a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080097a4 <__smakebuf_r>:
 80097a4:	898b      	ldrh	r3, [r1, #12]
 80097a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097a8:	079d      	lsls	r5, r3, #30
 80097aa:	4606      	mov	r6, r0
 80097ac:	460c      	mov	r4, r1
 80097ae:	d507      	bpl.n	80097c0 <__smakebuf_r+0x1c>
 80097b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	6123      	str	r3, [r4, #16]
 80097b8:	2301      	movs	r3, #1
 80097ba:	6163      	str	r3, [r4, #20]
 80097bc:	b002      	add	sp, #8
 80097be:	bd70      	pop	{r4, r5, r6, pc}
 80097c0:	ab01      	add	r3, sp, #4
 80097c2:	466a      	mov	r2, sp
 80097c4:	f7ff ffc8 	bl	8009758 <__swhatbuf_r>
 80097c8:	9900      	ldr	r1, [sp, #0]
 80097ca:	4605      	mov	r5, r0
 80097cc:	4630      	mov	r0, r6
 80097ce:	f000 f89d 	bl	800990c <_malloc_r>
 80097d2:	b948      	cbnz	r0, 80097e8 <__smakebuf_r+0x44>
 80097d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d4ef      	bmi.n	80097bc <__smakebuf_r+0x18>
 80097dc:	f023 0303 	bic.w	r3, r3, #3
 80097e0:	f043 0302 	orr.w	r3, r3, #2
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	e7e3      	b.n	80097b0 <__smakebuf_r+0xc>
 80097e8:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <__smakebuf_r+0x7c>)
 80097ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	6020      	str	r0, [r4, #0]
 80097f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	9b00      	ldr	r3, [sp, #0]
 80097f8:	6163      	str	r3, [r4, #20]
 80097fa:	9b01      	ldr	r3, [sp, #4]
 80097fc:	6120      	str	r0, [r4, #16]
 80097fe:	b15b      	cbz	r3, 8009818 <__smakebuf_r+0x74>
 8009800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009804:	4630      	mov	r0, r6
 8009806:	f000 fc73 	bl	800a0f0 <_isatty_r>
 800980a:	b128      	cbz	r0, 8009818 <__smakebuf_r+0x74>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f023 0303 	bic.w	r3, r3, #3
 8009812:	f043 0301 	orr.w	r3, r3, #1
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	89a0      	ldrh	r0, [r4, #12]
 800981a:	4305      	orrs	r5, r0
 800981c:	81a5      	strh	r5, [r4, #12]
 800981e:	e7cd      	b.n	80097bc <__smakebuf_r+0x18>
 8009820:	0800958d 	.word	0x0800958d

08009824 <malloc>:
 8009824:	4b02      	ldr	r3, [pc, #8]	; (8009830 <malloc+0xc>)
 8009826:	4601      	mov	r1, r0
 8009828:	6818      	ldr	r0, [r3, #0]
 800982a:	f000 b86f 	b.w	800990c <_malloc_r>
 800982e:	bf00      	nop
 8009830:	2000004c 	.word	0x2000004c

08009834 <_free_r>:
 8009834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009836:	2900      	cmp	r1, #0
 8009838:	d044      	beq.n	80098c4 <_free_r+0x90>
 800983a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800983e:	9001      	str	r0, [sp, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f1a1 0404 	sub.w	r4, r1, #4
 8009846:	bfb8      	it	lt
 8009848:	18e4      	addlt	r4, r4, r3
 800984a:	f000 fc73 	bl	800a134 <__malloc_lock>
 800984e:	4a1e      	ldr	r2, [pc, #120]	; (80098c8 <_free_r+0x94>)
 8009850:	9801      	ldr	r0, [sp, #4]
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	b933      	cbnz	r3, 8009864 <_free_r+0x30>
 8009856:	6063      	str	r3, [r4, #4]
 8009858:	6014      	str	r4, [r2, #0]
 800985a:	b003      	add	sp, #12
 800985c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009860:	f000 bc6e 	b.w	800a140 <__malloc_unlock>
 8009864:	42a3      	cmp	r3, r4
 8009866:	d908      	bls.n	800987a <_free_r+0x46>
 8009868:	6825      	ldr	r5, [r4, #0]
 800986a:	1961      	adds	r1, r4, r5
 800986c:	428b      	cmp	r3, r1
 800986e:	bf01      	itttt	eq
 8009870:	6819      	ldreq	r1, [r3, #0]
 8009872:	685b      	ldreq	r3, [r3, #4]
 8009874:	1949      	addeq	r1, r1, r5
 8009876:	6021      	streq	r1, [r4, #0]
 8009878:	e7ed      	b.n	8009856 <_free_r+0x22>
 800987a:	461a      	mov	r2, r3
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	b10b      	cbz	r3, 8009884 <_free_r+0x50>
 8009880:	42a3      	cmp	r3, r4
 8009882:	d9fa      	bls.n	800987a <_free_r+0x46>
 8009884:	6811      	ldr	r1, [r2, #0]
 8009886:	1855      	adds	r5, r2, r1
 8009888:	42a5      	cmp	r5, r4
 800988a:	d10b      	bne.n	80098a4 <_free_r+0x70>
 800988c:	6824      	ldr	r4, [r4, #0]
 800988e:	4421      	add	r1, r4
 8009890:	1854      	adds	r4, r2, r1
 8009892:	42a3      	cmp	r3, r4
 8009894:	6011      	str	r1, [r2, #0]
 8009896:	d1e0      	bne.n	800985a <_free_r+0x26>
 8009898:	681c      	ldr	r4, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	6053      	str	r3, [r2, #4]
 800989e:	4421      	add	r1, r4
 80098a0:	6011      	str	r1, [r2, #0]
 80098a2:	e7da      	b.n	800985a <_free_r+0x26>
 80098a4:	d902      	bls.n	80098ac <_free_r+0x78>
 80098a6:	230c      	movs	r3, #12
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	e7d6      	b.n	800985a <_free_r+0x26>
 80098ac:	6825      	ldr	r5, [r4, #0]
 80098ae:	1961      	adds	r1, r4, r5
 80098b0:	428b      	cmp	r3, r1
 80098b2:	bf04      	itt	eq
 80098b4:	6819      	ldreq	r1, [r3, #0]
 80098b6:	685b      	ldreq	r3, [r3, #4]
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	bf04      	itt	eq
 80098bc:	1949      	addeq	r1, r1, r5
 80098be:	6021      	streq	r1, [r4, #0]
 80098c0:	6054      	str	r4, [r2, #4]
 80098c2:	e7ca      	b.n	800985a <_free_r+0x26>
 80098c4:	b003      	add	sp, #12
 80098c6:	bd30      	pop	{r4, r5, pc}
 80098c8:	20002930 	.word	0x20002930

080098cc <sbrk_aligned>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	4e0e      	ldr	r6, [pc, #56]	; (8009908 <sbrk_aligned+0x3c>)
 80098d0:	460c      	mov	r4, r1
 80098d2:	6831      	ldr	r1, [r6, #0]
 80098d4:	4605      	mov	r5, r0
 80098d6:	b911      	cbnz	r1, 80098de <sbrk_aligned+0x12>
 80098d8:	f000 fb7a 	bl	8009fd0 <_sbrk_r>
 80098dc:	6030      	str	r0, [r6, #0]
 80098de:	4621      	mov	r1, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 fb75 	bl	8009fd0 <_sbrk_r>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d00a      	beq.n	8009900 <sbrk_aligned+0x34>
 80098ea:	1cc4      	adds	r4, r0, #3
 80098ec:	f024 0403 	bic.w	r4, r4, #3
 80098f0:	42a0      	cmp	r0, r4
 80098f2:	d007      	beq.n	8009904 <sbrk_aligned+0x38>
 80098f4:	1a21      	subs	r1, r4, r0
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 fb6a 	bl	8009fd0 <_sbrk_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	d101      	bne.n	8009904 <sbrk_aligned+0x38>
 8009900:	f04f 34ff 	mov.w	r4, #4294967295
 8009904:	4620      	mov	r0, r4
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	20002934 	.word	0x20002934

0800990c <_malloc_r>:
 800990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009910:	1ccd      	adds	r5, r1, #3
 8009912:	f025 0503 	bic.w	r5, r5, #3
 8009916:	3508      	adds	r5, #8
 8009918:	2d0c      	cmp	r5, #12
 800991a:	bf38      	it	cc
 800991c:	250c      	movcc	r5, #12
 800991e:	2d00      	cmp	r5, #0
 8009920:	4607      	mov	r7, r0
 8009922:	db01      	blt.n	8009928 <_malloc_r+0x1c>
 8009924:	42a9      	cmp	r1, r5
 8009926:	d905      	bls.n	8009934 <_malloc_r+0x28>
 8009928:	230c      	movs	r3, #12
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	2600      	movs	r6, #0
 800992e:	4630      	mov	r0, r6
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	4e2e      	ldr	r6, [pc, #184]	; (80099f0 <_malloc_r+0xe4>)
 8009936:	f000 fbfd 	bl	800a134 <__malloc_lock>
 800993a:	6833      	ldr	r3, [r6, #0]
 800993c:	461c      	mov	r4, r3
 800993e:	bb34      	cbnz	r4, 800998e <_malloc_r+0x82>
 8009940:	4629      	mov	r1, r5
 8009942:	4638      	mov	r0, r7
 8009944:	f7ff ffc2 	bl	80098cc <sbrk_aligned>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	4604      	mov	r4, r0
 800994c:	d14d      	bne.n	80099ea <_malloc_r+0xde>
 800994e:	6834      	ldr	r4, [r6, #0]
 8009950:	4626      	mov	r6, r4
 8009952:	2e00      	cmp	r6, #0
 8009954:	d140      	bne.n	80099d8 <_malloc_r+0xcc>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	4631      	mov	r1, r6
 800995a:	4638      	mov	r0, r7
 800995c:	eb04 0803 	add.w	r8, r4, r3
 8009960:	f000 fb36 	bl	8009fd0 <_sbrk_r>
 8009964:	4580      	cmp	r8, r0
 8009966:	d13a      	bne.n	80099de <_malloc_r+0xd2>
 8009968:	6821      	ldr	r1, [r4, #0]
 800996a:	3503      	adds	r5, #3
 800996c:	1a6d      	subs	r5, r5, r1
 800996e:	f025 0503 	bic.w	r5, r5, #3
 8009972:	3508      	adds	r5, #8
 8009974:	2d0c      	cmp	r5, #12
 8009976:	bf38      	it	cc
 8009978:	250c      	movcc	r5, #12
 800997a:	4629      	mov	r1, r5
 800997c:	4638      	mov	r0, r7
 800997e:	f7ff ffa5 	bl	80098cc <sbrk_aligned>
 8009982:	3001      	adds	r0, #1
 8009984:	d02b      	beq.n	80099de <_malloc_r+0xd2>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	442b      	add	r3, r5
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	e00e      	b.n	80099ac <_malloc_r+0xa0>
 800998e:	6822      	ldr	r2, [r4, #0]
 8009990:	1b52      	subs	r2, r2, r5
 8009992:	d41e      	bmi.n	80099d2 <_malloc_r+0xc6>
 8009994:	2a0b      	cmp	r2, #11
 8009996:	d916      	bls.n	80099c6 <_malloc_r+0xba>
 8009998:	1961      	adds	r1, r4, r5
 800999a:	42a3      	cmp	r3, r4
 800999c:	6025      	str	r5, [r4, #0]
 800999e:	bf18      	it	ne
 80099a0:	6059      	strne	r1, [r3, #4]
 80099a2:	6863      	ldr	r3, [r4, #4]
 80099a4:	bf08      	it	eq
 80099a6:	6031      	streq	r1, [r6, #0]
 80099a8:	5162      	str	r2, [r4, r5]
 80099aa:	604b      	str	r3, [r1, #4]
 80099ac:	4638      	mov	r0, r7
 80099ae:	f104 060b 	add.w	r6, r4, #11
 80099b2:	f000 fbc5 	bl	800a140 <__malloc_unlock>
 80099b6:	f026 0607 	bic.w	r6, r6, #7
 80099ba:	1d23      	adds	r3, r4, #4
 80099bc:	1af2      	subs	r2, r6, r3
 80099be:	d0b6      	beq.n	800992e <_malloc_r+0x22>
 80099c0:	1b9b      	subs	r3, r3, r6
 80099c2:	50a3      	str	r3, [r4, r2]
 80099c4:	e7b3      	b.n	800992e <_malloc_r+0x22>
 80099c6:	6862      	ldr	r2, [r4, #4]
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	bf0c      	ite	eq
 80099cc:	6032      	streq	r2, [r6, #0]
 80099ce:	605a      	strne	r2, [r3, #4]
 80099d0:	e7ec      	b.n	80099ac <_malloc_r+0xa0>
 80099d2:	4623      	mov	r3, r4
 80099d4:	6864      	ldr	r4, [r4, #4]
 80099d6:	e7b2      	b.n	800993e <_malloc_r+0x32>
 80099d8:	4634      	mov	r4, r6
 80099da:	6876      	ldr	r6, [r6, #4]
 80099dc:	e7b9      	b.n	8009952 <_malloc_r+0x46>
 80099de:	230c      	movs	r3, #12
 80099e0:	603b      	str	r3, [r7, #0]
 80099e2:	4638      	mov	r0, r7
 80099e4:	f000 fbac 	bl	800a140 <__malloc_unlock>
 80099e8:	e7a1      	b.n	800992e <_malloc_r+0x22>
 80099ea:	6025      	str	r5, [r4, #0]
 80099ec:	e7de      	b.n	80099ac <_malloc_r+0xa0>
 80099ee:	bf00      	nop
 80099f0:	20002930 	.word	0x20002930

080099f4 <__sfputc_r>:
 80099f4:	6893      	ldr	r3, [r2, #8]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	b410      	push	{r4}
 80099fc:	6093      	str	r3, [r2, #8]
 80099fe:	da08      	bge.n	8009a12 <__sfputc_r+0x1e>
 8009a00:	6994      	ldr	r4, [r2, #24]
 8009a02:	42a3      	cmp	r3, r4
 8009a04:	db01      	blt.n	8009a0a <__sfputc_r+0x16>
 8009a06:	290a      	cmp	r1, #10
 8009a08:	d103      	bne.n	8009a12 <__sfputc_r+0x1e>
 8009a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0e:	f7ff bbf9 	b.w	8009204 <__swbuf_r>
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	1c58      	adds	r0, r3, #1
 8009a16:	6010      	str	r0, [r2, #0]
 8009a18:	7019      	strb	r1, [r3, #0]
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <__sfputs_r>:
 8009a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a24:	4606      	mov	r6, r0
 8009a26:	460f      	mov	r7, r1
 8009a28:	4614      	mov	r4, r2
 8009a2a:	18d5      	adds	r5, r2, r3
 8009a2c:	42ac      	cmp	r4, r5
 8009a2e:	d101      	bne.n	8009a34 <__sfputs_r+0x12>
 8009a30:	2000      	movs	r0, #0
 8009a32:	e007      	b.n	8009a44 <__sfputs_r+0x22>
 8009a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a38:	463a      	mov	r2, r7
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ffda 	bl	80099f4 <__sfputc_r>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d1f3      	bne.n	8009a2c <__sfputs_r+0xa>
 8009a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a48 <_vfiprintf_r>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	b09d      	sub	sp, #116	; 0x74
 8009a50:	4614      	mov	r4, r2
 8009a52:	4698      	mov	r8, r3
 8009a54:	4606      	mov	r6, r0
 8009a56:	b118      	cbz	r0, 8009a60 <_vfiprintf_r+0x18>
 8009a58:	6983      	ldr	r3, [r0, #24]
 8009a5a:	b90b      	cbnz	r3, 8009a60 <_vfiprintf_r+0x18>
 8009a5c:	f7ff fdca 	bl	80095f4 <__sinit>
 8009a60:	4b89      	ldr	r3, [pc, #548]	; (8009c88 <_vfiprintf_r+0x240>)
 8009a62:	429d      	cmp	r5, r3
 8009a64:	d11b      	bne.n	8009a9e <_vfiprintf_r+0x56>
 8009a66:	6875      	ldr	r5, [r6, #4]
 8009a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a6a:	07d9      	lsls	r1, r3, #31
 8009a6c:	d405      	bmi.n	8009a7a <_vfiprintf_r+0x32>
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	059a      	lsls	r2, r3, #22
 8009a72:	d402      	bmi.n	8009a7a <_vfiprintf_r+0x32>
 8009a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a76:	f7ff fe6d 	bl	8009754 <__retarget_lock_acquire_recursive>
 8009a7a:	89ab      	ldrh	r3, [r5, #12]
 8009a7c:	071b      	lsls	r3, r3, #28
 8009a7e:	d501      	bpl.n	8009a84 <_vfiprintf_r+0x3c>
 8009a80:	692b      	ldr	r3, [r5, #16]
 8009a82:	b9eb      	cbnz	r3, 8009ac0 <_vfiprintf_r+0x78>
 8009a84:	4629      	mov	r1, r5
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7ff fc0e 	bl	80092a8 <__swsetup_r>
 8009a8c:	b1c0      	cbz	r0, 8009ac0 <_vfiprintf_r+0x78>
 8009a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a90:	07dc      	lsls	r4, r3, #31
 8009a92:	d50e      	bpl.n	8009ab2 <_vfiprintf_r+0x6a>
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295
 8009a98:	b01d      	add	sp, #116	; 0x74
 8009a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9e:	4b7b      	ldr	r3, [pc, #492]	; (8009c8c <_vfiprintf_r+0x244>)
 8009aa0:	429d      	cmp	r5, r3
 8009aa2:	d101      	bne.n	8009aa8 <_vfiprintf_r+0x60>
 8009aa4:	68b5      	ldr	r5, [r6, #8]
 8009aa6:	e7df      	b.n	8009a68 <_vfiprintf_r+0x20>
 8009aa8:	4b79      	ldr	r3, [pc, #484]	; (8009c90 <_vfiprintf_r+0x248>)
 8009aaa:	429d      	cmp	r5, r3
 8009aac:	bf08      	it	eq
 8009aae:	68f5      	ldreq	r5, [r6, #12]
 8009ab0:	e7da      	b.n	8009a68 <_vfiprintf_r+0x20>
 8009ab2:	89ab      	ldrh	r3, [r5, #12]
 8009ab4:	0598      	lsls	r0, r3, #22
 8009ab6:	d4ed      	bmi.n	8009a94 <_vfiprintf_r+0x4c>
 8009ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aba:	f7ff fe4c 	bl	8009756 <__retarget_lock_release_recursive>
 8009abe:	e7e9      	b.n	8009a94 <_vfiprintf_r+0x4c>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac4:	2320      	movs	r3, #32
 8009ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ace:	2330      	movs	r3, #48	; 0x30
 8009ad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c94 <_vfiprintf_r+0x24c>
 8009ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ad8:	f04f 0901 	mov.w	r9, #1
 8009adc:	4623      	mov	r3, r4
 8009ade:	469a      	mov	sl, r3
 8009ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae4:	b10a      	cbz	r2, 8009aea <_vfiprintf_r+0xa2>
 8009ae6:	2a25      	cmp	r2, #37	; 0x25
 8009ae8:	d1f9      	bne.n	8009ade <_vfiprintf_r+0x96>
 8009aea:	ebba 0b04 	subs.w	fp, sl, r4
 8009aee:	d00b      	beq.n	8009b08 <_vfiprintf_r+0xc0>
 8009af0:	465b      	mov	r3, fp
 8009af2:	4622      	mov	r2, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff ff93 	bl	8009a22 <__sfputs_r>
 8009afc:	3001      	adds	r0, #1
 8009afe:	f000 80aa 	beq.w	8009c56 <_vfiprintf_r+0x20e>
 8009b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b04:	445a      	add	r2, fp
 8009b06:	9209      	str	r2, [sp, #36]	; 0x24
 8009b08:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 80a2 	beq.w	8009c56 <_vfiprintf_r+0x20e>
 8009b12:	2300      	movs	r3, #0
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b1c:	f10a 0a01 	add.w	sl, sl, #1
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b28:	931a      	str	r3, [sp, #104]	; 0x68
 8009b2a:	4654      	mov	r4, sl
 8009b2c:	2205      	movs	r2, #5
 8009b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b32:	4858      	ldr	r0, [pc, #352]	; (8009c94 <_vfiprintf_r+0x24c>)
 8009b34:	f7f6 fb4c 	bl	80001d0 <memchr>
 8009b38:	9a04      	ldr	r2, [sp, #16]
 8009b3a:	b9d8      	cbnz	r0, 8009b74 <_vfiprintf_r+0x12c>
 8009b3c:	06d1      	lsls	r1, r2, #27
 8009b3e:	bf44      	itt	mi
 8009b40:	2320      	movmi	r3, #32
 8009b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b46:	0713      	lsls	r3, r2, #28
 8009b48:	bf44      	itt	mi
 8009b4a:	232b      	movmi	r3, #43	; 0x2b
 8009b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b50:	f89a 3000 	ldrb.w	r3, [sl]
 8009b54:	2b2a      	cmp	r3, #42	; 0x2a
 8009b56:	d015      	beq.n	8009b84 <_vfiprintf_r+0x13c>
 8009b58:	9a07      	ldr	r2, [sp, #28]
 8009b5a:	4654      	mov	r4, sl
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f04f 0c0a 	mov.w	ip, #10
 8009b62:	4621      	mov	r1, r4
 8009b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b68:	3b30      	subs	r3, #48	; 0x30
 8009b6a:	2b09      	cmp	r3, #9
 8009b6c:	d94e      	bls.n	8009c0c <_vfiprintf_r+0x1c4>
 8009b6e:	b1b0      	cbz	r0, 8009b9e <_vfiprintf_r+0x156>
 8009b70:	9207      	str	r2, [sp, #28]
 8009b72:	e014      	b.n	8009b9e <_vfiprintf_r+0x156>
 8009b74:	eba0 0308 	sub.w	r3, r0, r8
 8009b78:	fa09 f303 	lsl.w	r3, r9, r3
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	9304      	str	r3, [sp, #16]
 8009b80:	46a2      	mov	sl, r4
 8009b82:	e7d2      	b.n	8009b2a <_vfiprintf_r+0xe2>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	1d19      	adds	r1, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	9103      	str	r1, [sp, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfbb      	ittet	lt
 8009b90:	425b      	neglt	r3, r3
 8009b92:	f042 0202 	orrlt.w	r2, r2, #2
 8009b96:	9307      	strge	r3, [sp, #28]
 8009b98:	9307      	strlt	r3, [sp, #28]
 8009b9a:	bfb8      	it	lt
 8009b9c:	9204      	strlt	r2, [sp, #16]
 8009b9e:	7823      	ldrb	r3, [r4, #0]
 8009ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba2:	d10c      	bne.n	8009bbe <_vfiprintf_r+0x176>
 8009ba4:	7863      	ldrb	r3, [r4, #1]
 8009ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba8:	d135      	bne.n	8009c16 <_vfiprintf_r+0x1ce>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	1d1a      	adds	r2, r3, #4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	9203      	str	r2, [sp, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bfb8      	it	lt
 8009bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bba:	3402      	adds	r4, #2
 8009bbc:	9305      	str	r3, [sp, #20]
 8009bbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ca4 <_vfiprintf_r+0x25c>
 8009bc2:	7821      	ldrb	r1, [r4, #0]
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f7f6 fb02 	bl	80001d0 <memchr>
 8009bcc:	b140      	cbz	r0, 8009be0 <_vfiprintf_r+0x198>
 8009bce:	2340      	movs	r3, #64	; 0x40
 8009bd0:	eba0 000a 	sub.w	r0, r0, sl
 8009bd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009bd8:	9b04      	ldr	r3, [sp, #16]
 8009bda:	4303      	orrs	r3, r0
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9304      	str	r3, [sp, #16]
 8009be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be4:	482c      	ldr	r0, [pc, #176]	; (8009c98 <_vfiprintf_r+0x250>)
 8009be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bea:	2206      	movs	r2, #6
 8009bec:	f7f6 faf0 	bl	80001d0 <memchr>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d03f      	beq.n	8009c74 <_vfiprintf_r+0x22c>
 8009bf4:	4b29      	ldr	r3, [pc, #164]	; (8009c9c <_vfiprintf_r+0x254>)
 8009bf6:	bb1b      	cbnz	r3, 8009c40 <_vfiprintf_r+0x1f8>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	3307      	adds	r3, #7
 8009bfc:	f023 0307 	bic.w	r3, r3, #7
 8009c00:	3308      	adds	r3, #8
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	443b      	add	r3, r7
 8009c08:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0a:	e767      	b.n	8009adc <_vfiprintf_r+0x94>
 8009c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c10:	460c      	mov	r4, r1
 8009c12:	2001      	movs	r0, #1
 8009c14:	e7a5      	b.n	8009b62 <_vfiprintf_r+0x11a>
 8009c16:	2300      	movs	r3, #0
 8009c18:	3401      	adds	r4, #1
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f04f 0c0a 	mov.w	ip, #10
 8009c22:	4620      	mov	r0, r4
 8009c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c28:	3a30      	subs	r2, #48	; 0x30
 8009c2a:	2a09      	cmp	r2, #9
 8009c2c:	d903      	bls.n	8009c36 <_vfiprintf_r+0x1ee>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0c5      	beq.n	8009bbe <_vfiprintf_r+0x176>
 8009c32:	9105      	str	r1, [sp, #20]
 8009c34:	e7c3      	b.n	8009bbe <_vfiprintf_r+0x176>
 8009c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e7f0      	b.n	8009c22 <_vfiprintf_r+0x1da>
 8009c40:	ab03      	add	r3, sp, #12
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	462a      	mov	r2, r5
 8009c46:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <_vfiprintf_r+0x258>)
 8009c48:	a904      	add	r1, sp, #16
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f3af 8000 	nop.w
 8009c50:	4607      	mov	r7, r0
 8009c52:	1c78      	adds	r0, r7, #1
 8009c54:	d1d6      	bne.n	8009c04 <_vfiprintf_r+0x1bc>
 8009c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c58:	07d9      	lsls	r1, r3, #31
 8009c5a:	d405      	bmi.n	8009c68 <_vfiprintf_r+0x220>
 8009c5c:	89ab      	ldrh	r3, [r5, #12]
 8009c5e:	059a      	lsls	r2, r3, #22
 8009c60:	d402      	bmi.n	8009c68 <_vfiprintf_r+0x220>
 8009c62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c64:	f7ff fd77 	bl	8009756 <__retarget_lock_release_recursive>
 8009c68:	89ab      	ldrh	r3, [r5, #12]
 8009c6a:	065b      	lsls	r3, r3, #25
 8009c6c:	f53f af12 	bmi.w	8009a94 <_vfiprintf_r+0x4c>
 8009c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c72:	e711      	b.n	8009a98 <_vfiprintf_r+0x50>
 8009c74:	ab03      	add	r3, sp, #12
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <_vfiprintf_r+0x258>)
 8009c7c:	a904      	add	r1, sp, #16
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f000 f880 	bl	8009d84 <_printf_i>
 8009c84:	e7e4      	b.n	8009c50 <_vfiprintf_r+0x208>
 8009c86:	bf00      	nop
 8009c88:	0800b2ec 	.word	0x0800b2ec
 8009c8c:	0800b30c 	.word	0x0800b30c
 8009c90:	0800b2cc 	.word	0x0800b2cc
 8009c94:	0800b32c 	.word	0x0800b32c
 8009c98:	0800b336 	.word	0x0800b336
 8009c9c:	00000000 	.word	0x00000000
 8009ca0:	08009a23 	.word	0x08009a23
 8009ca4:	0800b332 	.word	0x0800b332

08009ca8 <_printf_common>:
 8009ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cac:	4616      	mov	r6, r2
 8009cae:	4699      	mov	r9, r3
 8009cb0:	688a      	ldr	r2, [r1, #8]
 8009cb2:	690b      	ldr	r3, [r1, #16]
 8009cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	bfb8      	it	lt
 8009cbc:	4613      	movlt	r3, r2
 8009cbe:	6033      	str	r3, [r6, #0]
 8009cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	b10a      	cbz	r2, 8009cce <_printf_common+0x26>
 8009cca:	3301      	adds	r3, #1
 8009ccc:	6033      	str	r3, [r6, #0]
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	0699      	lsls	r1, r3, #26
 8009cd2:	bf42      	ittt	mi
 8009cd4:	6833      	ldrmi	r3, [r6, #0]
 8009cd6:	3302      	addmi	r3, #2
 8009cd8:	6033      	strmi	r3, [r6, #0]
 8009cda:	6825      	ldr	r5, [r4, #0]
 8009cdc:	f015 0506 	ands.w	r5, r5, #6
 8009ce0:	d106      	bne.n	8009cf0 <_printf_common+0x48>
 8009ce2:	f104 0a19 	add.w	sl, r4, #25
 8009ce6:	68e3      	ldr	r3, [r4, #12]
 8009ce8:	6832      	ldr	r2, [r6, #0]
 8009cea:	1a9b      	subs	r3, r3, r2
 8009cec:	42ab      	cmp	r3, r5
 8009cee:	dc26      	bgt.n	8009d3e <_printf_common+0x96>
 8009cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cf4:	1e13      	subs	r3, r2, #0
 8009cf6:	6822      	ldr	r2, [r4, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	2301      	movne	r3, #1
 8009cfc:	0692      	lsls	r2, r2, #26
 8009cfe:	d42b      	bmi.n	8009d58 <_printf_common+0xb0>
 8009d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d04:	4649      	mov	r1, r9
 8009d06:	4638      	mov	r0, r7
 8009d08:	47c0      	blx	r8
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d01e      	beq.n	8009d4c <_printf_common+0xa4>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	68e5      	ldr	r5, [r4, #12]
 8009d12:	6832      	ldr	r2, [r6, #0]
 8009d14:	f003 0306 	and.w	r3, r3, #6
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	bf08      	it	eq
 8009d1c:	1aad      	subeq	r5, r5, r2
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	6922      	ldr	r2, [r4, #16]
 8009d22:	bf0c      	ite	eq
 8009d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d28:	2500      	movne	r5, #0
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	bfc4      	itt	gt
 8009d2e:	1a9b      	subgt	r3, r3, r2
 8009d30:	18ed      	addgt	r5, r5, r3
 8009d32:	2600      	movs	r6, #0
 8009d34:	341a      	adds	r4, #26
 8009d36:	42b5      	cmp	r5, r6
 8009d38:	d11a      	bne.n	8009d70 <_printf_common+0xc8>
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	e008      	b.n	8009d50 <_printf_common+0xa8>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	4652      	mov	r2, sl
 8009d42:	4649      	mov	r1, r9
 8009d44:	4638      	mov	r0, r7
 8009d46:	47c0      	blx	r8
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d103      	bne.n	8009d54 <_printf_common+0xac>
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d54:	3501      	adds	r5, #1
 8009d56:	e7c6      	b.n	8009ce6 <_printf_common+0x3e>
 8009d58:	18e1      	adds	r1, r4, r3
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	2030      	movs	r0, #48	; 0x30
 8009d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d62:	4422      	add	r2, r4
 8009d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d6c:	3302      	adds	r3, #2
 8009d6e:	e7c7      	b.n	8009d00 <_printf_common+0x58>
 8009d70:	2301      	movs	r3, #1
 8009d72:	4622      	mov	r2, r4
 8009d74:	4649      	mov	r1, r9
 8009d76:	4638      	mov	r0, r7
 8009d78:	47c0      	blx	r8
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d0e6      	beq.n	8009d4c <_printf_common+0xa4>
 8009d7e:	3601      	adds	r6, #1
 8009d80:	e7d9      	b.n	8009d36 <_printf_common+0x8e>
	...

08009d84 <_printf_i>:
 8009d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d88:	7e0f      	ldrb	r7, [r1, #24]
 8009d8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d8c:	2f78      	cmp	r7, #120	; 0x78
 8009d8e:	4691      	mov	r9, r2
 8009d90:	4680      	mov	r8, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	469a      	mov	sl, r3
 8009d96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d9a:	d807      	bhi.n	8009dac <_printf_i+0x28>
 8009d9c:	2f62      	cmp	r7, #98	; 0x62
 8009d9e:	d80a      	bhi.n	8009db6 <_printf_i+0x32>
 8009da0:	2f00      	cmp	r7, #0
 8009da2:	f000 80d8 	beq.w	8009f56 <_printf_i+0x1d2>
 8009da6:	2f58      	cmp	r7, #88	; 0x58
 8009da8:	f000 80a3 	beq.w	8009ef2 <_printf_i+0x16e>
 8009dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009db4:	e03a      	b.n	8009e2c <_printf_i+0xa8>
 8009db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dba:	2b15      	cmp	r3, #21
 8009dbc:	d8f6      	bhi.n	8009dac <_printf_i+0x28>
 8009dbe:	a101      	add	r1, pc, #4	; (adr r1, 8009dc4 <_printf_i+0x40>)
 8009dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dc4:	08009e1d 	.word	0x08009e1d
 8009dc8:	08009e31 	.word	0x08009e31
 8009dcc:	08009dad 	.word	0x08009dad
 8009dd0:	08009dad 	.word	0x08009dad
 8009dd4:	08009dad 	.word	0x08009dad
 8009dd8:	08009dad 	.word	0x08009dad
 8009ddc:	08009e31 	.word	0x08009e31
 8009de0:	08009dad 	.word	0x08009dad
 8009de4:	08009dad 	.word	0x08009dad
 8009de8:	08009dad 	.word	0x08009dad
 8009dec:	08009dad 	.word	0x08009dad
 8009df0:	08009f3d 	.word	0x08009f3d
 8009df4:	08009e61 	.word	0x08009e61
 8009df8:	08009f1f 	.word	0x08009f1f
 8009dfc:	08009dad 	.word	0x08009dad
 8009e00:	08009dad 	.word	0x08009dad
 8009e04:	08009f5f 	.word	0x08009f5f
 8009e08:	08009dad 	.word	0x08009dad
 8009e0c:	08009e61 	.word	0x08009e61
 8009e10:	08009dad 	.word	0x08009dad
 8009e14:	08009dad 	.word	0x08009dad
 8009e18:	08009f27 	.word	0x08009f27
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	1d1a      	adds	r2, r3, #4
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	602a      	str	r2, [r5, #0]
 8009e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0a3      	b.n	8009f78 <_printf_i+0x1f4>
 8009e30:	6820      	ldr	r0, [r4, #0]
 8009e32:	6829      	ldr	r1, [r5, #0]
 8009e34:	0606      	lsls	r6, r0, #24
 8009e36:	f101 0304 	add.w	r3, r1, #4
 8009e3a:	d50a      	bpl.n	8009e52 <_printf_i+0xce>
 8009e3c:	680e      	ldr	r6, [r1, #0]
 8009e3e:	602b      	str	r3, [r5, #0]
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	da03      	bge.n	8009e4c <_printf_i+0xc8>
 8009e44:	232d      	movs	r3, #45	; 0x2d
 8009e46:	4276      	negs	r6, r6
 8009e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e4c:	485e      	ldr	r0, [pc, #376]	; (8009fc8 <_printf_i+0x244>)
 8009e4e:	230a      	movs	r3, #10
 8009e50:	e019      	b.n	8009e86 <_printf_i+0x102>
 8009e52:	680e      	ldr	r6, [r1, #0]
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e5a:	bf18      	it	ne
 8009e5c:	b236      	sxthne	r6, r6
 8009e5e:	e7ef      	b.n	8009e40 <_printf_i+0xbc>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	6820      	ldr	r0, [r4, #0]
 8009e64:	1d19      	adds	r1, r3, #4
 8009e66:	6029      	str	r1, [r5, #0]
 8009e68:	0601      	lsls	r1, r0, #24
 8009e6a:	d501      	bpl.n	8009e70 <_printf_i+0xec>
 8009e6c:	681e      	ldr	r6, [r3, #0]
 8009e6e:	e002      	b.n	8009e76 <_printf_i+0xf2>
 8009e70:	0646      	lsls	r6, r0, #25
 8009e72:	d5fb      	bpl.n	8009e6c <_printf_i+0xe8>
 8009e74:	881e      	ldrh	r6, [r3, #0]
 8009e76:	4854      	ldr	r0, [pc, #336]	; (8009fc8 <_printf_i+0x244>)
 8009e78:	2f6f      	cmp	r7, #111	; 0x6f
 8009e7a:	bf0c      	ite	eq
 8009e7c:	2308      	moveq	r3, #8
 8009e7e:	230a      	movne	r3, #10
 8009e80:	2100      	movs	r1, #0
 8009e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e86:	6865      	ldr	r5, [r4, #4]
 8009e88:	60a5      	str	r5, [r4, #8]
 8009e8a:	2d00      	cmp	r5, #0
 8009e8c:	bfa2      	ittt	ge
 8009e8e:	6821      	ldrge	r1, [r4, #0]
 8009e90:	f021 0104 	bicge.w	r1, r1, #4
 8009e94:	6021      	strge	r1, [r4, #0]
 8009e96:	b90e      	cbnz	r6, 8009e9c <_printf_i+0x118>
 8009e98:	2d00      	cmp	r5, #0
 8009e9a:	d04d      	beq.n	8009f38 <_printf_i+0x1b4>
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ea2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ea6:	5dc7      	ldrb	r7, [r0, r7]
 8009ea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009eac:	4637      	mov	r7, r6
 8009eae:	42bb      	cmp	r3, r7
 8009eb0:	460e      	mov	r6, r1
 8009eb2:	d9f4      	bls.n	8009e9e <_printf_i+0x11a>
 8009eb4:	2b08      	cmp	r3, #8
 8009eb6:	d10b      	bne.n	8009ed0 <_printf_i+0x14c>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	07de      	lsls	r6, r3, #31
 8009ebc:	d508      	bpl.n	8009ed0 <_printf_i+0x14c>
 8009ebe:	6923      	ldr	r3, [r4, #16]
 8009ec0:	6861      	ldr	r1, [r4, #4]
 8009ec2:	4299      	cmp	r1, r3
 8009ec4:	bfde      	ittt	le
 8009ec6:	2330      	movle	r3, #48	; 0x30
 8009ec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ecc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ed0:	1b52      	subs	r2, r2, r5
 8009ed2:	6122      	str	r2, [r4, #16]
 8009ed4:	f8cd a000 	str.w	sl, [sp]
 8009ed8:	464b      	mov	r3, r9
 8009eda:	aa03      	add	r2, sp, #12
 8009edc:	4621      	mov	r1, r4
 8009ede:	4640      	mov	r0, r8
 8009ee0:	f7ff fee2 	bl	8009ca8 <_printf_common>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d14c      	bne.n	8009f82 <_printf_i+0x1fe>
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	b004      	add	sp, #16
 8009eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef2:	4835      	ldr	r0, [pc, #212]	; (8009fc8 <_printf_i+0x244>)
 8009ef4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ef8:	6829      	ldr	r1, [r5, #0]
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f00:	6029      	str	r1, [r5, #0]
 8009f02:	061d      	lsls	r5, r3, #24
 8009f04:	d514      	bpl.n	8009f30 <_printf_i+0x1ac>
 8009f06:	07df      	lsls	r7, r3, #31
 8009f08:	bf44      	itt	mi
 8009f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f0e:	6023      	strmi	r3, [r4, #0]
 8009f10:	b91e      	cbnz	r6, 8009f1a <_printf_i+0x196>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	f023 0320 	bic.w	r3, r3, #32
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	2310      	movs	r3, #16
 8009f1c:	e7b0      	b.n	8009e80 <_printf_i+0xfc>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	f043 0320 	orr.w	r3, r3, #32
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	2378      	movs	r3, #120	; 0x78
 8009f28:	4828      	ldr	r0, [pc, #160]	; (8009fcc <_printf_i+0x248>)
 8009f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f2e:	e7e3      	b.n	8009ef8 <_printf_i+0x174>
 8009f30:	0659      	lsls	r1, r3, #25
 8009f32:	bf48      	it	mi
 8009f34:	b2b6      	uxthmi	r6, r6
 8009f36:	e7e6      	b.n	8009f06 <_printf_i+0x182>
 8009f38:	4615      	mov	r5, r2
 8009f3a:	e7bb      	b.n	8009eb4 <_printf_i+0x130>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	6826      	ldr	r6, [r4, #0]
 8009f40:	6961      	ldr	r1, [r4, #20]
 8009f42:	1d18      	adds	r0, r3, #4
 8009f44:	6028      	str	r0, [r5, #0]
 8009f46:	0635      	lsls	r5, r6, #24
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	d501      	bpl.n	8009f50 <_printf_i+0x1cc>
 8009f4c:	6019      	str	r1, [r3, #0]
 8009f4e:	e002      	b.n	8009f56 <_printf_i+0x1d2>
 8009f50:	0670      	lsls	r0, r6, #25
 8009f52:	d5fb      	bpl.n	8009f4c <_printf_i+0x1c8>
 8009f54:	8019      	strh	r1, [r3, #0]
 8009f56:	2300      	movs	r3, #0
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	4615      	mov	r5, r2
 8009f5c:	e7ba      	b.n	8009ed4 <_printf_i+0x150>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	1d1a      	adds	r2, r3, #4
 8009f62:	602a      	str	r2, [r5, #0]
 8009f64:	681d      	ldr	r5, [r3, #0]
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	2100      	movs	r1, #0
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f7f6 f930 	bl	80001d0 <memchr>
 8009f70:	b108      	cbz	r0, 8009f76 <_printf_i+0x1f2>
 8009f72:	1b40      	subs	r0, r0, r5
 8009f74:	6060      	str	r0, [r4, #4]
 8009f76:	6863      	ldr	r3, [r4, #4]
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f80:	e7a8      	b.n	8009ed4 <_printf_i+0x150>
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	462a      	mov	r2, r5
 8009f86:	4649      	mov	r1, r9
 8009f88:	4640      	mov	r0, r8
 8009f8a:	47d0      	blx	sl
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d0ab      	beq.n	8009ee8 <_printf_i+0x164>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	079b      	lsls	r3, r3, #30
 8009f94:	d413      	bmi.n	8009fbe <_printf_i+0x23a>
 8009f96:	68e0      	ldr	r0, [r4, #12]
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	4298      	cmp	r0, r3
 8009f9c:	bfb8      	it	lt
 8009f9e:	4618      	movlt	r0, r3
 8009fa0:	e7a4      	b.n	8009eec <_printf_i+0x168>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	4640      	mov	r0, r8
 8009faa:	47d0      	blx	sl
 8009fac:	3001      	adds	r0, #1
 8009fae:	d09b      	beq.n	8009ee8 <_printf_i+0x164>
 8009fb0:	3501      	adds	r5, #1
 8009fb2:	68e3      	ldr	r3, [r4, #12]
 8009fb4:	9903      	ldr	r1, [sp, #12]
 8009fb6:	1a5b      	subs	r3, r3, r1
 8009fb8:	42ab      	cmp	r3, r5
 8009fba:	dcf2      	bgt.n	8009fa2 <_printf_i+0x21e>
 8009fbc:	e7eb      	b.n	8009f96 <_printf_i+0x212>
 8009fbe:	2500      	movs	r5, #0
 8009fc0:	f104 0619 	add.w	r6, r4, #25
 8009fc4:	e7f5      	b.n	8009fb2 <_printf_i+0x22e>
 8009fc6:	bf00      	nop
 8009fc8:	0800b33d 	.word	0x0800b33d
 8009fcc:	0800b34e 	.word	0x0800b34e

08009fd0 <_sbrk_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d06      	ldr	r5, [pc, #24]	; (8009fec <_sbrk_r+0x1c>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7fa fa2c 	bl	8004438 <_sbrk>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_sbrk_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_sbrk_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	20002938 	.word	0x20002938

08009ff0 <__sread>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	f000 f8a8 	bl	800a14c <_read_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	bfab      	itete	ge
 800a000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a002:	89a3      	ldrhlt	r3, [r4, #12]
 800a004:	181b      	addge	r3, r3, r0
 800a006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a00a:	bfac      	ite	ge
 800a00c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a00e:	81a3      	strhlt	r3, [r4, #12]
 800a010:	bd10      	pop	{r4, pc}

0800a012 <__swrite>:
 800a012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a016:	461f      	mov	r7, r3
 800a018:	898b      	ldrh	r3, [r1, #12]
 800a01a:	05db      	lsls	r3, r3, #23
 800a01c:	4605      	mov	r5, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	4616      	mov	r6, r2
 800a022:	d505      	bpl.n	800a030 <__swrite+0x1e>
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2302      	movs	r3, #2
 800a02a:	2200      	movs	r2, #0
 800a02c:	f000 f870 	bl	800a110 <_lseek_r>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	f000 b817 	b.w	800a078 <_write_r>

0800a04a <__sseek>:
 800a04a:	b510      	push	{r4, lr}
 800a04c:	460c      	mov	r4, r1
 800a04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a052:	f000 f85d 	bl	800a110 <_lseek_r>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	bf15      	itete	ne
 800a05c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a066:	81a3      	strheq	r3, [r4, #12]
 800a068:	bf18      	it	ne
 800a06a:	81a3      	strhne	r3, [r4, #12]
 800a06c:	bd10      	pop	{r4, pc}

0800a06e <__sclose>:
 800a06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a072:	f000 b81b 	b.w	800a0ac <_close_r>
	...

0800a078 <_write_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d07      	ldr	r5, [pc, #28]	; (800a098 <_write_r+0x20>)
 800a07c:	4604      	mov	r4, r0
 800a07e:	4608      	mov	r0, r1
 800a080:	4611      	mov	r1, r2
 800a082:	2200      	movs	r2, #0
 800a084:	602a      	str	r2, [r5, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	f7f8 f9a4 	bl	80023d4 <_write>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_write_r+0x1e>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_write_r+0x1e>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20002938 	.word	0x20002938

0800a09c <abort>:
 800a09c:	b508      	push	{r3, lr}
 800a09e:	2006      	movs	r0, #6
 800a0a0:	f000 f88e 	bl	800a1c0 <raise>
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	f7fa f96c 	bl	8004382 <_exit>
	...

0800a0ac <_close_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4d06      	ldr	r5, [pc, #24]	; (800a0c8 <_close_r+0x1c>)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	4608      	mov	r0, r1
 800a0b6:	602b      	str	r3, [r5, #0]
 800a0b8:	f7fa f98a 	bl	80043d0 <_close>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d102      	bne.n	800a0c6 <_close_r+0x1a>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	b103      	cbz	r3, 800a0c6 <_close_r+0x1a>
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	20002938 	.word	0x20002938

0800a0cc <_fstat_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d07      	ldr	r5, [pc, #28]	; (800a0ec <_fstat_r+0x20>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	f7fa f985 	bl	80043e8 <_fstat>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d102      	bne.n	800a0e8 <_fstat_r+0x1c>
 800a0e2:	682b      	ldr	r3, [r5, #0]
 800a0e4:	b103      	cbz	r3, 800a0e8 <_fstat_r+0x1c>
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20002938 	.word	0x20002938

0800a0f0 <_isatty_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d06      	ldr	r5, [pc, #24]	; (800a10c <_isatty_r+0x1c>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	602b      	str	r3, [r5, #0]
 800a0fc:	f7fa f984 	bl	8004408 <_isatty>
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	d102      	bne.n	800a10a <_isatty_r+0x1a>
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	b103      	cbz	r3, 800a10a <_isatty_r+0x1a>
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	20002938 	.word	0x20002938

0800a110 <_lseek_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4d07      	ldr	r5, [pc, #28]	; (800a130 <_lseek_r+0x20>)
 800a114:	4604      	mov	r4, r0
 800a116:	4608      	mov	r0, r1
 800a118:	4611      	mov	r1, r2
 800a11a:	2200      	movs	r2, #0
 800a11c:	602a      	str	r2, [r5, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	f7fa f97d 	bl	800441e <_lseek>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_lseek_r+0x1e>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_lseek_r+0x1e>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	20002938 	.word	0x20002938

0800a134 <__malloc_lock>:
 800a134:	4801      	ldr	r0, [pc, #4]	; (800a13c <__malloc_lock+0x8>)
 800a136:	f7ff bb0d 	b.w	8009754 <__retarget_lock_acquire_recursive>
 800a13a:	bf00      	nop
 800a13c:	2000292c 	.word	0x2000292c

0800a140 <__malloc_unlock>:
 800a140:	4801      	ldr	r0, [pc, #4]	; (800a148 <__malloc_unlock+0x8>)
 800a142:	f7ff bb08 	b.w	8009756 <__retarget_lock_release_recursive>
 800a146:	bf00      	nop
 800a148:	2000292c 	.word	0x2000292c

0800a14c <_read_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	; (800a16c <_read_r+0x20>)
 800a150:	4604      	mov	r4, r0
 800a152:	4608      	mov	r0, r1
 800a154:	4611      	mov	r1, r2
 800a156:	2200      	movs	r2, #0
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	f7fa f91b 	bl	8004396 <_read>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_read_r+0x1e>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	b103      	cbz	r3, 800a16a <_read_r+0x1e>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20002938 	.word	0x20002938

0800a170 <_raise_r>:
 800a170:	291f      	cmp	r1, #31
 800a172:	b538      	push	{r3, r4, r5, lr}
 800a174:	4604      	mov	r4, r0
 800a176:	460d      	mov	r5, r1
 800a178:	d904      	bls.n	800a184 <_raise_r+0x14>
 800a17a:	2316      	movs	r3, #22
 800a17c:	6003      	str	r3, [r0, #0]
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a186:	b112      	cbz	r2, 800a18e <_raise_r+0x1e>
 800a188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a18c:	b94b      	cbnz	r3, 800a1a2 <_raise_r+0x32>
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 f830 	bl	800a1f4 <_getpid_r>
 800a194:	462a      	mov	r2, r5
 800a196:	4601      	mov	r1, r0
 800a198:	4620      	mov	r0, r4
 800a19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a19e:	f000 b817 	b.w	800a1d0 <_kill_r>
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d00a      	beq.n	800a1bc <_raise_r+0x4c>
 800a1a6:	1c59      	adds	r1, r3, #1
 800a1a8:	d103      	bne.n	800a1b2 <_raise_r+0x42>
 800a1aa:	2316      	movs	r3, #22
 800a1ac:	6003      	str	r3, [r0, #0]
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	e7e7      	b.n	800a182 <_raise_r+0x12>
 800a1b2:	2400      	movs	r4, #0
 800a1b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	4798      	blx	r3
 800a1bc:	2000      	movs	r0, #0
 800a1be:	e7e0      	b.n	800a182 <_raise_r+0x12>

0800a1c0 <raise>:
 800a1c0:	4b02      	ldr	r3, [pc, #8]	; (800a1cc <raise+0xc>)
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	f7ff bfd3 	b.w	800a170 <_raise_r>
 800a1ca:	bf00      	nop
 800a1cc:	2000004c 	.word	0x2000004c

0800a1d0 <_kill_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_kill_r+0x20>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	4611      	mov	r1, r2
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	f7fa f8c0 	bl	8004362 <_kill>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	d102      	bne.n	800a1ec <_kill_r+0x1c>
 800a1e6:	682b      	ldr	r3, [r5, #0]
 800a1e8:	b103      	cbz	r3, 800a1ec <_kill_r+0x1c>
 800a1ea:	6023      	str	r3, [r4, #0]
 800a1ec:	bd38      	pop	{r3, r4, r5, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20002938 	.word	0x20002938

0800a1f4 <_getpid_r>:
 800a1f4:	f7fa b8ad 	b.w	8004352 <_getpid>

0800a1f8 <_init>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr

0800a204 <_fini>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr
