
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d4c  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d928  0800d928  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d928  0800d928  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d928  0800d928  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d92c  0800d92c  0001d92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800d930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  200000cc  0800d9fc  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a08  0800d9fc  00022a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001535a  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035da  00000000  00000000  00035456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00039b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019799  00000000  00000000  0003aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191e1  00000000  00000000  00054211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008655b  00000000  00000000  0006d3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f394d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000500c  00000000  00000000  000f39a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbc4 	.word	0x0800bbc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800bbc4 	.word	0x0800bbc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <initBrickbreaker>:
uint8_t loopTester = 0;
uint8_t guardian = 0;
uint8_t guardianTimer = 100;
int toughnessColor[4] = {D_GREEN, GREY, DARK_GREY, BLACK};

void initBrickbreaker() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000276:	4b49      	ldr	r3, [pc, #292]	; (800039c <initBrickbreaker+0x12c>)
 8000278:	2228      	movs	r2, #40	; 0x28
 800027a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800027c:	4b47      	ldr	r3, [pc, #284]	; (800039c <initBrickbreaker+0x12c>)
 800027e:	2237      	movs	r2, #55	; 0x37
 8000280:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000282:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <initBrickbreaker+0x130>)
 8000284:	2228      	movs	r2, #40	; 0x28
 8000286:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000288:	4b45      	ldr	r3, [pc, #276]	; (80003a0 <initBrickbreaker+0x130>)
 800028a:	2236      	movs	r2, #54	; 0x36
 800028c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800028e:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <initBrickbreaker+0x130>)
 8000290:	2208      	movs	r2, #8
 8000292:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e041      	b.n	800031e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	e038      	b.n	8000312 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	00d9      	lsls	r1, r3, #3
 80002a4:	483f      	ldr	r0, [pc, #252]	; (80003a4 <initBrickbreaker+0x134>)
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	4413      	add	r3, r2
 80002b4:	011b      	lsls	r3, r3, #4
 80002b6:	4403      	add	r3, r0
 80002b8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f103 0108 	add.w	r1, r3, #8
 80002c0:	4838      	ldr	r0, [pc, #224]	; (80003a4 <initBrickbreaker+0x134>)
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4613      	mov	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	68ba      	ldr	r2, [r7, #8]
 80002ce:	4413      	add	r3, r2
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	4403      	add	r3, r0
 80002d4:	3304      	adds	r3, #4
 80002d6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002d8:	4932      	ldr	r1, [pc, #200]	; (80003a4 <initBrickbreaker+0x134>)
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	4413      	add	r3, r2
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	440b      	add	r3, r1
 80002ec:	3308      	adds	r3, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 80002f2:	492c      	ldr	r1, [pc, #176]	; (80003a4 <initBrickbreaker+0x134>)
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4613      	mov	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4413      	add	r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	4413      	add	r3, r2
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	440b      	add	r3, r1
 8000306:	330c      	adds	r3, #12
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	3301      	adds	r3, #1
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b09      	cmp	r3, #9
 8000316:	ddc3      	ble.n	80002a0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	2b2f      	cmp	r3, #47	; 0x2f
 8000322:	ddba      	ble.n	800029a <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e027      	b.n	800037a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	e01e      	b.n	800036e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000330:	491c      	ldr	r1, [pc, #112]	; (80003a4 <initBrickbreaker+0x134>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4613      	mov	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	4413      	add	r3, r2
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	4413      	add	r3, r2
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	440b      	add	r3, r1
 8000344:	3308      	adds	r3, #8
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800034a:	f001 fe87 	bl	800205c <setBrickToughness>
 800034e:	4601      	mov	r1, r0
 8000350:	4814      	ldr	r0, [pc, #80]	; (80003a4 <initBrickbreaker+0x134>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	683a      	ldr	r2, [r7, #0]
 800035e:	4413      	add	r3, r2
 8000360:	011b      	lsls	r3, r3, #4
 8000362:	4403      	add	r3, r0
 8000364:	330c      	adds	r3, #12
 8000366:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b09      	cmp	r3, #9
 8000372:	dddd      	ble.n	8000330 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b09      	cmp	r3, #9
 800037e:	ddd4      	ble.n	800032a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <initBrickbreaker+0x138>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000386:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800038a:	f004 fee7 	bl	800515c <Displ_CLS>
    drawBricks();
 800038e:	f001 fe9b 	bl	80020c8 <drawBricks>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000030 	.word	0x20000030
 80003a0:	20000034 	.word	0x20000034
 80003a4:	200000e8 	.word	0x200000e8
 80003a8:	20001ee8 	.word	0x20001ee8

080003ac <playBall>:

void playBall() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <playBall+0xfc>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <playBall+0x12>
        changeDirection(N);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 f8ef 	bl	800059c <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003be:	4b3a      	ldr	r3, [pc, #232]	; (80004a8 <playBall+0xfc>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	2b36      	cmp	r3, #54	; 0x36
 80003c4:	d14d      	bne.n	8000462 <playBall+0xb6>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003c6:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <playBall+0xfc>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b38      	ldr	r3, [pc, #224]	; (80004ac <playBall+0x100>)
 80003cc:	f993 3000 	ldrsb.w	r3, [r3]
 80003d0:	3b19      	subs	r3, #25
 80003d2:	429a      	cmp	r2, r3
 80003d4:	db0b      	blt.n	80003ee <playBall+0x42>
 80003d6:	4b34      	ldr	r3, [pc, #208]	; (80004a8 <playBall+0xfc>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <playBall+0x100>)
 80003dc:	f993 3000 	ldrsb.w	r3, [r3]
 80003e0:	3319      	adds	r3, #25
 80003e2:	429a      	cmp	r2, r3
 80003e4:	dc03      	bgt.n	80003ee <playBall+0x42>
            changeDirection(S);
 80003e6:	2004      	movs	r0, #4
 80003e8:	f000 f8d8 	bl	800059c <changeDirection>
 80003ec:	e039      	b.n	8000462 <playBall+0xb6>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003ee:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <playBall+0xfc>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <playBall+0x100>)
 80003f4:	f993 3000 	ldrsb.w	r3, [r3]
 80003f8:	3b1a      	subs	r3, #26
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d110      	bne.n	8000420 <playBall+0x74>
                if (ball.dir == SE) {
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <playBall+0xfc>)
 8000400:	7a1b      	ldrb	r3, [r3, #8]
 8000402:	2b03      	cmp	r3, #3
 8000404:	d103      	bne.n	800040e <playBall+0x62>
                    ball.dir = NW;
 8000406:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <playBall+0xfc>)
 8000408:	2207      	movs	r2, #7
 800040a:	721a      	strb	r2, [r3, #8]
 800040c:	e029      	b.n	8000462 <playBall+0xb6>
                } else {
                    lives1--;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <playBall+0x104>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <playBall+0x104>)
 8000418:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800041a:	f000 f965 	bl	80006e8 <gameEnd>
 800041e:	e020      	b.n	8000462 <playBall+0xb6>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <playBall+0xfc>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <playBall+0x100>)
 8000426:	f993 3000 	ldrsb.w	r3, [r3]
 800042a:	331a      	adds	r3, #26
 800042c:	429a      	cmp	r2, r3
 800042e:	d110      	bne.n	8000452 <playBall+0xa6>
                    if (ball.dir == SW) {
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <playBall+0xfc>)
 8000432:	7a1b      	ldrb	r3, [r3, #8]
 8000434:	2b05      	cmp	r3, #5
 8000436:	d103      	bne.n	8000440 <playBall+0x94>
                        ball.dir = NE;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <playBall+0xfc>)
 800043a:	2201      	movs	r2, #1
 800043c:	721a      	strb	r2, [r3, #8]
 800043e:	e010      	b.n	8000462 <playBall+0xb6>
                    } else {
                        lives1--;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <playBall+0x104>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <playBall+0x104>)
 800044a:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 800044c:	f000 f94c 	bl	80006e8 <gameEnd>
 8000450:	e007      	b.n	8000462 <playBall+0xb6>
                    }
                } else {
                    lives1--;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <playBall+0x104>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3b01      	subs	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <playBall+0x104>)
 800045c:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800045e:	f000 f943 	bl	80006e8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <playBall+0xfc>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d102      	bne.n	8000470 <playBall+0xc4>
        changeDirection(W);
 800046a:	2006      	movs	r0, #6
 800046c:	f000 f896 	bl	800059c <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <playBall+0xfc>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b4f      	cmp	r3, #79	; 0x4f
 8000476:	d102      	bne.n	800047e <playBall+0xd2>
        changeDirection(E);
 8000478:	2002      	movs	r0, #2
 800047a:	f000 f88f 	bl	800059c <changeDirection>
    }

    if (guardian == 1) {
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <playBall+0x108>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d10a      	bne.n	800049c <playBall+0xf0>
        if (ball.y == person.y - 2) {
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <playBall+0xfc>)
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <playBall+0x100>)
 800048c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000490:	3b02      	subs	r3, #2
 8000492:	429a      	cmp	r2, r3
 8000494:	d102      	bne.n	800049c <playBall+0xf0>
            changeDirection(S);
 8000496:	2004      	movs	r0, #4
 8000498:	f000 f880 	bl	800059c <changeDirection>
        }
    }

    checkBrickHit();
 800049c:	f000 fa08 	bl	80008b0 <checkBrickHit>
    moveBall();
 80004a0:	f000 f80a 	bl	80004b8 <moveBall>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000034 	.word	0x20000034
 80004ac:	20000030 	.word	0x20000030
 80004b0:	20000002 	.word	0x20000002
 80004b4:	20001eea 	.word	0x20001eea

080004b8 <moveBall>:

void moveBall() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004be:	4b36      	ldr	r3, [pc, #216]	; (8000598 <moveBall+0xe0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	b298      	uxth	r0, r3
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <moveBall+0xe0>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	b299      	uxth	r1, r3
 80004d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2304      	movs	r3, #4
 80004da:	2204      	movs	r2, #4
 80004dc:	f004 fc8a 	bl	8004df4 <Displ_FillArea>
    switch (ball.dir) {
 80004e0:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <moveBall+0xe0>)
 80004e2:	7a1b      	ldrb	r3, [r3, #8]
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d84d      	bhi.n	8000584 <moveBall+0xcc>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <moveBall+0x38>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	08000515 	.word	0x08000515
 80004f4:	0800052d 	.word	0x0800052d
 80004f8:	08000585 	.word	0x08000585
 80004fc:	08000559 	.word	0x08000559
 8000500:	08000521 	.word	0x08000521
 8000504:	0800056f 	.word	0x0800056f
 8000508:	08000585 	.word	0x08000585
 800050c:	08000543 	.word	0x08000543
 8000510:	0800058f 	.word	0x0800058f
    case N:
        ball.y -= 1;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <moveBall+0xe0>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <moveBall+0xe0>)
 800051c:	6053      	str	r3, [r2, #4]
        break;
 800051e:	e037      	b.n	8000590 <moveBall+0xd8>
    case S:
        ball.y += 1;
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <moveBall+0xe0>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <moveBall+0xe0>)
 8000528:	6053      	str	r3, [r2, #4]
        break;
 800052a:	e031      	b.n	8000590 <moveBall+0xd8>
    case NE:
        ball.y -= 1;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <moveBall+0xe0>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a19      	ldr	r2, [pc, #100]	; (8000598 <moveBall+0xe0>)
 8000534:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <moveBall+0xe0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <moveBall+0xe0>)
 800053e:	6013      	str	r3, [r2, #0]
        break;
 8000540:	e026      	b.n	8000590 <moveBall+0xd8>
    case NW:
        ball.y -= 1;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <moveBall+0xe0>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <moveBall+0xe0>)
 800054a:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <moveBall+0xe0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <moveBall+0xe0>)
 8000554:	6013      	str	r3, [r2, #0]
        break;
 8000556:	e01b      	b.n	8000590 <moveBall+0xd8>
    case SE:
        ball.y += 1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <moveBall+0xe0>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <moveBall+0xe0>)
 8000560:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <moveBall+0xe0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <moveBall+0xe0>)
 800056a:	6013      	str	r3, [r2, #0]
        break;
 800056c:	e010      	b.n	8000590 <moveBall+0xd8>
    case SW:
        ball.y += 1;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <moveBall+0xe0>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <moveBall+0xe0>)
 8000576:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <moveBall+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <moveBall+0xe0>)
 8000580:	6013      	str	r3, [r2, #0]
        break;
 8000582:	e005      	b.n	8000590 <moveBall+0xd8>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here!";
        ball.x = ball.x;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <moveBall+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <moveBall+0xe0>)
 800058a:	6013      	str	r3, [r2, #0]
    }

}
 800058c:	e000      	b.n	8000590 <moveBall+0xd8>
        break;
 800058e:	bf00      	nop
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000034 	.word	0x20000034

0800059c <changeDirection>:

void changeDirection(directions inDir) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    if (inDir == N) {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d12a      	bne.n	8000602 <changeDirection+0x66>
        switch (ball.dir) {
 80005ac:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <changeDirection+0x148>)
 80005ae:	7a1b      	ldrb	r3, [r3, #8]
 80005b0:	2b08      	cmp	r3, #8
 80005b2:	d821      	bhi.n	80005f8 <changeDirection+0x5c>
 80005b4:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <changeDirection+0x20>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005e1 	.word	0x080005e1
 80005c0:	080005f1 	.word	0x080005f1
 80005c4:	080005f9 	.word	0x080005f9
 80005c8:	080005f9 	.word	0x080005f9
 80005cc:	080005f9 	.word	0x080005f9
 80005d0:	080005f9 	.word	0x080005f9
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	08000607 	.word	0x08000607
        case N:
            ball.dir = S;
 80005e0:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <changeDirection+0x148>)
 80005e2:	2204      	movs	r2, #4
 80005e4:	721a      	strb	r2, [r3, #8]
            break;
 80005e6:	e00f      	b.n	8000608 <changeDirection+0x6c>
        case NW:
            ball.dir = SW;
 80005e8:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <changeDirection+0x148>)
 80005ea:	2205      	movs	r2, #5
 80005ec:	721a      	strb	r2, [r3, #8]
            break;
 80005ee:	e00b      	b.n	8000608 <changeDirection+0x6c>
        case NE:
            ball.dir = SE;
 80005f0:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <changeDirection+0x148>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	721a      	strb	r2, [r3, #8]
            break;
 80005f6:	e007      	b.n	8000608 <changeDirection+0x6c>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80005f8:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <changeDirection+0x148>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <changeDirection+0x148>)
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	e002      	b.n	8000608 <changeDirection+0x6c>
        }
    }
 8000602:	bf00      	nop
 8000604:	e000      	b.n	8000608 <changeDirection+0x6c>
            break;
 8000606:	bf00      	nop

    if (inDir == E) {
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d117      	bne.n	800063e <changeDirection+0xa2>
        switch (ball.dir) {
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <changeDirection+0x148>)
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	2b08      	cmp	r3, #8
 8000614:	d015      	beq.n	8000642 <changeDirection+0xa6>
 8000616:	2b08      	cmp	r3, #8
 8000618:	dc0c      	bgt.n	8000634 <changeDirection+0x98>
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <changeDirection+0x88>
 800061e:	2b03      	cmp	r3, #3
 8000620:	d004      	beq.n	800062c <changeDirection+0x90>
 8000622:	e007      	b.n	8000634 <changeDirection+0x98>
        case NE:
            ball.dir = NW;
 8000624:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <changeDirection+0x148>)
 8000626:	2207      	movs	r2, #7
 8000628:	721a      	strb	r2, [r3, #8]
            break;
 800062a:	e00b      	b.n	8000644 <changeDirection+0xa8>
        case SE:
            ball.dir = SW;
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <changeDirection+0x148>)
 800062e:	2205      	movs	r2, #5
 8000630:	721a      	strb	r2, [r3, #8]
            break;
 8000632:	e007      	b.n	8000644 <changeDirection+0xa8>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <changeDirection+0x148>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <changeDirection+0x148>)
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	e002      	b.n	8000644 <changeDirection+0xa8>
        }
    }
 800063e:	bf00      	nop
 8000640:	e000      	b.n	8000644 <changeDirection+0xa8>
            break;
 8000642:	bf00      	nop

    if (inDir == S) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d125      	bne.n	8000696 <changeDirection+0xfa>
        switch (ball.dir) {
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <changeDirection+0x148>)
 800064c:	7a1b      	ldrb	r3, [r3, #8]
 800064e:	3b03      	subs	r3, #3
 8000650:	2b05      	cmp	r3, #5
 8000652:	d81b      	bhi.n	800068c <changeDirection+0xf0>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <changeDirection+0xc0>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	0800067d 	.word	0x0800067d
 8000660:	08000675 	.word	0x08000675
 8000664:	08000685 	.word	0x08000685
 8000668:	0800068d 	.word	0x0800068d
 800066c:	0800068d 	.word	0x0800068d
 8000670:	0800069b 	.word	0x0800069b
        case S:
            ball.dir = N;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <changeDirection+0x148>)
 8000676:	2200      	movs	r2, #0
 8000678:	721a      	strb	r2, [r3, #8]
            break;
 800067a:	e00f      	b.n	800069c <changeDirection+0x100>
        case SE:
            ball.dir = NE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <changeDirection+0x148>)
 800067e:	2201      	movs	r2, #1
 8000680:	721a      	strb	r2, [r3, #8]
            break;
 8000682:	e00b      	b.n	800069c <changeDirection+0x100>
        case SW:
            ball.dir = NW;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <changeDirection+0x148>)
 8000686:	2207      	movs	r2, #7
 8000688:	721a      	strb	r2, [r3, #8]
            break;
 800068a:	e007      	b.n	800069c <changeDirection+0x100>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.dir = ball.dir;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <changeDirection+0x148>)
 800068e:	7a1a      	ldrb	r2, [r3, #8]
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <changeDirection+0x148>)
 8000692:	721a      	strb	r2, [r3, #8]
 8000694:	e002      	b.n	800069c <changeDirection+0x100>
        }
    }
 8000696:	bf00      	nop
 8000698:	e000      	b.n	800069c <changeDirection+0x100>
            break;
 800069a:	bf00      	nop

    if (inDir == W) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d116      	bne.n	80006d0 <changeDirection+0x134>
        switch (ball.dir) {
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <changeDirection+0x148>)
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d014      	beq.n	80006d4 <changeDirection+0x138>
 80006aa:	2b08      	cmp	r3, #8
 80006ac:	dc0b      	bgt.n	80006c6 <changeDirection+0x12a>
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d005      	beq.n	80006be <changeDirection+0x122>
 80006b2:	2b07      	cmp	r3, #7
 80006b4:	d107      	bne.n	80006c6 <changeDirection+0x12a>
        case NW:
            ball.dir = NE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <changeDirection+0x148>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	721a      	strb	r2, [r3, #8]
            break;
 80006bc:	e00b      	b.n	80006d6 <changeDirection+0x13a>
        case SW:
            ball.dir = SE;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <changeDirection+0x148>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	721a      	strb	r2, [r3, #8]
            break;
 80006c4:	e007      	b.n	80006d6 <changeDirection+0x13a>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <changeDirection+0x148>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <changeDirection+0x148>)
 80006cc:	6013      	str	r3, [r2, #0]
        }
    }
}
 80006ce:	e002      	b.n	80006d6 <changeDirection+0x13a>
    }
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <changeDirection+0x13a>
            break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000034 	.word	0x20000034

080006e8 <gameEnd>:

void gameEnd() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <gameEnd+0x78>)
 80006f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	b299      	uxth	r1, r3
 80006fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	230a      	movs	r3, #10
 8000704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000708:	2000      	movs	r0, #0
 800070a:	f004 fb73 	bl	8004df4 <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <gameEnd+0x78>)
 8000710:	2228      	movs	r2, #40	; 0x28
 8000712:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <gameEnd+0x78>)
 8000716:	f993 3000 	ldrsb.w	r3, [r3]
 800071a:	461a      	mov	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <gameEnd+0x7c>)
 800071e:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <gameEnd+0x7c>)
 8000722:	2236      	movs	r2, #54	; 0x36
 8000724:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <gameEnd+0x7c>)
 8000728:	2208      	movs	r2, #8
 800072a:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <gameEnd+0x80>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d112      	bne.n	800075a <gameEnd+0x72>
        if (points > highScore) {
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <gameEnd+0x84>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <gameEnd+0x88>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d903      	bls.n	8000748 <gameEnd+0x60>
            highScore = points;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <gameEnd+0x84>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <gameEnd+0x88>)
 8000746:	701a      	strb	r2, [r3, #0]
            //////QD << highScore;
        }

        start = 0;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <gameEnd+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
        points = 0;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <gameEnd+0x84>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <gameEnd+0x80>)
 8000756:	2203      	movs	r2, #3
 8000758:	701a      	strb	r2, [r3, #0]
    }
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000030 	.word	0x20000030
 8000764:	20000034 	.word	0x20000034
 8000768:	20000002 	.word	0x20000002
 800076c:	20001ee8 	.word	0x20001ee8
 8000770:	20001ee9 	.word	0x20001ee9
 8000774:	20001eef 	.word	0x20001eef

08000778 <lowerBricks>:

void lowerBricks() {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 800077e:	232e      	movs	r3, #46	; 0x2e
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e03d      	b.n	8000800 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	e034      	b.n	80007f4 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	482d      	ldr	r0, [pc, #180]	; (8000844 <lowerBricks+0xcc>)
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	460b      	mov	r3, r1
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	440b      	add	r3, r1
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	4403      	add	r3, r0
 80007a2:	3308      	adds	r3, #8
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	4827      	ldr	r0, [pc, #156]	; (8000844 <lowerBricks+0xcc>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4403      	add	r3, r0
 80007b8:	3308      	adds	r3, #8
 80007ba:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	4820      	ldr	r0, [pc, #128]	; (8000844 <lowerBricks+0xcc>)
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	440b      	add	r3, r1
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4403      	add	r3, r0
 80007d4:	330c      	adds	r3, #12
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	481a      	ldr	r0, [pc, #104]	; (8000844 <lowerBricks+0xcc>)
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	4413      	add	r3, r2
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4403      	add	r3, r0
 80007ea:	330c      	adds	r3, #12
 80007ec:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	ddc7      	ble.n	800078a <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dabe      	bge.n	8000784 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	e012      	b.n	8000832 <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <lowerBricks+0xcc>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	4413      	add	r3, r2
 8000814:	3308      	adds	r3, #8
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 800081a:	f001 fc1f 	bl	800205c <setBrickToughness>
 800081e:	4602      	mov	r2, r0
 8000820:	4908      	ldr	r1, [pc, #32]	; (8000844 <lowerBricks+0xcc>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	440b      	add	r3, r1
 8000828:	330c      	adds	r3, #12
 800082a:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b09      	cmp	r3, #9
 8000836:	dde9      	ble.n	800080c <lowerBricks+0x94>
    }

    drawBricks();
 8000838:	f001 fc46 	bl	80020c8 <drawBricks>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000e8 	.word	0x200000e8

08000848 <checkGameOver>:

void checkGameOver() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e01d      	b.n	8000890 <checkGameOver+0x48>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <checkGameOver+0x58>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	4413      	add	r3, r2
 800085c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000860:	3308      	adds	r3, #8
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d110      	bne.n	800088a <checkGameOver+0x42>

            lives1 = 0;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <checkGameOver+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <checkGameOver+0x60>)
 8000870:	f993 3000 	ldrsb.w	r3, [r3]
 8000874:	461a      	mov	r2, r3
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <checkGameOver+0x64>)
 8000878:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <checkGameOver+0x64>)
 800087c:	2236      	movs	r2, #54	; 0x36
 800087e:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <checkGameOver+0x64>)
 8000882:	2208      	movs	r2, #8
 8000884:	721a      	strb	r2, [r3, #8]
            gameEnd();
 8000886:	f7ff ff2f 	bl	80006e8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b09      	cmp	r3, #9
 8000894:	ddde      	ble.n	8000854 <checkGameOver+0xc>
            //////QD << "Game Over, noob";
        }
    }
}
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000e8 	.word	0x200000e8
 80008a4:	20000002 	.word	0x20000002
 80008a8:	20000030 	.word	0x20000030
 80008ac:	20000034 	.word	0x20000034

080008b0 <checkBrickHit>:

void checkBrickHit() {
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <checkBrickHit+0x3c>)
 80008bc:	7a1b      	ldrb	r3, [r3, #8]
 80008be:	3b01      	subs	r3, #1
 80008c0:	2b07      	cmp	r3, #7
 80008c2:	f201 8240 	bhi.w	8001d46 <checkBrickHit+0x1496>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <checkBrickHit+0x1c>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000e19 	.word	0x08000e19
 80008d0:	08001d47 	.word	0x08001d47
 80008d4:	08001341 	.word	0x08001341
 80008d8:	08001d47 	.word	0x08001d47
 80008dc:	0800184d 	.word	0x0800184d
 80008e0:	08001d47 	.word	0x08001d47
 80008e4:	080008f1 	.word	0x080008f1
 80008e8:	08001d51 	.word	0x08001d51
 80008ec:	20000034 	.word	0x20000034
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 80008f0:	4bb6      	ldr	r3, [pc, #728]	; (8000bcc <checkBrickHit+0x31c>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f1a3 0209 	sub.w	r2, r3, #9
 80008f8:	4bb4      	ldr	r3, [pc, #720]	; (8000bcc <checkBrickHit+0x31c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da00      	bge.n	8000902 <checkBrickHit+0x52>
 8000900:	3307      	adds	r3, #7
 8000902:	10db      	asrs	r3, r3, #3
 8000904:	4618      	mov	r0, r3
 8000906:	49b2      	ldr	r1, [pc, #712]	; (8000bd0 <checkBrickHit+0x320>)
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4403      	add	r3, r0
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	440b      	add	r3, r1
 8000916:	3308      	adds	r3, #8
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	f040 80b4 	bne.w	8000a88 <checkBrickHit+0x1d8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000920:	4baa      	ldr	r3, [pc, #680]	; (8000bcc <checkBrickHit+0x31c>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f1a3 0209 	sub.w	r2, r3, #9
 8000928:	4ba8      	ldr	r3, [pc, #672]	; (8000bcc <checkBrickHit+0x31c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	da00      	bge.n	8000932 <checkBrickHit+0x82>
 8000930:	3307      	adds	r3, #7
 8000932:	10db      	asrs	r3, r3, #3
 8000934:	4619      	mov	r1, r3
 8000936:	48a6      	ldr	r0, [pc, #664]	; (8000bd0 <checkBrickHit+0x320>)
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	4403      	add	r3, r0
 8000946:	330c      	adds	r3, #12
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	4ca0      	ldr	r4, [pc, #640]	; (8000bd0 <checkBrickHit+0x320>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	440b      	add	r3, r1
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	4423      	add	r3, r4
 800095c:	330c      	adds	r3, #12
 800095e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000960:	4b9a      	ldr	r3, [pc, #616]	; (8000bcc <checkBrickHit+0x31c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f1a3 0209 	sub.w	r2, r3, #9
 8000968:	4b98      	ldr	r3, [pc, #608]	; (8000bcc <checkBrickHit+0x31c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	da00      	bge.n	8000972 <checkBrickHit+0xc2>
 8000970:	3307      	adds	r3, #7
 8000972:	10db      	asrs	r3, r3, #3
 8000974:	4618      	mov	r0, r3
 8000976:	4996      	ldr	r1, [pc, #600]	; (8000bd0 <checkBrickHit+0x320>)
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4403      	add	r3, r0
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	440b      	add	r3, r1
 8000986:	330c      	adds	r3, #12
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	dc29      	bgt.n	80009e2 <checkBrickHit+0x132>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 800098e:	4b8f      	ldr	r3, [pc, #572]	; (8000bcc <checkBrickHit+0x31c>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f1a3 0209 	sub.w	r2, r3, #9
 8000996:	4b8d      	ldr	r3, [pc, #564]	; (8000bcc <checkBrickHit+0x31c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	da00      	bge.n	80009a0 <checkBrickHit+0xf0>
 800099e:	3307      	adds	r3, #7
 80009a0:	10db      	asrs	r3, r3, #3
 80009a2:	4618      	mov	r0, r3
 80009a4:	498a      	ldr	r1, [pc, #552]	; (8000bd0 <checkBrickHit+0x320>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4403      	add	r3, r0
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	440b      	add	r3, r1
 80009b4:	3308      	adds	r3, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
                points++;
 80009ba:	4b86      	ldr	r3, [pc, #536]	; (8000bd4 <checkBrickHit+0x324>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b84      	ldr	r3, [pc, #528]	; (8000bd4 <checkBrickHit+0x324>)
 80009c4:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <checkBrickHit+0x31c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da00      	bge.n	80009d0 <checkBrickHit+0x120>
 80009ce:	3307      	adds	r3, #7
 80009d0:	10db      	asrs	r3, r3, #3
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b7d      	ldr	r3, [pc, #500]	; (8000bcc <checkBrickHit+0x31c>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	3b09      	subs	r3, #9
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f001 f9cd 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 80009e2:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <checkBrickHit+0x31c>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f1a3 0209 	sub.w	r2, r3, #9
 80009ea:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <checkBrickHit+0x31c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da00      	bge.n	80009f4 <checkBrickHit+0x144>
 80009f2:	3307      	adds	r3, #7
 80009f4:	10db      	asrs	r3, r3, #3
 80009f6:	4618      	mov	r0, r3
 80009f8:	4975      	ldr	r1, [pc, #468]	; (8000bd0 <checkBrickHit+0x320>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4403      	add	r3, r0
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	440b      	add	r3, r1
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	b298      	uxth	r0, r3
 8000a10:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <checkBrickHit+0x31c>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f1a3 0209 	sub.w	r2, r3, #9
 8000a18:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <checkBrickHit+0x31c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da00      	bge.n	8000a22 <checkBrickHit+0x172>
 8000a20:	3307      	adds	r3, #7
 8000a22:	10db      	asrs	r3, r3, #3
 8000a24:	461c      	mov	r4, r3
 8000a26:	496a      	ldr	r1, [pc, #424]	; (8000bd0 <checkBrickHit+0x320>)
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4423      	add	r3, r4
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	440b      	add	r3, r1
 8000a36:	3304      	adds	r3, #4
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <checkBrickHit+0x31c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f1a3 0209 	sub.w	r2, r3, #9
 8000a48:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <checkBrickHit+0x31c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da00      	bge.n	8000a52 <checkBrickHit+0x1a2>
 8000a50:	3307      	adds	r3, #7
 8000a52:	10db      	asrs	r3, r3, #3
 8000a54:	461d      	mov	r5, r3
 8000a56:	4c5e      	ldr	r4, [pc, #376]	; (8000bd0 <checkBrickHit+0x320>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	442b      	add	r3, r5
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	4423      	add	r3, r4
 8000a66:	330c      	adds	r3, #12
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a5b      	ldr	r2, [pc, #364]	; (8000bd8 <checkBrickHit+0x328>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2304      	movs	r3, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	f004 f9bc 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <checkBrickHit+0x31c>)
 8000a84:	2205      	movs	r2, #5
 8000a86:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000a88:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <checkBrickHit+0x31c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f1a3 0208 	sub.w	r2, r3, #8
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <checkBrickHit+0x31c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da00      	bge.n	8000a9c <checkBrickHit+0x1ec>
 8000a9a:	3307      	adds	r3, #7
 8000a9c:	10db      	asrs	r3, r3, #3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	494b      	ldr	r1, [pc, #300]	; (8000bd0 <checkBrickHit+0x320>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4403      	add	r3, r0
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	440b      	add	r3, r1
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	f040 80d0 	bne.w	8000c5a <checkBrickHit+0x3aa>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000aba:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <checkBrickHit+0x31c>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f1a3 0208 	sub.w	r2, r3, #8
 8000ac2:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <checkBrickHit+0x31c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da00      	bge.n	8000ace <checkBrickHit+0x21e>
 8000acc:	3307      	adds	r3, #7
 8000ace:	10db      	asrs	r3, r3, #3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <checkBrickHit+0x320>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	440b      	add	r3, r1
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	4403      	add	r3, r0
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4c39      	ldr	r4, [pc, #228]	; (8000bd0 <checkBrickHit+0x320>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	440b      	add	r3, r1
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	4423      	add	r3, r4
 8000af8:	330c      	adds	r3, #12
 8000afa:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <checkBrickHit+0x31c>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f1a3 0208 	sub.w	r2, r3, #8
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <checkBrickHit+0x31c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da00      	bge.n	8000b10 <checkBrickHit+0x260>
 8000b0e:	3307      	adds	r3, #7
 8000b10:	10db      	asrs	r3, r3, #3
 8000b12:	4618      	mov	r0, r3
 8000b14:	492e      	ldr	r1, [pc, #184]	; (8000bd0 <checkBrickHit+0x320>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4403      	add	r3, r0
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	440b      	add	r3, r1
 8000b24:	330c      	adds	r3, #12
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc2b      	bgt.n	8000b84 <checkBrickHit+0x2d4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <checkBrickHit+0x31c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f1a3 0208 	sub.w	r2, r3, #8
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <checkBrickHit+0x31c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da00      	bge.n	8000b40 <checkBrickHit+0x290>
 8000b3e:	3307      	adds	r3, #7
 8000b40:	10db      	asrs	r3, r3, #3
 8000b42:	4618      	mov	r0, r3
 8000b44:	4922      	ldr	r1, [pc, #136]	; (8000bd0 <checkBrickHit+0x320>)
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4403      	add	r3, r0
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
                points++;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <checkBrickHit+0x324>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <checkBrickHit+0x324>)
 8000b64:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <checkBrickHit+0x31c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <checkBrickHit+0x2c2>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <checkBrickHit+0x31c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	3b08      	subs	r3, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f001 f8fc 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <checkBrickHit+0x31c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f1a3 0208 	sub.w	r2, r3, #8
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <checkBrickHit+0x31c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da00      	bge.n	8000b98 <checkBrickHit+0x2e8>
 8000b96:	3307      	adds	r3, #7
 8000b98:	10db      	asrs	r3, r3, #3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <checkBrickHit+0x320>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4403      	add	r3, r0
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	440b      	add	r3, r1
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	b298      	uxth	r0, r3
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <checkBrickHit+0x31c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f1a3 0208 	sub.w	r2, r3, #8
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <checkBrickHit+0x31c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da0a      	bge.n	8000bdc <checkBrickHit+0x32c>
 8000bc6:	3307      	adds	r3, #7
 8000bc8:	e008      	b.n	8000bdc <checkBrickHit+0x32c>
 8000bca:	bf00      	nop
 8000bcc:	20000034 	.word	0x20000034
 8000bd0:	200000e8 	.word	0x200000e8
 8000bd4:	20001ee8 	.word	0x20001ee8
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	10db      	asrs	r3, r3, #3
 8000bde:	461c      	mov	r4, r3
 8000be0:	4989      	ldr	r1, [pc, #548]	; (8000e08 <checkBrickHit+0x558>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4423      	add	r3, r4
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	440b      	add	r3, r1
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	b299      	uxth	r1, r3
 8000bfa:	4b84      	ldr	r3, [pc, #528]	; (8000e0c <checkBrickHit+0x55c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f1a3 0208 	sub.w	r2, r3, #8
 8000c02:	4b82      	ldr	r3, [pc, #520]	; (8000e0c <checkBrickHit+0x55c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	da00      	bge.n	8000c0e <checkBrickHit+0x35e>
 8000c0c:	3307      	adds	r3, #7
 8000c0e:	10db      	asrs	r3, r3, #3
 8000c10:	461d      	mov	r5, r3
 8000c12:	4c7d      	ldr	r4, [pc, #500]	; (8000e08 <checkBrickHit+0x558>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	442b      	add	r3, r5
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	4423      	add	r3, r4
 8000c22:	330c      	adds	r3, #12
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a7a      	ldr	r2, [pc, #488]	; (8000e10 <checkBrickHit+0x560>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2304      	movs	r3, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	f004 f8de 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c3e:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <checkBrickHit+0x55c>)
 8000c40:	7a1b      	ldrb	r3, [r3, #8]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d102      	bne.n	8000c4c <checkBrickHit+0x39c>
                ball.dir = NE;
 8000c46:	4b71      	ldr	r3, [pc, #452]	; (8000e0c <checkBrickHit+0x55c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c4c:	4b6f      	ldr	r3, [pc, #444]	; (8000e0c <checkBrickHit+0x55c>)
 8000c4e:	7a1b      	ldrb	r3, [r3, #8]
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d102      	bne.n	8000c5a <checkBrickHit+0x3aa>
                ball.dir = SE;
 8000c54:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <checkBrickHit+0x55c>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f041 8079 	bne.w	8001d54 <checkBrickHit+0x14a4>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000c62:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <checkBrickHit+0x55c>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f1a3 0209 	sub.w	r2, r3, #9
 8000c6a:	4b68      	ldr	r3, [pc, #416]	; (8000e0c <checkBrickHit+0x55c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <checkBrickHit+0x3c6>
 8000c74:	3307      	adds	r3, #7
 8000c76:	10db      	asrs	r3, r3, #3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	4963      	ldr	r1, [pc, #396]	; (8000e08 <checkBrickHit+0x558>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4403      	add	r3, r0
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	440b      	add	r3, r1
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	f041 8060 	bne.w	8001d54 <checkBrickHit+0x14a4>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000c94:	4b5d      	ldr	r3, [pc, #372]	; (8000e0c <checkBrickHit+0x55c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f1a3 0209 	sub.w	r2, r3, #9
 8000c9c:	4b5b      	ldr	r3, [pc, #364]	; (8000e0c <checkBrickHit+0x55c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da00      	bge.n	8000ca8 <checkBrickHit+0x3f8>
 8000ca6:	3307      	adds	r3, #7
 8000ca8:	10db      	asrs	r3, r3, #3
 8000caa:	4619      	mov	r1, r3
 8000cac:	4856      	ldr	r0, [pc, #344]	; (8000e08 <checkBrickHit+0x558>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4403      	add	r3, r0
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1e58      	subs	r0, r3, #1
 8000cc2:	4c51      	ldr	r4, [pc, #324]	; (8000e08 <checkBrickHit+0x558>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	440b      	add	r3, r1
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4423      	add	r3, r4
 8000cd2:	330c      	adds	r3, #12
 8000cd4:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <checkBrickHit+0x55c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f1a3 0209 	sub.w	r2, r3, #9
 8000cde:	4b4b      	ldr	r3, [pc, #300]	; (8000e0c <checkBrickHit+0x55c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da00      	bge.n	8000cea <checkBrickHit+0x43a>
 8000ce8:	3307      	adds	r3, #7
 8000cea:	10db      	asrs	r3, r3, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	4946      	ldr	r1, [pc, #280]	; (8000e08 <checkBrickHit+0x558>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4403      	add	r3, r0
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	440b      	add	r3, r1
 8000cfe:	330c      	adds	r3, #12
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc2b      	bgt.n	8000d5e <checkBrickHit+0x4ae>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d06:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <checkBrickHit+0x55c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f1a3 0209 	sub.w	r2, r3, #9
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <checkBrickHit+0x55c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da00      	bge.n	8000d1a <checkBrickHit+0x46a>
 8000d18:	3307      	adds	r3, #7
 8000d1a:	10db      	asrs	r3, r3, #3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	493a      	ldr	r1, [pc, #232]	; (8000e08 <checkBrickHit+0x558>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4403      	add	r3, r0
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3308      	adds	r3, #8
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
                    points++;
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <checkBrickHit+0x564>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <checkBrickHit+0x564>)
 8000d3e:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <checkBrickHit+0x55c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da00      	bge.n	8000d4c <checkBrickHit+0x49c>
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	10db      	asrs	r3, r3, #3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <checkBrickHit+0x55c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	3b09      	subs	r3, #9
 8000d56:	4619      	mov	r1, r3
 8000d58:	4610      	mov	r0, r2
 8000d5a:	f001 f80f 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <checkBrickHit+0x55c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f1a3 0209 	sub.w	r2, r3, #9
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <checkBrickHit+0x55c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da00      	bge.n	8000d72 <checkBrickHit+0x4c2>
 8000d70:	3307      	adds	r3, #7
 8000d72:	10db      	asrs	r3, r3, #3
 8000d74:	4618      	mov	r0, r3
 8000d76:	4924      	ldr	r1, [pc, #144]	; (8000e08 <checkBrickHit+0x558>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4403      	add	r3, r0
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <checkBrickHit+0x55c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f1a3 0209 	sub.w	r2, r3, #9
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <checkBrickHit+0x55c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da00      	bge.n	8000da2 <checkBrickHit+0x4f2>
 8000da0:	3307      	adds	r3, #7
 8000da2:	10db      	asrs	r3, r3, #3
 8000da4:	461c      	mov	r4, r3
 8000da6:	4918      	ldr	r1, [pc, #96]	; (8000e08 <checkBrickHit+0x558>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4423      	add	r3, r4
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <checkBrickHit+0x55c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f1a3 0209 	sub.w	r2, r3, #9
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <checkBrickHit+0x55c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da00      	bge.n	8000dd4 <checkBrickHit+0x524>
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	10db      	asrs	r3, r3, #3
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <checkBrickHit+0x558>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	442b      	add	r3, r5
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	4423      	add	r3, r4
 8000de8:	330c      	adds	r3, #12
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <checkBrickHit+0x560>)
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2304      	movs	r3, #4
 8000df8:	2220      	movs	r2, #32
 8000dfa:	f003 fffb 	bl	8004df4 <Displ_FillArea>
                ball.dir = SE;
 8000dfe:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <checkBrickHit+0x55c>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e04:	f000 bfa6 	b.w	8001d54 <checkBrickHit+0x14a4>
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20001ee8 	.word	0x20001ee8
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e18:	4bb6      	ldr	r3, [pc, #728]	; (80010f4 <checkBrickHit+0x844>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e20:	4bb4      	ldr	r3, [pc, #720]	; (80010f4 <checkBrickHit+0x844>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da00      	bge.n	8000e2a <checkBrickHit+0x57a>
 8000e28:	3307      	adds	r3, #7
 8000e2a:	10db      	asrs	r3, r3, #3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	49b2      	ldr	r1, [pc, #712]	; (80010f8 <checkBrickHit+0x848>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4403      	add	r3, r0
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3308      	adds	r3, #8
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	f040 80b4 	bne.w	8000fb0 <checkBrickHit+0x700>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000e48:	4baa      	ldr	r3, [pc, #680]	; (80010f4 <checkBrickHit+0x844>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e50:	4ba8      	ldr	r3, [pc, #672]	; (80010f4 <checkBrickHit+0x844>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da00      	bge.n	8000e5a <checkBrickHit+0x5aa>
 8000e58:	3307      	adds	r3, #7
 8000e5a:	10db      	asrs	r3, r3, #3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	48a6      	ldr	r0, [pc, #664]	; (80010f8 <checkBrickHit+0x848>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	440b      	add	r3, r1
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4403      	add	r3, r0
 8000e6e:	330c      	adds	r3, #12
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1e58      	subs	r0, r3, #1
 8000e74:	4ca0      	ldr	r4, [pc, #640]	; (80010f8 <checkBrickHit+0x848>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	440b      	add	r3, r1
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4423      	add	r3, r4
 8000e84:	330c      	adds	r3, #12
 8000e86:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000e88:	4b9a      	ldr	r3, [pc, #616]	; (80010f4 <checkBrickHit+0x844>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e90:	4b98      	ldr	r3, [pc, #608]	; (80010f4 <checkBrickHit+0x844>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da00      	bge.n	8000e9a <checkBrickHit+0x5ea>
 8000e98:	3307      	adds	r3, #7
 8000e9a:	10db      	asrs	r3, r3, #3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	4996      	ldr	r1, [pc, #600]	; (80010f8 <checkBrickHit+0x848>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4403      	add	r3, r0
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	330c      	adds	r3, #12
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dc29      	bgt.n	8000f0a <checkBrickHit+0x65a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000eb6:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <checkBrickHit+0x844>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f1a3 0209 	sub.w	r2, r3, #9
 8000ebe:	4b8d      	ldr	r3, [pc, #564]	; (80010f4 <checkBrickHit+0x844>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da00      	bge.n	8000ec8 <checkBrickHit+0x618>
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	10db      	asrs	r3, r3, #3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	498a      	ldr	r1, [pc, #552]	; (80010f8 <checkBrickHit+0x848>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4403      	add	r3, r0
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	440b      	add	r3, r1
 8000edc:	3308      	adds	r3, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
                points++;
 8000ee2:	4b86      	ldr	r3, [pc, #536]	; (80010fc <checkBrickHit+0x84c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b84      	ldr	r3, [pc, #528]	; (80010fc <checkBrickHit+0x84c>)
 8000eec:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000eee:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <checkBrickHit+0x844>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	da00      	bge.n	8000ef8 <checkBrickHit+0x648>
 8000ef6:	3307      	adds	r3, #7
 8000ef8:	10db      	asrs	r3, r3, #3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <checkBrickHit+0x844>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	3b09      	subs	r3, #9
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f000 ff39 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f0a:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <checkBrickHit+0x844>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f1a3 0209 	sub.w	r2, r3, #9
 8000f12:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <checkBrickHit+0x844>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da00      	bge.n	8000f1c <checkBrickHit+0x66c>
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	10db      	asrs	r3, r3, #3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	4975      	ldr	r1, [pc, #468]	; (80010f8 <checkBrickHit+0x848>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4403      	add	r3, r0
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	b298      	uxth	r0, r3
 8000f38:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <checkBrickHit+0x844>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f1a3 0209 	sub.w	r2, r3, #9
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <checkBrickHit+0x844>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da00      	bge.n	8000f4a <checkBrickHit+0x69a>
 8000f48:	3307      	adds	r3, #7
 8000f4a:	10db      	asrs	r3, r3, #3
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	496a      	ldr	r1, [pc, #424]	; (80010f8 <checkBrickHit+0x848>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4423      	add	r3, r4
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	b299      	uxth	r1, r3
 8000f68:	4b62      	ldr	r3, [pc, #392]	; (80010f4 <checkBrickHit+0x844>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f1a3 0209 	sub.w	r2, r3, #9
 8000f70:	4b60      	ldr	r3, [pc, #384]	; (80010f4 <checkBrickHit+0x844>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <checkBrickHit+0x6ca>
 8000f78:	3307      	adds	r3, #7
 8000f7a:	10db      	asrs	r3, r3, #3
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	4c5e      	ldr	r4, [pc, #376]	; (80010f8 <checkBrickHit+0x848>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	442b      	add	r3, r5
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4423      	add	r3, r4
 8000f8e:	330c      	adds	r3, #12
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5b      	ldr	r2, [pc, #364]	; (8001100 <checkBrickHit+0x850>)
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	f003 ff28 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8000faa:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <checkBrickHit+0x844>)
 8000fac:	2203      	movs	r2, #3
 8000fae:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8000fb0:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <checkBrickHit+0x844>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f1a3 0208 	sub.w	r2, r3, #8
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <checkBrickHit+0x844>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da00      	bge.n	8000fc4 <checkBrickHit+0x714>
 8000fc2:	3307      	adds	r3, #7
 8000fc4:	10db      	asrs	r3, r3, #3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	494b      	ldr	r1, [pc, #300]	; (80010f8 <checkBrickHit+0x848>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4403      	add	r3, r0
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	440b      	add	r3, r1
 8000fd8:	3308      	adds	r3, #8
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f040 80d0 	bne.w	8001182 <checkBrickHit+0x8d2>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <checkBrickHit+0x844>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f1a3 0208 	sub.w	r2, r3, #8
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <checkBrickHit+0x844>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da00      	bge.n	8000ff6 <checkBrickHit+0x746>
 8000ff4:	3307      	adds	r3, #7
 8000ff6:	10db      	asrs	r3, r3, #3
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	483f      	ldr	r0, [pc, #252]	; (80010f8 <checkBrickHit+0x848>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	440b      	add	r3, r1
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4403      	add	r3, r0
 800100a:	330c      	adds	r3, #12
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	4c39      	ldr	r4, [pc, #228]	; (80010f8 <checkBrickHit+0x848>)
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	440b      	add	r3, r1
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4423      	add	r3, r4
 8001020:	330c      	adds	r3, #12
 8001022:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <checkBrickHit+0x844>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f1a3 0208 	sub.w	r2, r3, #8
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <checkBrickHit+0x844>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	da00      	bge.n	8001038 <checkBrickHit+0x788>
 8001036:	3307      	adds	r3, #7
 8001038:	10db      	asrs	r3, r3, #3
 800103a:	4618      	mov	r0, r3
 800103c:	492e      	ldr	r1, [pc, #184]	; (80010f8 <checkBrickHit+0x848>)
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4403      	add	r3, r0
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	440b      	add	r3, r1
 800104c:	330c      	adds	r3, #12
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dc2b      	bgt.n	80010ac <checkBrickHit+0x7fc>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <checkBrickHit+0x844>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f1a3 0208 	sub.w	r2, r3, #8
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <checkBrickHit+0x844>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	da00      	bge.n	8001068 <checkBrickHit+0x7b8>
 8001066:	3307      	adds	r3, #7
 8001068:	10db      	asrs	r3, r3, #3
 800106a:	4618      	mov	r0, r3
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <checkBrickHit+0x848>)
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4403      	add	r3, r0
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	3308      	adds	r3, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
                points++;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <checkBrickHit+0x84c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <checkBrickHit+0x84c>)
 800108c:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <checkBrickHit+0x844>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <checkBrickHit+0x7ea>
 8001098:	3307      	adds	r3, #7
 800109a:	10db      	asrs	r3, r3, #3
 800109c:	461a      	mov	r2, r3
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <checkBrickHit+0x844>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	3b08      	subs	r3, #8
 80010a4:	4619      	mov	r1, r3
 80010a6:	4610      	mov	r0, r2
 80010a8:	f000 fe68 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <checkBrickHit+0x844>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f1a3 0208 	sub.w	r2, r3, #8
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <checkBrickHit+0x844>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da00      	bge.n	80010c0 <checkBrickHit+0x810>
 80010be:	3307      	adds	r3, #7
 80010c0:	10db      	asrs	r3, r3, #3
 80010c2:	4618      	mov	r0, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <checkBrickHit+0x848>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4403      	add	r3, r0
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	440b      	add	r3, r1
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	b298      	uxth	r0, r3
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <checkBrickHit+0x844>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f1a3 0208 	sub.w	r2, r3, #8
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <checkBrickHit+0x844>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da0a      	bge.n	8001104 <checkBrickHit+0x854>
 80010ee:	3307      	adds	r3, #7
 80010f0:	e008      	b.n	8001104 <checkBrickHit+0x854>
 80010f2:	bf00      	nop
 80010f4:	20000034 	.word	0x20000034
 80010f8:	200000e8 	.word	0x200000e8
 80010fc:	20001ee8 	.word	0x20001ee8
 8001100:	20000004 	.word	0x20000004
 8001104:	10db      	asrs	r3, r3, #3
 8001106:	461c      	mov	r4, r3
 8001108:	4989      	ldr	r1, [pc, #548]	; (8001330 <checkBrickHit+0xa80>)
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4423      	add	r3, r4
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	440b      	add	r3, r1
 8001118:	3304      	adds	r3, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	b299      	uxth	r1, r3
 8001122:	4b84      	ldr	r3, [pc, #528]	; (8001334 <checkBrickHit+0xa84>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f1a3 0208 	sub.w	r2, r3, #8
 800112a:	4b82      	ldr	r3, [pc, #520]	; (8001334 <checkBrickHit+0xa84>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	da00      	bge.n	8001136 <checkBrickHit+0x886>
 8001134:	3307      	adds	r3, #7
 8001136:	10db      	asrs	r3, r3, #3
 8001138:	461d      	mov	r5, r3
 800113a:	4c7d      	ldr	r4, [pc, #500]	; (8001330 <checkBrickHit+0xa80>)
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	442b      	add	r3, r5
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4423      	add	r3, r4
 800114a:	330c      	adds	r3, #12
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7a      	ldr	r2, [pc, #488]	; (8001338 <checkBrickHit+0xa88>)
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	b29b      	uxth	r3, r3
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2304      	movs	r3, #4
 800115a:	2220      	movs	r2, #32
 800115c:	f003 fe4a 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3301      	adds	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 8001166:	4b73      	ldr	r3, [pc, #460]	; (8001334 <checkBrickHit+0xa84>)
 8001168:	7a1b      	ldrb	r3, [r3, #8]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <checkBrickHit+0x8c4>
                ball.dir = NW;
 800116e:	4b71      	ldr	r3, [pc, #452]	; (8001334 <checkBrickHit+0xa84>)
 8001170:	2207      	movs	r2, #7
 8001172:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <checkBrickHit+0xa84>)
 8001176:	7a1b      	ldrb	r3, [r3, #8]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d102      	bne.n	8001182 <checkBrickHit+0x8d2>
                ball.dir = SW;
 800117c:	4b6d      	ldr	r3, [pc, #436]	; (8001334 <checkBrickHit+0xa84>)
 800117e:	2205      	movs	r2, #5
 8001180:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 85e7 	bne.w	8001d58 <checkBrickHit+0x14a8>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <checkBrickHit+0xa84>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f1a3 0209 	sub.w	r2, r3, #9
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <checkBrickHit+0xa84>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <checkBrickHit+0x8ee>
 800119c:	3307      	adds	r3, #7
 800119e:	10db      	asrs	r3, r3, #3
 80011a0:	4618      	mov	r0, r3
 80011a2:	4963      	ldr	r1, [pc, #396]	; (8001330 <checkBrickHit+0xa80>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4403      	add	r3, r0
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	f040 85ce 	bne.w	8001d58 <checkBrickHit+0x14a8>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <checkBrickHit+0xa84>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f1a3 0209 	sub.w	r2, r3, #9
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <checkBrickHit+0xa84>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da00      	bge.n	80011d0 <checkBrickHit+0x920>
 80011ce:	3307      	adds	r3, #7
 80011d0:	10db      	asrs	r3, r3, #3
 80011d2:	4619      	mov	r1, r3
 80011d4:	4856      	ldr	r0, [pc, #344]	; (8001330 <checkBrickHit+0xa80>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	440b      	add	r3, r1
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4403      	add	r3, r0
 80011e4:	330c      	adds	r3, #12
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1e58      	subs	r0, r3, #1
 80011ea:	4c51      	ldr	r4, [pc, #324]	; (8001330 <checkBrickHit+0xa80>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4423      	add	r3, r4
 80011fa:	330c      	adds	r3, #12
 80011fc:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <checkBrickHit+0xa84>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f1a3 0209 	sub.w	r2, r3, #9
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <checkBrickHit+0xa84>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	da00      	bge.n	8001212 <checkBrickHit+0x962>
 8001210:	3307      	adds	r3, #7
 8001212:	10db      	asrs	r3, r3, #3
 8001214:	4618      	mov	r0, r3
 8001216:	4946      	ldr	r1, [pc, #280]	; (8001330 <checkBrickHit+0xa80>)
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	440b      	add	r3, r1
 8001226:	330c      	adds	r3, #12
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	dc2b      	bgt.n	8001286 <checkBrickHit+0x9d6>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <checkBrickHit+0xa84>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f1a3 0209 	sub.w	r2, r3, #9
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <checkBrickHit+0xa84>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <checkBrickHit+0x992>
 8001240:	3307      	adds	r3, #7
 8001242:	10db      	asrs	r3, r3, #3
 8001244:	4618      	mov	r0, r3
 8001246:	493a      	ldr	r1, [pc, #232]	; (8001330 <checkBrickHit+0xa80>)
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4403      	add	r3, r0
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	440b      	add	r3, r1
 8001256:	3308      	adds	r3, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
                    points++;
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <checkBrickHit+0xa8c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <checkBrickHit+0xa8c>)
 8001266:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <checkBrickHit+0xa84>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <checkBrickHit+0x9c4>
 8001272:	3307      	adds	r3, #7
 8001274:	10db      	asrs	r3, r3, #3
 8001276:	461a      	mov	r2, r3
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <checkBrickHit+0xa84>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	3b09      	subs	r3, #9
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f000 fd7b 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <checkBrickHit+0xa84>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f1a3 0209 	sub.w	r2, r3, #9
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <checkBrickHit+0xa84>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	da00      	bge.n	800129a <checkBrickHit+0x9ea>
 8001298:	3307      	adds	r3, #7
 800129a:	10db      	asrs	r3, r3, #3
 800129c:	4618      	mov	r0, r3
 800129e:	4924      	ldr	r1, [pc, #144]	; (8001330 <checkBrickHit+0xa80>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4403      	add	r3, r0
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	440b      	add	r3, r1
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	b298      	uxth	r0, r3
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <checkBrickHit+0xa84>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f1a3 0209 	sub.w	r2, r3, #9
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <checkBrickHit+0xa84>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da00      	bge.n	80012ca <checkBrickHit+0xa1a>
 80012c8:	3307      	adds	r3, #7
 80012ca:	10db      	asrs	r3, r3, #3
 80012cc:	461c      	mov	r4, r3
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <checkBrickHit+0xa80>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4423      	add	r3, r4
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	3304      	adds	r3, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b299      	uxth	r1, r3
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <checkBrickHit+0xa84>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f1a3 0209 	sub.w	r2, r3, #9
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <checkBrickHit+0xa84>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da00      	bge.n	80012fc <checkBrickHit+0xa4c>
 80012fa:	3307      	adds	r3, #7
 80012fc:	10db      	asrs	r3, r3, #3
 80012fe:	461d      	mov	r5, r3
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <checkBrickHit+0xa80>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	442b      	add	r3, r5
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4423      	add	r3, r4
 8001310:	330c      	adds	r3, #12
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <checkBrickHit+0xa88>)
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	b29b      	uxth	r3, r3
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2304      	movs	r3, #4
 8001320:	2220      	movs	r2, #32
 8001322:	f003 fd67 	bl	8004df4 <Displ_FillArea>
                ball.dir = SW;
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <checkBrickHit+0xa84>)
 8001328:	2205      	movs	r2, #5
 800132a:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 800132c:	f000 bd14 	b.w	8001d58 <checkBrickHit+0x14a8>
 8001330:	200000e8 	.word	0x200000e8
 8001334:	20000034 	.word	0x20000034
 8001338:	20000004 	.word	0x20000004
 800133c:	20001ee8 	.word	0x20001ee8
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001340:	4bb6      	ldr	r3, [pc, #728]	; (800161c <checkBrickHit+0xd6c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	1fda      	subs	r2, r3, #7
 8001346:	4bb5      	ldr	r3, [pc, #724]	; (800161c <checkBrickHit+0xd6c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da00      	bge.n	8001350 <checkBrickHit+0xaa0>
 800134e:	3307      	adds	r3, #7
 8001350:	10db      	asrs	r3, r3, #3
 8001352:	4618      	mov	r0, r3
 8001354:	49b2      	ldr	r1, [pc, #712]	; (8001620 <checkBrickHit+0xd70>)
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4403      	add	r3, r0
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80ae 	bne.w	80014ca <checkBrickHit+0xc1a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800136e:	4bab      	ldr	r3, [pc, #684]	; (800161c <checkBrickHit+0xd6c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	1fda      	subs	r2, r3, #7
 8001374:	4ba9      	ldr	r3, [pc, #676]	; (800161c <checkBrickHit+0xd6c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da00      	bge.n	800137e <checkBrickHit+0xace>
 800137c:	3307      	adds	r3, #7
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	4619      	mov	r1, r3
 8001382:	48a7      	ldr	r0, [pc, #668]	; (8001620 <checkBrickHit+0xd70>)
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4403      	add	r3, r0
 8001392:	330c      	adds	r3, #12
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	4ca1      	ldr	r4, [pc, #644]	; (8001620 <checkBrickHit+0xd70>)
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	440b      	add	r3, r1
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4423      	add	r3, r4
 80013a8:	330c      	adds	r3, #12
 80013aa:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80013ac:	4b9b      	ldr	r3, [pc, #620]	; (800161c <checkBrickHit+0xd6c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	1fda      	subs	r2, r3, #7
 80013b2:	4b9a      	ldr	r3, [pc, #616]	; (800161c <checkBrickHit+0xd6c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da00      	bge.n	80013bc <checkBrickHit+0xb0c>
 80013ba:	3307      	adds	r3, #7
 80013bc:	10db      	asrs	r3, r3, #3
 80013be:	4618      	mov	r0, r3
 80013c0:	4997      	ldr	r1, [pc, #604]	; (8001620 <checkBrickHit+0xd70>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	440b      	add	r3, r1
 80013d0:	330c      	adds	r3, #12
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dc28      	bgt.n	800142a <checkBrickHit+0xb7a>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80013d8:	4b90      	ldr	r3, [pc, #576]	; (800161c <checkBrickHit+0xd6c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	1fda      	subs	r2, r3, #7
 80013de:	4b8f      	ldr	r3, [pc, #572]	; (800161c <checkBrickHit+0xd6c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da00      	bge.n	80013e8 <checkBrickHit+0xb38>
 80013e6:	3307      	adds	r3, #7
 80013e8:	10db      	asrs	r3, r3, #3
 80013ea:	4618      	mov	r0, r3
 80013ec:	498c      	ldr	r1, [pc, #560]	; (8001620 <checkBrickHit+0xd70>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4403      	add	r3, r0
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
                points++;
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <checkBrickHit+0xd74>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b86      	ldr	r3, [pc, #536]	; (8001624 <checkBrickHit+0xd74>)
 800140c:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <checkBrickHit+0xd6c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da00      	bge.n	8001418 <checkBrickHit+0xb68>
 8001416:	3307      	adds	r3, #7
 8001418:	10db      	asrs	r3, r3, #3
 800141a:	461a      	mov	r2, r3
 800141c:	4b7f      	ldr	r3, [pc, #508]	; (800161c <checkBrickHit+0xd6c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	3b07      	subs	r3, #7
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f000 fca9 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <checkBrickHit+0xd6c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	1fda      	subs	r2, r3, #7
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <checkBrickHit+0xd6c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <checkBrickHit+0xb8a>
 8001438:	3307      	adds	r3, #7
 800143a:	10db      	asrs	r3, r3, #3
 800143c:	4618      	mov	r0, r3
 800143e:	4978      	ldr	r1, [pc, #480]	; (8001620 <checkBrickHit+0xd70>)
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4403      	add	r3, r0
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	b298      	uxth	r0, r3
 8001456:	4b71      	ldr	r3, [pc, #452]	; (800161c <checkBrickHit+0xd6c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	1fda      	subs	r2, r3, #7
 800145c:	4b6f      	ldr	r3, [pc, #444]	; (800161c <checkBrickHit+0xd6c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	da00      	bge.n	8001466 <checkBrickHit+0xbb6>
 8001464:	3307      	adds	r3, #7
 8001466:	10db      	asrs	r3, r3, #3
 8001468:	461c      	mov	r4, r3
 800146a:	496d      	ldr	r1, [pc, #436]	; (8001620 <checkBrickHit+0xd70>)
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4423      	add	r3, r4
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	b299      	uxth	r1, r3
 8001484:	4b65      	ldr	r3, [pc, #404]	; (800161c <checkBrickHit+0xd6c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	1fda      	subs	r2, r3, #7
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <checkBrickHit+0xd6c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da00      	bge.n	8001494 <checkBrickHit+0xbe4>
 8001492:	3307      	adds	r3, #7
 8001494:	10db      	asrs	r3, r3, #3
 8001496:	461d      	mov	r5, r3
 8001498:	4c61      	ldr	r4, [pc, #388]	; (8001620 <checkBrickHit+0xd70>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	442b      	add	r3, r5
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4423      	add	r3, r4
 80014a8:	330c      	adds	r3, #12
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <checkBrickHit+0xd78>)
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2304      	movs	r3, #4
 80014b8:	2220      	movs	r2, #32
 80014ba:	f003 fc9b 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	3301      	adds	r3, #1
 80014c2:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <checkBrickHit+0xd6c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <checkBrickHit+0xd6c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f1a3 0208 	sub.w	r2, r3, #8
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <checkBrickHit+0xd6c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da00      	bge.n	80014de <checkBrickHit+0xc2e>
 80014dc:	3307      	adds	r3, #7
 80014de:	10db      	asrs	r3, r3, #3
 80014e0:	4618      	mov	r0, r3
 80014e2:	494f      	ldr	r1, [pc, #316]	; (8001620 <checkBrickHit+0xd70>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4403      	add	r3, r0
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3308      	adds	r3, #8
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	f040 80d0 	bne.w	800169c <checkBrickHit+0xdec>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <checkBrickHit+0xd6c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f1a3 0208 	sub.w	r2, r3, #8
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <checkBrickHit+0xd6c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	da00      	bge.n	8001510 <checkBrickHit+0xc60>
 800150e:	3307      	adds	r3, #7
 8001510:	10db      	asrs	r3, r3, #3
 8001512:	4619      	mov	r1, r3
 8001514:	4842      	ldr	r0, [pc, #264]	; (8001620 <checkBrickHit+0xd70>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	440b      	add	r3, r1
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4403      	add	r3, r0
 8001524:	330c      	adds	r3, #12
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1e58      	subs	r0, r3, #1
 800152a:	4c3d      	ldr	r4, [pc, #244]	; (8001620 <checkBrickHit+0xd70>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	440b      	add	r3, r1
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4423      	add	r3, r4
 800153a:	330c      	adds	r3, #12
 800153c:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <checkBrickHit+0xd6c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f1a3 0208 	sub.w	r2, r3, #8
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <checkBrickHit+0xd6c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <checkBrickHit+0xca2>
 8001550:	3307      	adds	r3, #7
 8001552:	10db      	asrs	r3, r3, #3
 8001554:	4618      	mov	r0, r3
 8001556:	4932      	ldr	r1, [pc, #200]	; (8001620 <checkBrickHit+0xd70>)
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4403      	add	r3, r0
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	330c      	adds	r3, #12
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dc2b      	bgt.n	80015c6 <checkBrickHit+0xd16>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <checkBrickHit+0xd6c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f1a3 0208 	sub.w	r2, r3, #8
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <checkBrickHit+0xd6c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	da00      	bge.n	8001582 <checkBrickHit+0xcd2>
 8001580:	3307      	adds	r3, #7
 8001582:	10db      	asrs	r3, r3, #3
 8001584:	4618      	mov	r0, r3
 8001586:	4926      	ldr	r1, [pc, #152]	; (8001620 <checkBrickHit+0xd70>)
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4403      	add	r3, r0
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	440b      	add	r3, r1
 8001596:	3308      	adds	r3, #8
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
                points++;
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <checkBrickHit+0xd74>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <checkBrickHit+0xd74>)
 80015a6:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <checkBrickHit+0xd6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da00      	bge.n	80015b4 <checkBrickHit+0xd04>
 80015b2:	3307      	adds	r3, #7
 80015b4:	10db      	asrs	r3, r3, #3
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <checkBrickHit+0xd6c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	3b08      	subs	r3, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f000 fbdb 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <checkBrickHit+0xd6c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f1a3 0208 	sub.w	r2, r3, #8
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <checkBrickHit+0xd6c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da00      	bge.n	80015da <checkBrickHit+0xd2a>
 80015d8:	3307      	adds	r3, #7
 80015da:	10db      	asrs	r3, r3, #3
 80015dc:	4618      	mov	r0, r3
 80015de:	4910      	ldr	r1, [pc, #64]	; (8001620 <checkBrickHit+0xd70>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4403      	add	r3, r0
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	b298      	uxth	r0, r3
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <checkBrickHit+0xd6c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f1a3 0208 	sub.w	r2, r3, #8
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <checkBrickHit+0xd6c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	da00      	bge.n	800160a <checkBrickHit+0xd5a>
 8001608:	3307      	adds	r3, #7
 800160a:	10db      	asrs	r3, r3, #3
 800160c:	461c      	mov	r4, r3
 800160e:	4904      	ldr	r1, [pc, #16]	; (8001620 <checkBrickHit+0xd70>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	e008      	b.n	800162c <checkBrickHit+0xd7c>
 800161a:	bf00      	nop
 800161c:	20000034 	.word	0x20000034
 8001620:	200000e8 	.word	0x200000e8
 8001624:	20001ee8 	.word	0x20001ee8
 8001628:	20000004 	.word	0x20000004
 800162c:	4423      	add	r3, r4
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	3304      	adds	r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	b299      	uxth	r1, r3
 800163c:	4b7f      	ldr	r3, [pc, #508]	; (800183c <checkBrickHit+0xf8c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f1a3 0208 	sub.w	r2, r3, #8
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <checkBrickHit+0xf8c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	da00      	bge.n	8001650 <checkBrickHit+0xda0>
 800164e:	3307      	adds	r3, #7
 8001650:	10db      	asrs	r3, r3, #3
 8001652:	461d      	mov	r5, r3
 8001654:	4c7a      	ldr	r4, [pc, #488]	; (8001840 <checkBrickHit+0xf90>)
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	442b      	add	r3, r5
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4423      	add	r3, r4
 8001664:	330c      	adds	r3, #12
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a76      	ldr	r2, [pc, #472]	; (8001844 <checkBrickHit+0xf94>)
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	b29b      	uxth	r3, r3
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2304      	movs	r3, #4
 8001674:	2220      	movs	r2, #32
 8001676:	f003 fbbd 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3301      	adds	r3, #1
 800167e:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 8001680:	4b6e      	ldr	r3, [pc, #440]	; (800183c <checkBrickHit+0xf8c>)
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d102      	bne.n	800168e <checkBrickHit+0xdde>
                ball.dir = SW;
 8001688:	4b6c      	ldr	r3, [pc, #432]	; (800183c <checkBrickHit+0xf8c>)
 800168a:	2205      	movs	r2, #5
 800168c:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 800168e:	4b6b      	ldr	r3, [pc, #428]	; (800183c <checkBrickHit+0xf8c>)
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <checkBrickHit+0xdec>
                ball.dir = NW;
 8001696:	4b69      	ldr	r3, [pc, #420]	; (800183c <checkBrickHit+0xf8c>)
 8001698:	2207      	movs	r2, #7
 800169a:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 835c 	bne.w	8001d5c <checkBrickHit+0x14ac>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 80016a4:	4b65      	ldr	r3, [pc, #404]	; (800183c <checkBrickHit+0xf8c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	1fda      	subs	r2, r3, #7
 80016aa:	4b64      	ldr	r3, [pc, #400]	; (800183c <checkBrickHit+0xf8c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <checkBrickHit+0xe06>
 80016b4:	3307      	adds	r3, #7
 80016b6:	10db      	asrs	r3, r3, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	4961      	ldr	r1, [pc, #388]	; (8001840 <checkBrickHit+0xf90>)
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4403      	add	r3, r0
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	3308      	adds	r3, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 8344 	bne.w	8001d5c <checkBrickHit+0x14ac>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <checkBrickHit+0xf8c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1fda      	subs	r2, r3, #7
 80016da:	4b58      	ldr	r3, [pc, #352]	; (800183c <checkBrickHit+0xf8c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da00      	bge.n	80016e6 <checkBrickHit+0xe36>
 80016e4:	3307      	adds	r3, #7
 80016e6:	10db      	asrs	r3, r3, #3
 80016e8:	4619      	mov	r1, r3
 80016ea:	4855      	ldr	r0, [pc, #340]	; (8001840 <checkBrickHit+0xf90>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4403      	add	r3, r0
 80016fa:	330c      	adds	r3, #12
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	4c4f      	ldr	r4, [pc, #316]	; (8001840 <checkBrickHit+0xf90>)
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4423      	add	r3, r4
 8001710:	330c      	adds	r3, #12
 8001712:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <checkBrickHit+0xf8c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	1fda      	subs	r2, r3, #7
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <checkBrickHit+0xf8c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	da00      	bge.n	8001726 <checkBrickHit+0xe76>
 8001724:	3307      	adds	r3, #7
 8001726:	10db      	asrs	r3, r3, #3
 8001728:	4618      	mov	r0, r3
 800172a:	4945      	ldr	r1, [pc, #276]	; (8001840 <checkBrickHit+0xf90>)
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dc2a      	bgt.n	8001798 <checkBrickHit+0xee8>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <checkBrickHit+0xf8c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	1fda      	subs	r2, r3, #7
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <checkBrickHit+0xf8c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	da00      	bge.n	8001754 <checkBrickHit+0xea4>
 8001752:	3307      	adds	r3, #7
 8001754:	10db      	asrs	r3, r3, #3
 8001756:	4618      	mov	r0, r3
 8001758:	4939      	ldr	r1, [pc, #228]	; (8001840 <checkBrickHit+0xf90>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4403      	add	r3, r0
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	440b      	add	r3, r1
 8001768:	3308      	adds	r3, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
                    points++;
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <checkBrickHit+0xf98>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <checkBrickHit+0xf98>)
 8001778:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <checkBrickHit+0xf8c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	da00      	bge.n	8001786 <checkBrickHit+0xed6>
 8001784:	3307      	adds	r3, #7
 8001786:	10db      	asrs	r3, r3, #3
 8001788:	461a      	mov	r2, r3
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <checkBrickHit+0xf8c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	3b07      	subs	r3, #7
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f000 faf2 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <checkBrickHit+0xf8c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	1fda      	subs	r2, r3, #7
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <checkBrickHit+0xf8c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <checkBrickHit+0xefa>
 80017a8:	3307      	adds	r3, #7
 80017aa:	10db      	asrs	r3, r3, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	4924      	ldr	r1, [pc, #144]	; (8001840 <checkBrickHit+0xf90>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4403      	add	r3, r0
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	440b      	add	r3, r1
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	b298      	uxth	r0, r3
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <checkBrickHit+0xf8c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	1fda      	subs	r2, r3, #7
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <checkBrickHit+0xf8c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da00      	bge.n	80017d8 <checkBrickHit+0xf28>
 80017d6:	3307      	adds	r3, #7
 80017d8:	10db      	asrs	r3, r3, #3
 80017da:	461c      	mov	r4, r3
 80017dc:	4918      	ldr	r1, [pc, #96]	; (8001840 <checkBrickHit+0xf90>)
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4423      	add	r3, r4
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	440b      	add	r3, r1
 80017ec:	3304      	adds	r3, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	b299      	uxth	r1, r3
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <checkBrickHit+0xf8c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	1fda      	subs	r2, r3, #7
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <checkBrickHit+0xf8c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	da00      	bge.n	8001808 <checkBrickHit+0xf58>
 8001806:	3307      	adds	r3, #7
 8001808:	10db      	asrs	r3, r3, #3
 800180a:	461d      	mov	r5, r3
 800180c:	4c0c      	ldr	r4, [pc, #48]	; (8001840 <checkBrickHit+0xf90>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	442b      	add	r3, r5
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4423      	add	r3, r4
 800181c:	330c      	adds	r3, #12
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a08      	ldr	r2, [pc, #32]	; (8001844 <checkBrickHit+0xf94>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	b29b      	uxth	r3, r3
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2304      	movs	r3, #4
 800182c:	2220      	movs	r2, #32
 800182e:	f003 fae1 	bl	8004df4 <Displ_FillArea>
                ball.dir = NW;
 8001832:	4b02      	ldr	r3, [pc, #8]	; (800183c <checkBrickHit+0xf8c>)
 8001834:	2207      	movs	r2, #7
 8001836:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8001838:	e290      	b.n	8001d5c <checkBrickHit+0x14ac>
 800183a:	bf00      	nop
 800183c:	20000034 	.word	0x20000034
 8001840:	200000e8 	.word	0x200000e8
 8001844:	20000004 	.word	0x20000004
 8001848:	20001ee8 	.word	0x20001ee8
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 800184c:	4bb6      	ldr	r3, [pc, #728]	; (8001b28 <checkBrickHit+0x1278>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	1fda      	subs	r2, r3, #7
 8001852:	4bb5      	ldr	r3, [pc, #724]	; (8001b28 <checkBrickHit+0x1278>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da00      	bge.n	800185c <checkBrickHit+0xfac>
 800185a:	3307      	adds	r3, #7
 800185c:	10db      	asrs	r3, r3, #3
 800185e:	4618      	mov	r0, r3
 8001860:	49b2      	ldr	r1, [pc, #712]	; (8001b2c <checkBrickHit+0x127c>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4403      	add	r3, r0
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	440b      	add	r3, r1
 8001870:	3308      	adds	r3, #8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 80ae 	bne.w	80019d6 <checkBrickHit+0x1126>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800187a:	4bab      	ldr	r3, [pc, #684]	; (8001b28 <checkBrickHit+0x1278>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	1fda      	subs	r2, r3, #7
 8001880:	4ba9      	ldr	r3, [pc, #676]	; (8001b28 <checkBrickHit+0x1278>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da00      	bge.n	800188a <checkBrickHit+0xfda>
 8001888:	3307      	adds	r3, #7
 800188a:	10db      	asrs	r3, r3, #3
 800188c:	4619      	mov	r1, r3
 800188e:	48a7      	ldr	r0, [pc, #668]	; (8001b2c <checkBrickHit+0x127c>)
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4403      	add	r3, r0
 800189e:	330c      	adds	r3, #12
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	4ca1      	ldr	r4, [pc, #644]	; (8001b2c <checkBrickHit+0x127c>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	440b      	add	r3, r1
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4423      	add	r3, r4
 80018b4:	330c      	adds	r3, #12
 80018b6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80018b8:	4b9b      	ldr	r3, [pc, #620]	; (8001b28 <checkBrickHit+0x1278>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	1fda      	subs	r2, r3, #7
 80018be:	4b9a      	ldr	r3, [pc, #616]	; (8001b28 <checkBrickHit+0x1278>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <checkBrickHit+0x1018>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	4618      	mov	r0, r3
 80018cc:	4997      	ldr	r1, [pc, #604]	; (8001b2c <checkBrickHit+0x127c>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4403      	add	r3, r0
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	440b      	add	r3, r1
 80018dc:	330c      	adds	r3, #12
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dc28      	bgt.n	8001936 <checkBrickHit+0x1086>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80018e4:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <checkBrickHit+0x1278>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	1fda      	subs	r2, r3, #7
 80018ea:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <checkBrickHit+0x1278>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da00      	bge.n	80018f4 <checkBrickHit+0x1044>
 80018f2:	3307      	adds	r3, #7
 80018f4:	10db      	asrs	r3, r3, #3
 80018f6:	4618      	mov	r0, r3
 80018f8:	498c      	ldr	r1, [pc, #560]	; (8001b2c <checkBrickHit+0x127c>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	3308      	adds	r3, #8
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
                points++;
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <checkBrickHit+0x1280>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <checkBrickHit+0x1280>)
 8001918:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800191a:	4b83      	ldr	r3, [pc, #524]	; (8001b28 <checkBrickHit+0x1278>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da00      	bge.n	8001924 <checkBrickHit+0x1074>
 8001922:	3307      	adds	r3, #7
 8001924:	10db      	asrs	r3, r3, #3
 8001926:	461a      	mov	r2, r3
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <checkBrickHit+0x1278>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	3b07      	subs	r3, #7
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f000 fa23 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <checkBrickHit+0x1278>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	1fda      	subs	r2, r3, #7
 800193c:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <checkBrickHit+0x1278>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da00      	bge.n	8001946 <checkBrickHit+0x1096>
 8001944:	3307      	adds	r3, #7
 8001946:	10db      	asrs	r3, r3, #3
 8001948:	4618      	mov	r0, r3
 800194a:	4978      	ldr	r1, [pc, #480]	; (8001b2c <checkBrickHit+0x127c>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4403      	add	r3, r0
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	440b      	add	r3, r1
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	b298      	uxth	r0, r3
 8001962:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <checkBrickHit+0x1278>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	1fda      	subs	r2, r3, #7
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <checkBrickHit+0x1278>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da00      	bge.n	8001972 <checkBrickHit+0x10c2>
 8001970:	3307      	adds	r3, #7
 8001972:	10db      	asrs	r3, r3, #3
 8001974:	461c      	mov	r4, r3
 8001976:	496d      	ldr	r1, [pc, #436]	; (8001b2c <checkBrickHit+0x127c>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4423      	add	r3, r4
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	440b      	add	r3, r1
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	b299      	uxth	r1, r3
 8001990:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <checkBrickHit+0x1278>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	1fda      	subs	r2, r3, #7
 8001996:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <checkBrickHit+0x1278>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da00      	bge.n	80019a0 <checkBrickHit+0x10f0>
 800199e:	3307      	adds	r3, #7
 80019a0:	10db      	asrs	r3, r3, #3
 80019a2:	461d      	mov	r5, r3
 80019a4:	4c61      	ldr	r4, [pc, #388]	; (8001b2c <checkBrickHit+0x127c>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	442b      	add	r3, r5
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4423      	add	r3, r4
 80019b4:	330c      	adds	r3, #12
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <checkBrickHit+0x1284>)
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2304      	movs	r3, #4
 80019c4:	2220      	movs	r2, #32
 80019c6:	f003 fa15 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	3301      	adds	r3, #1
 80019ce:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <checkBrickHit+0x1278>)
 80019d2:	2207      	movs	r2, #7
 80019d4:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <checkBrickHit+0x1278>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f1a3 0208 	sub.w	r2, r3, #8
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <checkBrickHit+0x1278>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <checkBrickHit+0x113a>
 80019e8:	3307      	adds	r3, #7
 80019ea:	10db      	asrs	r3, r3, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	494f      	ldr	r1, [pc, #316]	; (8001b2c <checkBrickHit+0x127c>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4403      	add	r3, r0
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	3308      	adds	r3, #8
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80d0 	bne.w	8001ba8 <checkBrickHit+0x12f8>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <checkBrickHit+0x1278>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f1a3 0208 	sub.w	r2, r3, #8
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <checkBrickHit+0x1278>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da00      	bge.n	8001a1c <checkBrickHit+0x116c>
 8001a1a:	3307      	adds	r3, #7
 8001a1c:	10db      	asrs	r3, r3, #3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4842      	ldr	r0, [pc, #264]	; (8001b2c <checkBrickHit+0x127c>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4403      	add	r3, r0
 8001a30:	330c      	adds	r3, #12
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1e58      	subs	r0, r3, #1
 8001a36:	4c3d      	ldr	r4, [pc, #244]	; (8001b2c <checkBrickHit+0x127c>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	440b      	add	r3, r1
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4423      	add	r3, r4
 8001a46:	330c      	adds	r3, #12
 8001a48:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <checkBrickHit+0x1278>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f1a3 0208 	sub.w	r2, r3, #8
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <checkBrickHit+0x1278>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	da00      	bge.n	8001a5e <checkBrickHit+0x11ae>
 8001a5c:	3307      	adds	r3, #7
 8001a5e:	10db      	asrs	r3, r3, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	4932      	ldr	r1, [pc, #200]	; (8001b2c <checkBrickHit+0x127c>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4403      	add	r3, r0
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	440b      	add	r3, r1
 8001a72:	330c      	adds	r3, #12
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dc2b      	bgt.n	8001ad2 <checkBrickHit+0x1222>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <checkBrickHit+0x1278>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f1a3 0208 	sub.w	r2, r3, #8
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <checkBrickHit+0x1278>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da00      	bge.n	8001a8e <checkBrickHit+0x11de>
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	10db      	asrs	r3, r3, #3
 8001a90:	4618      	mov	r0, r3
 8001a92:	4926      	ldr	r1, [pc, #152]	; (8001b2c <checkBrickHit+0x127c>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4403      	add	r3, r0
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
                points++;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <checkBrickHit+0x1280>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <checkBrickHit+0x1280>)
 8001ab2:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <checkBrickHit+0x1278>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da00      	bge.n	8001ac0 <checkBrickHit+0x1210>
 8001abe:	3307      	adds	r3, #7
 8001ac0:	10db      	asrs	r3, r3, #3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <checkBrickHit+0x1278>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	3b08      	subs	r3, #8
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f000 f955 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <checkBrickHit+0x1278>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f1a3 0208 	sub.w	r2, r3, #8
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <checkBrickHit+0x1278>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da00      	bge.n	8001ae6 <checkBrickHit+0x1236>
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	10db      	asrs	r3, r3, #3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4910      	ldr	r1, [pc, #64]	; (8001b2c <checkBrickHit+0x127c>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4403      	add	r3, r0
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	b298      	uxth	r0, r3
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <checkBrickHit+0x1278>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f1a3 0208 	sub.w	r2, r3, #8
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <checkBrickHit+0x1278>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da00      	bge.n	8001b16 <checkBrickHit+0x1266>
 8001b14:	3307      	adds	r3, #7
 8001b16:	10db      	asrs	r3, r3, #3
 8001b18:	461c      	mov	r4, r3
 8001b1a:	4904      	ldr	r1, [pc, #16]	; (8001b2c <checkBrickHit+0x127c>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	e008      	b.n	8001b38 <checkBrickHit+0x1288>
 8001b26:	bf00      	nop
 8001b28:	20000034 	.word	0x20000034
 8001b2c:	200000e8 	.word	0x200000e8
 8001b30:	20001ee8 	.word	0x20001ee8
 8001b34:	20000004 	.word	0x20000004
 8001b38:	4423      	add	r3, r4
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	b299      	uxth	r1, r3
 8001b48:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f1a3 0208 	sub.w	r2, r3, #8
 8001b50:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da00      	bge.n	8001b5c <checkBrickHit+0x12ac>
 8001b5a:	3307      	adds	r3, #7
 8001b5c:	10db      	asrs	r3, r3, #3
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4c83      	ldr	r4, [pc, #524]	; (8001d70 <checkBrickHit+0x14c0>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	442b      	add	r3, r5
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4423      	add	r3, r4
 8001b70:	330c      	adds	r3, #12
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <checkBrickHit+0x14c4>)
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2304      	movs	r3, #4
 8001b80:	2220      	movs	r2, #32
 8001b82:	f003 f937 	bl	8004df4 <Displ_FillArea>
            bricksHit++;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b8e:	7a1b      	ldrb	r3, [r3, #8]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d102      	bne.n	8001b9a <checkBrickHit+0x12ea>
                ball.dir = SE;
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	d102      	bne.n	8001ba8 <checkBrickHit+0x12f8>
                ball.dir = NE;
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80d8 	bne.w	8001d60 <checkBrickHit+0x14b0>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001bb0:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <checkBrickHit+0x14bc>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	1fda      	subs	r2, r3, #7
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <checkBrickHit+0x14bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da00      	bge.n	8001bc2 <checkBrickHit+0x1312>
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	10db      	asrs	r3, r3, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	496a      	ldr	r1, [pc, #424]	; (8001d70 <checkBrickHit+0x14c0>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	f040 80c0 	bne.w	8001d60 <checkBrickHit+0x14b0>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <checkBrickHit+0x14bc>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	1fda      	subs	r2, r3, #7
 8001be6:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <checkBrickHit+0x14bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da00      	bge.n	8001bf2 <checkBrickHit+0x1342>
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	10db      	asrs	r3, r3, #3
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	485e      	ldr	r0, [pc, #376]	; (8001d70 <checkBrickHit+0x14c0>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4403      	add	r3, r0
 8001c06:	330c      	adds	r3, #12
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	4c58      	ldr	r4, [pc, #352]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	440b      	add	r3, r1
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4423      	add	r3, r4
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001c20:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	1fda      	subs	r2, r3, #7
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da00      	bge.n	8001c32 <checkBrickHit+0x1382>
 8001c30:	3307      	adds	r3, #7
 8001c32:	10db      	asrs	r3, r3, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	494e      	ldr	r1, [pc, #312]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4403      	add	r3, r0
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	440b      	add	r3, r1
 8001c46:	330c      	adds	r3, #12
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dc2a      	bgt.n	8001ca4 <checkBrickHit+0x13f4>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	1fda      	subs	r2, r3, #7
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da00      	bge.n	8001c60 <checkBrickHit+0x13b0>
 8001c5e:	3307      	adds	r3, #7
 8001c60:	10db      	asrs	r3, r3, #3
 8001c62:	4618      	mov	r0, r3
 8001c64:	4942      	ldr	r1, [pc, #264]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4403      	add	r3, r0
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	440b      	add	r3, r1
 8001c74:	3308      	adds	r3, #8
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
                    points++;
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <checkBrickHit+0x14c8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <checkBrickHit+0x14c8>)
 8001c84:	701a      	strb	r2, [r3, #0]
                    ////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da00      	bge.n	8001c92 <checkBrickHit+0x13e2>
 8001c90:	3307      	adds	r3, #7
 8001c92:	10db      	asrs	r3, r3, #3
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	3b07      	subs	r3, #7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f86c 	bl	8001d7c <dropPowerUp>
                }
                ball.dir = NE;
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	1fda      	subs	r2, r3, #7
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da00      	bge.n	8001cbc <checkBrickHit+0x140c>
 8001cba:	3307      	adds	r3, #7
 8001cbc:	10db      	asrs	r3, r3, #3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	492b      	ldr	r1, [pc, #172]	; (8001d70 <checkBrickHit+0x14c0>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	b298      	uxth	r0, r3
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	1fda      	subs	r2, r3, #7
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da00      	bge.n	8001cea <checkBrickHit+0x143a>
 8001ce8:	3307      	adds	r3, #7
 8001cea:	10db      	asrs	r3, r3, #3
 8001cec:	461c      	mov	r4, r3
 8001cee:	4920      	ldr	r1, [pc, #128]	; (8001d70 <checkBrickHit+0x14c0>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4423      	add	r3, r4
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3304      	adds	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	b299      	uxth	r1, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	1fda      	subs	r2, r3, #7
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da00      	bge.n	8001d1a <checkBrickHit+0x146a>
 8001d18:	3307      	adds	r3, #7
 8001d1a:	10db      	asrs	r3, r3, #3
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	4c14      	ldr	r4, [pc, #80]	; (8001d70 <checkBrickHit+0x14c0>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	442b      	add	r3, r5
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4423      	add	r3, r4
 8001d2e:	330c      	adds	r3, #12
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <checkBrickHit+0x14c4>)
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f003 f858 	bl	8004df4 <Displ_FillArea>
            }
        }
        break;
 8001d44:	e00c      	b.n	8001d60 <checkBrickHit+0x14b0>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here";
        ball.dir = ball.dir;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d48:	7a1a      	ldrb	r2, [r3, #8]
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d4c:	721a      	strb	r2, [r3, #8]
    }
}
 8001d4e:	e008      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d50:	bf00      	nop
 8001d52:	e006      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d54:	bf00      	nop
 8001d56:	e004      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d58:	bf00      	nop
 8001d5a:	e002      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d5c:	bf00      	nop
 8001d5e:	e000      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d60:	bf00      	nop
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000034 	.word	0x20000034
 8001d70:	200000e8 	.word	0x200000e8
 8001d74:	20000004 	.word	0x20000004
 8001d78:	20001ee8 	.word	0x20001ee8

08001d7c <dropPowerUp>:

void dropPowerUp(int x, int y) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <dropPowerUp+0x70>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d114      	bne.n	8001dbc <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001d92:	f003 fe4f 	bl	8005a34 <HAL_GetTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f008 fcad 	bl	800a6f8 <srand>
        dropChance = rand() % 100;
 8001d9e:	f008 fcd9 	bl	800a754 <rand>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <dropPowerUp+0x74>)
 8001da6:	fb82 1203 	smull	r1, r2, r2, r3
 8001daa:	1151      	asrs	r1, r2, #5
 8001dac:	17da      	asrs	r2, r3, #31
 8001dae:	1a8a      	subs	r2, r1, r2
 8001db0:	2164      	movs	r1, #100	; 0x64
 8001db2:	fb01 f202 	mul.w	r2, r1, r2
 8001db6:	1a9a      	subs	r2, r3, r2
 8001db8:	4613      	mov	r3, r2
 8001dba:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b0a      	cmp	r3, #10
 8001dc0:	d805      	bhi.n	8001dce <dropPowerUp+0x52>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <dropPowerUp+0x52>
        guardian = 1;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <dropPowerUp+0x70>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
        //////QD << "A power up just dropped from brick at x =" << x << "y =" << y;
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d806      	bhi.n	8001de2 <dropPowerUp+0x66>
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d903      	bls.n	8001de2 <dropPowerUp+0x66>
        //////QD << "test";
        explodeBricks(x, y);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8cb 	bl	8001f78 <explodeBricks>
        //////QD << "An explosion just happened at x =" << x << "y =" << y;
    }
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20001eea 	.word	0x20001eea
 8001df0:	51eb851f 	.word	0x51eb851f

08001df4 <printScreen>:

void printScreen() {
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b08b      	sub	sp, #44	; 0x2c
 8001df8:	af06      	add	r7, sp, #24
    for (int i = 0; i < lives1; i++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e00f      	b.n	8001e20 <printScreen+0x2c>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	2318      	movs	r3, #24
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2304      	movs	r3, #4
 8001e12:	2204      	movs	r2, #4
 8001e14:	2104      	movs	r1, #4
 8001e16:	f002 ffed 	bl	8004df4 <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <printScreen+0x100>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	dbe9      	blt.n	8001e00 <printScreen+0xc>
    }

    if (guardian == 1) {
 8001e2c:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <printScreen+0x104>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10f      	bne.n	8001e54 <printScreen+0x60>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <printScreen+0x108>)
 8001e36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	b299      	uxth	r1, r3
 8001e42:	f249 6396 	movw	r3, #38550	; 0x9696
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2304      	movs	r3, #4
 8001e4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f002 ffd0 	bl	8004df4 <Displ_FillArea>
//                    game_screen[i][y] = ENC_RED;
//                }
//            }
//        }
//    }
    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <printScreen+0x108>)
 8001e56:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5a:	3b19      	subs	r3, #25
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	b298      	uxth	r0, r3
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <printScreen+0x108>)
 8001e64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2304      	movs	r3, #4
 8001e76:	22c8      	movs	r2, #200	; 0xc8
 8001e78:	f002 ffbc 	bl	8004df4 <Displ_FillArea>
//
//    game_screen[ball.x][ball.y] = ENC_BLUE;
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <printScreen+0x10c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	b298      	uxth	r0, r3
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <printScreen+0x10c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	2318      	movs	r3, #24
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2304      	movs	r3, #4
 8001e96:	2204      	movs	r2, #4
 8001e98:	f002 ffac 	bl	8004df4 <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <printScreen+0x110>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4638      	mov	r0, r7
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <printScreen+0x114>)
 8001ea4:	210c      	movs	r1, #12
 8001ea6:	f008 fc93 	bl	800a7d0 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <printScreen+0x118>)
 8001eac:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	b29c      	uxth	r4, r3
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <printScreen+0x118>)
 8001eb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ebc:	b29d      	uxth	r5, r3
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <printScreen+0x11c>)
 8001ec0:	463e      	mov	r6, r7
 8001ec2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ec6:	9204      	str	r2, [sp, #16]
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	9203      	str	r2, [sp, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	9202      	str	r2, [sp, #8]
 8001ed2:	46ec      	mov	ip, sp
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eda:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4632      	mov	r2, r6
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f003 fce1 	bl	80058ac <Displ_WString>
    //displayText(game_screen, str, score.x, score.y, WHITE);
    //snprintf(str, 12, "%u", highScore);
    //displayText(game_screen, str, highScorePoint.x, highScorePoint.y, WHITE);
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000002 	.word	0x20000002
 8001ef8:	20001eea 	.word	0x20001eea
 8001efc:	20000030 	.word	0x20000030
 8001f00:	20000034 	.word	0x20000034
 8001f04:	20001ee8 	.word	0x20001ee8
 8001f08:	0800bbdc 	.word	0x0800bbdc
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000014 	.word	0x20000014

08001f14 <checkGuardianTimer>:

void checkGuardianTimer() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <checkGuardianTimer+0x58>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d120      	bne.n	8001f64 <checkGuardianTimer+0x50>
        if (guardianTimer <= 0) {
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <checkGuardianTimer+0x44>
            guardian = 0;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <checkGuardianTimer+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <checkGuardianTimer+0x60>)
 8001f38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	b299      	uxth	r1, r3
 8001f44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f50:	2000      	movs	r0, #0
 8001f52:	f002 ff4f 	bl	8004df4 <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8001f56:	e005      	b.n	8001f64 <checkGuardianTimer+0x50>
            guardianTimer--;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f62:	701a      	strb	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20001eea 	.word	0x20001eea
 8001f70:	20000003 	.word	0x20000003
 8001f74:	20000030 	.word	0x20000030

08001f78 <explodeBricks>:

void explodeBricks(int x, int y) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <explodeBricks+0x2c>
        ymin = y;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	d101      	bne.n	8001fae <explodeBricks+0x36>
        ymax = y;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <explodeBricks+0x40>
        xmin = x;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0a      	cmp	r3, #10
 8001fbc:	d101      	bne.n	8001fc2 <explodeBricks+0x4a>
        xmax = x;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e03a      	b.n	800203e <explodeBricks+0xc6>
        for(int j = xmin; j <= xmax; j++) {
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e030      	b.n	8002030 <explodeBricks+0xb8>
            if(bricks[i][j].visible == 1) {
 8001fce:	4921      	ldr	r1, [pc, #132]	; (8002054 <explodeBricks+0xdc>)
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11f      	bne.n	800202a <explodeBricks+0xb2>
                bricks[i][j].toughness = 0;
 8001fea:	491a      	ldr	r1, [pc, #104]	; (8002054 <explodeBricks+0xdc>)
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	440b      	add	r3, r1
 8001ffe:	330c      	adds	r3, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8002004:	4913      	ldr	r1, [pc, #76]	; (8002054 <explodeBricks+0xdc>)
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	4413      	add	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	440b      	add	r3, r1
 8002018:	3308      	adds	r3, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
                points++;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <explodeBricks+0xe0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <explodeBricks+0xe0>)
 8002028:	701a      	strb	r2, [r3, #0]
        for(int j = xmin; j <= xmax; j++) {
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	ddca      	ble.n	8001fce <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	429a      	cmp	r2, r3
 8002044:	ddc0      	ble.n	8001fc8 <explodeBricks+0x50>
            }
        }
    }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	200000e8 	.word	0x200000e8
 8002058:	20001ee8 	.word	0x20001ee8

0800205c <setBrickToughness>:

int setBrickToughness(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	607b      	str	r3, [r7, #4]

    toughnessPercent = rand() % (100) + 1;
 8002066:	f008 fb75 	bl	800a754 <rand>
 800206a:	4602      	mov	r2, r0
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <setBrickToughness+0x68>)
 800206e:	fb83 1302 	smull	r1, r3, r3, r2
 8002072:	1159      	asrs	r1, r3, #5
 8002074:	17d3      	asrs	r3, r2, #31
 8002076:	1acb      	subs	r3, r1, r3
 8002078:	2164      	movs	r1, #100	; 0x64
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	3301      	adds	r3, #1
 8002082:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	dd05      	ble.n	8002096 <setBrickToughness+0x3a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b3c      	cmp	r3, #60	; 0x3c
 800208e:	dc02      	bgt.n	8002096 <setBrickToughness+0x3a>
        toughness = 1;
 8002090:	2301      	movs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	e010      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b3c      	cmp	r3, #60	; 0x3c
 800209a:	dd05      	ble.n	80020a8 <setBrickToughness+0x4c>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b59      	cmp	r3, #89	; 0x59
 80020a0:	dc02      	bgt.n	80020a8 <setBrickToughness+0x4c>
        toughness = 2;
 80020a2:	2302      	movs	r3, #2
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e007      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b5a      	cmp	r3, #90	; 0x5a
 80020ac:	dd04      	ble.n	80020b8 <setBrickToughness+0x5c>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b63      	cmp	r3, #99	; 0x63
 80020b2:	dc01      	bgt.n	80020b8 <setBrickToughness+0x5c>
        toughness = 3;
 80020b4:	2303      	movs	r3, #3
 80020b6:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	51eb851f 	.word	0x51eb851f

080020c8 <drawBricks>:

void drawBricks() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	e0b0      	b.n	8002236 <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	e0a6      	b.n	8002228 <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 80020da:	495b      	ldr	r1, [pc, #364]	; (8002248 <drawBricks+0x180>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	440b      	add	r3, r1
 80020ee:	3308      	adds	r3, #8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 8095 	bne.w	8002222 <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 80020f8:	4953      	ldr	r1, [pc, #332]	; (8002248 <drawBricks+0x180>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	330c      	adds	r3, #12
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d122      	bne.n	800215a <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8002114:	494c      	ldr	r1, [pc, #304]	; (8002248 <drawBricks+0x180>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	440b      	add	r3, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	b298      	uxth	r0, r3
 8002130:	4945      	ldr	r1, [pc, #276]	; (8002248 <drawBricks+0x180>)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	440b      	add	r3, r1
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	b299      	uxth	r1, r3
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2304      	movs	r3, #4
 8002154:	2220      	movs	r2, #32
 8002156:	f002 fe4d 	bl	8004df4 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 800215a:	493b      	ldr	r1, [pc, #236]	; (8002248 <drawBricks+0x180>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	440b      	add	r3, r1
 800216e:	330c      	adds	r3, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d123      	bne.n	80021be <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 8002176:	4934      	ldr	r1, [pc, #208]	; (8002248 <drawBricks+0x180>)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	440b      	add	r3, r1
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	b298      	uxth	r0, r3
 8002192:	492d      	ldr	r1, [pc, #180]	; (8002248 <drawBricks+0x180>)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	440b      	add	r3, r1
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	b299      	uxth	r1, r3
 80021b0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2304      	movs	r3, #4
 80021b8:	2220      	movs	r2, #32
 80021ba:	f002 fe1b 	bl	8004df4 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 80021be:	4922      	ldr	r1, [pc, #136]	; (8002248 <drawBricks+0x180>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d123      	bne.n	8002222 <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <drawBricks+0x180>)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	b298      	uxth	r0, r3
 80021f6:	4914      	ldr	r1, [pc, #80]	; (8002248 <drawBricks+0x180>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	440b      	add	r3, r1
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	b299      	uxth	r1, r3
 8002214:	f249 6396 	movw	r3, #38550	; 0x9696
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2304      	movs	r3, #4
 800221c:	2220      	movs	r2, #32
 800221e:	f002 fde9 	bl	8004df4 <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b09      	cmp	r3, #9
 800222c:	f77f af55 	ble.w	80020da <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b2f      	cmp	r3, #47	; 0x2f
 800223a:	f77f af4b 	ble.w	80020d4 <drawBricks+0xc>
                }
            }
        }
    }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000e8 	.word	0x200000e8

0800224c <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 800225c:	2b01      	cmp	r3, #1
 800225e:	d814      	bhi.n	800228a <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <_write+0x5c>)
 800226c:	f007 fa5e 	bl	800972c <HAL_UART_Transmit>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00f      	beq.n	800229a <_write+0x4e>
            errno = EIO;
 800227a:	f008 f97d 	bl	800a578 <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2205      	movs	r2, #5
 8002282:	601a      	str	r2, [r3, #0]
            return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	e009      	b.n	800229e <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 800228a:	f008 f975 	bl	800a578 <__errno>
 800228e:	4603      	mov	r3, r0
 8002290:	2209      	movs	r2, #9
 8002292:	601a      	str	r2, [r3, #0]
        return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	e001      	b.n	800229e <_write+0x52>
        break;
 800229a:	bf00      	nop
    }
    return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20002074 	.word	0x20002074

080022ac <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    choice = 0;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <init+0x28>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <init+0x2c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <init+0x18>
        initSpaceInvaders();
 80022be:	f001 f871 	bl	80033a4 <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 80022c2:	e005      	b.n	80022d0 <init+0x24>
    }else if(gamechoice == 2){
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <init+0x2c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d101      	bne.n	80022d0 <init+0x24>
        initBrickbreaker();
 80022cc:	f7fd ffd0 	bl	8000270 <initBrickbreaker>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20001eec 	.word	0x20001eec
 80022d8:	20001eed 	.word	0x20001eed

080022dc <loop>:

int loop (int key) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	6078      	str	r0, [r7, #4]
    updateScreen();
 80022e4:	f000 fa2c 	bl	8002740 <updateScreen>
    if (play == menu){
 80022e8:	4b9b      	ldr	r3, [pc, #620]	; (8002558 <loop+0x27c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d104      	bne.n	80022fa <loop+0x1e>
        max_choice = total_games;
 80022f0:	4b9a      	ldr	r3, [pc, #616]	; (800255c <loop+0x280>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b9a      	ldr	r3, [pc, #616]	; (8002560 <loop+0x284>)
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e002      	b.n	8002300 <loop+0x24>
    }else{
        max_choice = 1;
 80022fa:	4b99      	ldr	r3, [pc, #612]	; (8002560 <loop+0x284>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d15f      	bne.n	80023c6 <loop+0xea>
        if(play < paused){
 8002306:	4b94      	ldr	r3, [pc, #592]	; (8002558 <loop+0x27c>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d84f      	bhi.n	80023ae <loop+0xd2>
        	if(gamechoice == 1){
 800230e:	4b95      	ldr	r3, [pc, #596]	; (8002564 <loop+0x288>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d104      	bne.n	8002320 <loop+0x44>
        		moveSpaceship(-1);
 8002316:	f04f 30ff 	mov.w	r0, #4294967295
 800231a:	f001 fd37 	bl	8003d8c <moveSpaceship>
 800231e:	e046      	b.n	80023ae <loop+0xd2>
        	}else if(gamechoice == 2) {
 8002320:	4b90      	ldr	r3, [pc, #576]	; (8002564 <loop+0x288>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d142      	bne.n	80023ae <loop+0xd2>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8002328:	4b8f      	ldr	r3, [pc, #572]	; (8002568 <loop+0x28c>)
 800232a:	f993 3000 	ldrsb.w	r3, [r3]
 800232e:	3b19      	subs	r3, #25
 8002330:	b29b      	uxth	r3, r3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	b298      	uxth	r0, r3
 8002336:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <loop+0x28c>)
 8002338:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800233c:	b29b      	uxth	r3, r3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	b299      	uxth	r1, r3
 8002342:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2304      	movs	r3, #4
 800234a:	22c8      	movs	r2, #200	; 0xc8
 800234c:	f002 fd52 	bl	8004df4 <Displ_FillArea>
                person.x--;
 8002350:	4b85      	ldr	r3, [pc, #532]	; (8002568 <loop+0x28c>)
 8002352:	f993 3000 	ldrsb.w	r3, [r3]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	b25a      	sxtb	r2, r3
 800235e:	4b82      	ldr	r3, [pc, #520]	; (8002568 <loop+0x28c>)
 8002360:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 8002362:	4b81      	ldr	r3, [pc, #516]	; (8002568 <loop+0x28c>)
 8002364:	f993 3000 	ldrsb.w	r3, [r3]
 8002368:	2b18      	cmp	r3, #24
 800236a:	dc03      	bgt.n	8002374 <loop+0x98>
                    person.x = (BAR_SIZE/2);
 800236c:	4b7e      	ldr	r3, [pc, #504]	; (8002568 <loop+0x28c>)
 800236e:	2219      	movs	r2, #25
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e01c      	b.n	80023ae <loop+0xd2>
                } else {
                    if (ball.dir == still) {
 8002374:	4b7d      	ldr	r3, [pc, #500]	; (800256c <loop+0x290>)
 8002376:	7a1b      	ldrb	r3, [r3, #8]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d118      	bne.n	80023ae <loop+0xd2>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 800237c:	4b7b      	ldr	r3, [pc, #492]	; (800256c <loop+0x290>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	b298      	uxth	r0, r3
 8002386:	4b79      	ldr	r3, [pc, #484]	; (800256c <loop+0x290>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	b29b      	uxth	r3, r3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	b299      	uxth	r1, r3
 8002390:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2304      	movs	r3, #4
 8002398:	2204      	movs	r2, #4
 800239a:	f002 fd2b 	bl	8004df4 <Displ_FillArea>
                        ball.x--;
 800239e:	4b73      	ldr	r3, [pc, #460]	; (800256c <loop+0x290>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	4a71      	ldr	r2, [pc, #452]	; (800256c <loop+0x290>)
 80023a6:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 80023a8:	4b71      	ldr	r3, [pc, #452]	; (8002570 <loop+0x294>)
 80023aa:	2207      	movs	r2, #7
 80023ac:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 80023ae:	4b71      	ldr	r3, [pc, #452]	; (8002574 <loop+0x298>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <loop+0xe6>
        	choice--;
 80023b6:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <loop+0x298>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b6d      	ldr	r3, [pc, #436]	; (8002574 <loop+0x298>)
 80023c0:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d15f      	bne.n	800248c <loop+0x1b0>
    	if(play < paused){
 80023cc:	4b62      	ldr	r3, [pc, #392]	; (8002558 <loop+0x27c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d84d      	bhi.n	8002470 <loop+0x194>
    		if(gamechoice == 1){
 80023d4:	4b63      	ldr	r3, [pc, #396]	; (8002564 <loop+0x288>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d103      	bne.n	80023e4 <loop+0x108>
    			moveSpaceship(1);
 80023dc:	2001      	movs	r0, #1
 80023de:	f001 fcd5 	bl	8003d8c <moveSpaceship>
 80023e2:	e045      	b.n	8002470 <loop+0x194>
    		}else if (gamechoice == 2) {
 80023e4:	4b5f      	ldr	r3, [pc, #380]	; (8002564 <loop+0x288>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d141      	bne.n	8002470 <loop+0x194>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80023ec:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <loop+0x28c>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	3b19      	subs	r3, #25
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	b298      	uxth	r0, r3
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <loop+0x28c>)
 80023fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002400:	b29b      	uxth	r3, r3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	b299      	uxth	r1, r3
 8002406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2304      	movs	r3, #4
 800240e:	22c8      	movs	r2, #200	; 0xc8
 8002410:	f002 fcf0 	bl	8004df4 <Displ_FillArea>
    			person.x++;
 8002414:	4b54      	ldr	r3, [pc, #336]	; (8002568 <loop+0x28c>)
 8002416:	f993 3000 	ldrsb.w	r3, [r3]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	b25a      	sxtb	r2, r3
 8002422:	4b51      	ldr	r3, [pc, #324]	; (8002568 <loop+0x28c>)
 8002424:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 8002426:	4b50      	ldr	r3, [pc, #320]	; (8002568 <loop+0x28c>)
 8002428:	f993 3000 	ldrsb.w	r3, [r3]
 800242c:	2b36      	cmp	r3, #54	; 0x36
 800242e:	dd02      	ble.n	8002436 <loop+0x15a>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <loop+0x28c>)
 8002432:	2236      	movs	r2, #54	; 0x36
 8002434:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 8002436:	4b4d      	ldr	r3, [pc, #308]	; (800256c <loop+0x290>)
 8002438:	7a1b      	ldrb	r3, [r3, #8]
 800243a:	2b08      	cmp	r3, #8
 800243c:	d118      	bne.n	8002470 <loop+0x194>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <loop+0x290>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	b298      	uxth	r0, r3
 8002448:	4b48      	ldr	r3, [pc, #288]	; (800256c <loop+0x290>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	b29b      	uxth	r3, r3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	b299      	uxth	r1, r3
 8002452:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2304      	movs	r3, #4
 800245a:	2204      	movs	r2, #4
 800245c:	f002 fcca 	bl	8004df4 <Displ_FillArea>
    				ball.x++;
 8002460:	4b42      	ldr	r3, [pc, #264]	; (800256c <loop+0x290>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	4a41      	ldr	r2, [pc, #260]	; (800256c <loop+0x290>)
 8002468:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <loop+0x294>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 8002470:	4b40      	ldr	r3, [pc, #256]	; (8002574 <loop+0x298>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <loop+0x284>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <loop+0x1ac>
    		choice++;
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <loop+0x298>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <loop+0x298>)
 8002486:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b04      	cmp	r3, #4
 8002490:	f040 80b8 	bne.w	8002604 <loop+0x328>
        if (play == notPlay){
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <loop+0x27c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10c      	bne.n	80024b6 <loop+0x1da>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 800249c:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2314      	movs	r3, #20
 80024a4:	228c      	movs	r2, #140	; 0x8c
 80024a6:	2178      	movs	r1, #120	; 0x78
 80024a8:	205a      	movs	r0, #90	; 0x5a
 80024aa:	f002 fca3 	bl	8004df4 <Displ_FillArea>
            play = inPlay;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <loop+0x27c>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e0a4      	b.n	8002600 <loop+0x324>
        }else if(play == inPlay) {
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <loop+0x27c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d115      	bne.n	80024ea <loop+0x20e>
            if (ball.dir == still) {
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <loop+0x290>)
 80024c0:	7a1b      	ldrb	r3, [r3, #8]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d108      	bne.n	80024d8 <loop+0x1fc>
                ball.dir = ballDirection;
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <loop+0x294>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <loop+0x290>)
 80024cc:	721a      	strb	r2, [r3, #8]
                start = 1;
 80024ce:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <loop+0x29c>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
                playBall();
 80024d4:	f7fd ff6a 	bl	80003ac <playBall>
            }
            if(!hit){                  //not sure if this was yours or I added for fixing bug
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <loop+0x2a0>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 808f 	bne.w	8002600 <loop+0x324>
                spawnBullet(0);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f001 f8a8 	bl	8003638 <spawnBullet>
 80024e8:	e08a      	b.n	8002600 <loop+0x324>
            }
        }else if(play == paused){
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <loop+0x27c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d11c      	bne.n	800252c <loop+0x250>
            if(choice == 0){
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <loop+0x298>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <loop+0x230>
                play = menu;
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <loop+0x27c>)
 80024fc:	2203      	movs	r2, #3
 80024fe:	701a      	strb	r2, [r3, #0]
                gamechoice = 0;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <loop+0x288>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
                init();
 8002506:	f7ff fed1 	bl	80022ac <init>
 800250a:	e079      	b.n	8002600 <loop+0x324>
            }
            else if(choice == 1){
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <loop+0x298>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d107      	bne.n	8002524 <loop+0x248>
            	displayPauseMenu(1);
 8002514:	2001      	movs	r0, #1
 8002516:	f000 fcbf 	bl	8002e98 <displayPauseMenu>
                play = last_state;
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <loop+0x2a4>)
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <loop+0x27c>)
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e06d      	b.n	8002600 <loop+0x324>
            }else{
                displayPauseMenu(0);
 8002524:	2000      	movs	r0, #0
 8002526:	f000 fcb7 	bl	8002e98 <displayPauseMenu>
 800252a:	e069      	b.n	8002600 <loop+0x324>
            }

        }else if(play == menu){
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <loop+0x27c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d15e      	bne.n	80025f2 <loop+0x316>
            if(choice == 0){
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <loop+0x298>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d12f      	bne.n	800259c <loop+0x2c0>
                //toggle_multiplayer();
                if(returnConnection() == 0) {
 800253c:	f000 ff04 	bl	8003348 <returnConnection>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d122      	bne.n	800258c <loop+0x2b0>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"Play?", strlen("Play?"), 300);
 8002546:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800254a:	2205      	movs	r2, #5
 800254c:	490d      	ldr	r1, [pc, #52]	; (8002584 <loop+0x2a8>)
 800254e:	480e      	ldr	r0, [pc, #56]	; (8002588 <loop+0x2ac>)
 8002550:	f007 f8ec 	bl	800972c <HAL_UART_Transmit>
 8002554:	e054      	b.n	8002600 <loop+0x324>
 8002556:	bf00      	nop
 8002558:	2000004a 	.word	0x2000004a
 800255c:	20000044 	.word	0x20000044
 8002560:	2000002d 	.word	0x2000002d
 8002564:	20001eed 	.word	0x20001eed
 8002568:	20000030 	.word	0x20000030
 800256c:	20000034 	.word	0x20000034
 8002570:	20000041 	.word	0x20000041
 8002574:	20001eec 	.word	0x20001eec
 8002578:	20001eef 	.word	0x20001eef
 800257c:	20001eeb 	.word	0x20001eeb
 8002580:	20001eee 	.word	0x20001eee
 8002584:	0800bbe0 	.word	0x0800bbe0
 8002588:	20001fec 	.word	0x20001fec
                } else {
                    HAL_UART_Transmit(&huart2, (uint8_t *)"Hello", strlen("Hello"), 300);
 800258c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002590:	2205      	movs	r2, #5
 8002592:	495e      	ldr	r1, [pc, #376]	; (800270c <loop+0x430>)
 8002594:	485e      	ldr	r0, [pc, #376]	; (8002710 <loop+0x434>)
 8002596:	f007 f8c9 	bl	800972c <HAL_UART_Transmit>
 800259a:	e031      	b.n	8002600 <loop+0x324>
                }

            }else if(choice == 1){
 800259c:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <loop+0x438>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10f      	bne.n	80025c4 <loop+0x2e8>
                gamechoice = 2;
 80025a4:	4b5c      	ldr	r3, [pc, #368]	; (8002718 <loop+0x43c>)
 80025a6:	2202      	movs	r2, #2
 80025a8:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80025aa:	4b5c      	ldr	r3, [pc, #368]	; (800271c <loop+0x440>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"2G", strlen("2G"), 300);
 80025b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025b4:	2202      	movs	r2, #2
 80025b6:	495a      	ldr	r1, [pc, #360]	; (8002720 <loop+0x444>)
 80025b8:	4855      	ldr	r0, [pc, #340]	; (8002710 <loop+0x434>)
 80025ba:	f007 f8b7 	bl	800972c <HAL_UART_Transmit>
                init();
 80025be:	f7ff fe75 	bl	80022ac <init>
 80025c2:	e01d      	b.n	8002600 <loop+0x324>
            }
            else if(choice == 2){
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <loop+0x438>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d10f      	bne.n	80025ec <loop+0x310>
                gamechoice = 1;
 80025cc:	4b52      	ldr	r3, [pc, #328]	; (8002718 <loop+0x43c>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80025d2:	4b52      	ldr	r3, [pc, #328]	; (800271c <loop+0x440>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"1G", strlen("1G"), 300);
 80025d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025dc:	2202      	movs	r2, #2
 80025de:	4951      	ldr	r1, [pc, #324]	; (8002724 <loop+0x448>)
 80025e0:	484b      	ldr	r0, [pc, #300]	; (8002710 <loop+0x434>)
 80025e2:	f007 f8a3 	bl	800972c <HAL_UART_Transmit>
                init();
 80025e6:	f7ff fe61 	bl	80022ac <init>
 80025ea:	e009      	b.n	8002600 <loop+0x324>
            }else{
                displayMenu();
 80025ec:	f000 fcb6 	bl	8002f5c <displayMenu>
 80025f0:	e006      	b.n	8002600 <loop+0x324>
            }
        }
        else if(!hit){
 80025f2:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <loop+0x44c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <loop+0x324>
            spawnBullet(0);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f001 f81c 	bl	8003638 <spawnBullet>
        }
        key = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d112      	bne.n	8002630 <loop+0x354>
 800260a:	4b44      	ldr	r3, [pc, #272]	; (800271c <loop+0x440>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d80e      	bhi.n	8002630 <loop+0x354>
    	last_state = play;
 8002612:	4b42      	ldr	r3, [pc, #264]	; (800271c <loop+0x440>)
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	4b45      	ldr	r3, [pc, #276]	; (800272c <loop+0x450>)
 8002618:	701a      	strb	r2, [r3, #0]
        play = paused;
 800261a:	4b40      	ldr	r3, [pc, #256]	; (800271c <loop+0x440>)
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <loop+0x438>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <loop+0x454>)
 8002628:	2228      	movs	r2, #40	; 0x28
 800262a:	701a      	strb	r2, [r3, #0]
        key = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 8002630:	4b3a      	ldr	r3, [pc, #232]	; (800271c <loop+0x440>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d132      	bne.n	800269e <loop+0x3c2>
    	if(gamechoice == 1){
 8002638:	4b37      	ldr	r3, [pc, #220]	; (8002718 <loop+0x43c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10a      	bne.n	8002656 <loop+0x37a>
    		spawnComet();
 8002640:	f000 ff74 	bl	800352c <spawnComet>
    		delayBullet();
 8002644:	f001 fe56 	bl	80042f4 <delayBullet>
    		moveComets();
 8002648:	f001 fa26 	bl	8003a98 <moveComets>
    		moveBullets();
 800264c:	f001 f8a0 	bl	8003790 <moveBullets>
    		moveEnemyBullets();
 8002650:	f001 f95a 	bl	8003908 <moveEnemyBullets>
 8002654:	e021      	b.n	800269a <loop+0x3be>
    	}else if(gamechoice == 2) {
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <loop+0x43c>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d11d      	bne.n	800269a <loop+0x3be>
            if (start == 1 && ball.dir != still) {
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <loop+0x458>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d115      	bne.n	8002692 <loop+0x3b6>
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <loop+0x45c>)
 8002668:	7a1b      	ldrb	r3, [r3, #8]
 800266a:	2b08      	cmp	r3, #8
 800266c:	d011      	beq.n	8002692 <loop+0x3b6>
                if (delay <= 0) {
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <loop+0x460>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <loop+0x3a6>
                    lowerBricks();
 8002676:	f7fe f87f 	bl	8000778 <lowerBricks>
                    delay = BRICK_SPEED;
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <loop+0x460>)
 800267c:	228c      	movs	r2, #140	; 0x8c
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e005      	b.n	800268e <loop+0x3b2>
                } else {
                    delay--;
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <loop+0x460>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	3b01      	subs	r3, #1
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <loop+0x460>)
 800268c:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 800268e:	f7fe f8db 	bl	8000848 <checkGameOver>
            }
            checkGuardianTimer();
 8002692:	f7ff fc3f 	bl	8001f14 <checkGuardianTimer>
            playBall();
 8002696:	f7fd fe89 	bl	80003ac <playBall>
        }

    	updateScreen();
 800269a:	f000 f851 	bl	8002740 <updateScreen>
    }if(play < paused){
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <loop+0x440>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d807      	bhi.n	80026b6 <loop+0x3da>
    	if(gamechoice == 1){
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <loop+0x43c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d103      	bne.n	80026b6 <loop+0x3da>
    		spawnStar();
 80026ae:	f001 f817 	bl	80036e0 <spawnStar>
    		moveStars();
 80026b2:	f001 fb09 	bl	8003cc8 <moveStars>
    	}

    }


    if (returnTest() == 1) {
 80026b6:	f000 fe2f 	bl	8003318 <returnTest>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d11f      	bne.n	8002700 <loop+0x424>
        if (gamechoice == 2) {
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <loop+0x43c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d103      	bne.n	80026d0 <loop+0x3f4>
            lowerBricks();
 80026c8:	f7fe f856 	bl	8000778 <lowerBricks>
            printArray();
 80026cc:	f000 fe0e 	bl	80032ec <printArray>
        }
        if(returnConnection() == 1 && gamechoice == 0) {
 80026d0:	f000 fe3a 	bl	8003348 <returnConnection>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d112      	bne.n	8002700 <loop+0x424>
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <loop+0x43c>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10e      	bne.n	8002700 <loop+0x424>
            gamechoice = returnMPGameChoice();
 80026e2:	f000 fe53 	bl	800338c <returnMPGameChoice>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <loop+0x43c>)
 80026ec:	701a      	strb	r2, [r3, #0]
            printArray();
 80026ee:	f000 fdfd 	bl	80032ec <printArray>
            turnOffTest();
 80026f2:	f000 fe1d 	bl	8003330 <turnOffTest>
            play = notPlay;
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <loop+0x440>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
            init();
 80026fc:	f7ff fdd6 	bl	80022ac <init>

        }
    }

    return key;
 8002700:	687b      	ldr	r3, [r7, #4]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	0800bbe8 	.word	0x0800bbe8
 8002710:	20001fec 	.word	0x20001fec
 8002714:	20001eec 	.word	0x20001eec
 8002718:	20001eed 	.word	0x20001eed
 800271c:	2000004a 	.word	0x2000004a
 8002720:	0800bbf0 	.word	0x0800bbf0
 8002724:	0800bbf4 	.word	0x0800bbf4
 8002728:	20001eeb 	.word	0x20001eeb
 800272c:	20001eee 	.word	0x20001eee
 8002730:	2000002c 	.word	0x2000002c
 8002734:	20001eef 	.word	0x20001eef
 8002738:	20000034 	.word	0x20000034
 800273c:	20000040 	.word	0x20000040

08002740 <updateScreen>:


void updateScreen()
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b087      	sub	sp, #28
 8002744:	af06      	add	r7, sp, #24
    if (play == menu){
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <updateScreen+0x8c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d102      	bne.n	8002754 <updateScreen+0x14>
    	displayMenu();
 800274e:	f000 fc05 	bl	8002f5c <displayMenu>
        return;
 8002752:	e037      	b.n	80027c4 <updateScreen+0x84>
    }

    if (gamechoice == 1){
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <updateScreen+0x90>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10c      	bne.n	8002776 <updateScreen+0x36>
        //hit
        if (hit > 0) {
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <updateScreen+0x94>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002764:	f001 fd7c 	bl	8004260 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 8002768:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800276c:	f001 fcec 	bl	8004148 <displaySpaceShip>

        //lives
        displayLives();
 8002770:	f001 fd2c 	bl	80041cc <displayLives>
 8002774:	e005      	b.n	8002782 <updateScreen+0x42>
    }else if(gamechoice == 2) {
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <updateScreen+0x90>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d101      	bne.n	8002782 <updateScreen+0x42>
        printScreen();
 800277e:	f7ff fb39 	bl	8001df4 <printScreen>
    }

    //start
    if(!play){
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <updateScreen+0x8c>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <updateScreen+0x98>)
 800278c:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002790:	9204      	str	r2, [sp, #16]
 8002792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002796:	9203      	str	r2, [sp, #12]
 8002798:	2202      	movs	r2, #2
 800279a:	9202      	str	r2, [sp, #8]
 800279c:	466c      	mov	r4, sp
 800279e:	1d1a      	adds	r2, r3, #4
 80027a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <updateScreen+0x9c>)
 80027ac:	2178      	movs	r1, #120	; 0x78
 80027ae:	205a      	movs	r0, #90	; 0x5a
 80027b0:	f003 f87c 	bl	80058ac <Displ_WString>
 80027b4:	e006      	b.n	80027c4 <updateScreen+0x84>
    }
    else if(play == paused){
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <updateScreen+0x8c>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d102      	bne.n	80027c4 <updateScreen+0x84>
    	displayPauseMenu(0);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 fb6a 	bl	8002e98 <displayPauseMenu>
    }
}
 80027c4:	3704      	adds	r7, #4
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000004a 	.word	0x2000004a
 80027d0:	20001eed 	.word	0x20001eed
 80027d4:	20001eeb 	.word	0x20001eeb
 80027d8:	20000020 	.word	0x20000020
 80027dc:	0800bbf8 	.word	0x0800bbf8

080027e0 <read_MPU_mem>:
//        return -1;
//    }
//    return len;
//}

uint8_t read_MPU_mem(uint8_t reg_addr){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	2301      	movs	r3, #1
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	f107 030f 	add.w	r3, r7, #15
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2301      	movs	r3, #1
 80027fe:	21d0      	movs	r1, #208	; 0xd0
 8002800:	4807      	ldr	r0, [pc, #28]	; (8002820 <read_MPU_mem+0x40>)
 8002802:	f003 ffc5 	bl	8006790 <HAL_I2C_Mem_Read>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <read_MPU_mem+0x30>
		return data;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	e003      	b.n	8002818 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <read_MPU_mem+0x44>)
 8002812:	f007 ff69 	bl	800a6e8 <puts>
		return 0;
 8002816:	2300      	movs	r3, #0
	}
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20001ef0 	.word	0x20001ef0
 8002824:	0800bc00 	.word	0x0800bc00

08002828 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af04      	add	r7, sp, #16
 800282e:	4603      	mov	r3, r0
 8002830:	460a      	mov	r2, r1
 8002832:	71fb      	strb	r3, [r7, #7]
 8002834:	4613      	mov	r3, r2
 8002836:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2364      	movs	r3, #100	; 0x64
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	2301      	movs	r3, #1
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	1dbb      	adds	r3, r7, #6
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	21d1      	movs	r1, #209	; 0xd1
 800284c:	4806      	ldr	r0, [pc, #24]	; (8002868 <write_MPU_mem+0x40>)
 800284e:	f003 fe8b 	bl	8006568 <HAL_I2C_Mem_Write>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8002858:	4804      	ldr	r0, [pc, #16]	; (800286c <write_MPU_mem+0x44>)
 800285a:	f007 ff45 	bl	800a6e8 <puts>
    }
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20001ef0 	.word	0x20001ef0
 800286c:	0800bc10 	.word	0x0800bc10

08002870 <read_y_accel>:

void read_y_accel(){
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8002876:	203e      	movs	r0, #62	; 0x3e
 8002878:	f7ff ffb2 	bl	80027e0 <read_MPU_mem>
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8002880:	203d      	movs	r0, #61	; 0x3d
 8002882:	f7ff ffad 	bl	80027e0 <read_MPU_mem>
 8002886:	4603      	mov	r3, r0
 8002888:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 800288a:	79bb      	ldrb	r3, [r7, #6]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	b21a      	sxth	r2, r3
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	b21b      	sxth	r3, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	b21a      	sxth	r2, r3
 8002898:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <read_y_accel+0x34>)
 800289a:	801a      	strh	r2, [r3, #0]

}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200020fc 	.word	0x200020fc

080028a8 <init_MPU>:

void init_MPU(){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 80028ac:	2100      	movs	r1, #0
 80028ae:	206b      	movs	r0, #107	; 0x6b
 80028b0:	f7ff ffba 	bl	8002828 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 80028b4:	2107      	movs	r1, #7
 80028b6:	2019      	movs	r0, #25
 80028b8:	f7ff ffb6 	bl	8002828 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 80028bc:	2100      	movs	r1, #0
 80028be:	201b      	movs	r0, #27
 80028c0:	f7ff ffb2 	bl	8002828 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 80028c4:	2100      	movs	r1, #0
 80028c6:	201c      	movs	r0, #28
 80028c8:	f7ff ffae 	bl	8002828 <write_MPU_mem>
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028d6:	f003 f853 	bl	8005980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028da:	f000 f86d 	bl	80029b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028de:	f000 f9c3 	bl	8002c68 <MX_GPIO_Init>
  MX_DMA_Init();
 80028e2:	f000 f9a3 	bl	8002c2c <MX_DMA_Init>
  MX_I2C2_Init();
 80028e6:	f000 f8bd 	bl	8002a64 <MX_I2C2_Init>
  MX_SPI2_Init();
 80028ea:	f000 f8fb 	bl	8002ae4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80028ee:	f000 f937 	bl	8002b60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80028f2:	f000 f96b 	bl	8002bcc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80028f6:	2064      	movs	r0, #100	; 0x64
 80028f8:	f003 f8a8 	bl	8005a4c <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	2201      	movs	r2, #1
 8002900:	21d0      	movs	r1, #208	; 0xd0
 8002902:	4826      	ldr	r0, [pc, #152]	; (800299c <main+0xcc>)
 8002904:	f004 f85e 	bl	80069c4 <HAL_I2C_IsDeviceReady>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d105      	bne.n	800291a <main+0x4a>
	  printf("succesfully communicated\r\n");
 800290e:	4824      	ldr	r0, [pc, #144]	; (80029a0 <main+0xd0>)
 8002910:	f007 feea 	bl	800a6e8 <puts>
	  init_MPU();
 8002914:	f7ff ffc8 	bl	80028a8 <init_MPU>
 8002918:	e002      	b.n	8002920 <main+0x50>
  }
  else{
	  printf("i2C not found\r\n");
 800291a:	4822      	ldr	r0, [pc, #136]	; (80029a4 <main+0xd4>)
 800291c:	f007 fee4 	bl	800a6e8 <puts>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002920:	2001      	movs	r0, #1
 8002922:	f002 f9c5 	bl	8004cb0 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8002926:	2000      	movs	r0, #0
 8002928:	f002 fc18 	bl	800515c <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 800292c:	2064      	movs	r0, #100	; 0x64
 800292e:	f003 f88d 	bl	8005a4c <HAL_Delay>

      read_y_accel();
 8002932:	f7ff ff9d 	bl	8002870 <read_y_accel>
      if (ay > 2000){
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <main+0xd8>)
 8002938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002940:	dd07      	ble.n	8002952 <main+0x82>
          if(x < 320 - 88){
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <main+0xdc>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	2be7      	cmp	r3, #231	; 0xe7
 8002948:	d810      	bhi.n	800296c <main+0x9c>
        	  key = right;
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <main+0xe0>)
 800294c:	2203      	movs	r2, #3
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e00c      	b.n	800296c <main+0x9c>
          }
      }
      else if (ay < -2000){
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <main+0xd8>)
 8002954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002958:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800295c:	da06      	bge.n	800296c <main+0x9c>
          if(x > 0){
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <main+0xdc>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <main+0x9c>
        	  key = left;
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <main+0xe0>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <main+0xe0>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fcb3 	bl	80022dc <loop>
 8002976:	4603      	mov	r3, r0
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <main+0xe0>)
 800297c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	e002      	b.n	800298a <main+0xba>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3301      	adds	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <main+0xe4>)
 800298c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4293      	cmp	r3, r2
 8002996:	dbf5      	blt.n	8002984 <main+0xb4>
      HAL_Delay(100);
 8002998:	e7c8      	b.n	800292c <main+0x5c>
 800299a:	bf00      	nop
 800299c:	20001ef0 	.word	0x20001ef0
 80029a0:	0800bc24 	.word	0x0800bc24
 80029a4:	0800bc40 	.word	0x0800bc40
 80029a8:	200020fc 	.word	0x200020fc
 80029ac:	20000042 	.word	0x20000042
 80029b0:	20002104 	.word	0x20002104
 80029b4:	20002174 	.word	0x20002174

080029b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b09c      	sub	sp, #112	; 0x70
 80029bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029c2:	2228      	movs	r2, #40	; 0x28
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f007 fe00 	bl	800a5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	2230      	movs	r2, #48	; 0x30
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f007 fdf2 	bl	800a5cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029e8:	2302      	movs	r3, #2
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ec:	2301      	movs	r3, #1
 80029ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029f0:	2310      	movs	r3, #16
 80029f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029f4:	2302      	movs	r3, #2
 80029f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029f8:	2300      	movs	r3, #0
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80029fc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fc36 	bl	8007278 <HAL_RCC_OscConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002a12:	f000 fa3b 	bl	8002e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a16:	230f      	movs	r3, #15
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a30:	2102      	movs	r1, #2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f005 fc5e 	bl	80082f4 <HAL_RCC_ClockConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002a3e:	f000 fa25 	bl	8002e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a42:	2340      	movs	r3, #64	; 0x40
 8002a44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f005 fe87 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002a58:	f000 fa18 	bl	8002e8c <Error_Handler>
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3770      	adds	r7, #112	; 0x70
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <MX_I2C2_Init+0x78>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <MX_I2C2_Init+0x7c>)
 8002a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a9e:	480e      	ldr	r0, [pc, #56]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002aa0:	f003 fcd2 	bl	8006448 <HAL_I2C_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002aaa:	f000 f9ef 	bl	8002e8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002ab2:	f004 fb49 	bl	8007148 <HAL_I2CEx_ConfigAnalogFilter>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002abc:	f000 f9e6 	bl	8002e8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002ac4:	f004 fb8b 	bl	80071de <HAL_I2CEx_ConfigDigitalFilter>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002ace:	f000 f9dd 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20001ef0 	.word	0x20001ef0
 8002adc:	40005800 	.word	0x40005800
 8002ae0:	2000090e 	.word	0x2000090e

08002ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <MX_SPI2_Init+0x78>)
 8002aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002afe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b32:	2207      	movs	r2, #7
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b3e:	2208      	movs	r2, #8
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_SPI2_Init+0x74>)
 8002b44:	f005 ff90 	bl	8008a68 <HAL_SPI_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002b4e:	f000 f99d 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20001f44 	.word	0x20001f44
 8002b5c:	40003800 	.word	0x40003800

08002b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b64:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <MX_USART2_UART_Init+0x68>)
 8002b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b86:	220c      	movs	r2, #12
 8002b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ba2:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <MX_USART2_UART_Init+0x64>)
 8002ba4:	f006 fd74 	bl	8009690 <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002bae:	f000 f96d 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <MX_USART2_UART_Init+0x68>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <MX_USART2_UART_Init+0x68>)
 8002bb8:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002bbc:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20001fec 	.word	0x20001fec
 8002bc8:	40004400 	.word	0x40004400

08002bcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <MX_USART3_UART_Init+0x5c>)
 8002bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002bd8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <MX_USART3_UART_Init+0x58>)
 8002c10:	f006 fd3e 	bl	8009690 <HAL_UART_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002c1a:	f000 f937 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20002074 	.word	0x20002074
 8002c28:	40004800 	.word	0x40004800

08002c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_DMA_Init+0x38>)
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <MX_DMA_Init+0x38>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6153      	str	r3, [r2, #20]
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_DMA_Init+0x38>)
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f002 fffb 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002c54:	200f      	movs	r0, #15
 8002c56:	f003 f814 	bl	8005c82 <HAL_NVIC_EnableIRQ>

}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000

08002c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7e:	4b46      	ldr	r3, [pc, #280]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	4a45      	ldr	r2, [pc, #276]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c88:	6153      	str	r3, [r2, #20]
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c96:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4a3f      	ldr	r2, [pc, #252]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca0:	6153      	str	r3, [r2, #20]
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4a39      	ldr	r2, [pc, #228]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb8:	6153      	str	r3, [r2, #20]
 8002cba:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6153      	str	r3, [r2, #20]
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <MX_GPIO_Init+0x130>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ce4:	482d      	ldr	r0, [pc, #180]	; (8002d9c <MX_GPIO_Init+0x134>)
 8002ce6:	f003 fb7f 	bl	80063e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf4:	f003 fb78 	bl	80063e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8002cf8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d04:	2301      	movs	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4824      	ldr	r0, [pc, #144]	; (8002da0 <MX_GPIO_Init+0x138>)
 8002d10:	f003 f9e0 	bl	80060d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8002d14:	2301      	movs	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d2c:	f003 f9d2 	bl	80060d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	4814      	ldr	r0, [pc, #80]	; (8002d9c <MX_GPIO_Init+0x134>)
 8002d4a:	f003 f9c3 	bl	80060d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8002d4e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d54:	2301      	movs	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4619      	mov	r1, r3
 8002d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6a:	f003 f9b3 	bl	80060d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2006      	movs	r0, #6
 8002d74:	f002 ff69 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d78:	2006      	movs	r0, #6
 8002d7a:	f002 ff82 	bl	8005c82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	2028      	movs	r0, #40	; 0x28
 8002d84:	f002 ff61 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d88:	2028      	movs	r0, #40	; 0x28
 8002d8a:	f002 ff7a 	bl	8005c82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	48000400 	.word	0x48000400
 8002da0:	48000800 	.word	0x48000800

08002da4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8002dae:	f002 fe41 	bl	8005a34 <HAL_GetTick>
 8002db2:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b1e      	cmp	r3, #30
 8002dbe:	d951      	bls.n	8002e64 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8002dc6:	482a      	ldr	r0, [pc, #168]	; (8002e70 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002dc8:	f007 fc8e 	bl	800a6e8 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd2:	d10e      	bne.n	8002df2 <HAL_GPIO_EXTI_Callback+0x4e>
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4826      	ldr	r0, [pc, #152]	; (8002e74 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002dda:	f003 faed 	bl	80063b8 <HAL_GPIO_ReadPin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d106      	bne.n	8002df2 <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8002dea:	4824      	ldr	r0, [pc, #144]	; (8002e7c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002dec:	f007 fc7c 	bl	800a6e8 <puts>
 8002df0:	e038      	b.n	8002e64 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d10e      	bne.n	8002e18 <HAL_GPIO_EXTI_Callback+0x74>
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	481d      	ldr	r0, [pc, #116]	; (8002e74 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002e00:	f003 fada 	bl	80063b8 <HAL_GPIO_ReadPin>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8002e10:	481b      	ldr	r0, [pc, #108]	; (8002e80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002e12:	f007 fc69 	bl	800a6e8 <puts>
 8002e16:	e025      	b.n	8002e64 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e1e:	d10e      	bne.n	8002e3e <HAL_GPIO_EXTI_Callback+0x9a>
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4813      	ldr	r0, [pc, #76]	; (8002e74 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002e26:	f003 fac7 	bl	80063b8 <HAL_GPIO_ReadPin>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e32:	2203      	movs	r2, #3
 8002e34:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8002e36:	4813      	ldr	r0, [pc, #76]	; (8002e84 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e38:	f007 fc56 	bl	800a6e8 <puts>
 8002e3c:	e012      	b.n	8002e64 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10f      	bne.n	8002e64 <HAL_GPIO_EXTI_Callback+0xc0>
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	4619      	mov	r1, r3
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4c:	f003 fab4 	bl	80063b8 <HAL_GPIO_ReadPin>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e58:	2204      	movs	r2, #4
 8002e5a:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8002e5c:	480a      	ldr	r0, [pc, #40]	; (8002e88 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e5e:	f007 fc43 	bl	800a6e8 <puts>
        }
    }
}
 8002e62:	e7ff      	b.n	8002e64 <HAL_GPIO_EXTI_Callback+0xc0>
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20002100 	.word	0x20002100
 8002e70:	0800bc50 	.word	0x0800bc50
 8002e74:	48000800 	.word	0x48000800
 8002e78:	20002104 	.word	0x20002104
 8002e7c:	0800bc5c 	.word	0x0800bc5c
 8002e80:	0800bc6c 	.word	0x0800bc6c
 8002e84:	0800bc78 	.word	0x0800bc78
 8002e88:	0800bc88 	.word	0x0800bc88

08002e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e90:	b672      	cpsid	i
}
 8002e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <Error_Handler+0x8>
	...

08002e98 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8002ea2:	f249 6396 	movw	r3, #38550	; 0x9696
 8002ea6:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8002ea8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002eac:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8002eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb2:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <displayPauseMenu+0xbc>)
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <displayPauseMenu+0xc0>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d102      	bne.n	8002ec6 <displayPauseMenu+0x2e>
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d042      	beq.n	8002f4c <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <displayPauseMenu+0xbc>)
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <displayPauseMenu+0xc0>)
 8002ecc:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8002ece:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <displayPauseMenu+0xbc>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <displayPauseMenu+0x4c>
			back_color = RED;
 8002ed6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002eda:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8002edc:	f249 6396 	movw	r3, #38550	; 0x9696
 8002ee0:	81bb      	strh	r3, [r7, #12]
 8002ee2:	e00b      	b.n	8002efc <displayPauseMenu+0x64>
		}
		else if(clear){
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 8002eea:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002eee:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 8002ef0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002ef4:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8002ef6:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002efa:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8002efc:	89fb      	ldrh	r3, [r7, #14]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2340      	movs	r3, #64	; 0x40
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	2158      	movs	r1, #88	; 0x58
 8002f06:	2054      	movs	r0, #84	; 0x54
 8002f08:	f001 ff74 	bl	8004df4 <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8002f0c:	89bb      	ldrh	r3, [r7, #12]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2340      	movs	r3, #64	; 0x40
 8002f12:	2240      	movs	r2, #64	; 0x40
 8002f14:	2158      	movs	r1, #88	; 0x58
 8002f16:	20ac      	movs	r0, #172	; 0xac
 8002f18:	f001 ff6c 	bl	8004df4 <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8002f1c:	897b      	ldrh	r3, [r7, #10]
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	2378      	movs	r3, #120	; 0x78
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	23e4      	movs	r3, #228	; 0xe4
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2390      	movs	r3, #144	; 0x90
 8002f2a:	22b4      	movs	r2, #180	; 0xb4
 8002f2c:	2160      	movs	r1, #96	; 0x60
 8002f2e:	20b4      	movs	r0, #180	; 0xb4
 8002f30:	f002 fa61 	bl	80053f6 <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8002f34:	897b      	ldrh	r3, [r7, #10]
 8002f36:	9302      	str	r3, [sp, #8]
 8002f38:	2378      	movs	r3, #120	; 0x78
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	235c      	movs	r3, #92	; 0x5c
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2390      	movs	r3, #144	; 0x90
 8002f42:	228c      	movs	r2, #140	; 0x8c
 8002f44:	2160      	movs	r1, #96	; 0x60
 8002f46:	208c      	movs	r0, #140	; 0x8c
 8002f48:	f002 fa55 	bl	80053f6 <Displ_fillTriangle>
	}

}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20001eec 	.word	0x20001eec
 8002f58:	2000002c 	.word	0x2000002c

08002f5c <displayMenu>:

void displayMenu(){
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b08b      	sub	sp, #44	; 0x2c
 8002f60:	af06      	add	r7, sp, #24
	int y_offset = 12;
 8002f62:	230c      	movs	r3, #12
 8002f64:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8002f66:	230c      	movs	r3, #12
 8002f68:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8002f6a:	4b4c      	ldr	r3, [pc, #304]	; (800309c <displayMenu+0x140>)
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <displayMenu+0x144>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d03d      	beq.n	8002ff2 <displayMenu+0x96>
		last_choice_menu =  choice;
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <displayMenu+0x140>)
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	4b49      	ldr	r3, [pc, #292]	; (80030a0 <displayMenu+0x144>)
 8002f7c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	e02e      	b.n	8002fe2 <displayMenu+0x86>
			if(i == choice){
 8002f84:	4b45      	ldr	r3, [pc, #276]	; (800309c <displayMenu+0x140>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10b      	bne.n	8002fa8 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	b298      	uxth	r0, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	b299      	uxth	r1, r3
 8002f98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2340      	movs	r3, #64	; 0x40
 8002fa0:	2240      	movs	r2, #64	; 0x40
 8002fa2:	f001 ff27 	bl	8004df4 <Displ_FillArea>
 8002fa6:	e00a      	b.n	8002fbe <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	b298      	uxth	r0, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	b299      	uxth	r1, r3
 8002fb0:	f249 6396 	movw	r3, #38550	; 0x9696
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	2240      	movs	r2, #64	; 0x40
 8002fba:	f001 ff1b 	bl	8004df4 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <displayMenu+0x7a>
				x_offset = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	334c      	adds	r3, #76	; 0x4c
 8002fd2:	60fb      	str	r3, [r7, #12]
				continue;
 8002fd4:	e002      	b.n	8002fdc <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	334c      	adds	r3, #76	; 0x4c
 8002fda:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <displayMenu+0x148>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	dc02      	bgt.n	8002ff2 <displayMenu+0x96>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b07      	cmp	r3, #7
 8002ff0:	ddc8      	ble.n	8002f84 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8002ff2:	f000 f861 	bl	80030b8 <displayMenuIcons>

    // text
    switch (choice) {
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <displayMenu+0x140>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d032      	beq.n	8003064 <displayMenu+0x108>
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	dc46      	bgt.n	8003090 <displayMenu+0x134>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <displayMenu+0xb0>
 8003006:	2b01      	cmp	r3, #1
 8003008:	d016      	beq.n	8003038 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 800300a:	e041      	b.n	8003090 <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 800300c:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <displayMenu+0x14c>)
 800300e:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003012:	9204      	str	r2, [sp, #16]
 8003014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003018:	9203      	str	r2, [sp, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	9202      	str	r2, [sp, #8]
 800301e:	466c      	mov	r4, sp
 8003020:	1d1a      	adds	r2, r3, #4
 8003022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003026:	e884 0003 	stmia.w	r4, {r0, r1}
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <displayMenu+0x150>)
 800302e:	21c8      	movs	r1, #200	; 0xc8
 8003030:	2008      	movs	r0, #8
 8003032:	f002 fc3b 	bl	80058ac <Displ_WString>
        break;
 8003036:	e02c      	b.n	8003092 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <displayMenu+0x14c>)
 800303a:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800303e:	9204      	str	r2, [sp, #16]
 8003040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003044:	9203      	str	r2, [sp, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	9202      	str	r2, [sp, #8]
 800304a:	466c      	mov	r4, sp
 800304c:	1d1a      	adds	r2, r3, #4
 800304e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003052:	e884 0003 	stmia.w	r4, {r0, r1}
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <displayMenu+0x154>)
 800305a:	21c8      	movs	r1, #200	; 0xc8
 800305c:	2008      	movs	r0, #8
 800305e:	f002 fc25 	bl	80058ac <Displ_WString>
        break;
 8003062:	e016      	b.n	8003092 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <displayMenu+0x14c>)
 8003066:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800306a:	9204      	str	r2, [sp, #16]
 800306c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003070:	9203      	str	r2, [sp, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	9202      	str	r2, [sp, #8]
 8003076:	466c      	mov	r4, sp
 8003078:	1d1a      	adds	r2, r3, #4
 800307a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800307e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <displayMenu+0x158>)
 8003086:	21c8      	movs	r1, #200	; 0xc8
 8003088:	2008      	movs	r0, #8
 800308a:	f002 fc0f 	bl	80058ac <Displ_WString>
        break;
 800308e:	e000      	b.n	8003092 <displayMenu+0x136>
        break;
 8003090:	bf00      	nop
    }
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	bf00      	nop
 800309c:	20001eec 	.word	0x20001eec
 80030a0:	20000048 	.word	0x20000048
 80030a4:	20000044 	.word	0x20000044
 80030a8:	20000020 	.word	0x20000020
 80030ac:	0800bc98 	.word	0x0800bc98
 80030b0:	0800bca8 	.word	0x0800bca8
 80030b4:	0800bcb8 	.word	0x0800bcb8

080030b8 <displayMenuIcons>:

void displayMenuIcons(){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 80030bc:	f000 f806 	bl	80030cc <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 80030c0:	f000 f868 	bl	8003194 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 80030c4:	f000 f890 	bl	80031e8 <displaySpaceIcon>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af02      	add	r7, sp, #8
	if(connected){
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <displayMultiplayerIcon+0xc4>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d023      	beq.n	8003122 <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80030da:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2304      	movs	r3, #4
 80030e2:	2230      	movs	r2, #48	; 0x30
 80030e4:	2114      	movs	r1, #20
 80030e6:	2014      	movs	r0, #20
 80030e8:	f001 fe84 	bl	8004df4 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 80030ec:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2308      	movs	r3, #8
 80030f4:	2204      	movs	r2, #4
 80030f6:	210c      	movs	r1, #12
 80030f8:	2014      	movs	r0, #20
 80030fa:	f001 fe7b 	bl	8004df4 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 80030fe:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2308      	movs	r3, #8
 8003106:	2204      	movs	r2, #4
 8003108:	210c      	movs	r1, #12
 800310a:	2040      	movs	r0, #64	; 0x40
 800310c:	f001 fe72 	bl	8004df4 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 8003110:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2328      	movs	r3, #40	; 0x28
 8003118:	2208      	movs	r2, #8
 800311a:	2118      	movs	r1, #24
 800311c:	2028      	movs	r0, #40	; 0x28
 800311e:	f001 fe69 	bl	8004df4 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8003122:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2304      	movs	r3, #4
 800312a:	2230      	movs	r2, #48	; 0x30
 800312c:	2140      	movs	r1, #64	; 0x40
 800312e:	2014      	movs	r0, #20
 8003130:	f001 fe60 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003134:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2308      	movs	r3, #8
 800313c:	2204      	movs	r2, #4
 800313e:	2144      	movs	r1, #68	; 0x44
 8003140:	2014      	movs	r0, #20
 8003142:	f001 fe57 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003146:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2308      	movs	r3, #8
 800314e:	2204      	movs	r2, #4
 8003150:	2144      	movs	r1, #68	; 0x44
 8003152:	2040      	movs	r0, #64	; 0x40
 8003154:	f001 fe4e 	bl	8004df4 <Displ_FillArea>
	if(!connected){
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <displayMultiplayerIcon+0xc4>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d112      	bne.n	8003186 <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003160:	2318      	movs	r3, #24
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	e00c      	b.n	8003180 <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	b299      	uxth	r1, r3
 800316a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2304      	movs	r3, #4
 8003172:	2208      	movs	r2, #8
 8003174:	2028      	movs	r0, #40	; 0x28
 8003176:	f001 fe3d 	bl	8004df4 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3308      	adds	r3, #8
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b3f      	cmp	r3, #63	; 0x3f
 8003184:	ddef      	ble.n	8003166 <displayMultiplayerIcon+0x9a>
		}
	}
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20002105 	.word	0x20002105

08003194 <displayBricksIcon>:

void displayBricksIcon(){
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 800319a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2304      	movs	r3, #4
 80031a2:	2214      	movs	r2, #20
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	2068      	movs	r0, #104	; 0x68
 80031a8:	f001 fe24 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 80031ac:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2340      	movs	r3, #64	; 0x40
 80031b4:	2204      	movs	r2, #4
 80031b6:	210c      	movs	r1, #12
 80031b8:	205c      	movs	r0, #92	; 0x5c
 80031ba:	f001 fe1b 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 80031be:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2340      	movs	r3, #64	; 0x40
 80031c6:	2204      	movs	r2, #4
 80031c8:	210c      	movs	r1, #12
 80031ca:	2090      	movs	r0, #144	; 0x90
 80031cc:	f001 fe12 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 80031d0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2304      	movs	r3, #4
 80031d8:	2204      	movs	r2, #4
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	2068      	movs	r0, #104	; 0x68
 80031de:	f001 fe09 	bl	8004df4 <Displ_FillArea>
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <displaySpaceIcon>:

void displaySpaceIcon(){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80031ee:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2310      	movs	r3, #16
 80031f6:	2204      	movs	r2, #4
 80031f8:	2134      	movs	r1, #52	; 0x34
 80031fa:	20b4      	movs	r0, #180	; 0xb4
 80031fc:	f001 fdfa 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8003200:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2310      	movs	r3, #16
 8003208:	2204      	movs	r2, #4
 800320a:	2134      	movs	r1, #52	; 0x34
 800320c:	20c4      	movs	r0, #196	; 0xc4
 800320e:	f001 fdf1 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 8003212:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2304      	movs	r3, #4
 800321a:	220c      	movs	r2, #12
 800321c:	2138      	movs	r1, #56	; 0x38
 800321e:	20b8      	movs	r0, #184	; 0xb8
 8003220:	f001 fde8 	bl	8004df4 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 8003224:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2310      	movs	r3, #16
 800322c:	2204      	movs	r2, #4
 800322e:	2130      	movs	r1, #48	; 0x30
 8003230:	20bc      	movs	r0, #188	; 0xbc
 8003232:	f001 fddf 	bl	8004df4 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8003236:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	230c      	movs	r3, #12
 800323e:	220c      	movs	r2, #12
 8003240:	2118      	movs	r1, #24
 8003242:	20c0      	movs	r0, #192	; 0xc0
 8003244:	f001 fdd6 	bl	8004df4 <Displ_FillArea>
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <addCharacterToArray>:
        check_availability();
    }

}

void addCharacterToArray(char c) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 800325e:	2300      	movs	r3, #0
 8003260:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	4619      	mov	r1, r3
 8003268:	481a      	ldr	r0, [pc, #104]	; (80032d4 <addCharacterToArray+0x84>)
 800326a:	f007 fae5 	bl	800a838 <strcat>
    //printf("%c\r\n", c);

    if(c == 'o' && mp == enabled) {
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b6f      	cmp	r3, #111	; 0x6f
 8003272:	d106      	bne.n	8003282 <addCharacterToArray+0x32>
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <addCharacterToArray+0x88>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d102      	bne.n	8003282 <addCharacterToArray+0x32>
        test = 1;
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <addCharacterToArray+0x8c>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
        //printArray();
    }
    if(c == '?') {
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b3f      	cmp	r3, #63	; 0x3f
 8003286:	d10e      	bne.n	80032a6 <addCharacterToArray+0x56>
        HAL_UART_Transmit(&huart2, (uint8_t *)"Yes!", strlen("Yes!"), 300);
 8003288:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800328c:	2204      	movs	r2, #4
 800328e:	4914      	ldr	r1, [pc, #80]	; (80032e0 <addCharacterToArray+0x90>)
 8003290:	4814      	ldr	r0, [pc, #80]	; (80032e4 <addCharacterToArray+0x94>)
 8003292:	f006 fa4b 	bl	800972c <HAL_UART_Transmit>
        printArray();
 8003296:	f000 f829 	bl	80032ec <printArray>
        connected = 1;
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <addCharacterToArray+0x98>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <addCharacterToArray+0x88>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
    }if(c == '!') {
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b21      	cmp	r3, #33	; 0x21
 80032aa:	d107      	bne.n	80032bc <addCharacterToArray+0x6c>
        connected = 1;
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <addCharacterToArray+0x98>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <addCharacterToArray+0x88>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
        printArray();
 80032b8:	f000 f818 	bl	80032ec <printArray>
    }if(c == 'G') {
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b47      	cmp	r3, #71	; 0x47
 80032c0:	d104      	bne.n	80032cc <addCharacterToArray+0x7c>
        test = 1;
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <addCharacterToArray+0x8c>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
        setMPGameChoice();
 80032c8:	f000 f84a 	bl	8003360 <setMPGameChoice>
        //printArray();
    }
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20002108 	.word	0x20002108
 80032d8:	20002106 	.word	0x20002106
 80032dc:	2000216c 	.word	0x2000216c
 80032e0:	0800bcd0 	.word	0x0800bcd0
 80032e4:	20001fec 	.word	0x20001fec
 80032e8:	20002105 	.word	0x20002105

080032ec <printArray>:

void printArray() {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
    printf("%s\r\n", characterArray);
 80032f0:	4906      	ldr	r1, [pc, #24]	; (800330c <printArray+0x20>)
 80032f2:	4807      	ldr	r0, [pc, #28]	; (8003310 <printArray+0x24>)
 80032f4:	f007 f972 	bl	800a5dc <iprintf>
    memset(characterArray, '\0', sizeof(characterArray));
 80032f8:	2264      	movs	r2, #100	; 0x64
 80032fa:	2100      	movs	r1, #0
 80032fc:	4803      	ldr	r0, [pc, #12]	; (800330c <printArray+0x20>)
 80032fe:	f007 f965 	bl	800a5cc <memset>
    test = 0;
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <printArray+0x28>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20002108 	.word	0x20002108
 8003310:	0800bcd8 	.word	0x0800bcd8
 8003314:	2000216c 	.word	0x2000216c

08003318 <returnTest>:

int returnTest() {
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
    return test;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <returnTest+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000216c 	.word	0x2000216c

08003330 <turnOffTest>:

void turnOffTest() {
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
    test = 0;
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <turnOffTest+0x14>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	2000216c 	.word	0x2000216c

08003348 <returnConnection>:

int returnConnection() {
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
    return connected;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <returnConnection+0x14>)
 800334e:	781b      	ldrb	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20002105 	.word	0x20002105

08003360 <setMPGameChoice>:

void setMPGameChoice() {
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
    mpGameChoice = characterArray[0] - '0';
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <setMPGameChoice+0x20>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	3b30      	subs	r3, #48	; 0x30
 800336a:	b2da      	uxtb	r2, r3
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <setMPGameChoice+0x24>)
 800336e:	701a      	strb	r2, [r3, #0]
    printf("%d\r\n", mpGameChoice);
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <setMPGameChoice+0x24>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	4804      	ldr	r0, [pc, #16]	; (8003388 <setMPGameChoice+0x28>)
 8003378:	f007 f930 	bl	800a5dc <iprintf>
}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20002108 	.word	0x20002108
 8003384:	20002170 	.word	0x20002170
 8003388:	0800bce0 	.word	0x0800bce0

0800338c <returnMPGameChoice>:

uint8_t returnMPGameChoice() {
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
    return mpGameChoice;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <returnMPGameChoice+0x14>)
 8003392:	781b      	ldrb	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20002170 	.word	0x20002170

080033a4 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
    money = 0;
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <initSpaceInvaders+0x6c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    lives = 3;
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <initSpaceInvaders+0x70>)
 80033b0:	2203      	movs	r2, #3
 80033b2:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 80033b4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80033b8:	f001 fed0 	bl	800515c <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 80033bc:	f002 fb3a 	bl	8005a34 <HAL_GetTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f007 f998 	bl	800a6f8 <srand>
    comet_delay = RANDOM(5,20);
 80033c8:	f007 f9c4 	bl	800a754 <rand>
 80033cc:	4603      	mov	r3, r0
 80033ce:	425a      	negs	r2, r3
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	f002 020f 	and.w	r2, r2, #15
 80033d8:	bf58      	it	pl
 80033da:	4253      	negpl	r3, r2
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3305      	adds	r3, #5
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <initSpaceInvaders+0x74>)
 80033e4:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 80033e6:	f000 f81f 	bl	8003428 <initSpaceShip>
    initAmmo(&ammo,0);
 80033ea:	2100      	movs	r1, #0
 80033ec:	480b      	ldr	r0, [pc, #44]	; (800341c <initSpaceInvaders+0x78>)
 80033ee:	f000 f827 	bl	8003440 <initAmmo>
    if(in_multiplayer){
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <initSpaceInvaders+0x7c>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 80033fa:	2101      	movs	r1, #1
 80033fc:	4809      	ldr	r0, [pc, #36]	; (8003424 <initSpaceInvaders+0x80>)
 80033fe:	f000 f81f 	bl	8003440 <initAmmo>
    }
    initComets();
 8003402:	f000 f845 	bl	8003490 <initComets>
    initStars();
 8003406:	f000 f86d 	bl	80034e4 <initStars>
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200021d8 	.word	0x200021d8
 8003414:	20000049 	.word	0x20000049
 8003418:	200021dc 	.word	0x200021dc
 800341c:	20002174 	.word	0x20002174
 8003420:	20000051 	.word	0x20000051
 8003424:	20002184 	.word	0x20002184

08003428 <initSpaceShip>:

void initSpaceShip(){
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <initSpaceShip+0x14>)
 800342e:	2228      	movs	r2, #40	; 0x28
 8003430:	701a      	strb	r2, [r3, #0]
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	2000004c 	.word	0x2000004c

08003440 <initAmmo>:

void initAmmo(bullets *am,int enemy){
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b25a      	sxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e00e      	b.n	800347c <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	22ff      	movs	r2, #255	; 0xff
 8003468:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	22ff      	movs	r2, #255	; 0xff
 8003474:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3301      	adds	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b05      	cmp	r3, #5
 8003480:	dded      	ble.n	800345e <initAmmo+0x1e>
    }
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <initComets>:

void initComets(){
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <initComets+0x50>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 800349c:	2300      	movs	r3, #0
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	e014      	b.n	80034cc <initComets+0x3c>
        COMET_X(i) = -1;
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <initComets+0x50>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	22ff      	movs	r2, #255	; 0xff
 80034ac:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <initComets+0x50>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	22ff      	movs	r2, #255	; 0xff
 80034b8:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 80034ba:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <initComets+0x50>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	2202      	movs	r2, #2
 80034c4:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3301      	adds	r3, #1
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b09      	cmp	r3, #9
 80034d0:	dde7      	ble.n	80034a2 <initComets+0x12>
    }
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	20002194 	.word	0x20002194

080034e4 <initStars>:

void initStars(){
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <initStars+0x44>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 80034f0:	2300      	movs	r3, #0
 80034f2:	607b      	str	r3, [r7, #4]
 80034f4:	e00e      	b.n	8003514 <initStars+0x30>
    	STAR_X(i) = -1;
 80034f6:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <initStars+0x44>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 8003502:	4a09      	ldr	r2, [pc, #36]	; (8003528 <initStars+0x44>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	22ff      	movs	r2, #255	; 0xff
 800350c:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3301      	adds	r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b09      	cmp	r3, #9
 8003518:	dded      	ble.n	80034f6 <initStars+0x12>
    }
}
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	200021c0 	.word	0x200021c0

0800352c <spawnComet>:

void spawnComet(){
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003530:	4b3d      	ldr	r3, [pc, #244]	; (8003628 <spawnComet+0xfc>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d16e      	bne.n	8003616 <spawnComet+0xea>
 8003538:	4b3c      	ldr	r3, [pc, #240]	; (800362c <spawnComet+0x100>)
 800353a:	f993 3000 	ldrsb.w	r3, [r3]
 800353e:	2b09      	cmp	r3, #9
 8003540:	dc69      	bgt.n	8003616 <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 8003542:	f007 f907 	bl	800a754 <rand>
 8003546:	4602      	mov	r2, r0
 8003548:	4b39      	ldr	r3, [pc, #228]	; (8003630 <spawnComet+0x104>)
 800354a:	fb83 1302 	smull	r1, r3, r3, r2
 800354e:	4413      	add	r3, r2
 8003550:	1199      	asrs	r1, r3, #6
 8003552:	17d3      	asrs	r3, r2, #31
 8003554:	1ac9      	subs	r1, r1, r3
 8003556:	460b      	mov	r3, r1
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	440b      	add	r3, r1
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	1ad1      	subs	r1, r2, r3
 8003562:	b2cb      	uxtb	r3, r1
 8003564:	4a31      	ldr	r2, [pc, #196]	; (800362c <spawnComet+0x100>)
 8003566:	f992 2000 	ldrsb.w	r2, [r2]
 800356a:	4610      	mov	r0, r2
 800356c:	3305      	adds	r3, #5
 800356e:	b2d9      	uxtb	r1, r3
 8003570:	4a2e      	ldr	r2, [pc, #184]	; (800362c <spawnComet+0x100>)
 8003572:	0083      	lsls	r3, r0, #2
 8003574:	4413      	add	r3, r2
 8003576:	460a      	mov	r2, r1
 8003578:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 800357a:	4b2c      	ldr	r3, [pc, #176]	; (800362c <spawnComet+0x100>)
 800357c:	f993 3000 	ldrsb.w	r3, [r3]
 8003580:	4a2a      	ldr	r2, [pc, #168]	; (800362c <spawnComet+0x100>)
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	2200      	movs	r2, #0
 8003588:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 800358a:	f007 f8e3 	bl	800a754 <rand>
 800358e:	4602      	mov	r2, r0
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <spawnComet+0x108>)
 8003592:	fb83 3102 	smull	r3, r1, r3, r2
 8003596:	17d3      	asrs	r3, r2, #31
 8003598:	1ac9      	subs	r1, r1, r3
 800359a:	460b      	mov	r3, r1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	440b      	add	r3, r1
 80035a0:	1ad1      	subs	r1, r2, r3
 80035a2:	b2cb      	uxtb	r3, r1
 80035a4:	3302      	adds	r3, #2
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	4b20      	ldr	r3, [pc, #128]	; (800362c <spawnComet+0x100>)
 80035aa:	f993 3000 	ldrsb.w	r3, [r3]
 80035ae:	b251      	sxtb	r1, r2
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <spawnComet+0x100>)
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	460a      	mov	r2, r1
 80035b8:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <spawnComet+0x100>)
 80035bc:	f993 3000 	ldrsb.w	r3, [r3]
 80035c0:	4a1a      	ldr	r2, [pc, #104]	; (800362c <spawnComet+0x100>)
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f1c3 0307 	rsb	r3, r3, #7
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <spawnComet+0x100>)
 80035d4:	f993 3000 	ldrsb.w	r3, [r3]
 80035d8:	b251      	sxtb	r1, r2
 80035da:	4a14      	ldr	r2, [pc, #80]	; (800362c <spawnComet+0x100>)
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	460a      	mov	r2, r1
 80035e2:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 80035e4:	f007 f8b6 	bl	800a754 <rand>
 80035e8:	4603      	mov	r3, r0
 80035ea:	425a      	negs	r2, r3
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	f002 020f 	and.w	r2, r2, #15
 80035f4:	bf58      	it	pl
 80035f6:	4253      	negpl	r3, r2
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3305      	adds	r3, #5
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <spawnComet+0xfc>)
 8003600:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <spawnComet+0x100>)
 8003604:	f993 3000 	ldrsb.w	r3, [r3]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3301      	adds	r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	b25a      	sxtb	r2, r3
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <spawnComet+0x100>)
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e006      	b.n	8003624 <spawnComet+0xf8>
    }else{
        comet_delay--;
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <spawnComet+0xfc>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	3b01      	subs	r3, #1
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b02      	ldr	r3, [pc, #8]	; (8003628 <spawnComet+0xfc>)
 8003620:	701a      	strb	r2, [r3, #0]
    }

}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	200021dc 	.word	0x200021dc
 800362c:	20002194 	.word	0x20002194
 8003630:	e6c2b449 	.word	0xe6c2b449
 8003634:	55555556 	.word	0x55555556

08003638 <spawnBullet>:

void spawnBullet(int enemy){
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <spawnBullet+0x98>)
 8003642:	f993 3000 	ldrsb.w	r3, [r3]
 8003646:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <spawnBullet+0x98>)
 800364a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800364e:	3b03      	subs	r3, #3
 8003650:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <spawnBullet+0x26>
        am_p = &enemy_ammo;
 8003658:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <spawnBullet+0x9c>)
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e001      	b.n	8003662 <spawnBullet+0x2a>
    }else{
        am_p = &ammo;
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <spawnBullet+0xa0>)
 8003660:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003668:	2b05      	cmp	r3, #5
 800366a:	dc2a      	bgt.n	80036c2 <spawnBullet+0x8a>
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <spawnBullet+0xa4>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d126      	bne.n	80036c2 <spawnBullet+0x8a>
        if(am_p->enemy){
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f993 3000 	ldrsb.w	r3, [r3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <spawnBullet+0x4a>
            //x_val = read the input from multiplayer;
            y_val = 3;
 800367e:	2303      	movs	r3, #3
 8003680:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	b251      	sxtb	r1, r2
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	460a      	mov	r2, r1
 8003694:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	b251      	sxtb	r1, r2
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	460a      	mov	r2, r1
 80036a8:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <spawnBullet+0xa4>)
 80036be:	220a      	movs	r2, #10
 80036c0:	701a      	strb	r2, [r3, #0]
    }
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	2000004c 	.word	0x2000004c
 80036d4:	20002184 	.word	0x20002184
 80036d8:	20002174 	.word	0x20002174
 80036dc:	200021d5 	.word	0x200021d5

080036e0 <spawnStar>:

void spawnStar(){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 80036e4:	4b27      	ldr	r3, [pc, #156]	; (8003784 <spawnStar+0xa4>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d141      	bne.n	8003770 <spawnStar+0x90>
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <spawnStar+0xa8>)
 80036ee:	f993 3000 	ldrsb.w	r3, [r3]
 80036f2:	2b09      	cmp	r3, #9
 80036f4:	dc3c      	bgt.n	8003770 <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 80036f6:	f007 f82d 	bl	800a754 <rand>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <spawnStar+0xac>)
 80036fe:	fb83 1302 	smull	r1, r3, r3, r2
 8003702:	4413      	add	r3, r2
 8003704:	1199      	asrs	r1, r3, #6
 8003706:	17d3      	asrs	r3, r2, #31
 8003708:	1ac9      	subs	r1, r1, r3
 800370a:	460b      	mov	r3, r1
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a5b      	subs	r3, r3, r1
 8003714:	1ad1      	subs	r1, r2, r3
 8003716:	b2cb      	uxtb	r3, r1
 8003718:	3305      	adds	r3, #5
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <spawnStar+0xa8>)
 800371e:	f993 3000 	ldrsb.w	r3, [r3]
 8003722:	b251      	sxtb	r1, r2
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <spawnStar+0xa8>)
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	460a      	mov	r2, r1
 800372c:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <spawnStar+0xa8>)
 8003730:	f993 3000 	ldrsb.w	r3, [r3]
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <spawnStar+0xa8>)
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	2200      	movs	r2, #0
 800373c:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 800373e:	f007 f809 	bl	800a754 <rand>
 8003742:	4603      	mov	r3, r0
 8003744:	425a      	negs	r2, r3
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	f002 020f 	and.w	r2, r2, #15
 800374e:	bf58      	it	pl
 8003750:	4253      	negpl	r3, r2
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3305      	adds	r3, #5
 8003756:	b2da      	uxtb	r2, r3
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <spawnStar+0xa4>)
 800375a:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <spawnStar+0xa8>)
 800375e:	f993 3000 	ldrsb.w	r3, [r3]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	b25a      	sxtb	r2, r3
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <spawnStar+0xa8>)
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e006      	b.n	800377e <spawnStar+0x9e>
    }else{
        star_delay--;
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <spawnStar+0xa4>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	3b01      	subs	r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <spawnStar+0xa4>)
 800377a:	701a      	strb	r2, [r3, #0]
    }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200021dd 	.word	0x200021dd
 8003788:	200021c0 	.word	0x200021c0
 800378c:	e6c2b449 	.word	0xe6c2b449

08003790 <moveBullets>:

void moveBullets(){
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 8003796:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800379a:	f000 fc37 	bl	800400c <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e09c      	b.n	80038de <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	e040      	b.n	800382c <moveBullets+0x9c>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){
 80037aa:	4a55      	ldr	r2, [pc, #340]	; (8003900 <moveBullets+0x170>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80037b6:	4619      	mov	r1, r3
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <moveBullets+0x174>)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	4299      	cmp	r1, r3
 80037c4:	db2f      	blt.n	8003826 <moveBullets+0x96>
 80037c6:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <moveBullets+0x170>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80037d2:	4619      	mov	r1, r3
 80037d4:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <moveBullets+0x174>)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	4618      	mov	r0, r3
 80037e0:	4a48      	ldr	r2, [pc, #288]	; (8003904 <moveBullets+0x174>)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80037ec:	4403      	add	r3, r0
 80037ee:	4299      	cmp	r1, r3
 80037f0:	da19      	bge.n	8003826 <moveBullets+0x96>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){
 80037f2:	4a44      	ldr	r2, [pc, #272]	; (8003904 <moveBullets+0x174>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	789b      	ldrb	r3, [r3, #2]
 80037fc:	4619      	mov	r1, r3
 80037fe:	4a41      	ldr	r2, [pc, #260]	; (8003904 <moveBullets+0x174>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800380a:	18ca      	adds	r2, r1, r3
 800380c:	493c      	ldr	r1, [pc, #240]	; (8003900 <moveBullets+0x170>)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003818:	429a      	cmp	r2, r3
 800381a:	dd04      	ble.n	8003826 <moveBullets+0x96>
					hitComet(i,j);
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fb20 	bl	8003e64 <hitComet>
					continue;
 8003824:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	4b35      	ldr	r3, [pc, #212]	; (8003904 <moveBullets+0x174>)
 800382e:	f993 3000 	ldrsb.w	r3, [r3]
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4293      	cmp	r3, r2
 8003838:	dbb7      	blt.n	80037aa <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 800383a:	4a31      	ldr	r2, [pc, #196]	; (8003900 <moveBullets+0x170>)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	b259      	sxtb	r1, r3
 800384e:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <moveBullets+0x170>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	460a      	mov	r2, r1
 8003858:	70da      	strb	r2, [r3, #3]
		if (AMMO_Y(i) < 0){
 800385a:	4a29      	ldr	r2, [pc, #164]	; (8003900 <moveBullets+0x170>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da36      	bge.n	80038d8 <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);
 800386a:	4a25      	ldr	r2, [pc, #148]	; (8003900 <moveBullets+0x170>)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	885a      	ldrh	r2, [r3, #2]
 8003874:	2300      	movs	r3, #0
 8003876:	f362 030f 	bfi	r3, r2, #0, #16
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fd6e 	bl	800435c <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e01c      	b.n	80038c0 <moveBullets+0x130>
				AMMO_X(j) = AMMO_X(j+1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3301      	adds	r3, #1
 800388a:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <moveBullets+0x170>)
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003894:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <moveBullets+0x170>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	460a      	mov	r2, r1
 800389e:	709a      	strb	r2, [r3, #2]
				AMMO_Y(j) = AMMO_Y(j+1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <moveBullets+0x170>)
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <moveBullets+0x170>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	460a      	mov	r2, r1
 80038b8:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3301      	adds	r3, #1
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	dddf      	ble.n	8003886 <moveBullets+0xf6>
			}
			ammo.in_play--;
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <moveBullets+0x170>)
 80038c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	b25a      	sxtb	r2, r3
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <moveBullets+0x170>)
 80038d6:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <moveBullets+0x170>)
 80038e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038e4:	461a      	mov	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	f6ff af5b 	blt.w	80037a4 <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 80038ee:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80038f2:	f000 fb8b 	bl	800400c <displayAmmo>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20002174 	.word	0x20002174
 8003904:	20002194 	.word	0x20002194

08003908 <moveEnemyBullets>:

void moveEnemyBullets(void){
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <moveEnemyBullets+0x180>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80b4 	beq.w	8003a80 <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 8003918:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800391c:	f000 fb76 	bl	800400c <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e09f      	b.n	8003a66 <moveEnemyBullets+0x15e>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){
 8003926:	4a59      	ldr	r2, [pc, #356]	; (8003a8c <moveEnemyBullets+0x184>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003932:	461a      	mov	r2, r3
 8003934:	4b56      	ldr	r3, [pc, #344]	; (8003a90 <moveEnemyBullets+0x188>)
 8003936:	f993 3000 	ldrsb.w	r3, [r3]
 800393a:	3302      	adds	r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	dc4b      	bgt.n	80039d8 <moveEnemyBullets+0xd0>
 8003940:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <moveEnemyBullets+0x184>)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800394c:	461a      	mov	r2, r3
 800394e:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <moveEnemyBullets+0x188>)
 8003950:	f993 3000 	ldrsb.w	r3, [r3]
 8003954:	3b02      	subs	r3, #2
 8003956:	429a      	cmp	r2, r3
 8003958:	db3e      	blt.n	80039d8 <moveEnemyBullets+0xd0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){
 800395a:	4a4c      	ldr	r2, [pc, #304]	; (8003a8c <moveEnemyBullets+0x184>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003966:	461a      	mov	r2, r3
 8003968:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <moveEnemyBullets+0x188>)
 800396a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800396e:	3b02      	subs	r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	db31      	blt.n	80039d8 <moveEnemyBullets+0xd0>
 8003974:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <moveEnemyBullets+0x18c>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d12d      	bne.n	80039d8 <moveEnemyBullets+0xd0>
                beenHit();
 800397c:	f000 fcce 	bl	800431c <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	e01c      	b.n	80039c0 <moveEnemyBullets+0xb8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3301      	adds	r3, #1
 800398a:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <moveEnemyBullets+0x184>)
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003994:	4a3d      	ldr	r2, [pc, #244]	; (8003a8c <moveEnemyBullets+0x184>)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	460a      	mov	r2, r1
 800399e:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3301      	adds	r3, #1
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <moveEnemyBullets+0x184>)
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80039ae:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <moveEnemyBullets+0x184>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	460a      	mov	r2, r1
 80039b8:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3301      	adds	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	dddf      	ble.n	8003986 <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 80039c6:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <moveEnemyBullets+0x184>)
 80039c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	b25a      	sxtb	r2, r3
 80039d4:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <moveEnemyBullets+0x184>)
 80039d6:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 80039d8:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <moveEnemyBullets+0x184>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	b259      	sxtb	r1, r3
 80039ec:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <moveEnemyBullets+0x184>)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	460a      	mov	r2, r1
 80039f6:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){
 80039f8:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <moveEnemyBullets+0x184>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a04:	2b3b      	cmp	r3, #59	; 0x3b
 8003a06:	dd2b      	ble.n	8003a60 <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	e01c      	b.n	8003a48 <moveEnemyBullets+0x140>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <moveEnemyBullets+0x184>)
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <moveEnemyBullets+0x184>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	460a      	mov	r2, r1
 8003a26:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <moveEnemyBullets+0x184>)
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <moveEnemyBullets+0x184>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	460a      	mov	r2, r1
 8003a40:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3301      	adds	r3, #1
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	dddf      	ble.n	8003a0e <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <moveEnemyBullets+0x184>)
 8003a50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	b25a      	sxtb	r2, r3
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <moveEnemyBullets+0x184>)
 8003a5e:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <moveEnemyBullets+0x184>)
 8003a68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f6ff af58 	blt.w	8003926 <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 8003a76:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003a7a:	f000 fac7 	bl	800400c <displayAmmo>
 8003a7e:	e000      	b.n	8003a82 <moveEnemyBullets+0x17a>
        return;
 8003a80:	bf00      	nop
}
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000051 	.word	0x20000051
 8003a8c:	20002184 	.word	0x20002184
 8003a90:	2000004c 	.word	0x2000004c
 8003a94:	20001eeb 	.word	0x20001eeb

08003a98 <moveComets>:

void moveComets(){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003a9e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003aa2:	f000 fb11 	bl	80040c8 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e0f2      	b.n	8003c92 <moveComets+0x1fa>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	e05f      	b.n	8003b72 <moveComets+0xda>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){
 8003ab2:	4a80      	ldr	r2, [pc, #512]	; (8003cb4 <moveComets+0x21c>)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	461a      	mov	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	441a      	add	r2, r3
 8003ac2:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <moveComets+0x220>)
 8003ac4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	429a      	cmp	r2, r3
 8003acc:	dc4e      	bgt.n	8003b6c <moveComets+0xd4>
 8003ace:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <moveComets+0x21c>)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	441a      	add	r2, r3
 8003ade:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <moveComets+0x220>)
 8003ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ae4:	3b02      	subs	r3, #2
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	db40      	blt.n	8003b6c <moveComets+0xd4>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){
 8003aea:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <moveComets+0x224>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d11e      	bne.n	8003b30 <moveComets+0x98>
 8003af2:	4a70      	ldr	r2, [pc, #448]	; (8003cb4 <moveComets+0x21c>)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	789b      	ldrb	r3, [r3, #2]
 8003afc:	4619      	mov	r1, r3
 8003afe:	4a6d      	ldr	r2, [pc, #436]	; (8003cb4 <moveComets+0x21c>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b0a:	18ca      	adds	r2, r1, r3
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <moveComets+0x220>)
 8003b0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	429a      	cmp	r2, r3
 8003b16:	db0b      	blt.n	8003b30 <moveComets+0x98>
					hitComet(420,i);
 8003b18:	68f9      	ldr	r1, [r7, #12]
 8003b1a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003b1e:	f000 f9a1 	bl	8003e64 <hitComet>
					displayPowerup(DARK_GREY);
 8003b22:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003b26:	f000 fcaf 	bl	8004488 <displayPowerup>
					powerUp = 0;
 8003b2a:	4b64      	ldr	r3, [pc, #400]	; (8003cbc <moveComets+0x224>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
				}
                if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){
 8003b30:	4a60      	ldr	r2, [pc, #384]	; (8003cb4 <moveComets+0x21c>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4a5d      	ldr	r2, [pc, #372]	; (8003cb4 <moveComets+0x21c>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b48:	18ca      	adds	r2, r1, r3
 8003b4a:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <moveComets+0x220>)
 8003b4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	429a      	cmp	r2, r3
 8003b54:	db0a      	blt.n	8003b6c <moveComets+0xd4>
 8003b56:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <moveComets+0x228>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <moveComets+0xd4>
                    hitComet(420,i);
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003b64:	f000 f97e 	bl	8003e64 <hitComet>
                    beenHit();
 8003b68:	f000 fbd8 	bl	800431c <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4a50      	ldr	r2, [pc, #320]	; (8003cb4 <moveComets+0x21c>)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	db95      	blt.n	8003ab2 <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){
 8003b86:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <moveComets+0x224>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d133      	bne.n	8003bf6 <moveComets+0x15e>
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <moveComets+0x220>)
 8003b90:	f993 3000 	ldrsb.w	r3, [r3]
 8003b94:	4619      	mov	r1, r3
 8003b96:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <moveComets+0x21c>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	db28      	blt.n	8003bf6 <moveComets+0x15e>
 8003ba4:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <moveComets+0x220>)
 8003ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8003baa:	4619      	mov	r1, r3
 8003bac:	4a41      	ldr	r2, [pc, #260]	; (8003cb4 <moveComets+0x21c>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	4a3e      	ldr	r2, [pc, #248]	; (8003cb4 <moveComets+0x21c>)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003bc4:	4403      	add	r3, r0
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	dc15      	bgt.n	8003bf6 <moveComets+0x15e>
        	hitComet(420,i);
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003bd0:	f000 f948 	bl	8003e64 <hitComet>
        	if(powerUp_delay == 0){
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <moveComets+0x22c>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <moveComets+0x152>
        		displayPowerup(DARK_GREY);
 8003bdc:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003be0:	f000 fc52 	bl	8004488 <displayPowerup>
        		powerUp = 0;
 8003be4:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <moveComets+0x224>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <moveComets+0x22c>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <moveComets+0x22c>)
 8003bf4:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <moveComets+0x21c>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	789b      	ldrb	r3, [r3, #2]
 8003c00:	3301      	adds	r3, #1
 8003c02:	b2d9      	uxtb	r1, r3
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <moveComets+0x21c>)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){
 8003c10:	4a28      	ldr	r2, [pc, #160]	; (8003cb4 <moveComets+0x21c>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	789b      	ldrb	r3, [r3, #2]
 8003c1a:	2b3b      	cmp	r3, #59	; 0x3b
 8003c1c:	d936      	bls.n	8003c8c <moveComets+0x1f4>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	e027      	b.n	8003c74 <moveComets+0x1dc>
            	COMET_X(j) = COMET_X(j+1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3301      	adds	r3, #1
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <moveComets+0x21c>)
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	7859      	ldrb	r1, [r3, #1]
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <moveComets+0x21c>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	460a      	mov	r2, r1
 8003c3a:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <moveComets+0x21c>)
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	7899      	ldrb	r1, [r3, #2]
 8003c48:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <moveComets+0x21c>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	460a      	mov	r2, r1
 8003c52:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <moveComets+0x21c>)
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <moveComets+0x21c>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3301      	adds	r3, #1
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	ddd4      	ble.n	8003c24 <moveComets+0x18c>
            }
            Comet.in_play--;
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <moveComets+0x21c>)
 8003c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b25a      	sxtb	r2, r3
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <moveComets+0x21c>)
 8003c8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <moveComets+0x21c>)
 8003c94:	f993 3000 	ldrsb.w	r3, [r3]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	f6ff af05 	blt.w	8003aac <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8003ca2:	f249 6096 	movw	r0, #38550	; 0x9696
 8003ca6:	f000 fa0f 	bl	80040c8 <displayComets>
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20002194 	.word	0x20002194
 8003cb8:	2000004c 	.word	0x2000004c
 8003cbc:	200021de 	.word	0x200021de
 8003cc0:	20001eeb 	.word	0x20001eeb
 8003cc4:	200021df 	.word	0x200021df

08003cc8 <moveStars>:

void moveStars(){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 8003cce:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003cd2:	f000 f969 	bl	8003fa8 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	e046      	b.n	8003d6a <moveStars+0xa2>
    	STAR_Y(i)++;
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <moveStars+0xc0>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	b259      	sxtb	r1, r3
 8003cf0:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <moveStars+0xc0>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <moveStars+0xc0>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003d08:	2b38      	cmp	r3, #56	; 0x38
 8003d0a:	dd2b      	ble.n	8003d64 <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	e01c      	b.n	8003d4c <moveStars+0x84>
            	STAR_X(j) = STAR_X(j+1);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <moveStars+0xc0>)
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <moveStars+0xc0>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	460a      	mov	r2, r1
 8003d2a:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <moveStars+0xc0>)
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <moveStars+0xc0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	460a      	mov	r2, r1
 8003d44:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	dddf      	ble.n	8003d12 <moveStars+0x4a>
            }
            Star.in_play--;
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <moveStars+0xc0>)
 8003d54:	f993 3000 	ldrsb.w	r3, [r3]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	b25a      	sxtb	r2, r3
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <moveStars+0xc0>)
 8003d62:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3301      	adds	r3, #1
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <moveStars+0xc0>)
 8003d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4293      	cmp	r3, r2
 8003d76:	dbb1      	blt.n	8003cdc <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 8003d78:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003d7c:	f000 f914 	bl	8003fa8 <displayStars>
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	200021c0 	.word	0x200021c0

08003d8c <moveSpaceship>:

void moveSpaceship(int direction){
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 8003d94:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003d98:	f000 f9d6 	bl	8004148 <displaySpaceShip>
	if(powerUp > 0){
 8003d9c:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <moveSpaceship+0xcc>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 8003da4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003da8:	f000 fb6e 	bl	8004488 <displayPowerup>
	}
    if(direction < 0){
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da26      	bge.n	8003e00 <moveSpaceship+0x74>
        SpaceShip.x--;
 8003db2:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <moveSpaceship+0xd0>)
 8003db4:	f993 3000 	ldrsb.w	r3, [r3]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	b25a      	sxtb	r2, r3
 8003dc0:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <moveSpaceship+0xd0>)
 8003dc2:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <moveSpaceship+0xd0>)
 8003dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	dc02      	bgt.n	8003dd4 <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <moveSpaceship+0xd0>)
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8003dd4:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <moveSpaceship+0xd4>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f9b5 	bl	8004148 <displaySpaceShip>
        if(powerUp == 1){
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <moveSpaceship+0xcc>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d103      	bne.n	8003dee <moveSpaceship+0x62>
        	displayPowerup(RED);
 8003de6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003dea:	f000 fb4d 	bl	8004488 <displayPowerup>
        }
        if(powerUp == 2){
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <moveSpaceship+0xcc>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d12b      	bne.n	8003e4e <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 8003df6:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003dfa:	f000 fb45 	bl	8004488 <displayPowerup>
        }
        return;
 8003dfe:	e026      	b.n	8003e4e <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <moveSpaceship+0xd0>)
 8003e02:	f993 3000 	ldrsb.w	r3, [r3]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	3301      	adds	r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	b25a      	sxtb	r2, r3
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <moveSpaceship+0xd0>)
 8003e10:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <moveSpaceship+0xd0>)
 8003e14:	f993 3000 	ldrsb.w	r3, [r3]
 8003e18:	2b4d      	cmp	r3, #77	; 0x4d
 8003e1a:	dd02      	ble.n	8003e22 <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <moveSpaceship+0xd0>)
 8003e1e:	224d      	movs	r2, #77	; 0x4d
 8003e20:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <moveSpaceship+0xd4>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f98e 	bl	8004148 <displaySpaceShip>
    if(powerUp == 1){
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <moveSpaceship+0xcc>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d103      	bne.n	8003e3c <moveSpaceship+0xb0>
    	displayPowerup(RED);
 8003e34:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003e38:	f000 fb26 	bl	8004488 <displayPowerup>
    }
	if(powerUp == 2){
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <moveSpaceship+0xcc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d105      	bne.n	8003e50 <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 8003e44:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003e48:	f000 fb1e 	bl	8004488 <displayPowerup>
 8003e4c:	e000      	b.n	8003e50 <moveSpaceship+0xc4>
        return;
 8003e4e:	bf00      	nop
	}
}
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200021de 	.word	0x200021de
 8003e5c:	2000004c 	.word	0x2000004c
 8003e60:	2000004e 	.word	0x2000004e

08003e64 <hitComet>:

void hitComet(int bul,int com){
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 8003e6e:	4a4b      	ldr	r2, [pc, #300]	; (8003f9c <hitComet+0x138>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <hitComet+0x13c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <hitComet+0x13c>)
 8003e84:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 8003e86:	4a45      	ldr	r2, [pc, #276]	; (8003f9c <hitComet+0x138>)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	b298      	uxth	r0, r3
 8003e96:	4a41      	ldr	r2, [pc, #260]	; (8003f9c <hitComet+0x138>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	789b      	ldrb	r3, [r3, #2]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	b299      	uxth	r1, r3
 8003ea6:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <hitComet+0x138>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4c38      	ldr	r4, [pc, #224]	; (8003f9c <hitComet+0x138>)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4423      	add	r3, r4
 8003ec0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8003ece:	9400      	str	r4, [sp, #0]
 8003ed0:	f000 ff90 	bl	8004df4 <Displ_FillArea>
    if(bul != 420){
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8003eda:	d024      	beq.n	8003f26 <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e01c      	b.n	8003f1c <hitComet+0xb8>
        	AMMO_X(j)= AMMO_X(j+1);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <hitComet+0x140>)
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <hitComet+0x140>)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	460a      	mov	r2, r1
 8003efa:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <hitComet+0x140>)
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003f0a:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <hitComet+0x140>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4413      	add	r3, r2
 8003f12:	460a      	mov	r2, r1
 8003f14:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	dddf      	ble.n	8003ee2 <hitComet+0x7e>
        }
        powerups();
 8003f22:	f000 fa6d 	bl	8004400 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	e027      	b.n	8003f7c <hitComet+0x118>
    	COMET_X(j) = COMET_X(j+1);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <hitComet+0x138>)
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	7859      	ldrb	r1, [r3, #1]
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <hitComet+0x138>)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	460a      	mov	r2, r1
 8003f42:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3301      	adds	r3, #1
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <hitComet+0x138>)
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	7899      	ldrb	r1, [r3, #2]
 8003f50:	4a12      	ldr	r2, [pc, #72]	; (8003f9c <hitComet+0x138>)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	460a      	mov	r2, r1
 8003f5a:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <hitComet+0x138>)
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <hitComet+0x138>)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	460a      	mov	r2, r1
 8003f74:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	ddd4      	ble.n	8003f2c <hitComet+0xc8>
    }
    Comet.in_play--;
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <hitComet+0x138>)
 8003f84:	f993 3000 	ldrsb.w	r3, [r3]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	b25a      	sxtb	r2, r3
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <hitComet+0x138>)
 8003f92:	701a      	strb	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd90      	pop	{r4, r7, pc}
 8003f9c:	20002194 	.word	0x20002194
 8003fa0:	200021d8 	.word	0x200021d8
 8003fa4:	20002174 	.word	0x20002174

08003fa8 <displayStars>:




void displayStars(uint16_t color){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e01a      	b.n	8003fee <displayStars+0x46>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 8003fb8:	4a13      	ldr	r2, [pc, #76]	; (8004008 <displayStars+0x60>)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	b298      	uxth	r0, r3
 8003fca:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <displayStars+0x60>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	b299      	uxth	r1, r3
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	f000 ff06 	bl	8004df4 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <displayStars+0x60>)
 8003ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	dbdd      	blt.n	8003fb8 <displayStars+0x10>
    }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200021c0 	.word	0x200021c0

0800400c <displayAmmo>:

void displayAmmo(uint16_t color){
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	e01a      	b.n	8004052 <displayAmmo+0x46>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 800401c:	4a27      	ldr	r2, [pc, #156]	; (80040bc <displayAmmo+0xb0>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004028:	b29b      	uxth	r3, r3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	b298      	uxth	r0, r3
 800402e:	4a23      	ldr	r2, [pc, #140]	; (80040bc <displayAmmo+0xb0>)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800403a:	b29b      	uxth	r3, r3
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	b299      	uxth	r1, r3
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2304      	movs	r3, #4
 8004046:	2204      	movs	r2, #4
 8004048:	f000 fed4 	bl	8004df4 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3301      	adds	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <displayAmmo+0xb0>)
 8004054:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004058:	461a      	mov	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4293      	cmp	r3, r2
 800405e:	dbdd      	blt.n	800401c <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <displayAmmo+0xb4>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d025      	beq.n	80040b4 <displayAmmo+0xa8>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8004068:	2300      	movs	r3, #0
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	e01b      	b.n	80040a6 <displayAmmo+0x9a>
            Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, LIGHT_BLUE);
 800406e:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <displayAmmo+0xb8>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4413      	add	r3, r2
 8004076:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800407a:	b29b      	uxth	r3, r3
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	b298      	uxth	r0, r3
 8004080:	4a10      	ldr	r2, [pc, #64]	; (80040c4 <displayAmmo+0xb8>)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800408c:	b29b      	uxth	r3, r3
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	b299      	uxth	r1, r3
 8004092:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2304      	movs	r3, #4
 800409a:	2204      	movs	r2, #4
 800409c:	f000 feaa 	bl	8004df4 <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <displayAmmo+0xb8>)
 80040a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80040ac:	461a      	mov	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	dbdc      	blt.n	800406e <displayAmmo+0x62>
        }
    }
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20002174 	.word	0x20002174
 80040c0:	20000051 	.word	0x20000051
 80040c4:	20002184 	.word	0x20002184

080040c8 <displayComets>:

void displayComets(uint16_t color){
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	4603      	mov	r3, r0
 80040d0:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e029      	b.n	800412c <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 80040d8:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <displayComets+0x7c>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	b298      	uxth	r0, r3
 80040e8:	4a16      	ldr	r2, [pc, #88]	; (8004144 <displayComets+0x7c>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	789b      	ldrb	r3, [r3, #2]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	b299      	uxth	r1, r3
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <displayComets+0x7c>)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004104:	b29b      	uxth	r3, r3
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	b29a      	uxth	r2, r3
 800410a:	4c0e      	ldr	r4, [pc, #56]	; (8004144 <displayComets+0x7c>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4423      	add	r3, r4
 8004112:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004116:	b29b      	uxth	r3, r3
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	b29c      	uxth	r4, r3
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	4623      	mov	r3, r4
 8004122:	f000 fe67 	bl	8004df4 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3301      	adds	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <displayComets+0x7c>)
 800412e:	f993 3000 	ldrsb.w	r3, [r3]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4293      	cmp	r3, r2
 8004138:	dbce      	blt.n	80040d8 <displayComets+0x10>
    }
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}
 8004144:	20002194 	.word	0x20002194

08004148 <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af02      	add	r7, sp, #8
 800414e:	4603      	mov	r3, r0
 8004150:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <displaySpaceShip+0x80>)
 8004154:	f993 3000 	ldrsb.w	r3, [r3]
 8004158:	3b02      	subs	r3, #2
 800415a:	b29b      	uxth	r3, r3
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	b298      	uxth	r0, r3
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2310      	movs	r3, #16
 8004166:	2204      	movs	r2, #4
 8004168:	21d8      	movs	r1, #216	; 0xd8
 800416a:	f000 fe43 	bl	8004df4 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <displaySpaceShip+0x80>)
 8004170:	f993 3000 	ldrsb.w	r3, [r3]
 8004174:	3302      	adds	r3, #2
 8004176:	b29b      	uxth	r3, r3
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	b298      	uxth	r0, r3
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2310      	movs	r3, #16
 8004182:	2204      	movs	r2, #4
 8004184:	21d8      	movs	r1, #216	; 0xd8
 8004186:	f000 fe35 	bl	8004df4 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <displaySpaceShip+0x80>)
 800418c:	f993 3000 	ldrsb.w	r3, [r3]
 8004190:	3b01      	subs	r3, #1
 8004192:	b29b      	uxth	r3, r3
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	b298      	uxth	r0, r3
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2304      	movs	r3, #4
 800419e:	220c      	movs	r2, #12
 80041a0:	21dc      	movs	r1, #220	; 0xdc
 80041a2:	f000 fe27 	bl	8004df4 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <displaySpaceShip+0x80>)
 80041a8:	f993 3000 	ldrsb.w	r3, [r3]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	b298      	uxth	r0, r3
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2310      	movs	r3, #16
 80041b8:	2204      	movs	r2, #4
 80041ba:	21d4      	movs	r1, #212	; 0xd4
 80041bc:	f000 fe1a 	bl	8004df4 <Displ_FillArea>

}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	2000004c 	.word	0x2000004c

080041cc <displayLives>:

void displayLives(){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	e013      	b.n	8004200 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	0052      	lsls	r2, r2, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3308      	adds	r3, #8
 80041e8:	b298      	uxth	r0, r3
 80041ea:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2304      	movs	r3, #4
 80041f2:	2204      	movs	r2, #4
 80041f4:	2108      	movs	r1, #8
 80041f6:	f000 fdfd 	bl	8004df4 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3301      	adds	r3, #1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <displayLives+0x90>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4293      	cmp	r3, r2
 800420a:	dbe5      	blt.n	80041d8 <displayLives+0xc>
    }
    if(lives < 3){
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <displayLives+0x90>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d81f      	bhi.n	8004254 <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 8004214:	2300      	movs	r3, #0
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	e015      	b.n	8004246 <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1c3 0303 	rsb	r3, r3, #3
 8004220:	b29b      	uxth	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	0052      	lsls	r2, r2, #1
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	b29b      	uxth	r3, r3
 800422c:	3308      	adds	r3, #8
 800422e:	b298      	uxth	r0, r3
 8004230:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2304      	movs	r3, #4
 8004238:	2204      	movs	r2, #4
 800423a:	2108      	movs	r1, #8
 800423c:	f000 fdda 	bl	8004df4 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <displayLives+0x90>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	f1c3 0303 	rsb	r3, r3, #3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	dbe2      	blt.n	800421a <displayLives+0x4e>
    	}
    }
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000049 	.word	0x20000049

08004260 <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <spaceShipHitColorToggle+0x84>)
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800426c:	d112      	bne.n	8004294 <spaceShipHitColorToggle+0x34>
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <spaceShipHitColorToggle+0x88>)
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <spaceShipHitColorToggle+0x8c>)
 8004274:	fba3 1302 	umull	r1, r3, r3, r2
 8004278:	08d9      	lsrs	r1, r3, #3
 800427a:	460b      	mov	r3, r1
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <spaceShipHitColorToggle+0x84>)
 800428c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e011      	b.n	80042b8 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <spaceShipHitColorToggle+0x88>)
 8004296:	781a      	ldrb	r2, [r3, #0]
 8004298:	4b14      	ldr	r3, [pc, #80]	; (80042ec <spaceShipHitColorToggle+0x8c>)
 800429a:	fba3 1302 	umull	r1, r3, r3, r2
 800429e:	08d9      	lsrs	r1, r3, #3
 80042a0:	460b      	mov	r3, r1
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <spaceShipHitColorToggle+0x84>)
 80042b2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80042b6:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <spaceShipHitColorToggle+0x88>)
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <spaceShipHitColorToggle+0x90>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d206      	bcs.n	80042d2 <spaceShipHitColorToggle+0x72>
        hit++;
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <spaceShipHitColorToggle+0x88>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <spaceShipHitColorToggle+0x88>)
 80042ce:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 80042d0:	e002      	b.n	80042d8 <spaceShipHitColorToggle+0x78>
        hit = 0;
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <spaceShipHitColorToggle+0x88>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000004e 	.word	0x2000004e
 80042e8:	20001eeb 	.word	0x20001eeb
 80042ec:	cccccccd 	.word	0xcccccccd
 80042f0:	20000050 	.word	0x20000050

080042f4 <delayBullet>:

void delayBullet(){
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 80042f8:	4b07      	ldr	r3, [pc, #28]	; (8004318 <delayBullet+0x24>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <delayBullet+0x18>
        bullet_delay--;
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <delayBullet+0x24>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	3b01      	subs	r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <delayBullet+0x24>)
 800430a:	701a      	strb	r2, [r3, #0]
    }
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	200021d5 	.word	0x200021d5

0800431c <beenHit>:

void beenHit(){
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
    hit = 1;
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <beenHit+0x34>)
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
    lives--;
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <beenHit+0x38>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	3b01      	subs	r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <beenHit+0x38>)
 8004330:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <beenHit+0x38>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <beenHit+0x2e>
        play = 0;
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <beenHit+0x3c>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <beenHit+0x34>)
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 8004346:	f7ff f82d 	bl	80033a4 <initSpaceInvaders>

    }
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20001eeb 	.word	0x20001eeb
 8004354:	20000049 	.word	0x20000049
 8004358:	2000004a 	.word	0x2000004a

0800435c <send_Bullet>:

void send_Bullet(point bullet){
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	80b8      	strh	r0, [r7, #4]
    if(connected && bullet.y != -2){
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <send_Bullet+0x94>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d03d      	beq.n	80043e8 <send_Bullet+0x8c>
 800436c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004370:	f113 0f02 	cmn.w	r3, #2
 8004374:	d038      	beq.n	80043e8 <send_Bullet+0x8c>
        //QD << "a bullet has been send to the other player at x:" << bullet.x;  // change to uart debug
        if(enemy_ammo.in_play < MAX_BULLETS){
 8004376:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <send_Bullet+0x98>)
 8004378:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800437c:	2b05      	cmp	r3, #5
 800437e:	dc2d      	bgt.n	80043dc <send_Bullet+0x80>
        	E_AMMO_X(enemy_ammo.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 8004380:	f006 f9e8 	bl	800a754 <rand>
 8004384:	4602      	mov	r2, r0
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <send_Bullet+0x9c>)
 8004388:	fb83 1302 	smull	r1, r3, r3, r2
 800438c:	4413      	add	r3, r2
 800438e:	1199      	asrs	r1, r3, #6
 8004390:	17d3      	asrs	r3, r2, #31
 8004392:	1ac9      	subs	r1, r1, r3
 8004394:	460b      	mov	r3, r1
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	440b      	add	r3, r1
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	1a5b      	subs	r3, r3, r1
 800439e:	1ad1      	subs	r1, r2, r3
 80043a0:	b2cb      	uxtb	r3, r1
 80043a2:	3305      	adds	r3, #5
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <send_Bullet+0x98>)
 80043a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80043ac:	b251      	sxtb	r1, r2
 80043ae:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <send_Bullet+0x98>)
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	460a      	mov	r2, r1
 80043b6:	709a      	strb	r2, [r3, #2]
        	E_AMMO_Y(enemy_ammo.in_play) = 3;
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <send_Bullet+0x98>)
 80043ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <send_Bullet+0x98>)
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	2203      	movs	r2, #3
 80043c6:	70da      	strb	r2, [r3, #3]
            enemy_ammo.in_play++;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <send_Bullet+0x98>)
 80043ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	b25a      	sxtb	r2, r3
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <send_Bullet+0x98>)
 80043d8:	705a      	strb	r2, [r3, #1]
        }else{
            star_delay--;
        }
    }
}
 80043da:	e005      	b.n	80043e8 <send_Bullet+0x8c>
            star_delay--;
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <send_Bullet+0xa0>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <send_Bullet+0xa0>)
 80043e6:	701a      	strb	r2, [r3, #0]
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20002105 	.word	0x20002105
 80043f4:	20002184 	.word	0x20002184
 80043f8:	e6c2b449 	.word	0xe6c2b449
 80043fc:	200021dd 	.word	0x200021dd

08004400 <powerups>:

void powerups(){
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 8004406:	f006 f9a5 	bl	800a754 <rand>
 800440a:	4603      	mov	r3, r0
 800440c:	425a      	negs	r2, r3
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	f002 0203 	and.w	r2, r2, #3
 8004416:	bf58      	it	pl
 8004418:	4253      	negpl	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 800441c:	4b17      	ldr	r3, [pc, #92]	; (800447c <powerups+0x7c>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d127      	bne.n	8004474 <powerups+0x74>
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d124      	bne.n	8004474 <powerups+0x74>
        powerUp = RANDOM(1,3);
 800442a:	f006 f993 	bl	800a754 <rand>
 800442e:	4602      	mov	r2, r0
 8004430:	4b13      	ldr	r3, [pc, #76]	; (8004480 <powerups+0x80>)
 8004432:	fb83 3102 	smull	r3, r1, r3, r2
 8004436:	17d3      	asrs	r3, r2, #31
 8004438:	1ac9      	subs	r1, r1, r3
 800443a:	460b      	mov	r3, r1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	440b      	add	r3, r1
 8004440:	1ad1      	subs	r1, r2, r3
 8004442:	b2cb      	uxtb	r3, r1
 8004444:	3301      	adds	r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <powerups+0x7c>)
 800444a:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <powerups+0x7c>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d104      	bne.n	800445e <powerups+0x5e>
        	displayPowerup(RED);
 8004454:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004458:	f000 f816 	bl	8004488 <displayPowerup>
 800445c:	e007      	b.n	800446e <powerups+0x6e>
        }
        else if(powerUp == 2){
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <powerups+0x7c>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d103      	bne.n	800446e <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 8004466:	f24f 70db 	movw	r0, #63451	; 0xf7db
 800446a:	f000 f80d 	bl	8004488 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <powerups+0x84>)
 8004470:	2205      	movs	r2, #5
 8004472:	701a      	strb	r2, [r3, #0]
    }
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200021de 	.word	0x200021de
 8004480:	55555556 	.word	0x55555556
 8004484:	200021df 	.word	0x200021df

08004488 <displayPowerup>:

void displayPowerup(uint16_t color){
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af02      	add	r7, sp, #8
 800448e:	4603      	mov	r3, r0
 8004490:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <displayPowerup+0x88>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d11c      	bne.n	80044d4 <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <displayPowerup+0x8c>)
 800449c:	f993 3000 	ldrsb.w	r3, [r3]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	b298      	uxth	r0, r3
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	23b4      	movs	r3, #180	; 0xb4
 80044ac:	2204      	movs	r2, #4
 80044ae:	2100      	movs	r1, #0
 80044b0:	f000 fca0 	bl	8004df4 <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <displayPowerup+0x8c>)
 80044b6:	f993 3000 	ldrsb.w	r3, [r3]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	b298      	uxth	r0, r3
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	231e      	movs	r3, #30
 80044ca:	2202      	movs	r2, #2
 80044cc:	21b4      	movs	r1, #180	; 0xb4
 80044ce:	f000 fc91 	bl	8004df4 <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 80044d2:	e019      	b.n	8004508 <displayPowerup+0x80>
    else if(powerUp == 2){
 80044d4:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <displayPowerup+0x88>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d115      	bne.n	8004508 <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <displayPowerup+0x8c>)
 80044de:	f993 3000 	ldrsb.w	r3, [r3]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3301      	adds	r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	b218      	sxth	r0, r3
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <displayPowerup+0x8c>)
 80044f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3302      	adds	r3, #2
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b219      	sxth	r1, r3
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	220e      	movs	r2, #14
 8004504:	f000 fd56 	bl	8004fb4 <Displ_drawCircle>
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200021de 	.word	0x200021de
 8004514:	2000004c 	.word	0x2000004c

08004518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_MspInit+0x44>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	4a0e      	ldr	r2, [pc, #56]	; (800455c <HAL_MspInit+0x44>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6193      	str	r3, [r2, #24]
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_MspInit+0x44>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_MspInit+0x44>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <HAL_MspInit+0x44>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	61d3      	str	r3, [r2, #28]
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_MspInit+0x44>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a17      	ldr	r2, [pc, #92]	; (80045dc <HAL_I2C_MspInit+0x7c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d127      	bne.n	80045d2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004582:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <HAL_I2C_MspInit+0x80>)
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <HAL_I2C_MspInit+0x80>)
 8004588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800458c:	6153      	str	r3, [r2, #20]
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <HAL_I2C_MspInit+0x80>)
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800459a:	2303      	movs	r3, #3
 800459c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800459e:	2312      	movs	r3, #18
 80045a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045a2:	2301      	movs	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045a6:	2303      	movs	r3, #3
 80045a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80045aa:	2304      	movs	r3, #4
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045ae:	f107 0314 	add.w	r3, r7, #20
 80045b2:	4619      	mov	r1, r3
 80045b4:	480b      	ldr	r0, [pc, #44]	; (80045e4 <HAL_I2C_MspInit+0x84>)
 80045b6:	f001 fd8d 	bl	80060d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_I2C_MspInit+0x80>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <HAL_I2C_MspInit+0x80>)
 80045c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045c4:	61d3      	str	r3, [r2, #28]
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_I2C_MspInit+0x80>)
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80045d2:	bf00      	nop
 80045d4:	3728      	adds	r7, #40	; 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40005800 	.word	0x40005800
 80045e0:	40021000 	.word	0x40021000
 80045e4:	48001400 	.word	0x48001400

080045e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2e      	ldr	r2, [pc, #184]	; (80046c0 <HAL_SPI_MspInit+0xd8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d156      	bne.n	80046b8 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_SPI_MspInit+0xdc>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <HAL_SPI_MspInit+0xdc>)
 8004610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004614:	61d3      	str	r3, [r2, #28]
 8004616:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <HAL_SPI_MspInit+0xdc>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <HAL_SPI_MspInit+0xdc>)
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4a27      	ldr	r2, [pc, #156]	; (80046c4 <HAL_SPI_MspInit+0xdc>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800462c:	6153      	str	r3, [r2, #20]
 800462e:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_SPI_MspInit+0xdc>)
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 800463a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800463e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004640:	2302      	movs	r3, #2
 8004642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004648:	2303      	movs	r3, #3
 800464a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800464c:	2305      	movs	r3, #5
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004650:	f107 0314 	add.w	r3, r7, #20
 8004654:	4619      	mov	r1, r3
 8004656:	481c      	ldr	r0, [pc, #112]	; (80046c8 <HAL_SPI_MspInit+0xe0>)
 8004658:	f001 fd3c 	bl	80060d4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800465c:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 800465e:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <HAL_SPI_MspInit+0xe8>)
 8004660:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004662:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 8004664:	2210      	movs	r2, #16
 8004666:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 8004670:	2280      	movs	r2, #128	; 0x80
 8004672:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 800467c:	2200      	movs	r2, #0
 800467e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 8004682:	2200      	movs	r2, #0
 8004684:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004686:	4b11      	ldr	r3, [pc, #68]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 8004688:	2200      	movs	r2, #0
 800468a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800468c:	480f      	ldr	r0, [pc, #60]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 800468e:	f001 fb12 	bl	8005cb6 <HAL_DMA_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004698:	f7fe fbf8 	bl	8002e8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 80046a0:	655a      	str	r2, [r3, #84]	; 0x54
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <HAL_SPI_MspInit+0xe4>)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80046a8:	2200      	movs	r2, #0
 80046aa:	2100      	movs	r1, #0
 80046ac:	2024      	movs	r0, #36	; 0x24
 80046ae:	f001 facc 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046b2:	2024      	movs	r0, #36	; 0x24
 80046b4:	f001 fae5 	bl	8005c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40003800 	.word	0x40003800
 80046c4:	40021000 	.word	0x40021000
 80046c8:	48000400 	.word	0x48000400
 80046cc:	20001fa8 	.word	0x20001fa8
 80046d0:	40020058 	.word	0x40020058

080046d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	; 0x30
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	f107 031c 	add.w	r3, r7, #28
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a33      	ldr	r2, [pc, #204]	; (80047c0 <HAL_UART_MspInit+0xec>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d131      	bne.n	800475a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046f6:	4b33      	ldr	r3, [pc, #204]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	4a32      	ldr	r2, [pc, #200]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 80046fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004700:	61d3      	str	r3, [r2, #28]
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470e:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 8004714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004718:	6153      	str	r3, [r2, #20]
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004726:	230c      	movs	r3, #12
 8004728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004736:	2307      	movs	r3, #7
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473a:	f107 031c 	add.w	r3, r7, #28
 800473e:	4619      	mov	r1, r3
 8004740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004744:	f001 fcc6 	bl	80060d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	2026      	movs	r0, #38	; 0x26
 800474e:	f001 fa7c 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004752:	2026      	movs	r0, #38	; 0x26
 8004754:	f001 fa95 	bl	8005c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004758:	e02d      	b.n	80047b6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <HAL_UART_MspInit+0xf4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d128      	bne.n	80047b6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 800476a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800476e:	61d3      	str	r3, [r2, #28]
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 8004782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004786:	6153      	str	r3, [r2, #20]
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <HAL_UART_MspInit+0xf0>)
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004794:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047a2:	2303      	movs	r3, #3
 80047a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047a6:	2307      	movs	r3, #7
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4806      	ldr	r0, [pc, #24]	; (80047cc <HAL_UART_MspInit+0xf8>)
 80047b2:	f001 fc8f 	bl	80060d4 <HAL_GPIO_Init>
}
 80047b6:	bf00      	nop
 80047b8:	3730      	adds	r7, #48	; 0x30
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40004400 	.word	0x40004400
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40004800 	.word	0x40004800
 80047cc:	48000400 	.word	0x48000400

080047d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047d4:	e7fe      	b.n	80047d4 <NMI_Handler+0x4>

080047d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047da:	e7fe      	b.n	80047da <HardFault_Handler+0x4>

080047dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047e0:	e7fe      	b.n	80047e0 <MemManage_Handler+0x4>

080047e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047e6:	e7fe      	b.n	80047e6 <BusFault_Handler+0x4>

080047e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047ec:	e7fe      	b.n	80047ec <UsageFault_Handler+0x4>

080047ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047ee:	b480      	push	{r7}
 80047f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047f2:	bf00      	nop
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800481c:	f001 f8f6 	bl	8005a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004820:	bf00      	nop
 8004822:	bd80      	pop	{r7, pc}

08004824 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8004828:	2001      	movs	r0, #1
 800482a:	f001 fdf5 	bl	8006418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004838:	4802      	ldr	r0, [pc, #8]	; (8004844 <DMA1_Channel5_IRQHandler+0x10>)
 800483a:	f001 fb59 	bl	8005ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20001fa8 	.word	0x20001fa8

08004848 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800484c:	4802      	ldr	r0, [pc, #8]	; (8004858 <SPI2_IRQHandler+0x10>)
 800484e:	f004 fc1b 	bl	8009088 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20001f44 	.word	0x20001f44

0800485c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <USART2_IRQHandler+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <USART2_IRQHandler+0x50>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <USART2_IRQHandler+0x42>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <USART2_IRQHandler+0x50>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <USART2_IRQHandler+0x50>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004892:	b29b      	uxth	r3, r3
 8004894:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fcd9 	bl	8003250 <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800489e:	4803      	ldr	r0, [pc, #12]	; (80048ac <USART2_IRQHandler+0x50>)
 80048a0:	f004 ffce 	bl	8009840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20001fec 	.word	0x20001fec

080048b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 80048b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048b8:	f001 fdae 	bl	8006418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 80048bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80048c0:	f001 fdaa 	bl	8006418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 80048c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048c8:	f001 fda6 	bl	8006418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return 1;
 80048d4:	2301      	movs	r3, #1
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <_kill>:

int _kill(int pid, int sig)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048ea:	f005 fe45 	bl	800a578 <__errno>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2216      	movs	r2, #22
 80048f2:	601a      	str	r2, [r3, #0]
  return -1;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <_exit>:

void _exit (int status)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004908:	f04f 31ff 	mov.w	r1, #4294967295
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ffe7 	bl	80048e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004912:	e7fe      	b.n	8004912 <_exit+0x12>

08004914 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e00a      	b.n	800493c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004926:	f3af 8000 	nop.w
 800492a:	4601      	mov	r1, r0
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	60ba      	str	r2, [r7, #8]
 8004932:	b2ca      	uxtb	r2, r1
 8004934:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	3301      	adds	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	dbf0      	blt.n	8004926 <_read+0x12>
  }

  return len;
 8004944:	687b      	ldr	r3, [r7, #4]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <_close>:
  }
  return len;
}

int _close(int file)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004976:	605a      	str	r2, [r3, #4]
  return 0;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <_isatty>:

int _isatty(int file)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800498e:	2301      	movs	r3, #1
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <_sbrk+0x5c>)
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <_sbrk+0x60>)
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <_sbrk+0x64>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <_sbrk+0x64>)
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <_sbrk+0x68>)
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <_sbrk+0x64>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d207      	bcs.n	80049f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049e8:	f005 fdc6 	bl	800a578 <__errno>
 80049ec:	4603      	mov	r3, r0
 80049ee:	220c      	movs	r2, #12
 80049f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295
 80049f6:	e009      	b.n	8004a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049f8:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <_sbrk+0x64>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <_sbrk+0x64>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	4a05      	ldr	r2, [pc, #20]	; (8004a1c <_sbrk+0x64>)
 8004a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20004000 	.word	0x20004000
 8004a18:	00000400 	.word	0x00000400
 8004a1c:	200021e0 	.word	0x200021e0
 8004a20:	20002a08 	.word	0x20002a08

08004a24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <SystemInit+0x20>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <SystemInit+0x20>)
 8004a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 8004a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a54:	f001 fcb0 	bl	80063b8 <HAL_GPIO_ReadPin>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a64:	480b      	ldr	r0, [pc, #44]	; (8004a94 <Displ_Select+0x4c>)
 8004a66:	f001 fcbf 	bl	80063e8 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <Displ_Select+0x50>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	490a      	ldr	r1, [pc, #40]	; (8004a98 <Displ_Select+0x50>)
 8004a70:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004a74:	4013      	ands	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <Displ_Select+0x50>)
 8004a7a:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <Displ_Select+0x50>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004a80:	2200      	movs	r2, #0
 8004a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a8a:	f001 fcad 	bl	80063e8 <HAL_GPIO_WritePin>
        }
    }
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	48000400 	.word	0x48000400
 8004a98:	40003800 	.word	0x40003800

08004a9c <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6039      	str	r1, [r7, #0]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	71fb      	strb	r3, [r7, #7]
 8004aac:	460b      	mov	r3, r1
 8004aae:	80bb      	strh	r3, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004ab4:	bf00      	nop
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <Displ_Transmit+0xa8>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0fa      	beq.n	8004ab6 <Displ_Transmit+0x1a>

    Displ_Select();
 8004ac0:	f7ff ffc2 	bl	8004a48 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad0:	f001 fc8a 	bl	80063e8 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8004ad4:	79bb      	ldrb	r3, [r7, #6]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 8004ada:	88bb      	ldrh	r3, [r7, #4]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	4413      	add	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e00b      	b.n	8004b00 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	ba5b      	rev16	r3, r3
 8004af2:	60bb      	str	r3, [r7, #8]
  return result;
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	3304      	adds	r3, #4
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d3ef      	bcc.n	8004ae8 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 8004b08:	88bb      	ldrh	r3, [r7, #4]
 8004b0a:	2b13      	cmp	r3, #19
 8004b0c:	d80d      	bhi.n	8004b2a <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <Displ_Transmit+0xa8>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004b14:	88ba      	ldrh	r2, [r7, #4]
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	480a      	ldr	r0, [pc, #40]	; (8004b48 <Displ_Transmit+0xac>)
 8004b1e:	f004 f84e 	bl	8008bbe <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <Displ_Transmit+0xa8>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 8004b28:	e008      	b.n	8004b3c <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <Displ_Transmit+0xa8>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004b30:	88bb      	ldrh	r3, [r7, #4]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	4804      	ldr	r0, [pc, #16]	; (8004b48 <Displ_Transmit+0xac>)
 8004b38:	f004 f9b6 	bl	8008ea8 <HAL_SPI_Transmit_DMA>
    }
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000058 	.word	0x20000058
 8004b48:	20001f44 	.word	0x20001f44

08004b4c <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004b56:	1df9      	adds	r1, r7, #7
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7ff ff9d 	bl	8004a9c <Displ_Transmit>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	4613      	mov	r3, r2
 8004b76:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	68f9      	ldr	r1, [r7, #12]
 8004b86:	2001      	movs	r0, #1
 8004b88:	f7ff ff88 	bl	8004a9c <Displ_Transmit>
 8004b8c:	e000      	b.n	8004b90 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 8004b8e:	bf00      	nop
}
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
    Displ_Select();
 8004b9c:	f7ff ff54 	bl	8004a48 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004baa:	f001 fc1d 	bl	80063e8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004bae:	2001      	movs	r0, #1
 8004bb0:	f000 ff4c 	bl	8005a4c <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bbe:	f001 fc13 	bl	80063e8 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8004bc2:	2096      	movs	r0, #150	; 0x96
 8004bc4:	f000 ff42 	bl	8005a4c <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004bc8:	203a      	movs	r0, #58	; 0x3a
 8004bca:	f7ff ffbf 	bl	8004b4c <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4810      	ldr	r0, [pc, #64]	; (8004c14 <ILI9XXX_Init+0x7c>)
 8004bd4:	f7ff ffc9 	bl	8004b6a <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004bd8:	20b0      	movs	r0, #176	; 0xb0
 8004bda:	f7ff ffb7 	bl	8004b4c <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004bde:	2200      	movs	r2, #0
 8004be0:	2101      	movs	r1, #1
 8004be2:	480d      	ldr	r0, [pc, #52]	; (8004c18 <ILI9XXX_Init+0x80>)
 8004be4:	f7ff ffc1 	bl	8004b6a <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004be8:	20b0      	movs	r0, #176	; 0xb0
 8004bea:	f7ff ffaf 	bl	8004b4c <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4809      	ldr	r0, [pc, #36]	; (8004c18 <ILI9XXX_Init+0x80>)
 8004bf4:	f7ff ffb9 	bl	8004b6a <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004bf8:	2011      	movs	r0, #17
 8004bfa:	f7ff ffa7 	bl	8004b4c <Displ_WriteCommand>
    HAL_Delay(120);
 8004bfe:	2078      	movs	r0, #120	; 0x78
 8004c00:	f000 ff24 	bl	8005a4c <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004c04:	2029      	movs	r0, #41	; 0x29
 8004c06:	f7ff ffa1 	bl	8004b4c <Displ_WriteCommand>
    HAL_Delay(5);
 8004c0a:	2005      	movs	r0, #5
 8004c0c:	f000 ff1e 	bl	8005a4c <HAL_Delay>

}
 8004c10:	bf00      	nop
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	0800bce8 	.word	0x0800bce8
 8004c18:	0800bcec 	.word	0x0800bcec

08004c1c <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4604      	mov	r4, r0
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	80fb      	strh	r3, [r7, #6]
 8004c2e:	4603      	mov	r3, r0
 8004c30:	80bb      	strh	r3, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	807b      	strh	r3, [r7, #2]
 8004c36:	4613      	mov	r3, r2
 8004c38:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	061a      	lsls	r2, r3, #24
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c46:	431a      	orrs	r2, r3
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	0a12      	lsrs	r2, r2, #8
 8004c54:	b292      	uxth	r2, r2
 8004c56:	431a      	orrs	r2, r3
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <Displ_SetAddressWindow+0x90>)
 8004c5a:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004c5c:	202a      	movs	r0, #42	; 0x2a
 8004c5e:	f7ff ff75 	bl	8004b4c <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004c62:	2200      	movs	r2, #0
 8004c64:	2104      	movs	r1, #4
 8004c66:	4811      	ldr	r0, [pc, #68]	; (8004cac <Displ_SetAddressWindow+0x90>)
 8004c68:	f7ff ff7f 	bl	8004b6a <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004c6c:	883b      	ldrh	r3, [r7, #0]
 8004c6e:	061a      	lsls	r2, r3, #24
 8004c70:	883b      	ldrh	r3, [r7, #0]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	88bb      	ldrh	r3, [r7, #4]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4313      	orrs	r3, r2
 8004c82:	88ba      	ldrh	r2, [r7, #4]
 8004c84:	0a12      	lsrs	r2, r2, #8
 8004c86:	b292      	uxth	r2, r2
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <Displ_SetAddressWindow+0x90>)
 8004c8c:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004c8e:	202b      	movs	r0, #43	; 0x2b
 8004c90:	f7ff ff5c 	bl	8004b4c <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004c94:	2200      	movs	r2, #0
 8004c96:	2104      	movs	r1, #4
 8004c98:	4804      	ldr	r0, [pc, #16]	; (8004cac <Displ_SetAddressWindow+0x90>)
 8004c9a:	f7ff ff66 	bl	8004b6a <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8004c9e:	202c      	movs	r0, #44	; 0x2c
 8004ca0:	f7ff ff54 	bl	8004b4c <Displ_WriteCommand>
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd90      	pop	{r4, r7, pc}
 8004cac:	200029ec 	.word	0x200029ec

08004cb0 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cc4:	f001 fb90 	bl	80063e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004cce:	4806      	ldr	r0, [pc, #24]	; (8004ce8 <Displ_Init+0x38>)
 8004cd0:	f001 fb8a 	bl	80063e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8004cd4:	f7ff ff60 	bl	8004b98 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f806 	bl	8004cec <Displ_Orientation>
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	48000400 	.word	0x48000400

08004cec <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d837      	bhi.n	8004d6c <Displ_Orientation+0x80>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <Displ_Orientation+0x18>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d2b 	.word	0x08004d2b
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004d57 	.word	0x08004d57
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 8004d14:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <Displ_Orientation+0xa0>)
 8004d16:	2288      	movs	r2, #136	; 0x88
 8004d18:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <Displ_Orientation+0xa4>)
 8004d1c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d20:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <Displ_Orientation+0xa8>)
 8004d24:	22f0      	movs	r2, #240	; 0xf0
 8004d26:	801a      	strh	r2, [r3, #0]
            break;
 8004d28:	e020      	b.n	8004d6c <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <Displ_Orientation+0xa0>)
 8004d2c:	22e8      	movs	r2, #232	; 0xe8
 8004d2e:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004d30:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <Displ_Orientation+0xa4>)
 8004d32:	22f0      	movs	r2, #240	; 0xf0
 8004d34:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004d36:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <Displ_Orientation+0xa8>)
 8004d38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d3c:	801a      	strh	r2, [r3, #0]
            break;
 8004d3e:	e015      	b.n	8004d6c <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <Displ_Orientation+0xa0>)
 8004d42:	2248      	movs	r2, #72	; 0x48
 8004d44:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004d46:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <Displ_Orientation+0xa4>)
 8004d48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d4c:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <Displ_Orientation+0xa8>)
 8004d50:	22f0      	movs	r2, #240	; 0xf0
 8004d52:	801a      	strh	r2, [r3, #0]
            break;
 8004d54:	e00a      	b.n	8004d6c <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 8004d56:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <Displ_Orientation+0xa0>)
 8004d58:	2228      	movs	r2, #40	; 0x28
 8004d5a:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <Displ_Orientation+0xa4>)
 8004d5e:	22f0      	movs	r2, #240	; 0xf0
 8004d60:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <Displ_Orientation+0xa8>)
 8004d64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d68:	801a      	strh	r2, [r3, #0]
            break;
 8004d6a:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 8004d6c:	2036      	movs	r0, #54	; 0x36
 8004d6e:	f7ff feed 	bl	8004b4c <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 8004d72:	2200      	movs	r2, #0
 8004d74:	2101      	movs	r1, #1
 8004d76:	4805      	ldr	r0, [pc, #20]	; (8004d8c <Displ_Orientation+0xa0>)
 8004d78:	f7ff fef7 	bl	8004b6a <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004d7c:	4a06      	ldr	r2, [pc, #24]	; (8004d98 <Displ_Orientation+0xac>)
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	7013      	strb	r3, [r2, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200029f0 	.word	0x200029f0
 8004d90:	200021e8 	.word	0x200021e8
 8004d94:	200021e6 	.word	0x200021e6
 8004d98:	200021e4 	.word	0x200021e4

08004d9c <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <HAL_SPI_ErrorCallback+0x24>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_SPI_ErrorCallback+0x28>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
    }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40003800 	.word	0x40003800
 8004dc4:	20000058 	.word	0x20000058

08004dc8 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <HAL_SPI_TxCpltCallback+0x24>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d102      	bne.n	8004de0 <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_SPI_TxCpltCallback+0x28>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40003800 	.word	0x40003800
 8004df0:	20000058 	.word	0x20000058

08004df4 <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b08b      	sub	sp, #44	; 0x2c
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	461a      	mov	r2, r3
 8004e02:	4623      	mov	r3, r4
 8004e04:	80fb      	strh	r3, [r7, #6]
 8004e06:	4603      	mov	r3, r0
 8004e08:	80bb      	strh	r3, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	807b      	strh	r3, [r7, #2]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	4a4f      	ldr	r2, [pc, #316]	; (8004f54 <Displ_FillArea+0x160>)
 8004e16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	f280 8096 	bge.w	8004f4c <Displ_FillArea+0x158>
 8004e20:	88bb      	ldrh	r3, [r7, #4]
 8004e22:	4a4d      	ldr	r2, [pc, #308]	; (8004f58 <Displ_FillArea+0x164>)
 8004e24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	f280 808f 	bge.w	8004f4c <Displ_FillArea+0x158>
 8004e2e:	887b      	ldrh	r3, [r7, #2]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 808b 	beq.w	8004f4c <Displ_FillArea+0x158>
 8004e36:	883b      	ldrh	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8087 	beq.w	8004f4c <Displ_FillArea+0x158>

    x1=x + w - 1;
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	4413      	add	r3, r2
 8004e44:	3b01      	subs	r3, #1
 8004e46:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 8004e48:	4b42      	ldr	r3, [pc, #264]	; (8004f54 <Displ_FillArea+0x160>)
 8004e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d903      	bls.n	8004e5e <Displ_FillArea+0x6a>
        x1=_width;
 8004e56:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <Displ_FillArea+0x160>)
 8004e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e5c:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 8004e5e:	88ba      	ldrh	r2, [r7, #4]
 8004e60:	883b      	ldrh	r3, [r7, #0]
 8004e62:	4413      	add	r3, r2
 8004e64:	3b01      	subs	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8004e68:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <Displ_FillArea+0x164>)
 8004e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d903      	bls.n	8004e7e <Displ_FillArea+0x8a>
        y1=_height;
 8004e76:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <Displ_FillArea+0x164>)
 8004e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e7c:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8004e7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e8e:	061b      	lsls	r3, r3, #24
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8004e94:	88bb      	ldrh	r3, [r7, #4]
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	6a39      	ldr	r1, [r7, #32]
 8004ea0:	1a8a      	subs	r2, r1, r2
 8004ea2:	3201      	adds	r2, #1
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <Displ_FillArea+0x168>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb6:	d204      	bcs.n	8004ec2 <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e002      	b.n	8004ec8 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 8004ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ec6:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e007      	b.n	8004ede <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1d1a      	adds	r2, r3, #4
 8004ed2:	617a      	str	r2, [r7, #20]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	3301      	adds	r3, #1
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d3f3      	bcc.n	8004ece <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	88b9      	ldrh	r1, [r7, #4]
 8004ef0:	88f8      	ldrh	r0, [r7, #6]
 8004ef2:	f7ff fe93 	bl	8004c1c <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	0a5b      	lsrs	r3, r3, #9
 8004efa:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
 8004f00:	e00a      	b.n	8004f18 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <Displ_FillArea+0x168>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fe2c 	bl	8004b6a <Displ_WriteData>
    for  (k=0;k<times;k++) {
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	3301      	adds	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d3f0      	bcc.n	8004f02 <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <Displ_FillArea+0x168>)
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	005a      	lsls	r2, r3, #1
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	029b      	lsls	r3, r3, #10
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4619      	mov	r1, r3
 8004f32:	f7ff fe1a 	bl	8004b6a <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <Displ_FillArea+0x168>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <Displ_FillArea+0x16c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <Displ_FillArea+0x150>
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <Displ_FillArea+0x170>)
 8004f42:	e000      	b.n	8004f46 <Displ_FillArea+0x152>
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <Displ_FillArea+0x16c>)
 8004f46:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <Displ_FillArea+0x168>)
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e000      	b.n	8004f4e <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004f4c:	bf00      	nop

}
 8004f4e:	372c      	adds	r7, #44	; 0x2c
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd90      	pop	{r4, r7, pc}
 8004f54:	200021e6 	.word	0x200021e6
 8004f58:	200021e8 	.word	0x200021e8
 8004f5c:	2000005c 	.word	0x2000005c
 8004f60:	200021ec 	.word	0x200021ec
 8004f64:	200025ec 	.word	0x200025ec

08004f68 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	4603      	mov	r3, r0
 8004f70:	80fb      	strh	r3, [r7, #6]
 8004f72:	460b      	mov	r3, r1
 8004f74:	80bb      	strh	r3, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <Displ_Pixel+0x44>)
 8004f7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004f82:	4293      	cmp	r3, r2
 8004f84:	da0e      	bge.n	8004fa4 <Displ_Pixel+0x3c>
 8004f86:	88bb      	ldrh	r3, [r7, #4]
 8004f88:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <Displ_Pixel+0x48>)
 8004f8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	da08      	bge.n	8004fa4 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8004f92:	88b9      	ldrh	r1, [r7, #4]
 8004f94:	88f8      	ldrh	r0, [r7, #6]
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f7ff ff29 	bl	8004df4 <Displ_FillArea>
 8004fa2:	e000      	b.n	8004fa6 <Displ_Pixel+0x3e>
        return;
 8004fa4:	bf00      	nop

}
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200021e6 	.word	0x200021e6
 8004fb0:	200021e8 	.word	0x200021e8

08004fb4 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	80fb      	strh	r3, [r7, #6]
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	80bb      	strh	r3, [r7, #4]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	807b      	strh	r3, [r7, #2]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	f1c3 0301 	rsb	r3, r3, #1
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	03d2      	lsls	r2, r2, #15
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8004ff2:	887b      	ldrh	r3, [r7, #2]
 8004ff4:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8004ff6:	88f8      	ldrh	r0, [r7, #6]
 8004ff8:	88ba      	ldrh	r2, [r7, #4]
 8004ffa:	887b      	ldrh	r3, [r7, #2]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	883a      	ldrh	r2, [r7, #0]
 8005002:	4619      	mov	r1, r3
 8005004:	f7ff ffb0 	bl	8004f68 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005008:	88f8      	ldrh	r0, [r7, #6]
 800500a:	88ba      	ldrh	r2, [r7, #4]
 800500c:	887b      	ldrh	r3, [r7, #2]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	b29b      	uxth	r3, r3
 8005012:	883a      	ldrh	r2, [r7, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	f7ff ffa7 	bl	8004f68 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	887b      	ldrh	r3, [r7, #2]
 800501e:	4413      	add	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	88b9      	ldrh	r1, [r7, #4]
 8005024:	883a      	ldrh	r2, [r7, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ff9e 	bl	8004f68 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	b29b      	uxth	r3, r3
 8005034:	88b9      	ldrh	r1, [r7, #4]
 8005036:	883a      	ldrh	r2, [r7, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ff95 	bl	8004f68 <Displ_Pixel>

    while (x<y) {
 800503e:	e081      	b.n	8005144 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8005040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005044:	2b00      	cmp	r3, #0
 8005046:	db0e      	blt.n	8005066 <Displ_drawCircle+0xb2>
            y--;
 8005048:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005054:	8a7b      	ldrh	r3, [r7, #18]
 8005056:	3302      	adds	r3, #2
 8005058:	b29b      	uxth	r3, r3
 800505a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800505c:	8afa      	ldrh	r2, [r7, #22]
 800505e:	8a7b      	ldrh	r3, [r7, #18]
 8005060:	4413      	add	r3, r2
 8005062:	b29b      	uxth	r3, r3
 8005064:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005066:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800506a:	b29b      	uxth	r3, r3
 800506c:	3301      	adds	r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005072:	8abb      	ldrh	r3, [r7, #20]
 8005074:	3302      	adds	r3, #2
 8005076:	b29b      	uxth	r3, r3
 8005078:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800507a:	8afa      	ldrh	r2, [r7, #22]
 800507c:	8abb      	ldrh	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	b29b      	uxth	r3, r3
 8005082:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	8a3b      	ldrh	r3, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	b298      	uxth	r0, r3
 800508c:	88ba      	ldrh	r2, [r7, #4]
 800508e:	89fb      	ldrh	r3, [r7, #14]
 8005090:	4413      	add	r3, r2
 8005092:	b29b      	uxth	r3, r3
 8005094:	883a      	ldrh	r2, [r7, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	f7ff ff66 	bl	8004f68 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	8a3b      	ldrh	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	b298      	uxth	r0, r3
 80050a4:	88ba      	ldrh	r2, [r7, #4]
 80050a6:	89fb      	ldrh	r3, [r7, #14]
 80050a8:	4413      	add	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	883a      	ldrh	r2, [r7, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7ff ff5a 	bl	8004f68 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	8a3b      	ldrh	r3, [r7, #16]
 80050b8:	4413      	add	r3, r2
 80050ba:	b298      	uxth	r0, r3
 80050bc:	88ba      	ldrh	r2, [r7, #4]
 80050be:	89fb      	ldrh	r3, [r7, #14]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	883a      	ldrh	r2, [r7, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	f7ff ff4e 	bl	8004f68 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	8a3b      	ldrh	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	b298      	uxth	r0, r3
 80050d4:	88ba      	ldrh	r2, [r7, #4]
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	b29b      	uxth	r3, r3
 80050dc:	883a      	ldrh	r2, [r7, #0]
 80050de:	4619      	mov	r1, r3
 80050e0:	f7ff ff42 	bl	8004f68 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	4413      	add	r3, r2
 80050ea:	b298      	uxth	r0, r3
 80050ec:	88ba      	ldrh	r2, [r7, #4]
 80050ee:	8a3b      	ldrh	r3, [r7, #16]
 80050f0:	4413      	add	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	883a      	ldrh	r2, [r7, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	f7ff ff36 	bl	8004f68 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	89fb      	ldrh	r3, [r7, #14]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	b298      	uxth	r0, r3
 8005104:	88ba      	ldrh	r2, [r7, #4]
 8005106:	8a3b      	ldrh	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	b29b      	uxth	r3, r3
 800510c:	883a      	ldrh	r2, [r7, #0]
 800510e:	4619      	mov	r1, r3
 8005110:	f7ff ff2a 	bl	8004f68 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	89fb      	ldrh	r3, [r7, #14]
 8005118:	4413      	add	r3, r2
 800511a:	b298      	uxth	r0, r3
 800511c:	88ba      	ldrh	r2, [r7, #4]
 800511e:	8a3b      	ldrh	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	b29b      	uxth	r3, r3
 8005124:	883a      	ldrh	r2, [r7, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	f7ff ff1e 	bl	8004f68 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	89fb      	ldrh	r3, [r7, #14]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	b298      	uxth	r0, r3
 8005134:	88ba      	ldrh	r2, [r7, #4]
 8005136:	8a3b      	ldrh	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	b29b      	uxth	r3, r3
 800513c:	883a      	ldrh	r2, [r7, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	f7ff ff12 	bl	8004f68 <Displ_Pixel>
    while (x<y) {
 8005144:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005148:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800514c:	429a      	cmp	r2, r3
 800514e:	f6ff af77 	blt.w	8005040 <Displ_drawCircle+0x8c>
    }
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd90      	pop	{r4, r7, pc}

0800515c <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af02      	add	r7, sp, #8
 8005162:	4603      	mov	r3, r0
 8005164:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <Displ_CLS+0x30>)
 8005168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800516c:	b29a      	uxth	r2, r3
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <Displ_CLS+0x34>)
 8005170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005174:	b299      	uxth	r1, r3
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	460b      	mov	r3, r1
 800517c:	2100      	movs	r1, #0
 800517e:	2000      	movs	r0, #0
 8005180:	f7ff fe38 	bl	8004df4 <Displ_FillArea>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	200021e6 	.word	0x200021e6
 8005190:	200021e8 	.word	0x200021e8

08005194 <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b08b      	sub	sp, #44	; 0x2c
 8005198:	af02      	add	r7, sp, #8
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4623      	mov	r3, r4
 80051a4:	80fb      	strh	r3, [r7, #6]
 80051a6:	4603      	mov	r3, r0
 80051a8:	80bb      	strh	r3, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]
 80051ae:	4613      	mov	r3, r2
 80051b0:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80051b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d123      	bne.n	8005206 <Displ_Line+0x72>
        if (y1>y0){
 80051be:	f9b7 2000 	ldrsh.w	r2, [r7]
 80051c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	dd0e      	ble.n	80051e8 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 80051ca:	88f8      	ldrh	r0, [r7, #6]
 80051cc:	88b9      	ldrh	r1, [r7, #4]
 80051ce:	883a      	ldrh	r2, [r7, #0]
 80051d0:	88bb      	ldrh	r3, [r7, #4]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3301      	adds	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	2201      	movs	r2, #1
 80051e2:	f7ff fe07 	bl	8004df4 <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 80051e6:	e103      	b.n	80053f0 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 80051e8:	88f8      	ldrh	r0, [r7, #6]
 80051ea:	8839      	ldrh	r1, [r7, #0]
 80051ec:	88ba      	ldrh	r2, [r7, #4]
 80051ee:	883b      	ldrh	r3, [r7, #0]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3301      	adds	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	2201      	movs	r2, #1
 8005200:	f7ff fdf8 	bl	8004df4 <Displ_FillArea>
        return;
 8005204:	e0f4      	b.n	80053f0 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005206:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800520a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800520e:	429a      	cmp	r2, r3
 8005210:	d121      	bne.n	8005256 <Displ_Line+0xc2>
        if (x1>x0)
 8005212:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800521a:	429a      	cmp	r2, r3
 800521c:	dd0d      	ble.n	800523a <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800521e:	88f8      	ldrh	r0, [r7, #6]
 8005220:	88b9      	ldrh	r1, [r7, #4]
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	3301      	adds	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2301      	movs	r3, #1
 8005234:	f7ff fdde 	bl	8004df4 <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 8005238:	e0da      	b.n	80053f0 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 800523a:	8878      	ldrh	r0, [r7, #2]
 800523c:	8839      	ldrh	r1, [r7, #0]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	b29b      	uxth	r3, r3
 8005246:	3301      	adds	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2301      	movs	r3, #1
 8005250:	f7ff fdd0 	bl	8004df4 <Displ_FillArea>
        return;
 8005254:	e0cc      	b.n	80053f0 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8005256:	f9b7 2000 	ldrsh.w	r2, [r7]
 800525a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	dd05      	ble.n	800526e <Displ_Line+0xda>
 8005262:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005266:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	e004      	b.n	8005278 <Displ_Line+0xe4>
 800526e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005272:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800527c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005280:	4299      	cmp	r1, r3
 8005282:	dd05      	ble.n	8005290 <Displ_Line+0xfc>
 8005284:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528c:	1acb      	subs	r3, r1, r3
 800528e:	e004      	b.n	800529a <Displ_Line+0x106>
 8005290:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005294:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005298:	1acb      	subs	r3, r1, r3
 800529a:	429a      	cmp	r2, r3
 800529c:	bfcc      	ite	gt
 800529e:	2301      	movgt	r3, #1
 80052a0:	2300      	movle	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80052a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	827b      	strh	r3, [r7, #18]
 80052b2:	88bb      	ldrh	r3, [r7, #4]
 80052b4:	80fb      	strh	r3, [r7, #6]
 80052b6:	8a7b      	ldrh	r3, [r7, #18]
 80052b8:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80052ba:	887b      	ldrh	r3, [r7, #2]
 80052bc:	823b      	strh	r3, [r7, #16]
 80052be:	883b      	ldrh	r3, [r7, #0]
 80052c0:	807b      	strh	r3, [r7, #2]
 80052c2:	8a3b      	ldrh	r3, [r7, #16]
 80052c4:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80052c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	dd0b      	ble.n	80052ea <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	81fb      	strh	r3, [r7, #14]
 80052d6:	887b      	ldrh	r3, [r7, #2]
 80052d8:	80fb      	strh	r3, [r7, #6]
 80052da:	89fb      	ldrh	r3, [r7, #14]
 80052dc:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80052de:	88bb      	ldrh	r3, [r7, #4]
 80052e0:	81bb      	strh	r3, [r7, #12]
 80052e2:	883b      	ldrh	r3, [r7, #0]
 80052e4:	80bb      	strh	r3, [r7, #4]
 80052e6:	89bb      	ldrh	r3, [r7, #12]
 80052e8:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 80052f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052f8:	105b      	asrs	r3, r3, #1
 80052fa:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80052fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005300:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005304:	429a      	cmp	r2, r3
 8005306:	da07      	bge.n	8005318 <Displ_Line+0x184>
        dy = y1-y0;
 8005308:	883a      	ldrh	r2, [r7, #0]
 800530a:	88bb      	ldrh	r3, [r7, #4]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	b29b      	uxth	r3, r3
 8005310:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8005312:	2301      	movs	r3, #1
 8005314:	837b      	strh	r3, [r7, #26]
 8005316:	e007      	b.n	8005328 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005318:	88ba      	ldrh	r2, [r7, #4]
 800531a:	883b      	ldrh	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8005322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005326:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8005328:	2300      	movs	r3, #0
 800532a:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	83bb      	strh	r3, [r7, #28]
 8005330:	e03a      	b.n	80053a8 <Displ_Line+0x214>
        l++;
 8005332:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005336:	b29b      	uxth	r3, r3
 8005338:	3301      	adds	r3, #1
 800533a:	b29b      	uxth	r3, r3
 800533c:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 800533e:	8b3a      	ldrh	r2, [r7, #24]
 8005340:	8afb      	ldrh	r3, [r7, #22]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	b29b      	uxth	r3, r3
 8005346:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8005348:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	da25      	bge.n	800539c <Displ_Line+0x208>
            if (steep) {
 8005350:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 8005358:	88b8      	ldrh	r0, [r7, #4]
 800535a:	88f9      	ldrh	r1, [r7, #6]
 800535c:	8bfa      	ldrh	r2, [r7, #30]
 800535e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	2201      	movs	r2, #1
 8005366:	f7ff fd45 	bl	8004df4 <Displ_FillArea>
 800536a:	e007      	b.n	800537c <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 800536c:	88f8      	ldrh	r0, [r7, #6]
 800536e:	88b9      	ldrh	r1, [r7, #4]
 8005370:	8bfa      	ldrh	r2, [r7, #30]
 8005372:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	2301      	movs	r3, #1
 8005378:	f7ff fd3c 	bl	8004df4 <Displ_FillArea>
            }
            y0 += ystep;
 800537c:	88ba      	ldrh	r2, [r7, #4]
 800537e:	8b7b      	ldrh	r3, [r7, #26]
 8005380:	4413      	add	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005386:	2300      	movs	r3, #0
 8005388:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 800538a:	8bbb      	ldrh	r3, [r7, #28]
 800538c:	3301      	adds	r3, #1
 800538e:	b29b      	uxth	r3, r3
 8005390:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8005392:	8b3a      	ldrh	r2, [r7, #24]
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	4413      	add	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 800539c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3301      	adds	r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	83bb      	strh	r3, [r7, #28]
 80053a8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80053ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	ddbe      	ble.n	8005332 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80053b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d019      	beq.n	80053f0 <Displ_Line+0x25c>
        if (steep) {
 80053bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00b      	beq.n	80053dc <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 80053c4:	88b8      	ldrh	r0, [r7, #4]
 80053c6:	88f9      	ldrh	r1, [r7, #6]
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	2201      	movs	r2, #1
 80053d6:	f7ff fd0d 	bl	8004df4 <Displ_FillArea>
 80053da:	e009      	b.n	80053f0 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 80053dc:	88f8      	ldrh	r0, [r7, #6]
 80053de:	88b9      	ldrh	r1, [r7, #4]
 80053e0:	8bfb      	ldrh	r3, [r7, #30]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2301      	movs	r3, #1
 80053ec:	f7ff fd02 	bl	8004df4 <Displ_FillArea>
        }
    }
}
 80053f0:	3724      	adds	r7, #36	; 0x24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}

080053f6 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80053f6:	b590      	push	{r4, r7, lr}
 80053f8:	b091      	sub	sp, #68	; 0x44
 80053fa:	af02      	add	r7, sp, #8
 80053fc:	4604      	mov	r4, r0
 80053fe:	4608      	mov	r0, r1
 8005400:	4611      	mov	r1, r2
 8005402:	461a      	mov	r2, r3
 8005404:	4623      	mov	r3, r4
 8005406:	80fb      	strh	r3, [r7, #6]
 8005408:	4603      	mov	r3, r0
 800540a:	80bb      	strh	r3, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	807b      	strh	r3, [r7, #2]
 8005410:	4613      	mov	r3, r2
 8005412:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8005414:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005418:	f9b7 3000 	ldrsh.w	r3, [r7]
 800541c:	429a      	cmp	r2, r3
 800541e:	dd0b      	ble.n	8005438 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005420:	88bb      	ldrh	r3, [r7, #4]
 8005422:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005424:	883b      	ldrh	r3, [r7, #0]
 8005426:	80bb      	strh	r3, [r7, #4]
 8005428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800542a:	803b      	strh	r3, [r7, #0]
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005430:	887b      	ldrh	r3, [r7, #2]
 8005432:	80fb      	strh	r3, [r7, #6]
 8005434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005436:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8005438:	f9b7 2000 	ldrsh.w	r2, [r7]
 800543c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005440:	429a      	cmp	r2, r3
 8005442:	dd0f      	ble.n	8005464 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8005444:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005448:	847b      	strh	r3, [r7, #34]	; 0x22
 800544a:	883b      	ldrh	r3, [r7, #0]
 800544c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005452:	803b      	strh	r3, [r7, #0]
 8005454:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005458:	843b      	strh	r3, [r7, #32]
 800545a:	887b      	ldrh	r3, [r7, #2]
 800545c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005460:	8c3b      	ldrh	r3, [r7, #32]
 8005462:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8005464:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005468:	f9b7 3000 	ldrsh.w	r3, [r7]
 800546c:	429a      	cmp	r2, r3
 800546e:	dd0b      	ble.n	8005488 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005470:	88bb      	ldrh	r3, [r7, #4]
 8005472:	83fb      	strh	r3, [r7, #30]
 8005474:	883b      	ldrh	r3, [r7, #0]
 8005476:	80bb      	strh	r3, [r7, #4]
 8005478:	8bfb      	ldrh	r3, [r7, #30]
 800547a:	803b      	strh	r3, [r7, #0]
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	83bb      	strh	r3, [r7, #28]
 8005480:	887b      	ldrh	r3, [r7, #2]
 8005482:	80fb      	strh	r3, [r7, #6]
 8005484:	8bbb      	ldrh	r3, [r7, #28]
 8005486:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005488:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800548c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005490:	429a      	cmp	r2, r3
 8005492:	d136      	bne.n	8005502 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005498:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800549a:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 800549c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80054a4:	429a      	cmp	r2, r3
 80054a6:	da02      	bge.n	80054ae <Displ_fillTriangle+0xb8>
 80054a8:	887b      	ldrh	r3, [r7, #2]
 80054aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054ac:	e007      	b.n	80054be <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80054ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054b2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80054b6:	429a      	cmp	r2, r3
 80054b8:	dd01      	ble.n	80054be <Displ_fillTriangle+0xc8>
 80054ba:	887b      	ldrh	r3, [r7, #2]
 80054bc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80054be:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80054c2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80054c6:	429a      	cmp	r2, r3
 80054c8:	da03      	bge.n	80054d2 <Displ_fillTriangle+0xdc>
 80054ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054d0:	e008      	b.n	80054e4 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80054d2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80054d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80054da:	429a      	cmp	r2, r3
 80054dc:	dd02      	ble.n	80054e4 <Displ_fillTriangle+0xee>
 80054de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054e2:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 80054e4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80054e8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80054ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80054f0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80054f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	4623      	mov	r3, r4
 80054fc:	f7ff fe4a 	bl	8005194 <Displ_Line>
        return;
 8005500:	e0d2      	b.n	80056a8 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	b29b      	uxth	r3, r3
 800550a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 800550c:	883a      	ldrh	r2, [r7, #0]
 800550e:	88bb      	ldrh	r3, [r7, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	b29b      	uxth	r3, r3
 8005514:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005516:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	b29b      	uxth	r3, r3
 8005520:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8005522:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005526:	88bb      	ldrh	r3, [r7, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	b29b      	uxth	r3, r3
 800552c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800552e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	b29b      	uxth	r3, r3
 8005538:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800553a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800553e:	883b      	ldrh	r3, [r7, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8005546:	2300      	movs	r3, #0
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800554e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005552:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005556:	429a      	cmp	r2, r3
 8005558:	d102      	bne.n	8005560 <Displ_fillTriangle+0x16a>
 800555a:	883b      	ldrh	r3, [r7, #0]
 800555c:	863b      	strh	r3, [r7, #48]	; 0x30
 800555e:	e003      	b.n	8005568 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005560:	883b      	ldrh	r3, [r7, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	b29b      	uxth	r3, r3
 8005566:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005568:	88bb      	ldrh	r3, [r7, #4]
 800556a:	867b      	strh	r3, [r7, #50]	; 0x32
 800556c:	e03d      	b.n	80055ea <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 800556e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005574:	fb92 f3f3 	sdiv	r3, r2, r3
 8005578:	b29a      	uxth	r2, r3
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	4413      	add	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005582:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005588:	fb92 f3f3 	sdiv	r3, r2, r3
 800558c:	b29a      	uxth	r2, r3
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	4413      	add	r3, r2
 8005592:	b29b      	uxth	r3, r3
 8005594:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005596:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800559a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559c:	4413      	add	r3, r2
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80055a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a6:	4413      	add	r3, r2
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80055aa:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80055ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80055b2:	429a      	cmp	r2, r3
 80055b4:	dd05      	ble.n	80055c2 <Displ_fillTriangle+0x1cc>
 80055b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055b8:	81bb      	strh	r3, [r7, #12]
 80055ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055be:	89bb      	ldrh	r3, [r7, #12]
 80055c0:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80055c2:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80055c6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80055ca:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80055ce:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80055d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	4623      	mov	r3, r4
 80055da:	f7ff fddb 	bl	8005194 <Displ_Line>
    for(y=y0; y<=last; y++) {
 80055de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3301      	adds	r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80055ea:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80055ee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80055f2:	429a      	cmp	r2, r3
 80055f4:	ddbb      	ble.n	800556e <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80055f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055fa:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80055fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005602:	1a8a      	subs	r2, r1, r2
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800560a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800560e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005612:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005616:	1a8a      	subs	r2, r1, r2
 8005618:	fb02 f303 	mul.w	r3, r2, r3
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800561e:	e03d      	b.n	800569c <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005620:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005626:	fb92 f3f3 	sdiv	r3, r2, r3
 800562a:	b29a      	uxth	r2, r3
 800562c:	887b      	ldrh	r3, [r7, #2]
 800562e:	4413      	add	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005634:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563a:	fb92 f3f3 	sdiv	r3, r2, r3
 800563e:	b29a      	uxth	r2, r3
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	4413      	add	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005648:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800564c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800564e:	4413      	add	r3, r2
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005652:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005658:	4413      	add	r3, r2
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800565c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005660:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005664:	429a      	cmp	r2, r3
 8005666:	dd05      	ble.n	8005674 <Displ_fillTriangle+0x27e>
 8005668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800566a:	81fb      	strh	r3, [r7, #14]
 800566c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800566e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005670:	89fb      	ldrh	r3, [r7, #14]
 8005672:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005674:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005678:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800567c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005680:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005684:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4623      	mov	r3, r4
 800568c:	f7ff fd82 	bl	8005194 <Displ_Line>
    for(; y<=y2; y++) {
 8005690:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005694:	b29b      	uxth	r3, r3
 8005696:	3301      	adds	r3, #1
 8005698:	b29b      	uxth	r3, r3
 800569a:	867b      	strh	r3, [r7, #50]	; 0x32
 800569c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80056a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	ddbb      	ble.n	8005620 <Displ_fillTriangle+0x22a>
    }
}
 80056a8:	373c      	adds	r7, #60	; 0x3c
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}
	...

080056b0 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80056b0:	b082      	sub	sp, #8
 80056b2:	b590      	push	{r4, r7, lr}
 80056b4:	b08d      	sub	sp, #52	; 0x34
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ba:	4603      	mov	r3, r0
 80056bc:	80fb      	strh	r3, [r7, #6]
 80056be:	460b      	mov	r3, r1
 80056c0:	80bb      	strh	r3, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 80056c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056ca:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 80056cc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d102      	bne.n	80056da <Displ_WChar+0x2a>
        wsize<<= 1;
 80056d4:	7efb      	ldrb	r3, [r7, #27]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 80056da:	2300      	movs	r3, #0
 80056dc:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 80056de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056e2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80056ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	3b20      	subs	r3, #32
 80056f2:	4619      	mov	r1, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 80056fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005702:	2b02      	cmp	r3, #2
 8005704:	d005      	beq.n	8005712 <Displ_WChar+0x62>
 8005706:	2b03      	cmp	r3, #3
 8005708:	d107      	bne.n	800571a <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 800570a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800570e:	61fb      	str	r3, [r7, #28]
            break;
 8005710:	e005      	b.n	800571e <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 8005712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005716:	61fb      	str	r3, [r7, #28]
            break;
 8005718:	e001      	b.n	800571e <Displ_WChar+0x6e>
        default:
            mask=0x80;
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 800571e:	4b60      	ldr	r3, [pc, #384]	; (80058a0 <Displ_WChar+0x1f0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005724:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	b21a      	sxth	r2, r3
 800572c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	b29b      	uxth	r3, r3
 8005734:	b21b      	sxth	r3, r3
 8005736:	4313      	orrs	r3, r2
 8005738:	b21b      	sxth	r3, r3
 800573a:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 800573c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	b21a      	sxth	r2, r3
 8005744:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	b29b      	uxth	r3, r3
 800574c:	b21b      	sxth	r3, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	b21b      	sxth	r3, r3
 8005752:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 8005754:	2300      	movs	r3, #0
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005758:	e06f      	b.n	800583a <Displ_WChar+0x18a>
        b=0;
 800575a:	2300      	movs	r3, #0
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 800575e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005762:	2b02      	cmp	r3, #2
 8005764:	d015      	beq.n	8005792 <Displ_WChar+0xe2>
 8005766:	2b03      	cmp	r3, #3
 8005768:	d120      	bne.n	80057ac <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	041a      	lsls	r2, r3, #16
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	3301      	adds	r3, #1
 8005778:	6939      	ldr	r1, [r7, #16]
 800577a:	440b      	add	r3, r1
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	4313      	orrs	r3, r2
 8005782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005784:	3202      	adds	r2, #2
 8005786:	6939      	ldr	r1, [r7, #16]
 8005788:	440a      	add	r2, r1
 800578a:	7812      	ldrb	r2, [r2, #0]
 800578c:	4313      	orrs	r3, r2
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005790:	e011      	b.n	80057b6 <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800579e:	3201      	adds	r2, #1
 80057a0:	6939      	ldr	r1, [r7, #16]
 80057a2:	440a      	add	r2, r1
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80057aa:	e004      	b.n	80057b6 <Displ_WChar+0x106>
            default:
                b=pos[i];
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	4413      	add	r3, r2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 80057b6:	2300      	movs	r3, #0
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	e032      	b.n	8005822 <Displ_WChar+0x172>
            if((b << j) & mask)  {
 80057bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	409a      	lsls	r2, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d014      	beq.n	80057f4 <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	623a      	str	r2, [r7, #32]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	897a      	ldrh	r2, [r7, #10]
 80057d8:	801a      	strh	r2, [r3, #0]
                if (size==2){
 80057da:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d11c      	bne.n	800581c <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	623a      	str	r2, [r7, #32]
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	897a      	ldrh	r2, [r7, #10]
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e013      	b.n	800581c <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	623a      	str	r2, [r7, #32]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	893a      	ldrh	r2, [r7, #8]
 8005802:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005804:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005808:	2b02      	cmp	r3, #2
 800580a:	d107      	bne.n	800581c <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	623a      	str	r2, [r7, #32]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	893a      	ldrh	r2, [r7, #8]
 800581a:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	3301      	adds	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
 8005822:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005826:	461a      	mov	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	4293      	cmp	r3, r2
 800582c:	d3c6      	bcc.n	80057bc <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 800582e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005832:	461a      	mov	r2, r3
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	4413      	add	r3, r2
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800583a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	429a      	cmp	r2, r3
 8005840:	d38b      	bcc.n	800575a <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005848:	7efb      	ldrb	r3, [r7, #27]
 800584a:	b29a      	uxth	r2, r3
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	4413      	add	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29c      	uxth	r4, r3
 8005856:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800585a:	88bb      	ldrh	r3, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29b      	uxth	r3, r3
 8005864:	88b9      	ldrh	r1, [r7, #4]
 8005866:	88f8      	ldrh	r0, [r7, #6]
 8005868:	4622      	mov	r2, r4
 800586a:	f7ff f9d7 	bl	8004c1c <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <Displ_WChar+0x1f0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	6a39      	ldr	r1, [r7, #32]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff f977 	bl	8004b6a <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <Displ_WChar+0x1f0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <Displ_WChar+0x1f4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <Displ_WChar+0x1da>
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <Displ_WChar+0x1f8>)
 8005888:	e000      	b.n	800588c <Displ_WChar+0x1dc>
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <Displ_WChar+0x1f4>)
 800588c:	4a04      	ldr	r2, [pc, #16]	; (80058a0 <Displ_WChar+0x1f0>)
 800588e:	6013      	str	r3, [r2, #0]

}
 8005890:	bf00      	nop
 8005892:	3734      	adds	r7, #52	; 0x34
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800589a:	b002      	add	sp, #8
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000005c 	.word	0x2000005c
 80058a4:	200021ec 	.word	0x200021ec
 80058a8:	200025ec 	.word	0x200025ec

080058ac <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80058ac:	b082      	sub	sp, #8
 80058ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b0:	b08b      	sub	sp, #44	; 0x2c
 80058b2:	af06      	add	r7, sp, #24
 80058b4:	603a      	str	r2, [r7, #0]
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b8:	4603      	mov	r3, r0
 80058ba:	80fb      	strh	r3, [r7, #6]
 80058bc:	460b      	mov	r3, r1
 80058be:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 80058c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058c2:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 80058c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d922      	bls.n	8005912 <Displ_WString+0x66>
        delta<<=1;
 80058cc:	89fb      	ldrh	r3, [r7, #14]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 80058d2:	e01e      	b.n	8005912 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781a      	ldrb	r2, [r3, #0]
 80058d8:	88bd      	ldrh	r5, [r7, #4]
 80058da:	88fc      	ldrh	r4, [r7, #6]
 80058dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058e0:	9304      	str	r3, [sp, #16]
 80058e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058e4:	9303      	str	r3, [sp, #12]
 80058e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	466e      	mov	r6, sp
 80058ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80058f6:	e886 0003 	stmia.w	r6, {r0, r1}
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	4629      	mov	r1, r5
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff fed6 	bl	80056b0 <Displ_WChar>
        x += delta;
 8005904:	88fa      	ldrh	r2, [r7, #6]
 8005906:	89fb      	ldrh	r3, [r7, #14]
 8005908:	4413      	add	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]
        str++;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1dc      	bne.n	80058d4 <Displ_WString+0x28>
    }
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005926:	b002      	add	sp, #8
 8005928:	4770      	bx	lr
	...

0800592c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800592c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005964 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005930:	f7ff f878 	bl	8004a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005934:	480c      	ldr	r0, [pc, #48]	; (8005968 <LoopForever+0x6>)
  ldr r1, =_edata
 8005936:	490d      	ldr	r1, [pc, #52]	; (800596c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005938:	4a0d      	ldr	r2, [pc, #52]	; (8005970 <LoopForever+0xe>)
  movs r3, #0
 800593a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800593c:	e002      	b.n	8005944 <LoopCopyDataInit>

0800593e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800593e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005942:	3304      	adds	r3, #4

08005944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005948:	d3f9      	bcc.n	800593e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800594a:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800594c:	4c0a      	ldr	r4, [pc, #40]	; (8005978 <LoopForever+0x16>)
  movs r3, #0
 800594e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005950:	e001      	b.n	8005956 <LoopFillZerobss>

08005952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005954:	3204      	adds	r2, #4

08005956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005958:	d3fb      	bcc.n	8005952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800595a:	f004 fe13 	bl	800a584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800595e:	f7fc ffb7 	bl	80028d0 <main>

08005962 <LoopForever>:

LoopForever:
    b LoopForever
 8005962:	e7fe      	b.n	8005962 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005964:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800596c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005970:	0800d930 	.word	0x0800d930
  ldr r2, =_sbss
 8005974:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005978:	20002a08 	.word	0x20002a08

0800597c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800597c:	e7fe      	b.n	800597c <ADC1_IRQHandler>
	...

08005980 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005984:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <HAL_Init+0x28>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a07      	ldr	r2, [pc, #28]	; (80059a8 <HAL_Init+0x28>)
 800598a:	f043 0310 	orr.w	r3, r3, #16
 800598e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005990:	2003      	movs	r0, #3
 8005992:	f000 f94f 	bl	8005c34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005996:	200f      	movs	r0, #15
 8005998:	f000 f808 	bl	80059ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800599c:	f7fe fdbc 	bl	8004518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40022000 	.word	0x40022000

080059ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059b4:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_InitTick+0x54>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <HAL_InitTick+0x58>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	4619      	mov	r1, r3
 80059be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f967 	bl	8005c9e <HAL_SYSTICK_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e00e      	b.n	80059f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b0f      	cmp	r3, #15
 80059de:	d80a      	bhi.n	80059f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059e0:	2200      	movs	r2, #0
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	f000 f92f 	bl	8005c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059ec:	4a06      	ldr	r2, [pc, #24]	; (8005a08 <HAL_InitTick+0x5c>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000054 	.word	0x20000054
 8005a04:	20000064 	.word	0x20000064
 8005a08:	20000060 	.word	0x20000060

08005a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_IncTick+0x20>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <HAL_IncTick+0x24>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <HAL_IncTick+0x24>)
 8005a1e:	6013      	str	r3, [r2, #0]
}
 8005a20:	bf00      	nop
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000064 	.word	0x20000064
 8005a30:	200029f4 	.word	0x200029f4

08005a34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  return uwTick;  
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <HAL_GetTick+0x14>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	200029f4 	.word	0x200029f4

08005a4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a54:	f7ff ffee 	bl	8005a34 <HAL_GetTick>
 8005a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d005      	beq.n	8005a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <HAL_Delay+0x44>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005a72:	bf00      	nop
 8005a74:	f7ff ffde 	bl	8005a34 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d8f7      	bhi.n	8005a74 <HAL_Delay+0x28>
  {
  }
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000064 	.word	0x20000064

08005a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ac6:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	60d3      	str	r3, [r2, #12]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	f003 0307 	and.w	r3, r3, #7
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db0b      	blt.n	8005b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	f003 021f 	and.w	r2, r3, #31
 8005b10:	4907      	ldr	r1, [pc, #28]	; (8005b30 <__NVIC_EnableIRQ+0x38>)
 8005b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	2001      	movs	r0, #1
 8005b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000e100 	.word	0xe000e100

08005b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	6039      	str	r1, [r7, #0]
 8005b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	db0a      	blt.n	8005b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	490c      	ldr	r1, [pc, #48]	; (8005b80 <__NVIC_SetPriority+0x4c>)
 8005b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b52:	0112      	lsls	r2, r2, #4
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	440b      	add	r3, r1
 8005b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b5c:	e00a      	b.n	8005b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	4908      	ldr	r1, [pc, #32]	; (8005b84 <__NVIC_SetPriority+0x50>)
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	0112      	lsls	r2, r2, #4
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	440b      	add	r3, r1
 8005b72:	761a      	strb	r2, [r3, #24]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	e000e100 	.word	0xe000e100
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b089      	sub	sp, #36	; 0x24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f1c3 0307 	rsb	r3, r3, #7
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	bf28      	it	cs
 8005ba6:	2304      	movcs	r3, #4
 8005ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3304      	adds	r3, #4
 8005bae:	2b06      	cmp	r3, #6
 8005bb0:	d902      	bls.n	8005bb8 <NVIC_EncodePriority+0x30>
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3b03      	subs	r3, #3
 8005bb6:	e000      	b.n	8005bba <NVIC_EncodePriority+0x32>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43da      	mvns	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	401a      	ands	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bda:	43d9      	mvns	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be0:	4313      	orrs	r3, r2
         );
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3724      	adds	r7, #36	; 0x24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c00:	d301      	bcc.n	8005c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c02:	2301      	movs	r3, #1
 8005c04:	e00f      	b.n	8005c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c06:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <SysTick_Config+0x40>)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c0e:	210f      	movs	r1, #15
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	f7ff ff8e 	bl	8005b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <SysTick_Config+0x40>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c1e:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <SysTick_Config+0x40>)
 8005c20:	2207      	movs	r2, #7
 8005c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	e000e010 	.word	0xe000e010

08005c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff29 	bl	8005a94 <__NVIC_SetPriorityGrouping>
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	4603      	mov	r3, r0
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c5c:	f7ff ff3e 	bl	8005adc <__NVIC_GetPriorityGrouping>
 8005c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	f7ff ff8e 	bl	8005b88 <NVIC_EncodePriority>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff ff5d 	bl	8005b34 <__NVIC_SetPriority>
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	4603      	mov	r3, r0
 8005c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ff31 	bl	8005af8 <__NVIC_EnableIRQ>
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ffa2 	bl	8005bf0 <SysTick_Config>
 8005cac:	4603      	mov	r3, r0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e037      	b.n	8005d3c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005ce2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9b8 	bl	8006094 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}  
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_DMA_Start_IT+0x20>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e04a      	b.n	8005dfa <HAL_DMA_Start_IT+0xb6>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d13a      	bne.n	8005dec <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f94b 	bl	8006036 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 020e 	orr.w	r2, r2, #14
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e00f      	b.n	8005dda <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 020a 	orr.w	r2, r2, #10
 8005dc8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0204 	bic.w	r2, r2, #4
 8005dd8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e005      	b.n	8005df8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
 8005df6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d008      	beq.n	8005e26 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2204      	movs	r2, #4
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e020      	b.n	8005e68 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 020e 	bic.w	r2, r2, #14
 8005e34:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	2101      	movs	r1, #1
 8005e50:	fa01 f202 	lsl.w	r2, r1, r2
 8005e54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d005      	beq.n	8005e96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	e027      	b.n	8005ee6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 020e 	bic.w	r2, r2, #14
 8005ea4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
    } 
  }
  return status;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4013      	ands	r3, r2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d024      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x72>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01f      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0204 	bic.w	r2, r2, #4
 8005f3e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	2104      	movs	r1, #4
 8005f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d06a      	beq.n	800602e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005f60:	e065      	b.n	800602e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2202      	movs	r2, #2
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02c      	beq.n	8005fcc <HAL_DMA_IRQHandler+0xdc>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d027      	beq.n	8005fcc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 020a 	bic.w	r2, r2, #10
 8005f98:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	2102      	movs	r1, #2
 8005fac:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d035      	beq.n	800602e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005fca:	e030      	b.n	800602e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d028      	beq.n	800602e <HAL_DMA_IRQHandler+0x13e>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d023      	beq.n	800602e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 020e 	bic.w	r2, r2, #14
 8005ff4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	2101      	movs	r1, #1
 8006000:	fa01 f202 	lsl.w	r2, r1, r2
 8006004:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
    }
  }
}  
 800602c:	e7ff      	b.n	800602e <HAL_DMA_IRQHandler+0x13e>
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	2101      	movs	r1, #1
 800604e:	fa01 f202 	lsl.w	r2, r1, r2
 8006052:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2b10      	cmp	r3, #16
 8006062:	d108      	bne.n	8006076 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006074:	e007      	b.n	8006086 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <DMA_CalcBaseAndBitshift+0x34>)
 80060a4:	4413      	add	r3, r2
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <DMA_CalcBaseAndBitshift+0x38>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	009a      	lsls	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <DMA_CalcBaseAndBitshift+0x3c>)
 80060b8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	bffdfff8 	.word	0xbffdfff8
 80060cc:	cccccccd 	.word	0xcccccccd
 80060d0:	40020000 	.word	0x40020000

080060d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060e2:	e14e      	b.n	8006382 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	2101      	movs	r1, #1
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	fa01 f303 	lsl.w	r3, r1, r3
 80060f0:	4013      	ands	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8140 	beq.w	800637c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d005      	beq.n	8006114 <HAL_GPIO_Init+0x40>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d130      	bne.n	8006176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	2203      	movs	r2, #3
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4013      	ands	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800614a:	2201      	movs	r2, #1
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4013      	ands	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	f003 0201 	and.w	r2, r3, #1
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	2b03      	cmp	r3, #3
 8006180:	d017      	beq.n	80061b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	2203      	movs	r2, #3
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4013      	ands	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d123      	bne.n	8006206 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	08da      	lsrs	r2, r3, #3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3208      	adds	r2, #8
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	220f      	movs	r2, #15
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4013      	ands	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	08da      	lsrs	r2, r3, #3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3208      	adds	r2, #8
 8006200:	6939      	ldr	r1, [r7, #16]
 8006202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	2203      	movs	r2, #3
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 0203 	and.w	r2, r3, #3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 809a 	beq.w	800637c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006248:	4b55      	ldr	r3, [pc, #340]	; (80063a0 <HAL_GPIO_Init+0x2cc>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	4a54      	ldr	r2, [pc, #336]	; (80063a0 <HAL_GPIO_Init+0x2cc>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	6193      	str	r3, [r2, #24]
 8006254:	4b52      	ldr	r3, [pc, #328]	; (80063a0 <HAL_GPIO_Init+0x2cc>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006260:	4a50      	ldr	r2, [pc, #320]	; (80063a4 <HAL_GPIO_Init+0x2d0>)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	089b      	lsrs	r3, r3, #2
 8006266:	3302      	adds	r3, #2
 8006268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	220f      	movs	r2, #15
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4013      	ands	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800628a:	d013      	beq.n	80062b4 <HAL_GPIO_Init+0x1e0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a46      	ldr	r2, [pc, #280]	; (80063a8 <HAL_GPIO_Init+0x2d4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00d      	beq.n	80062b0 <HAL_GPIO_Init+0x1dc>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a45      	ldr	r2, [pc, #276]	; (80063ac <HAL_GPIO_Init+0x2d8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <HAL_GPIO_Init+0x1d8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a44      	ldr	r2, [pc, #272]	; (80063b0 <HAL_GPIO_Init+0x2dc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_GPIO_Init+0x1d4>
 80062a4:	2303      	movs	r3, #3
 80062a6:	e006      	b.n	80062b6 <HAL_GPIO_Init+0x1e2>
 80062a8:	2305      	movs	r3, #5
 80062aa:	e004      	b.n	80062b6 <HAL_GPIO_Init+0x1e2>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e002      	b.n	80062b6 <HAL_GPIO_Init+0x1e2>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <HAL_GPIO_Init+0x1e2>
 80062b4:	2300      	movs	r3, #0
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	f002 0203 	and.w	r2, r2, #3
 80062bc:	0092      	lsls	r2, r2, #2
 80062be:	4093      	lsls	r3, r2
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80062c6:	4937      	ldr	r1, [pc, #220]	; (80063a4 <HAL_GPIO_Init+0x2d0>)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	3302      	adds	r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062d4:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	43db      	mvns	r3, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4013      	ands	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80062f8:	4a2e      	ldr	r2, [pc, #184]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062fe:	4b2d      	ldr	r3, [pc, #180]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	43db      	mvns	r3, r3
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4013      	ands	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006322:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006328:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	43db      	mvns	r3, r3
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4013      	ands	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	43db      	mvns	r3, r3
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4013      	ands	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006376:	4a0f      	ldr	r2, [pc, #60]	; (80063b4 <HAL_GPIO_Init+0x2e0>)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	3301      	adds	r3, #1
 8006380:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	fa22 f303 	lsr.w	r3, r2, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	f47f aea9 	bne.w	80060e4 <HAL_GPIO_Init+0x10>
  }
}
 8006392:	bf00      	nop
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	40021000 	.word	0x40021000
 80063a4:	40010000 	.word	0x40010000
 80063a8:	48000400 	.word	0x48000400
 80063ac:	48000800 	.word	0x48000800
 80063b0:	48000c00 	.word	0x48000c00
 80063b4:	40010400 	.word	0x40010400

080063b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	887b      	ldrh	r3, [r7, #2]
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	e001      	b.n	80063da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	807b      	strh	r3, [r7, #2]
 80063f4:	4613      	mov	r3, r2
 80063f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063f8:	787b      	ldrb	r3, [r7, #1]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063fe:	887a      	ldrh	r2, [r7, #2]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006404:	e002      	b.n	800640c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006406:	887a      	ldrh	r2, [r7, #2]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800642e:	4a05      	ldr	r2, [pc, #20]	; (8006444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fc fcb4 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
  }
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40010400 	.word	0x40010400

08006448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e081      	b.n	800655e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fe f876 	bl	8004560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2224      	movs	r2, #36	; 0x24
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006498:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d107      	bne.n	80064c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	e006      	b.n	80064d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d104      	bne.n	80064e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006504:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69d9      	ldr	r1, [r3, #28]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	4608      	mov	r0, r1
 8006572:	4611      	mov	r1, r2
 8006574:	461a      	mov	r2, r3
 8006576:	4603      	mov	r3, r0
 8006578:	817b      	strh	r3, [r7, #10]
 800657a:	460b      	mov	r3, r1
 800657c:	813b      	strh	r3, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b20      	cmp	r3, #32
 800658c:	f040 80f9 	bne.w	8006782 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_I2C_Mem_Write+0x34>
 8006596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0ed      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_I2C_Mem_Write+0x4e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0e6      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065be:	f7ff fa39 	bl	8005a34 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	2319      	movs	r3, #25
 80065ca:	2201      	movs	r2, #1
 80065cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fbcd 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0d1      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2221      	movs	r2, #33	; 0x21
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2240      	movs	r2, #64	; 0x40
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006608:	88f8      	ldrh	r0, [r7, #6]
 800660a:	893a      	ldrh	r2, [r7, #8]
 800660c:	8979      	ldrh	r1, [r7, #10]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4603      	mov	r3, r0
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fadd 	bl	8006bd8 <I2C_RequestMemoryWrite>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e0a9      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2bff      	cmp	r3, #255	; 0xff
 8006638:	d90e      	bls.n	8006658 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006644:	b2da      	uxtb	r2, r3
 8006646:	8979      	ldrh	r1, [r7, #10]
 8006648:	2300      	movs	r3, #0
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fd47 	bl	80070e4 <I2C_TransferConfig>
 8006656:	e00f      	b.n	8006678 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	b2da      	uxtb	r2, r3
 8006668:	8979      	ldrh	r1, [r7, #10]
 800666a:	2300      	movs	r3, #0
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fd36 	bl	80070e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fbc6 	bl	8006e0e <I2C_WaitOnTXISFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e07b      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d034      	beq.n	8006730 <HAL_I2C_Mem_Write+0x1c8>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d130      	bne.n	8006730 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	2200      	movs	r2, #0
 80066d6:	2180      	movs	r1, #128	; 0x80
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fb49 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e04d      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2bff      	cmp	r3, #255	; 0xff
 80066f0:	d90e      	bls.n	8006710 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	8979      	ldrh	r1, [r7, #10]
 8006700:	2300      	movs	r3, #0
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fceb 	bl	80070e4 <I2C_TransferConfig>
 800670e:	e00f      	b.n	8006730 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671e:	b2da      	uxtb	r2, r3
 8006720:	8979      	ldrh	r1, [r7, #10]
 8006722:	2300      	movs	r3, #0
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fcda 	bl	80070e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d19e      	bne.n	8006678 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fbac 	bl	8006e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e01a      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2220      	movs	r2, #32
 8006754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6859      	ldr	r1, [r3, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <HAL_I2C_Mem_Write+0x224>)
 8006762:	400b      	ands	r3, r1
 8006764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	e000      	b.n	8006784 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006782:	2302      	movs	r3, #2
  }
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	fe00e800 	.word	0xfe00e800

08006790 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	461a      	mov	r2, r3
 800679e:	4603      	mov	r3, r0
 80067a0:	817b      	strh	r3, [r7, #10]
 80067a2:	460b      	mov	r3, r1
 80067a4:	813b      	strh	r3, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f040 80fd 	bne.w	80069b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_I2C_Mem_Read+0x34>
 80067be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0f1      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_I2C_Mem_Read+0x4e>
 80067da:	2302      	movs	r3, #2
 80067dc:	e0ea      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067e6:	f7ff f925 	bl	8005a34 <HAL_GetTick>
 80067ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2319      	movs	r3, #25
 80067f2:	2201      	movs	r2, #1
 80067f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fab9 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e0d5      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2222      	movs	r2, #34	; 0x22
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a3a      	ldr	r2, [r7, #32]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006830:	88f8      	ldrh	r0, [r7, #6]
 8006832:	893a      	ldrh	r2, [r7, #8]
 8006834:	8979      	ldrh	r1, [r7, #10]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4603      	mov	r3, r0
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fa1d 	bl	8006c80 <I2C_RequestMemoryRead>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d005      	beq.n	8006858 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0ad      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	2bff      	cmp	r3, #255	; 0xff
 8006860:	d90e      	bls.n	8006880 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	b2da      	uxtb	r2, r3
 800686e:	8979      	ldrh	r1, [r7, #10]
 8006870:	4b52      	ldr	r3, [pc, #328]	; (80069bc <HAL_I2C_Mem_Read+0x22c>)
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fc33 	bl	80070e4 <I2C_TransferConfig>
 800687e:	e00f      	b.n	80068a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688e:	b2da      	uxtb	r2, r3
 8006890:	8979      	ldrh	r1, [r7, #10]
 8006892:	4b4a      	ldr	r3, [pc, #296]	; (80069bc <HAL_I2C_Mem_Read+0x22c>)
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fc22 	bl	80070e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	2200      	movs	r2, #0
 80068a8:	2104      	movs	r1, #4
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fa60 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e07c      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d034      	beq.n	8006960 <HAL_I2C_Mem_Read+0x1d0>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d130      	bne.n	8006960 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	2200      	movs	r2, #0
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fa31 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e04d      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2bff      	cmp	r3, #255	; 0xff
 8006920:	d90e      	bls.n	8006940 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	22ff      	movs	r2, #255	; 0xff
 8006926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	b2da      	uxtb	r2, r3
 800692e:	8979      	ldrh	r1, [r7, #10]
 8006930:	2300      	movs	r3, #0
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fbd3 	bl	80070e4 <I2C_TransferConfig>
 800693e:	e00f      	b.n	8006960 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694e:	b2da      	uxtb	r2, r3
 8006950:	8979      	ldrh	r1, [r7, #10]
 8006952:	2300      	movs	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fbc2 	bl	80070e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d19a      	bne.n	80068a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fa94 	bl	8006e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e01a      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2220      	movs	r2, #32
 8006984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <HAL_I2C_Mem_Read+0x230>)
 8006992:	400b      	ands	r3, r1
 8006994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e000      	b.n	80069b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	80002400 	.word	0x80002400
 80069c0:	fe00e800 	.word	0xfe00e800

080069c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08a      	sub	sp, #40	; 0x28
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	607a      	str	r2, [r7, #4]
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	460b      	mov	r3, r1
 80069d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	f040 80f3 	bne.w	8006bcc <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	d101      	bne.n	80069fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
 80069f8:	e0e9      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_I2C_IsDeviceReady+0x44>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e0e2      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d107      	bne.n	8006a36 <HAL_I2C_IsDeviceReady+0x72>
 8006a26:	897b      	ldrh	r3, [r7, #10]
 8006a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a34:	e006      	b.n	8006a44 <HAL_I2C_IsDeviceReady+0x80>
 8006a36:	897b      	ldrh	r3, [r7, #10]
 8006a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a40:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006a4a:	f7fe fff3 	bl	8005a34 <HAL_GetTick>
 8006a4e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	bf0c      	ite	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	2300      	movne	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	bf0c      	ite	eq
 8006a74:	2301      	moveq	r3, #1
 8006a76:	2300      	movne	r3, #0
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006a7c:	e034      	b.n	8006ae8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d01a      	beq.n	8006abc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a86:	f7fe ffd5 	bl	8005a34 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <HAL_I2C_IsDeviceReady+0xd8>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10f      	bne.n	8006abc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e088      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	bf0c      	ite	eq
 8006aca:	2301      	moveq	r3, #1
 8006acc:	2300      	movne	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006ae8:	7ffb      	ldrb	r3, [r7, #31]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <HAL_I2C_IsDeviceReady+0x130>
 8006aee:	7fbb      	ldrb	r3, [r7, #30]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0c4      	beq.n	8006a7e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	d01a      	beq.n	8006b38 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2120      	movs	r1, #32
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f92f 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e058      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2220      	movs	r2, #32
 8006b22:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	e04a      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2120      	movs	r1, #32
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f914 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e03d      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2210      	movs	r2, #16
 8006b58:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d118      	bne.n	8006b9c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b78:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2120      	movs	r1, #32
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f8f3 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e01c      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	f63f af39 	bhi.w	8006a1e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb8:	f043 0220 	orr.w	r2, r3, #32
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e000      	b.n	8006bce <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8006bcc:	2302      	movs	r3, #2
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	461a      	mov	r2, r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	817b      	strh	r3, [r7, #10]
 8006bea:	460b      	mov	r3, r1
 8006bec:	813b      	strh	r3, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	8979      	ldrh	r1, [r7, #10]
 8006bf8:	4b20      	ldr	r3, [pc, #128]	; (8006c7c <I2C_RequestMemoryWrite+0xa4>)
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fa6f 	bl	80070e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	69b9      	ldr	r1, [r7, #24]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f8ff 	bl	8006e0e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e02c      	b.n	8006c74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d105      	bne.n	8006c2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c20:	893b      	ldrh	r3, [r7, #8]
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	629a      	str	r2, [r3, #40]	; 0x28
 8006c2a:	e015      	b.n	8006c58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c2c:	893b      	ldrh	r3, [r7, #8]
 8006c2e:	0a1b      	lsrs	r3, r3, #8
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f8e5 	bl	8006e0e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e012      	b.n	8006c74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c4e:	893b      	ldrh	r3, [r7, #8]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f884 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	80002000 	.word	0x80002000

08006c80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	817b      	strh	r3, [r7, #10]
 8006c92:	460b      	mov	r3, r1
 8006c94:	813b      	strh	r3, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	8979      	ldrh	r1, [r7, #10]
 8006ca0:	4b20      	ldr	r3, [pc, #128]	; (8006d24 <I2C_RequestMemoryRead+0xa4>)
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fa1c 	bl	80070e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cac:	69fa      	ldr	r2, [r7, #28]
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f8ac 	bl	8006e0e <I2C_WaitOnTXISFlagUntilTimeout>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e02c      	b.n	8006d1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d105      	bne.n	8006cd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc6:	893b      	ldrh	r3, [r7, #8]
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	629a      	str	r2, [r3, #40]	; 0x28
 8006cd0:	e015      	b.n	8006cfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cd2:	893b      	ldrh	r3, [r7, #8]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	69b9      	ldr	r1, [r7, #24]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f892 	bl	8006e0e <I2C_WaitOnTXISFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e012      	b.n	8006d1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cf4:	893b      	ldrh	r3, [r7, #8]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2140      	movs	r1, #64	; 0x40
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f831 	bl	8006d70 <I2C_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	80002000 	.word	0x80002000

08006d28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d103      	bne.n	8006d46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2200      	movs	r2, #0
 8006d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d007      	beq.n	8006d64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0201 	orr.w	r2, r2, #1
 8006d62:	619a      	str	r2, [r3, #24]
  }
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d80:	e031      	b.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d02d      	beq.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8a:	f7fe fe53 	bl	8005a34 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d122      	bne.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4013      	ands	r3, r2
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	bf0c      	ite	eq
 8006db0:	2301      	moveq	r3, #1
 8006db2:	2300      	movne	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d113      	bne.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e00f      	b.n	8006e06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4013      	ands	r3, r2
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	bf0c      	ite	eq
 8006df6:	2301      	moveq	r3, #1
 8006df8:	2300      	movne	r3, #0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d0be      	beq.n	8006d82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e1a:	e033      	b.n	8006e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f87f 	bl	8006f24 <I2C_IsErrorOccurred>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e031      	b.n	8006e94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d025      	beq.n	8006e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e38:	f7fe fdfc 	bl	8005a34 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d302      	bcc.n	8006e4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d11a      	bne.n	8006e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d013      	beq.n	8006e84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e007      	b.n	8006e94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d1c4      	bne.n	8006e1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ea8:	e02f      	b.n	8006f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f838 	bl	8006f24 <I2C_IsErrorOccurred>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e02d      	b.n	8006f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebe:	f7fe fdb9 	bl	8005a34 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d302      	bcc.n	8006ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11a      	bne.n	8006f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d013      	beq.n	8006f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	f043 0220 	orr.w	r2, r3, #32
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e007      	b.n	8006f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d1c8      	bne.n	8006eaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	; 0x28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d068      	beq.n	8007022 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2210      	movs	r2, #16
 8006f56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f58:	e049      	b.n	8006fee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d045      	beq.n	8006fee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f62:	f7fe fd67 	bl	8005a34 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d302      	bcc.n	8006f78 <I2C_IsErrorOccurred+0x54>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d13a      	bne.n	8006fee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f9a:	d121      	bne.n	8006fe0 <I2C_IsErrorOccurred+0xbc>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa2:	d01d      	beq.n	8006fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006fa4:	7cfb      	ldrb	r3, [r7, #19]
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d01a      	beq.n	8006fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006fba:	f7fe fd3b 	bl	8005a34 <HAL_GetTick>
 8006fbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fc0:	e00e      	b.n	8006fe0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006fc2:	f7fe fd37 	bl	8005a34 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b19      	cmp	r3, #25
 8006fce:	d907      	bls.n	8006fe0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	f043 0320 	orr.w	r3, r3, #32
 8006fd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006fde:	e006      	b.n	8006fee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d1e9      	bne.n	8006fc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f003 0320 	and.w	r3, r3, #32
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d003      	beq.n	8007004 <I2C_IsErrorOccurred+0xe0>
 8006ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0aa      	beq.n	8006f5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2220      	movs	r2, #32
 8007012:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	f043 0304 	orr.w	r3, r3, #4
 800701a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	f043 0301 	orr.w	r3, r3, #1
 800703a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	f043 0308 	orr.w	r3, r3, #8
 800705c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	f043 0302 	orr.w	r3, r3, #2
 800707e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01c      	beq.n	80070d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff fe45 	bl	8006d28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6859      	ldr	r1, [r3, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b0d      	ldr	r3, [pc, #52]	; (80070e0 <I2C_IsErrorOccurred+0x1bc>)
 80070aa:	400b      	ands	r3, r1
 80070ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	431a      	orrs	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80070d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3728      	adds	r7, #40	; 0x28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	fe00e800 	.word	0xfe00e800

080070e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	607b      	str	r3, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	817b      	strh	r3, [r7, #10]
 80070f2:	4613      	mov	r3, r2
 80070f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070f6:	897b      	ldrh	r3, [r7, #10]
 80070f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070fc:	7a7b      	ldrb	r3, [r7, #9]
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007104:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	4313      	orrs	r3, r2
 800710e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007112:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	0d5b      	lsrs	r3, r3, #21
 800711e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <I2C_TransferConfig+0x60>)
 8007124:	430b      	orrs	r3, r1
 8007126:	43db      	mvns	r3, r3
 8007128:	ea02 0103 	and.w	r1, r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007136:	bf00      	nop
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	03ff63ff 	.word	0x03ff63ff

08007148 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b20      	cmp	r3, #32
 800715c:	d138      	bne.n	80071d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007168:	2302      	movs	r3, #2
 800716a:	e032      	b.n	80071d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2224      	movs	r2, #36	; 0x24
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800719a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6819      	ldr	r1, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	d139      	bne.n	8007268 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071fe:	2302      	movs	r3, #2
 8007200:	e033      	b.n	800726a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	; 0x24
 800720e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007230:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	e000      	b.n	800726a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007268:	2302      	movs	r3, #2
  }
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
	...

08007278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800727e:	af00      	add	r7, sp, #0
 8007280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007288:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800728a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800728e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f001 b823 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800729e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 817d 	beq.w	80075ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80072b4:	4bbc      	ldr	r3, [pc, #752]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f003 030c 	and.w	r3, r3, #12
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d00c      	beq.n	80072da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072c0:	4bb9      	ldr	r3, [pc, #740]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f003 030c 	and.w	r3, r3, #12
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d15c      	bne.n	8007386 <HAL_RCC_OscConfig+0x10e>
 80072cc:	4bb6      	ldr	r3, [pc, #728]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d8:	d155      	bne.n	8007386 <HAL_RCC_OscConfig+0x10e>
 80072da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80072e6:	fa93 f3a3 	rbit	r3, r3
 80072ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80072ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f2:	fab3 f383 	clz	r3, r3
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	095b      	lsrs	r3, r3, #5
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d102      	bne.n	800730c <HAL_RCC_OscConfig+0x94>
 8007306:	4ba8      	ldr	r3, [pc, #672]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	e015      	b.n	8007338 <HAL_RCC_OscConfig+0xc0>
 800730c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007310:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007318:	fa93 f3a3 	rbit	r3, r3
 800731c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007324:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007328:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800732c:	fa93 f3a3 	rbit	r3, r3
 8007330:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007334:	4b9c      	ldr	r3, [pc, #624]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800733c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007340:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007344:	fa92 f2a2 	rbit	r2, r2
 8007348:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800734c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007350:	fab2 f282 	clz	r2, r2
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	f042 0220 	orr.w	r2, r2, #32
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	f002 021f 	and.w	r2, r2, #31
 8007360:	2101      	movs	r1, #1
 8007362:	fa01 f202 	lsl.w	r2, r1, r2
 8007366:	4013      	ands	r3, r2
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 811f 	beq.w	80075ac <HAL_RCC_OscConfig+0x334>
 800736e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 8116 	bne.w	80075ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	f000 bfaf 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800738a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007396:	d106      	bne.n	80073a6 <HAL_RCC_OscConfig+0x12e>
 8007398:	4b83      	ldr	r3, [pc, #524]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a82      	ldr	r2, [pc, #520]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 800739e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	e036      	b.n	8007414 <HAL_RCC_OscConfig+0x19c>
 80073a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10c      	bne.n	80073d0 <HAL_RCC_OscConfig+0x158>
 80073b6:	4b7c      	ldr	r3, [pc, #496]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a7b      	ldr	r2, [pc, #492]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4b79      	ldr	r3, [pc, #484]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a78      	ldr	r2, [pc, #480]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	e021      	b.n	8007414 <HAL_RCC_OscConfig+0x19c>
 80073d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073e0:	d10c      	bne.n	80073fc <HAL_RCC_OscConfig+0x184>
 80073e2:	4b71      	ldr	r3, [pc, #452]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a70      	ldr	r2, [pc, #448]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	4b6e      	ldr	r3, [pc, #440]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a6d      	ldr	r2, [pc, #436]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e00b      	b.n	8007414 <HAL_RCC_OscConfig+0x19c>
 80073fc:	4b6a      	ldr	r3, [pc, #424]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a69      	ldr	r2, [pc, #420]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 8007402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4b67      	ldr	r3, [pc, #412]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a66      	ldr	r2, [pc, #408]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 800740e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007412:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007414:	4b64      	ldr	r3, [pc, #400]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f023 020f 	bic.w	r2, r3, #15
 800741c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	495f      	ldr	r1, [pc, #380]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 800742a:	4313      	orrs	r3, r2
 800742c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800742e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d059      	beq.n	80074f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743e:	f7fe faf9 	bl	8005a34 <HAL_GetTick>
 8007442:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007446:	e00a      	b.n	800745e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007448:	f7fe faf4 	bl	8005a34 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b64      	cmp	r3, #100	; 0x64
 8007456:	d902      	bls.n	800745e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	f000 bf43 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
 800745e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007462:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007466:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800746a:	fa93 f3a3 	rbit	r3, r3
 800746e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007472:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007476:	fab3 f383 	clz	r3, r3
 800747a:	b2db      	uxtb	r3, r3
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f043 0301 	orr.w	r3, r3, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d102      	bne.n	8007490 <HAL_RCC_OscConfig+0x218>
 800748a:	4b47      	ldr	r3, [pc, #284]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	e015      	b.n	80074bc <HAL_RCC_OscConfig+0x244>
 8007490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007494:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007498:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800749c:	fa93 f3a3 	rbit	r3, r3
 80074a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80074a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80074ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80074b0:	fa93 f3a3 	rbit	r3, r3
 80074b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80074b8:	4b3b      	ldr	r3, [pc, #236]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80074c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80074c8:	fa92 f2a2 	rbit	r2, r2
 80074cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80074d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80074d4:	fab2 f282 	clz	r2, r2
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	f042 0220 	orr.w	r2, r2, #32
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	f002 021f 	and.w	r2, r2, #31
 80074e4:	2101      	movs	r1, #1
 80074e6:	fa01 f202 	lsl.w	r2, r1, r2
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0ab      	beq.n	8007448 <HAL_RCC_OscConfig+0x1d0>
 80074f0:	e05d      	b.n	80075ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f2:	f7fe fa9f 	bl	8005a34 <HAL_GetTick>
 80074f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074fa:	e00a      	b.n	8007512 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074fc:	f7fe fa9a 	bl	8005a34 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b64      	cmp	r3, #100	; 0x64
 800750a:	d902      	bls.n	8007512 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	f000 bee9 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
 8007512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007516:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800751a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800751e:	fa93 f3a3 	rbit	r3, r3
 8007522:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007526:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800752a:	fab3 f383 	clz	r3, r3
 800752e:	b2db      	uxtb	r3, r3
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b01      	cmp	r3, #1
 800753c:	d102      	bne.n	8007544 <HAL_RCC_OscConfig+0x2cc>
 800753e:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	e015      	b.n	8007570 <HAL_RCC_OscConfig+0x2f8>
 8007544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007548:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007550:	fa93 f3a3 	rbit	r3, r3
 8007554:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800755c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007560:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007564:	fa93 f3a3 	rbit	r3, r3
 8007568:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <HAL_RCC_OscConfig+0x330>)
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007574:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007578:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800757c:	fa92 f2a2 	rbit	r2, r2
 8007580:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007584:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007588:	fab2 f282 	clz	r2, r2
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	f042 0220 	orr.w	r2, r2, #32
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	f002 021f 	and.w	r2, r2, #31
 8007598:	2101      	movs	r1, #1
 800759a:	fa01 f202 	lsl.w	r2, r1, r2
 800759e:	4013      	ands	r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1ab      	bne.n	80074fc <HAL_RCC_OscConfig+0x284>
 80075a4:	e003      	b.n	80075ae <HAL_RCC_OscConfig+0x336>
 80075a6:	bf00      	nop
 80075a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 817d 	beq.w	80078be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80075c4:	4ba6      	ldr	r3, [pc, #664]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f003 030c 	and.w	r3, r3, #12
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80075d0:	4ba3      	ldr	r3, [pc, #652]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f003 030c 	and.w	r3, r3, #12
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d172      	bne.n	80076c2 <HAL_RCC_OscConfig+0x44a>
 80075dc:	4ba0      	ldr	r3, [pc, #640]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d16c      	bne.n	80076c2 <HAL_RCC_OscConfig+0x44a>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80075f2:	fa93 f3a3 	rbit	r3, r3
 80075f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80075fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075fe:	fab3 f383 	clz	r3, r3
 8007602:	b2db      	uxtb	r3, r3
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b01      	cmp	r3, #1
 8007610:	d102      	bne.n	8007618 <HAL_RCC_OscConfig+0x3a0>
 8007612:	4b93      	ldr	r3, [pc, #588]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	e013      	b.n	8007640 <HAL_RCC_OscConfig+0x3c8>
 8007618:	2302      	movs	r3, #2
 800761a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007622:	fa93 f3a3 	rbit	r3, r3
 8007626:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800762a:	2302      	movs	r3, #2
 800762c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007630:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007634:	fa93 f3a3 	rbit	r3, r3
 8007638:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800763c:	4b88      	ldr	r3, [pc, #544]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2202      	movs	r2, #2
 8007642:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007646:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800764a:	fa92 f2a2 	rbit	r2, r2
 800764e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007652:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007656:	fab2 f282 	clz	r2, r2
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	f042 0220 	orr.w	r2, r2, #32
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	f002 021f 	and.w	r2, r2, #31
 8007666:	2101      	movs	r1, #1
 8007668:	fa01 f202 	lsl.w	r2, r1, r2
 800766c:	4013      	ands	r3, r2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_RCC_OscConfig+0x410>
 8007672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d002      	beq.n	8007688 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f000 be2e 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007688:	4b75      	ldr	r3, [pc, #468]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	21f8      	movs	r1, #248	; 0xf8
 800769e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80076a6:	fa91 f1a1 	rbit	r1, r1
 80076aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80076ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80076b2:	fab1 f181 	clz	r1, r1
 80076b6:	b2c9      	uxtb	r1, r1
 80076b8:	408b      	lsls	r3, r1
 80076ba:	4969      	ldr	r1, [pc, #420]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076c0:	e0fd      	b.n	80078be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8088 	beq.w	80077e4 <HAL_RCC_OscConfig+0x56c>
 80076d4:	2301      	movs	r3, #1
 80076d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80076de:	fa93 f3a3 	rbit	r3, r3
 80076e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80076e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076ea:	fab3 f383 	clz	r3, r3
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80076f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	461a      	mov	r2, r3
 80076fc:	2301      	movs	r3, #1
 80076fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007700:	f7fe f998 	bl	8005a34 <HAL_GetTick>
 8007704:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007708:	e00a      	b.n	8007720 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800770a:	f7fe f993 	bl	8005a34 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d902      	bls.n	8007720 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	f000 bde2 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
 8007720:	2302      	movs	r3, #2
 8007722:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007726:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800772a:	fa93 f3a3 	rbit	r3, r3
 800772e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007732:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007736:	fab3 f383 	clz	r3, r3
 800773a:	b2db      	uxtb	r3, r3
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d102      	bne.n	8007750 <HAL_RCC_OscConfig+0x4d8>
 800774a:	4b45      	ldr	r3, [pc, #276]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	e013      	b.n	8007778 <HAL_RCC_OscConfig+0x500>
 8007750:	2302      	movs	r3, #2
 8007752:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007756:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800775a:	fa93 f3a3 	rbit	r3, r3
 800775e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007762:	2302      	movs	r3, #2
 8007764:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007768:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800776c:	fa93 f3a3 	rbit	r3, r3
 8007770:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007774:	4b3a      	ldr	r3, [pc, #232]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2202      	movs	r2, #2
 800777a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800777e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007782:	fa92 f2a2 	rbit	r2, r2
 8007786:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800778a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800778e:	fab2 f282 	clz	r2, r2
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	f042 0220 	orr.w	r2, r2, #32
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	f002 021f 	and.w	r2, r2, #31
 800779e:	2101      	movs	r1, #1
 80077a0:	fa01 f202 	lsl.w	r2, r1, r2
 80077a4:	4013      	ands	r3, r2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0af      	beq.n	800770a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077aa:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	21f8      	movs	r1, #248	; 0xf8
 80077c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80077c8:	fa91 f1a1 	rbit	r1, r1
 80077cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80077d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80077d4:	fab1 f181 	clz	r1, r1
 80077d8:	b2c9      	uxtb	r1, r1
 80077da:	408b      	lsls	r3, r1
 80077dc:	4920      	ldr	r1, [pc, #128]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	600b      	str	r3, [r1, #0]
 80077e2:	e06c      	b.n	80078be <HAL_RCC_OscConfig+0x646>
 80077e4:	2301      	movs	r3, #1
 80077e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80077ee:	fa93 f3a3 	rbit	r3, r3
 80077f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80077f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077fa:	fab3 f383 	clz	r3, r3
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007804:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	461a      	mov	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fe f910 	bl	8005a34 <HAL_GetTick>
 8007814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007818:	e00a      	b.n	8007830 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800781a:	f7fe f90b 	bl	8005a34 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d902      	bls.n	8007830 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	f000 bd5a 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
 8007830:	2302      	movs	r3, #2
 8007832:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007836:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800783a:	fa93 f3a3 	rbit	r3, r3
 800783e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007846:	fab3 f383 	clz	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b01      	cmp	r3, #1
 8007858:	d104      	bne.n	8007864 <HAL_RCC_OscConfig+0x5ec>
 800785a:	4b01      	ldr	r3, [pc, #4]	; (8007860 <HAL_RCC_OscConfig+0x5e8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	e015      	b.n	800788c <HAL_RCC_OscConfig+0x614>
 8007860:	40021000 	.word	0x40021000
 8007864:	2302      	movs	r3, #2
 8007866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800786e:	fa93 f3a3 	rbit	r3, r3
 8007872:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007876:	2302      	movs	r3, #2
 8007878:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800787c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007880:	fa93 f3a3 	rbit	r3, r3
 8007884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007888:	4bc8      	ldr	r3, [pc, #800]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2202      	movs	r2, #2
 800788e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007892:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007896:	fa92 f2a2 	rbit	r2, r2
 800789a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800789e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80078a2:	fab2 f282 	clz	r2, r2
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	f042 0220 	orr.w	r2, r2, #32
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	f002 021f 	and.w	r2, r2, #31
 80078b2:	2101      	movs	r1, #1
 80078b4:	fa01 f202 	lsl.w	r2, r1, r2
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1ad      	bne.n	800781a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8110 	beq.w	8007af4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d079      	beq.n	80079d8 <HAL_RCC_OscConfig+0x760>
 80078e4:	2301      	movs	r3, #1
 80078e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80078ee:	fa93 f3a3 	rbit	r3, r3
 80078f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80078f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078fa:	fab3 f383 	clz	r3, r3
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	4bab      	ldr	r3, [pc, #684]	; (8007bb0 <HAL_RCC_OscConfig+0x938>)
 8007904:	4413      	add	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	461a      	mov	r2, r3
 800790a:	2301      	movs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800790e:	f7fe f891 	bl	8005a34 <HAL_GetTick>
 8007912:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007916:	e00a      	b.n	800792e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007918:	f7fe f88c 	bl	8005a34 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d902      	bls.n	800792e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	f000 bcdb 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
 800792e:	2302      	movs	r3, #2
 8007930:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007938:	fa93 f3a3 	rbit	r3, r3
 800793c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007944:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007948:	2202      	movs	r2, #2
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007950:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	fa93 f2a3 	rbit	r2, r3
 800795a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800795e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796c:	2202      	movs	r2, #2
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	fa93 f2a3 	rbit	r2, r3
 800797e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007982:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007986:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007988:	4b88      	ldr	r3, [pc, #544]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 800798a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800798c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007990:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007994:	2102      	movs	r1, #2
 8007996:	6019      	str	r1, [r3, #0]
 8007998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800799c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	fa93 f1a3 	rbit	r1, r3
 80079a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80079ae:	6019      	str	r1, [r3, #0]
  return result;
 80079b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	fab3 f383 	clz	r3, r3
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2101      	movs	r1, #1
 80079cc:	fa01 f303 	lsl.w	r3, r1, r3
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0a0      	beq.n	8007918 <HAL_RCC_OscConfig+0x6a0>
 80079d6:	e08d      	b.n	8007af4 <HAL_RCC_OscConfig+0x87c>
 80079d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80079e0:	2201      	movs	r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	fa93 f2a3 	rbit	r2, r3
 80079f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80079fa:	601a      	str	r2, [r3, #0]
  return result;
 80079fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007a04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a06:	fab3 f383 	clz	r3, r3
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4b68      	ldr	r3, [pc, #416]	; (8007bb0 <HAL_RCC_OscConfig+0x938>)
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a1a:	f7fe f80b 	bl	8005a34 <HAL_GetTick>
 8007a1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a22:	e00a      	b.n	8007a3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a24:	f7fe f806 	bl	8005a34 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d902      	bls.n	8007a3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	f000 bc55 	b.w	80082e4 <HAL_RCC_OscConfig+0x106c>
 8007a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007a42:	2202      	movs	r2, #2
 8007a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	fa93 f2a3 	rbit	r2, r3
 8007a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007a66:	2202      	movs	r2, #2
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	fa93 f2a3 	rbit	r2, r3
 8007a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	fa93 f2a3 	rbit	r2, r3
 8007a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007aa4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa6:	4b41      	ldr	r3, [pc, #260]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 8007aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	6019      	str	r1, [r3, #0]
 8007ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	fa93 f1a3 	rbit	r1, r3
 8007ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007acc:	6019      	str	r1, [r3, #0]
  return result;
 8007ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ad2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	fab3 f383 	clz	r3, r3
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 031f 	and.w	r3, r3, #31
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d197      	bne.n	8007a24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 81a1 	beq.w	8007e4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b10:	4b26      	ldr	r3, [pc, #152]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d116      	bne.n	8007b4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b1c:	4b23      	ldr	r3, [pc, #140]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 8007b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b26:	61d3      	str	r3, [r2, #28]
 8007b28:	4b20      	ldr	r3, [pc, #128]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007b42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b4a:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <HAL_RCC_OscConfig+0x93c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d11a      	bne.n	8007b8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b56:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <HAL_RCC_OscConfig+0x93c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a16      	ldr	r2, [pc, #88]	; (8007bb4 <HAL_RCC_OscConfig+0x93c>)
 8007b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b62:	f7fd ff67 	bl	8005a34 <HAL_GetTick>
 8007b66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b6a:	e009      	b.n	8007b80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b6c:	f7fd ff62 	bl	8005a34 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b64      	cmp	r3, #100	; 0x64
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e3b1      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b80:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <HAL_RCC_OscConfig+0x93c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0ef      	beq.n	8007b6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d10d      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x940>
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	4a02      	ldr	r2, [pc, #8]	; (8007bac <HAL_RCC_OscConfig+0x934>)
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	6213      	str	r3, [r2, #32]
 8007ba8:	e03c      	b.n	8007c24 <HAL_RCC_OscConfig+0x9ac>
 8007baa:	bf00      	nop
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	10908120 	.word	0x10908120
 8007bb4:	40007000 	.word	0x40007000
 8007bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10c      	bne.n	8007be2 <HAL_RCC_OscConfig+0x96a>
 8007bc8:	4bc1      	ldr	r3, [pc, #772]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	4ac0      	ldr	r2, [pc, #768]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	6213      	str	r3, [r2, #32]
 8007bd4:	4bbe      	ldr	r3, [pc, #760]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	4abd      	ldr	r2, [pc, #756]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007bda:	f023 0304 	bic.w	r3, r3, #4
 8007bde:	6213      	str	r3, [r2, #32]
 8007be0:	e020      	b.n	8007c24 <HAL_RCC_OscConfig+0x9ac>
 8007be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d10c      	bne.n	8007c0c <HAL_RCC_OscConfig+0x994>
 8007bf2:	4bb7      	ldr	r3, [pc, #732]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	4ab6      	ldr	r2, [pc, #728]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007bf8:	f043 0304 	orr.w	r3, r3, #4
 8007bfc:	6213      	str	r3, [r2, #32]
 8007bfe:	4bb4      	ldr	r3, [pc, #720]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	4ab3      	ldr	r2, [pc, #716]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6213      	str	r3, [r2, #32]
 8007c0a:	e00b      	b.n	8007c24 <HAL_RCC_OscConfig+0x9ac>
 8007c0c:	4bb0      	ldr	r3, [pc, #704]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	4aaf      	ldr	r2, [pc, #700]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	6213      	str	r3, [r2, #32]
 8007c18:	4bad      	ldr	r3, [pc, #692]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	4aac      	ldr	r2, [pc, #688]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007c1e:	f023 0304 	bic.w	r3, r3, #4
 8007c22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8081 	beq.w	8007d38 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c36:	f7fd fefd 	bl	8005a34 <HAL_GetTick>
 8007c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3e:	e00b      	b.n	8007c58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c40:	f7fd fef8 	bl	8005a34 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e345      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
 8007c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007c60:	2202      	movs	r2, #2
 8007c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	fa93 f2a3 	rbit	r2, r3
 8007c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c84:	2202      	movs	r2, #2
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	fa93 f2a3 	rbit	r2, r3
 8007c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007c9e:	601a      	str	r2, [r3, #0]
  return result;
 8007ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ca4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007ca8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007caa:	fab3 f383 	clz	r3, r3
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	095b      	lsrs	r3, r3, #5
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f043 0302 	orr.w	r3, r3, #2
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d102      	bne.n	8007cc4 <HAL_RCC_OscConfig+0xa4c>
 8007cbe:	4b84      	ldr	r3, [pc, #528]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	e013      	b.n	8007cec <HAL_RCC_OscConfig+0xa74>
 8007cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007ccc:	2202      	movs	r2, #2
 8007cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	fa93 f2a3 	rbit	r2, r3
 8007cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	4b79      	ldr	r3, [pc, #484]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cf0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007cf4:	2102      	movs	r1, #2
 8007cf6:	6011      	str	r1, [r2, #0]
 8007cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cfc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	fa92 f1a2 	rbit	r1, r2
 8007d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007d0e:	6011      	str	r1, [r2, #0]
  return result;
 8007d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d14:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	fab2 f282 	clz	r2, r2
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	f002 021f 	and.w	r2, r2, #31
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d084      	beq.n	8007c40 <HAL_RCC_OscConfig+0x9c8>
 8007d36:	e07f      	b.n	8007e38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d38:	f7fd fe7c 	bl	8005a34 <HAL_GetTick>
 8007d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d40:	e00b      	b.n	8007d5a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d42:	f7fd fe77 	bl	8005a34 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e2c4      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
 8007d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007d62:	2202      	movs	r2, #2
 8007d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	fa93 f2a3 	rbit	r2, r3
 8007d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007d86:	2202      	movs	r2, #2
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	fa93 f2a3 	rbit	r2, r3
 8007d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007da0:	601a      	str	r2, [r3, #0]
  return result;
 8007da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007daa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dac:	fab3 f383 	clz	r3, r3
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	f043 0302 	orr.w	r3, r3, #2
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d102      	bne.n	8007dc6 <HAL_RCC_OscConfig+0xb4e>
 8007dc0:	4b43      	ldr	r3, [pc, #268]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	e013      	b.n	8007dee <HAL_RCC_OscConfig+0xb76>
 8007dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007dce:	2202      	movs	r2, #2
 8007dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	fa93 f2a3 	rbit	r2, r3
 8007de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	4b39      	ldr	r3, [pc, #228]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007df2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007df6:	2102      	movs	r1, #2
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007dfe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	fa92 f1a2 	rbit	r1, r2
 8007e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007e10:	6011      	str	r1, [r2, #0]
  return result;
 8007e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	fab2 f282 	clz	r2, r2
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	f002 021f 	and.w	r2, r2, #31
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d184      	bne.n	8007d42 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007e38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d105      	bne.n	8007e4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e40:	4b23      	ldr	r3, [pc, #140]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	4a22      	ldr	r2, [pc, #136]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8242 	beq.w	80082e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <HAL_RCC_OscConfig+0xc58>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f003 030c 	and.w	r3, r3, #12
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	f000 8213 	beq.w	8008292 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	f040 8162 	bne.w	8008142 <HAL_RCC_OscConfig+0xeca>
 8007e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e82:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	fa93 f2a3 	rbit	r2, r3
 8007e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007ea2:	601a      	str	r2, [r3, #0]
  return result;
 8007ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007eac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eae:	fab3 f383 	clz	r3, r3
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec4:	f7fd fdb6 	bl	8005a34 <HAL_GetTick>
 8007ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ecc:	e00c      	b.n	8007ee8 <HAL_RCC_OscConfig+0xc70>
 8007ece:	bf00      	nop
 8007ed0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed4:	f7fd fdae 	bl	8005a34 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e1fd      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
 8007ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	fa93 f2a3 	rbit	r2, r3
 8007f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007f0c:	601a      	str	r2, [r3, #0]
  return result;
 8007f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007f16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f18:	fab3 f383 	clz	r3, r3
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d102      	bne.n	8007f32 <HAL_RCC_OscConfig+0xcba>
 8007f2c:	4bb0      	ldr	r3, [pc, #704]	; (80081f0 <HAL_RCC_OscConfig+0xf78>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	e027      	b.n	8007f82 <HAL_RCC_OscConfig+0xd0a>
 8007f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f36:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	fa93 f2a3 	rbit	r2, r3
 8007f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f52:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	fa93 f2a3 	rbit	r2, r3
 8007f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	4b9c      	ldr	r3, [pc, #624]	; (80081f0 <HAL_RCC_OscConfig+0xf78>)
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f86:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007f8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007f8e:	6011      	str	r1, [r2, #0]
 8007f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f94:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	fa92 f1a2 	rbit	r1, r2
 8007f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fa2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007fa6:	6011      	str	r1, [r2, #0]
  return result;
 8007fa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	fab2 f282 	clz	r2, r2
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	f042 0220 	orr.w	r2, r2, #32
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	f002 021f 	and.w	r2, r2, #31
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d182      	bne.n	8007ed4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fce:	4b88      	ldr	r3, [pc, #544]	; (80081f0 <HAL_RCC_OscConfig+0xf78>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	497f      	ldr	r1, [pc, #508]	; (80081f0 <HAL_RCC_OscConfig+0xf78>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	604b      	str	r3, [r1, #4]
 8007ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008008:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	fa93 f2a3 	rbit	r2, r3
 8008012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008016:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800801a:	601a      	str	r2, [r3, #0]
  return result;
 800801c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008020:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008024:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008026:	fab3 f383 	clz	r3, r3
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008030:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	461a      	mov	r2, r3
 8008038:	2301      	movs	r3, #1
 800803a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800803c:	f7fd fcfa 	bl	8005a34 <HAL_GetTick>
 8008040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008044:	e009      	b.n	800805a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008046:	f7fd fcf5 	bl	8005a34 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e144      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
 800805a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800805e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800806c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	fa93 f2a3 	rbit	r2, r3
 8008076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800807a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800807e:	601a      	str	r2, [r3, #0]
  return result;
 8008080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008084:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008088:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800808a:	fab3 f383 	clz	r3, r3
 800808e:	b2db      	uxtb	r3, r3
 8008090:	095b      	lsrs	r3, r3, #5
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b01      	cmp	r3, #1
 800809c:	d102      	bne.n	80080a4 <HAL_RCC_OscConfig+0xe2c>
 800809e:	4b54      	ldr	r3, [pc, #336]	; (80081f0 <HAL_RCC_OscConfig+0xf78>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	e027      	b.n	80080f4 <HAL_RCC_OscConfig+0xe7c>
 80080a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80080ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	fa93 f2a3 	rbit	r2, r3
 80080c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80080d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	fa93 f2a3 	rbit	r2, r3
 80080e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	4b3f      	ldr	r3, [pc, #252]	; (80081f0 <HAL_RCC_OscConfig+0xf78>)
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80080fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008100:	6011      	str	r1, [r2, #0]
 8008102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008106:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800810a:	6812      	ldr	r2, [r2, #0]
 800810c:	fa92 f1a2 	rbit	r1, r2
 8008110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008114:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008118:	6011      	str	r1, [r2, #0]
  return result;
 800811a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800811e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	fab2 f282 	clz	r2, r2
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	f042 0220 	orr.w	r2, r2, #32
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	f002 021f 	and.w	r2, r2, #31
 8008134:	2101      	movs	r1, #1
 8008136:	fa01 f202 	lsl.w	r2, r1, r2
 800813a:	4013      	ands	r3, r2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d082      	beq.n	8008046 <HAL_RCC_OscConfig+0xdce>
 8008140:	e0cf      	b.n	80082e2 <HAL_RCC_OscConfig+0x106a>
 8008142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008146:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800814a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800814e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008154:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	fa93 f2a3 	rbit	r2, r3
 800815e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008162:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008166:	601a      	str	r2, [r3, #0]
  return result;
 8008168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800816c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008170:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008172:	fab3 f383 	clz	r3, r3
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800817c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	461a      	mov	r2, r3
 8008184:	2300      	movs	r3, #0
 8008186:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008188:	f7fd fc54 	bl	8005a34 <HAL_GetTick>
 800818c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008190:	e009      	b.n	80081a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008192:	f7fd fc4f 	bl	8005a34 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e09e      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
 80081a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80081ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	fa93 f2a3 	rbit	r2, r3
 80081c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80081ca:	601a      	str	r2, [r3, #0]
  return result;
 80081cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80081d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081d6:	fab3 f383 	clz	r3, r3
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	095b      	lsrs	r3, r3, #5
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f043 0301 	orr.w	r3, r3, #1
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d104      	bne.n	80081f4 <HAL_RCC_OscConfig+0xf7c>
 80081ea:	4b01      	ldr	r3, [pc, #4]	; (80081f0 <HAL_RCC_OscConfig+0xf78>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	e029      	b.n	8008244 <HAL_RCC_OscConfig+0xfcc>
 80081f0:	40021000 	.word	0x40021000
 80081f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80081fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008206:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	fa93 f2a3 	rbit	r2, r3
 8008210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008214:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800821e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800822c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	fa93 f2a3 	rbit	r2, r3
 8008236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800823a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <HAL_RCC_OscConfig+0x1078>)
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008248:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800824c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008256:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	fa92 f1a2 	rbit	r1, r2
 8008260:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008264:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008268:	6011      	str	r1, [r2, #0]
  return result;
 800826a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800826e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008272:	6812      	ldr	r2, [r2, #0]
 8008274:	fab2 f282 	clz	r2, r2
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	f042 0220 	orr.w	r2, r2, #32
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	f002 021f 	and.w	r2, r2, #31
 8008284:	2101      	movs	r1, #1
 8008286:	fa01 f202 	lsl.w	r2, r1, r2
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d180      	bne.n	8008192 <HAL_RCC_OscConfig+0xf1a>
 8008290:	e027      	b.n	80082e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e01e      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80082a6:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <HAL_RCC_OscConfig+0x1078>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80082ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80082b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80082b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d10b      	bne.n	80082de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80082c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80082ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80082ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80082da:	429a      	cmp	r2, r3
 80082dc:	d001      	beq.n	80082e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40021000 	.word	0x40021000

080082f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b09e      	sub	sp, #120	; 0x78
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e162      	b.n	80085d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800830c:	4b90      	ldr	r3, [pc, #576]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d910      	bls.n	800833c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800831a:	4b8d      	ldr	r3, [pc, #564]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f023 0207 	bic.w	r2, r3, #7
 8008322:	498b      	ldr	r1, [pc, #556]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	4313      	orrs	r3, r2
 8008328:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800832a:	4b89      	ldr	r3, [pc, #548]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d001      	beq.n	800833c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e14a      	b.n	80085d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d008      	beq.n	800835a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008348:	4b82      	ldr	r3, [pc, #520]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	497f      	ldr	r1, [pc, #508]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 8008356:	4313      	orrs	r3, r2
 8008358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 80dc 	beq.w	8008520 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d13c      	bne.n	80083ea <HAL_RCC_ClockConfig+0xf6>
 8008370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008374:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008378:	fa93 f3a3 	rbit	r3, r3
 800837c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800837e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008380:	fab3 f383 	clz	r3, r3
 8008384:	b2db      	uxtb	r3, r3
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b01      	cmp	r3, #1
 8008392:	d102      	bne.n	800839a <HAL_RCC_ClockConfig+0xa6>
 8008394:	4b6f      	ldr	r3, [pc, #444]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	e00f      	b.n	80083ba <HAL_RCC_ClockConfig+0xc6>
 800839a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800839e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083a2:	fa93 f3a3 	rbit	r3, r3
 80083a6:	667b      	str	r3, [r7, #100]	; 0x64
 80083a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083ac:	663b      	str	r3, [r7, #96]	; 0x60
 80083ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083b0:	fa93 f3a3 	rbit	r3, r3
 80083b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083b6:	4b67      	ldr	r3, [pc, #412]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80083be:	65ba      	str	r2, [r7, #88]	; 0x58
 80083c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083c2:	fa92 f2a2 	rbit	r2, r2
 80083c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80083c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083ca:	fab2 f282 	clz	r2, r2
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	f042 0220 	orr.w	r2, r2, #32
 80083d4:	b2d2      	uxtb	r2, r2
 80083d6:	f002 021f 	and.w	r2, r2, #31
 80083da:	2101      	movs	r1, #1
 80083dc:	fa01 f202 	lsl.w	r2, r1, r2
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d17b      	bne.n	80084de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e0f3      	b.n	80085d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d13c      	bne.n	800846c <HAL_RCC_ClockConfig+0x178>
 80083f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fa:	fa93 f3a3 	rbit	r3, r3
 80083fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008402:	fab3 f383 	clz	r3, r3
 8008406:	b2db      	uxtb	r3, r3
 8008408:	095b      	lsrs	r3, r3, #5
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f043 0301 	orr.w	r3, r3, #1
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b01      	cmp	r3, #1
 8008414:	d102      	bne.n	800841c <HAL_RCC_ClockConfig+0x128>
 8008416:	4b4f      	ldr	r3, [pc, #316]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	e00f      	b.n	800843c <HAL_RCC_ClockConfig+0x148>
 800841c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008420:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008424:	fa93 f3a3 	rbit	r3, r3
 8008428:	647b      	str	r3, [r7, #68]	; 0x44
 800842a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800842e:	643b      	str	r3, [r7, #64]	; 0x40
 8008430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008432:	fa93 f3a3 	rbit	r3, r3
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008438:	4b46      	ldr	r3, [pc, #280]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008440:	63ba      	str	r2, [r7, #56]	; 0x38
 8008442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008444:	fa92 f2a2 	rbit	r2, r2
 8008448:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800844a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800844c:	fab2 f282 	clz	r2, r2
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	f042 0220 	orr.w	r2, r2, #32
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	f002 021f 	and.w	r2, r2, #31
 800845c:	2101      	movs	r1, #1
 800845e:	fa01 f202 	lsl.w	r2, r1, r2
 8008462:	4013      	ands	r3, r2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d13a      	bne.n	80084de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e0b2      	b.n	80085d2 <HAL_RCC_ClockConfig+0x2de>
 800846c:	2302      	movs	r3, #2
 800846e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	fa93 f3a3 	rbit	r3, r3
 8008476:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800847a:	fab3 f383 	clz	r3, r3
 800847e:	b2db      	uxtb	r3, r3
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b01      	cmp	r3, #1
 800848c:	d102      	bne.n	8008494 <HAL_RCC_ClockConfig+0x1a0>
 800848e:	4b31      	ldr	r3, [pc, #196]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	e00d      	b.n	80084b0 <HAL_RCC_ClockConfig+0x1bc>
 8008494:	2302      	movs	r3, #2
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	fa93 f3a3 	rbit	r3, r3
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
 80084a0:	2302      	movs	r3, #2
 80084a2:	623b      	str	r3, [r7, #32]
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	fa93 f3a3 	rbit	r3, r3
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	4b29      	ldr	r3, [pc, #164]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	2202      	movs	r2, #2
 80084b2:	61ba      	str	r2, [r7, #24]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	fa92 f2a2 	rbit	r2, r2
 80084ba:	617a      	str	r2, [r7, #20]
  return result;
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	fab2 f282 	clz	r2, r2
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	f042 0220 	orr.w	r2, r2, #32
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	f002 021f 	and.w	r2, r2, #31
 80084ce:	2101      	movs	r1, #1
 80084d0:	fa01 f202 	lsl.w	r2, r1, r2
 80084d4:	4013      	ands	r3, r2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e079      	b.n	80085d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084de:	4b1d      	ldr	r3, [pc, #116]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f023 0203 	bic.w	r2, r3, #3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	491a      	ldr	r1, [pc, #104]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084f0:	f7fd faa0 	bl	8005a34 <HAL_GetTick>
 80084f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084f6:	e00a      	b.n	800850e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084f8:	f7fd fa9c 	bl	8005a34 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	f241 3288 	movw	r2, #5000	; 0x1388
 8008506:	4293      	cmp	r3, r2
 8008508:	d901      	bls.n	800850e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e061      	b.n	80085d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800850e:	4b11      	ldr	r3, [pc, #68]	; (8008554 <HAL_RCC_ClockConfig+0x260>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f003 020c 	and.w	r2, r3, #12
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	429a      	cmp	r2, r3
 800851e:	d1eb      	bne.n	80084f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008520:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d214      	bcs.n	8008558 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800852e:	4b08      	ldr	r3, [pc, #32]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f023 0207 	bic.w	r2, r3, #7
 8008536:	4906      	ldr	r1, [pc, #24]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	4313      	orrs	r3, r2
 800853c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <HAL_RCC_ClockConfig+0x25c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d005      	beq.n	8008558 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e040      	b.n	80085d2 <HAL_RCC_ClockConfig+0x2de>
 8008550:	40022000 	.word	0x40022000
 8008554:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	d008      	beq.n	8008576 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008564:	4b1d      	ldr	r3, [pc, #116]	; (80085dc <HAL_RCC_ClockConfig+0x2e8>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	491a      	ldr	r1, [pc, #104]	; (80085dc <HAL_RCC_ClockConfig+0x2e8>)
 8008572:	4313      	orrs	r3, r2
 8008574:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008582:	4b16      	ldr	r3, [pc, #88]	; (80085dc <HAL_RCC_ClockConfig+0x2e8>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4912      	ldr	r1, [pc, #72]	; (80085dc <HAL_RCC_ClockConfig+0x2e8>)
 8008592:	4313      	orrs	r3, r2
 8008594:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008596:	f000 f829 	bl	80085ec <HAL_RCC_GetSysClockFreq>
 800859a:	4601      	mov	r1, r0
 800859c:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <HAL_RCC_ClockConfig+0x2e8>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085a4:	22f0      	movs	r2, #240	; 0xf0
 80085a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	fa92 f2a2 	rbit	r2, r2
 80085ae:	60fa      	str	r2, [r7, #12]
  return result;
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	fab2 f282 	clz	r2, r2
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	40d3      	lsrs	r3, r2
 80085ba:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <HAL_RCC_ClockConfig+0x2ec>)
 80085bc:	5cd3      	ldrb	r3, [r2, r3]
 80085be:	fa21 f303 	lsr.w	r3, r1, r3
 80085c2:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <HAL_RCC_ClockConfig+0x2f0>)
 80085c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80085c6:	4b08      	ldr	r3, [pc, #32]	; (80085e8 <HAL_RCC_ClockConfig+0x2f4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fd f9ee 	bl	80059ac <HAL_InitTick>
  
  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3778      	adds	r7, #120	; 0x78
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40021000 	.word	0x40021000
 80085e0:	0800d7a8 	.word	0x0800d7a8
 80085e4:	20000054 	.word	0x20000054
 80085e8:	20000060 	.word	0x20000060

080085ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b08b      	sub	sp, #44	; 0x2c
 80085f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	61fb      	str	r3, [r7, #28]
 80085f6:	2300      	movs	r3, #0
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	2300      	movs	r3, #0
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
 80085fe:	2300      	movs	r3, #0
 8008600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f003 030c 	and.w	r3, r3, #12
 8008612:	2b04      	cmp	r3, #4
 8008614:	d002      	beq.n	800861c <HAL_RCC_GetSysClockFreq+0x30>
 8008616:	2b08      	cmp	r3, #8
 8008618:	d003      	beq.n	8008622 <HAL_RCC_GetSysClockFreq+0x36>
 800861a:	e03c      	b.n	8008696 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800861c:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800861e:	623b      	str	r3, [r7, #32]
      break;
 8008620:	e03c      	b.n	800869c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008628:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800862c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	fa92 f2a2 	rbit	r2, r2
 8008634:	607a      	str	r2, [r7, #4]
  return result;
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	fab2 f282 	clz	r2, r2
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	40d3      	lsrs	r3, r2
 8008640:	4a1c      	ldr	r2, [pc, #112]	; (80086b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008642:	5cd3      	ldrb	r3, [r2, r3]
 8008644:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008646:	4b19      	ldr	r3, [pc, #100]	; (80086ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	220f      	movs	r2, #15
 8008650:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	fa92 f2a2 	rbit	r2, r2
 8008658:	60fa      	str	r2, [r7, #12]
  return result;
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	fab2 f282 	clz	r2, r2
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	40d3      	lsrs	r3, r2
 8008664:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008666:	5cd3      	ldrb	r3, [r2, r3]
 8008668:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008674:	4a0e      	ldr	r2, [pc, #56]	; (80086b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	fbb2 f2f3 	udiv	r2, r2, r3
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	fb02 f303 	mul.w	r3, r2, r3
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
 8008684:	e004      	b.n	8008690 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	4a0c      	ldr	r2, [pc, #48]	; (80086bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800868a:	fb02 f303 	mul.w	r3, r2, r3
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	623b      	str	r3, [r7, #32]
      break;
 8008694:	e002      	b.n	800869c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008698:	623b      	str	r3, [r7, #32]
      break;
 800869a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800869c:	6a3b      	ldr	r3, [r7, #32]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	372c      	adds	r7, #44	; 0x2c
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40021000 	.word	0x40021000
 80086b0:	007a1200 	.word	0x007a1200
 80086b4:	0800d7c0 	.word	0x0800d7c0
 80086b8:	0800d7d0 	.word	0x0800d7d0
 80086bc:	003d0900 	.word	0x003d0900

080086c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086c4:	4b03      	ldr	r3, [pc, #12]	; (80086d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80086c6:	681b      	ldr	r3, [r3, #0]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	20000054 	.word	0x20000054

080086d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80086de:	f7ff ffef 	bl	80086c0 <HAL_RCC_GetHCLKFreq>
 80086e2:	4601      	mov	r1, r0
 80086e4:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80086f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	fa92 f2a2 	rbit	r2, r2
 80086f8:	603a      	str	r2, [r7, #0]
  return result;
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	fab2 f282 	clz	r2, r2
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	40d3      	lsrs	r3, r2
 8008704:	4a04      	ldr	r2, [pc, #16]	; (8008718 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008706:	5cd3      	ldrb	r3, [r2, r3]
 8008708:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40021000 	.word	0x40021000
 8008718:	0800d7b8 	.word	0x0800d7b8

0800871c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008722:	f7ff ffcd 	bl	80086c0 <HAL_RCC_GetHCLKFreq>
 8008726:	4601      	mov	r1, r0
 8008728:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008730:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008734:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	fa92 f2a2 	rbit	r2, r2
 800873c:	603a      	str	r2, [r7, #0]
  return result;
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	fab2 f282 	clz	r2, r2
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	40d3      	lsrs	r3, r2
 8008748:	4a04      	ldr	r2, [pc, #16]	; (800875c <HAL_RCC_GetPCLK2Freq+0x40>)
 800874a:	5cd3      	ldrb	r3, [r2, r3]
 800874c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40021000 	.word	0x40021000
 800875c:	0800d7b8 	.word	0x0800d7b8

08008760 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b092      	sub	sp, #72	; 0x48
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008770:	2300      	movs	r3, #0
 8008772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 80d4 	beq.w	800892c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008784:	4b4e      	ldr	r3, [pc, #312]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10e      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008790:	4b4b      	ldr	r3, [pc, #300]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	4a4a      	ldr	r2, [pc, #296]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800879a:	61d3      	str	r3, [r2, #28]
 800879c:	4b48      	ldr	r3, [pc, #288]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a4:	60bb      	str	r3, [r7, #8]
 80087a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087ae:	4b45      	ldr	r3, [pc, #276]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d118      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087ba:	4b42      	ldr	r3, [pc, #264]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a41      	ldr	r2, [pc, #260]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80087c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087c6:	f7fd f935 	bl	8005a34 <HAL_GetTick>
 80087ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087cc:	e008      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ce:	f7fd f931 	bl	8005a34 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b64      	cmp	r3, #100	; 0x64
 80087da:	d901      	bls.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e13c      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087e0:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087ec:	4b34      	ldr	r3, [pc, #208]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 8084 	beq.w	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008808:	429a      	cmp	r2, r3
 800880a:	d07c      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800880c:	4b2c      	ldr	r3, [pc, #176]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800881a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	fa93 f3a3 	rbit	r3, r3
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008826:	fab3 f383 	clz	r3, r3
 800882a:	b2db      	uxtb	r3, r3
 800882c:	461a      	mov	r2, r3
 800882e:	4b26      	ldr	r3, [pc, #152]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	461a      	mov	r2, r3
 8008836:	2301      	movs	r3, #1
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800883e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008842:	fa93 f3a3 	rbit	r3, r3
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800884a:	fab3 f383 	clz	r3, r3
 800884e:	b2db      	uxtb	r3, r3
 8008850:	461a      	mov	r2, r3
 8008852:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	461a      	mov	r2, r3
 800885a:	2300      	movs	r3, #0
 800885c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800885e:	4a18      	ldr	r2, [pc, #96]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008862:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d04b      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800886e:	f7fd f8e1 	bl	8005a34 <HAL_GetTick>
 8008872:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008874:	e00a      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008876:	f7fd f8dd 	bl	8005a34 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	f241 3288 	movw	r2, #5000	; 0x1388
 8008884:	4293      	cmp	r3, r2
 8008886:	d901      	bls.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e0e6      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800888c:	2302      	movs	r3, #2
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	fa93 f3a3 	rbit	r3, r3
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
 8008898:	2302      	movs	r3, #2
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	fa93 f3a3 	rbit	r3, r3
 80088a2:	61fb      	str	r3, [r7, #28]
  return result;
 80088a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088a6:	fab3 f383 	clz	r3, r3
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f043 0302 	orr.w	r3, r3, #2
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d108      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80088ba:	4b01      	ldr	r3, [pc, #4]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	e00d      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80088c0:	40021000 	.word	0x40021000
 80088c4:	40007000 	.word	0x40007000
 80088c8:	10908100 	.word	0x10908100
 80088cc:	2302      	movs	r3, #2
 80088ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	fa93 f3a3 	rbit	r3, r3
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	4b62      	ldr	r3, [pc, #392]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2202      	movs	r2, #2
 80088de:	613a      	str	r2, [r7, #16]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	fa92 f2a2 	rbit	r2, r2
 80088e6:	60fa      	str	r2, [r7, #12]
  return result;
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	fab2 f282 	clz	r2, r2
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	f002 021f 	and.w	r2, r2, #31
 80088fa:	2101      	movs	r1, #1
 80088fc:	fa01 f202 	lsl.w	r2, r1, r2
 8008900:	4013      	ands	r3, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0b7      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008906:	4b57      	ldr	r3, [pc, #348]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	4954      	ldr	r1, [pc, #336]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008914:	4313      	orrs	r3, r2
 8008916:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008918:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800891c:	2b01      	cmp	r3, #1
 800891e:	d105      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008920:	4b50      	ldr	r3, [pc, #320]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	4a4f      	ldr	r2, [pc, #316]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800892a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008938:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	f023 0203 	bic.w	r2, r3, #3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	4947      	ldr	r1, [pc, #284]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008946:	4313      	orrs	r3, r2
 8008948:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b00      	cmp	r3, #0
 8008954:	d008      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008956:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	f023 0210 	bic.w	r2, r3, #16
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	4940      	ldr	r1, [pc, #256]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008964:	4313      	orrs	r3, r2
 8008966:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008970:	2b00      	cmp	r3, #0
 8008972:	d008      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008974:	4b3b      	ldr	r3, [pc, #236]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	f023 0220 	bic.w	r2, r3, #32
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	4938      	ldr	r1, [pc, #224]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008982:	4313      	orrs	r3, r2
 8008984:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d008      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008992:	4b34      	ldr	r3, [pc, #208]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	4931      	ldr	r1, [pc, #196]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089b0:	4b2c      	ldr	r3, [pc, #176]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	4929      	ldr	r1, [pc, #164]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d008      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80089ce:	4b25      	ldr	r3, [pc, #148]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	4922      	ldr	r1, [pc, #136]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d008      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80089ec:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	491a      	ldr	r1, [pc, #104]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d008      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008a0a:	4b16      	ldr	r3, [pc, #88]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	4913      	ldr	r1, [pc, #76]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d008      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008a28:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	490b      	ldr	r1, [pc, #44]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008a46:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	4904      	ldr	r1, [pc, #16]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3748      	adds	r7, #72	; 0x48
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40021000 	.word	0x40021000

08008a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e09d      	b.n	8008bb6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d108      	bne.n	8008a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a8a:	d009      	beq.n	8008aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	61da      	str	r2, [r3, #28]
 8008a92:	e005      	b.n	8008aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7fb fd94 	bl	80045e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ad6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ae0:	d902      	bls.n	8008ae8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e002      	b.n	8008aee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008af6:	d007      	beq.n	8008b08 <HAL_SPI_Init+0xa0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b00:	d002      	beq.n	8008b08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4a:	ea42 0103 	orr.w	r1, r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	f003 0204 	and.w	r2, r3, #4
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b76:	f003 0308 	and.w	r3, r3, #8
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b84:	ea42 0103 	orr.w	r1, r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69da      	ldr	r2, [r3, #28]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ba4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b088      	sub	sp, #32
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_SPI_Transmit+0x22>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e15f      	b.n	8008ea0 <HAL_SPI_Transmit+0x2e2>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008be8:	f7fc ff24 	bl	8005a34 <HAL_GetTick>
 8008bec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d002      	beq.n	8008c04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c02:	e148      	b.n	8008e96 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <HAL_SPI_Transmit+0x52>
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c14:	e13f      	b.n	8008e96 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	88fa      	ldrh	r2, [r7, #6]
 8008c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	88fa      	ldrh	r2, [r7, #6]
 8008c34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c60:	d10f      	bne.n	8008c82 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8c:	2b40      	cmp	r3, #64	; 0x40
 8008c8e:	d007      	beq.n	8008ca0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ca8:	d94f      	bls.n	8008d4a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <HAL_SPI_Transmit+0xfa>
 8008cb2:	8afb      	ldrh	r3, [r7, #22]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d142      	bne.n	8008d3e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	881a      	ldrh	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc8:	1c9a      	adds	r2, r3, #2
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008cdc:	e02f      	b.n	8008d3e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d112      	bne.n	8008d12 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	881a      	ldrh	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	1c9a      	adds	r2, r3, #2
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d10:	e015      	b.n	8008d3e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d12:	f7fc fe8f 	bl	8005a34 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d803      	bhi.n	8008d2a <HAL_SPI_Transmit+0x16c>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d28:	d102      	bne.n	8008d30 <HAL_SPI_Transmit+0x172>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d106      	bne.n	8008d3e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008d3c:	e0ab      	b.n	8008e96 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1ca      	bne.n	8008cde <HAL_SPI_Transmit+0x120>
 8008d48:	e080      	b.n	8008e4c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <HAL_SPI_Transmit+0x19a>
 8008d52:	8afb      	ldrh	r3, [r7, #22]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d174      	bne.n	8008e42 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d912      	bls.n	8008d88 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	881a      	ldrh	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	1c9a      	adds	r2, r3, #2
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b02      	subs	r3, #2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d86:	e05c      	b.n	8008e42 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	7812      	ldrb	r2, [r2, #0]
 8008d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008dae:	e048      	b.n	8008e42 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d12b      	bne.n	8008e16 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d912      	bls.n	8008dee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dcc:	881a      	ldrh	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	1c9a      	adds	r2, r3, #2
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	3b02      	subs	r3, #2
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dec:	e029      	b.n	8008e42 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e14:	e015      	b.n	8008e42 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e16:	f7fc fe0d 	bl	8005a34 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d803      	bhi.n	8008e2e <HAL_SPI_Transmit+0x270>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d102      	bne.n	8008e34 <HAL_SPI_Transmit+0x276>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008e40:	e029      	b.n	8008e96 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1b1      	bne.n	8008db0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fbd7 	bl	8009604 <SPI_EndRxTxTransaction>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	613b      	str	r3, [r7, #16]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	613b      	str	r3, [r7, #16]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	77fb      	strb	r3, [r7, #31]
 8008e8c:	e003      	b.n	8008e96 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008e9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_SPI_Transmit_DMA+0x20>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e0d4      	b.n	8009072 <HAL_SPI_Transmit_DMA+0x1ca>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d002      	beq.n	8008ee2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008edc:	2302      	movs	r3, #2
 8008ede:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ee0:	e0c2      	b.n	8009068 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <HAL_SPI_Transmit_DMA+0x46>
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ef2:	e0b9      	b.n	8009068 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2203      	movs	r2, #3
 8008ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	88fa      	ldrh	r2, [r7, #6]
 8008f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	88fa      	ldrh	r2, [r7, #6]
 8008f12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f3e:	d10f      	bne.n	8008f60 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	4a45      	ldr	r2, [pc, #276]	; (800907c <HAL_SPI_Transmit_DMA+0x1d4>)
 8008f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6c:	4a44      	ldr	r2, [pc, #272]	; (8009080 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008f6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f74:	4a43      	ldr	r2, [pc, #268]	; (8009084 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f8e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f98:	d82d      	bhi.n	8008ff6 <HAL_SPI_Transmit_DMA+0x14e>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa4:	d127      	bne.n	8008ff6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10f      	bne.n	8008fd4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fc2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	085b      	lsrs	r3, r3, #1
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fd2:	e010      	b.n	8008ff6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fe2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3301      	adds	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	4619      	mov	r1, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	330c      	adds	r3, #12
 8009006:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800900e:	f7fc fe99 	bl	8005d44 <HAL_DMA_Start_IT>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901c:	f043 0210 	orr.w	r2, r3, #16
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009028:	e01e      	b.n	8009068 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	2b40      	cmp	r3, #64	; 0x40
 8009036:	d007      	beq.n	8009048 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009046:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0220 	orr.w	r2, r2, #32
 8009056:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0202 	orr.w	r2, r2, #2
 8009066:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	08009343 	.word	0x08009343
 8009080:	0800929d 	.word	0x0800929d
 8009084:	0800935f 	.word	0x0800935f

08009088 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	099b      	lsrs	r3, r3, #6
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10f      	bne.n	80090cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	099b      	lsrs	r3, r3, #6
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4798      	blx	r3
    return;
 80090ca:	e0d7      	b.n	800927c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	085b      	lsrs	r3, r3, #1
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <HAL_SPI_IRQHandler+0x66>
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	09db      	lsrs	r3, r3, #7
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
    return;
 80090ec:	e0c6      	b.n	800927c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10c      	bne.n	8009114 <HAL_SPI_IRQHandler+0x8c>
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	099b      	lsrs	r3, r3, #6
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d106      	bne.n	8009114 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	0a1b      	lsrs	r3, r3, #8
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 80b4 	beq.w	800927c <HAL_SPI_IRQHandler+0x1f4>
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 80ad 	beq.w	800927c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	099b      	lsrs	r3, r3, #6
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d023      	beq.n	8009176 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b03      	cmp	r3, #3
 8009138:	d011      	beq.n	800915e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800913e:	f043 0204 	orr.w	r2, r3, #4
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	e00b      	b.n	8009176 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800915e:	2300      	movs	r3, #0
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	693b      	ldr	r3, [r7, #16]
        return;
 8009174:	e082      	b.n	800927c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d014      	beq.n	80091ac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009186:	f043 0201 	orr.w	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	0a1b      	lsrs	r3, r3, #8
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00c      	beq.n	80091d2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091bc:	f043 0208 	orr.w	r2, r3, #8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091c4:	2300      	movs	r3, #0
 80091c6:	60bb      	str	r3, [r7, #8]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	60bb      	str	r3, [r7, #8]
 80091d0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d04f      	beq.n	800927a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091e8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <HAL_SPI_IRQHandler+0x17e>
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d034      	beq.n	8009270 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0203 	bic.w	r2, r2, #3
 8009214:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921a:	2b00      	cmp	r3, #0
 800921c:	d011      	beq.n	8009242 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009222:	4a18      	ldr	r2, [pc, #96]	; (8009284 <HAL_SPI_IRQHandler+0x1fc>)
 8009224:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922a:	4618      	mov	r0, r3
 800922c:	f7fc fe22 	bl	8005e74 <HAL_DMA_Abort_IT>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800923a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009246:	2b00      	cmp	r3, #0
 8009248:	d016      	beq.n	8009278 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924e:	4a0d      	ldr	r2, [pc, #52]	; (8009284 <HAL_SPI_IRQHandler+0x1fc>)
 8009250:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009256:	4618      	mov	r0, r3
 8009258:	f7fc fe0c 	bl	8005e74 <HAL_DMA_Abort_IT>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800926e:	e003      	b.n	8009278 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fb fd93 	bl	8004d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009276:	e000      	b.n	800927a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009278:	bf00      	nop
    return;
 800927a:	bf00      	nop
  }
}
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	0800939f 	.word	0x0800939f

08009288 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092aa:	f7fc fbc3 	bl	8005a34 <HAL_GetTick>
 80092ae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	d03b      	beq.n	8009336 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0220 	bic.w	r2, r2, #32
 80092cc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0202 	bic.w	r2, r2, #2
 80092dc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	2164      	movs	r1, #100	; 0x64
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f000 f98e 	bl	8009604 <SPI_EndRxTxTransaction>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f2:	f043 0220 	orr.w	r2, r3, #32
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10a      	bne.n	8009318 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2200      	movs	r2, #0
 800931c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800932e:	6978      	ldr	r0, [r7, #20]
 8009330:	f7fb fd34 	bl	8004d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009334:	e002      	b.n	800933c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009336:	6978      	ldr	r0, [r7, #20]
 8009338:	f7fb fd46 	bl	8004dc8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7ff ff99 	bl	8009288 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0203 	bic.w	r2, r2, #3
 800937a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009380:	f043 0210 	orr.w	r2, r3, #16
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7fb fd03 	bl	8004d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093aa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7fb fcee 	bl	8004d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093c0:	bf00      	nop
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	4613      	mov	r3, r2
 80093d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093d8:	f7fc fb2c 	bl	8005a34 <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	1a9b      	subs	r3, r3, r2
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4413      	add	r3, r2
 80093e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093e8:	f7fc fb24 	bl	8005a34 <HAL_GetTick>
 80093ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093ee:	4b39      	ldr	r3, [pc, #228]	; (80094d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	015b      	lsls	r3, r3, #5
 80093f4:	0d1b      	lsrs	r3, r3, #20
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	fb02 f303 	mul.w	r3, r2, r3
 80093fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093fe:	e054      	b.n	80094aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d050      	beq.n	80094aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009408:	f7fc fb14 	bl	8005a34 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	429a      	cmp	r2, r3
 8009416:	d902      	bls.n	800941e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d13d      	bne.n	800949a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800942c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009436:	d111      	bne.n	800945c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009440:	d004      	beq.n	800944c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800944a:	d107      	bne.n	800945c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800945a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009464:	d10f      	bne.n	8009486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e017      	b.n	80094ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	4013      	ands	r3, r2
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	bf0c      	ite	eq
 80094ba:	2301      	moveq	r3, #1
 80094bc:	2300      	movne	r3, #0
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	461a      	mov	r2, r3
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d19b      	bne.n	8009400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3720      	adds	r7, #32
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20000054 	.word	0x20000054

080094d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	; 0x28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80094ea:	f7fc faa3 	bl	8005a34 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	4413      	add	r3, r2
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80094fa:	f7fc fa9b 	bl	8005a34 <HAL_GetTick>
 80094fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	330c      	adds	r3, #12
 8009506:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009508:	4b3d      	ldr	r3, [pc, #244]	; (8009600 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	00da      	lsls	r2, r3, #3
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	0d1b      	lsrs	r3, r3, #20
 8009518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009520:	e060      	b.n	80095e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009528:	d107      	bne.n	800953a <SPI_WaitFifoStateUntilTimeout+0x62>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009538:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009540:	d050      	beq.n	80095e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009542:	f7fc fa77 	bl	8005a34 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800954e:	429a      	cmp	r2, r3
 8009550:	d902      	bls.n	8009558 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	2b00      	cmp	r3, #0
 8009556:	d13d      	bne.n	80095d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009570:	d111      	bne.n	8009596 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800957a:	d004      	beq.n	8009586 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009584:	d107      	bne.n	8009596 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009594:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800959e:	d10f      	bne.n	80095c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e010      	b.n	80095f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	4013      	ands	r3, r2
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d196      	bne.n	8009522 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3728      	adds	r7, #40	; 0x28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000054 	.word	0x20000054

08009604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af02      	add	r7, sp, #8
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2200      	movs	r2, #0
 8009618:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff ff5b 	bl	80094d8 <SPI_WaitFifoStateUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d007      	beq.n	8009638 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800962c:	f043 0220 	orr.w	r2, r3, #32
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e027      	b.n	8009688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2200      	movs	r2, #0
 8009640:	2180      	movs	r1, #128	; 0x80
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7ff fec0 	bl	80093c8 <SPI_WaitFlagStateUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009652:	f043 0220 	orr.w	r2, r3, #32
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e014      	b.n	8009688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2200      	movs	r2, #0
 8009666:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff ff34 	bl	80094d8 <SPI_WaitFifoStateUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800967a:	f043 0220 	orr.w	r2, r3, #32
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e000      	b.n	8009688 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e040      	b.n	8009724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7fb f80e 	bl	80046d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2224      	movs	r2, #36	; 0x24
 80096bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fbbc 	bl	8009e4c <UART_SetConfig>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e022      	b.n	8009724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fce6 	bl	800a0b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800970a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0201 	orr.w	r2, r2, #1
 800971a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fd6d 	bl	800a1fc <UART_CheckIdleState>
 8009722:	4603      	mov	r3, r0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08a      	sub	sp, #40	; 0x28
 8009730:	af02      	add	r7, sp, #8
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	4613      	mov	r3, r2
 800973a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009740:	2b20      	cmp	r3, #32
 8009742:	d178      	bne.n	8009836 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <HAL_UART_Transmit+0x24>
 800974a:	88fb      	ldrh	r3, [r7, #6]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e071      	b.n	8009838 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2221      	movs	r2, #33	; 0x21
 8009760:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009762:	f7fc f967 	bl	8005a34 <HAL_GetTick>
 8009766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	88fa      	ldrh	r2, [r7, #6]
 800976c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009780:	d108      	bne.n	8009794 <HAL_UART_Transmit+0x68>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d104      	bne.n	8009794 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	61bb      	str	r3, [r7, #24]
 8009792:	e003      	b.n	800979c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800979c:	e030      	b.n	8009800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2200      	movs	r2, #0
 80097a6:	2180      	movs	r1, #128	; 0x80
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 fdcf 	bl	800a34c <UART_WaitOnFlagUntilTimeout>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d004      	beq.n	80097be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2220      	movs	r2, #32
 80097b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e03c      	b.n	8009838 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	881a      	ldrh	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097d0:	b292      	uxth	r2, r2
 80097d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	3302      	adds	r3, #2
 80097d8:	61bb      	str	r3, [r7, #24]
 80097da:	e008      	b.n	80097ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	b292      	uxth	r2, r2
 80097e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	3301      	adds	r3, #1
 80097ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009806:	b29b      	uxth	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1c8      	bne.n	800979e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	2140      	movs	r1, #64	; 0x40
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fd98 	bl	800a34c <UART_WaitOnFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d004      	beq.n	800982c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2220      	movs	r2, #32
 8009826:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e005      	b.n	8009838 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2220      	movs	r2, #32
 8009830:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e000      	b.n	8009838 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009836:	2302      	movs	r3, #2
  }
}
 8009838:	4618      	mov	r0, r3
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b0ba      	sub	sp, #232	; 0xe8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009866:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800986a:	f640 030f 	movw	r3, #2063	; 0x80f
 800986e:	4013      	ands	r3, r2
 8009870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d115      	bne.n	80098a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800987c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00f      	beq.n	80098a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800988c:	f003 0320 	and.w	r3, r3, #32
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 82ab 	beq.w	8009df4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
      }
      return;
 80098a6:	e2a5      	b.n	8009df4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8117 	beq.w	8009ae0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80098b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80098be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80098c2:	4b85      	ldr	r3, [pc, #532]	; (8009ad8 <HAL_UART_IRQHandler+0x298>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 810a 	beq.w	8009ae0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d011      	beq.n	80098fc <HAL_UART_IRQHandler+0xbc>
 80098d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2201      	movs	r2, #1
 80098ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098f2:	f043 0201 	orr.w	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d011      	beq.n	800992c <HAL_UART_IRQHandler+0xec>
 8009908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00b      	beq.n	800992c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2202      	movs	r2, #2
 800991a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009922:	f043 0204 	orr.w	r2, r3, #4
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009930:	f003 0304 	and.w	r3, r3, #4
 8009934:	2b00      	cmp	r3, #0
 8009936:	d011      	beq.n	800995c <HAL_UART_IRQHandler+0x11c>
 8009938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2204      	movs	r2, #4
 800994a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009952:	f043 0202 	orr.w	r2, r3, #2
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800995c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009960:	f003 0308 	and.w	r3, r3, #8
 8009964:	2b00      	cmp	r3, #0
 8009966:	d017      	beq.n	8009998 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009978:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2208      	movs	r2, #8
 8009986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800998e:	f043 0208 	orr.w	r2, r3, #8
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800999c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d012      	beq.n	80099ca <HAL_UART_IRQHandler+0x18a>
 80099a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00c      	beq.n	80099ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099c0:	f043 0220 	orr.w	r2, r3, #32
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 8211 	beq.w	8009df8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80099d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099da:	f003 0320 	and.w	r3, r3, #32
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00d      	beq.n	80099fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80099e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099e6:	f003 0320 	and.w	r3, r3, #32
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d007      	beq.n	80099fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d005      	beq.n	8009a22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d04f      	beq.n	8009ac2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fcf9 	bl	800a41a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a32:	2b40      	cmp	r3, #64	; 0x40
 8009a34:	d141      	bne.n	8009aba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a44:	e853 3f00 	ldrex	r3, [r3]
 8009a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1d9      	bne.n	8009a36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d013      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8e:	4a13      	ldr	r2, [pc, #76]	; (8009adc <HAL_UART_IRQHandler+0x29c>)
 8009a90:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fc f9ec 	bl	8005e74 <HAL_DMA_Abort_IT>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d017      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009aac:	4610      	mov	r0, r2
 8009aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab0:	e00f      	b.n	8009ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f9b4 	bl	8009e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab8:	e00b      	b.n	8009ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f9b0 	bl	8009e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac0:	e007      	b.n	8009ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9ac 	bl	8009e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009ad0:	e192      	b.n	8009df8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad2:	bf00      	nop
    return;
 8009ad4:	e190      	b.n	8009df8 <HAL_UART_IRQHandler+0x5b8>
 8009ad6:	bf00      	nop
 8009ad8:	04000120 	.word	0x04000120
 8009adc:	0800a4e3 	.word	0x0800a4e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	f040 814b 	bne.w	8009d80 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aee:	f003 0310 	and.w	r3, r3, #16
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8144 	beq.w	8009d80 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009afc:	f003 0310 	and.w	r3, r3, #16
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 813d 	beq.w	8009d80 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2210      	movs	r2, #16
 8009b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b18:	2b40      	cmp	r3, #64	; 0x40
 8009b1a:	f040 80b5 	bne.w	8009c88 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8164 	beq.w	8009dfc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	f080 815c 	bcs.w	8009dfc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	f000 8086 	beq.w	8009c66 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b88:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b94:	e841 2300 	strex	r3, r2, [r1]
 8009b98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1da      	bne.n	8009b5a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3308      	adds	r3, #8
 8009baa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bb6:	f023 0301 	bic.w	r3, r3, #1
 8009bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bc8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009bd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e1      	bne.n	8009ba4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3308      	adds	r3, #8
 8009be6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3308      	adds	r3, #8
 8009c00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c0c:	e841 2300 	strex	r3, r2, [r1]
 8009c10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1e3      	bne.n	8009be0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c36:	f023 0310 	bic.w	r3, r3, #16
 8009c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e4      	bne.n	8009c26 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fc f8ce 	bl	8005e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f8d7 	bl	8009e34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c86:	e0b9      	b.n	8009dfc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 80ab 	beq.w	8009e00 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009caa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 80a6 	beq.w	8009e00 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e4      	bne.n	8009cb4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d0e:	633a      	str	r2, [r7, #48]	; 0x30
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e3      	bne.n	8009cea <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	e853 3f00 	ldrex	r3, [r3]
 8009d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 0310 	bic.w	r3, r3, #16
 8009d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	69b9      	ldr	r1, [r7, #24]
 8009d5e:	69fa      	ldr	r2, [r7, #28]
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	617b      	str	r3, [r7, #20]
   return(result);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e4      	bne.n	8009d36 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f85b 	bl	8009e34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d7e:	e03f      	b.n	8009e00 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00e      	beq.n	8009daa <HAL_UART_IRQHandler+0x56a>
 8009d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d008      	beq.n	8009daa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fbdd 	bl	800a562 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009da8:	e02d      	b.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00e      	beq.n	8009dd4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d008      	beq.n	8009dd4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01c      	beq.n	8009e04 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
    }
    return;
 8009dd2:	e017      	b.n	8009e04 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d012      	beq.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
 8009de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00c      	beq.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fb8e 	bl	800a50e <UART_EndTransmit_IT>
    return;
 8009df2:	e008      	b.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009df4:	bf00      	nop
 8009df6:	e006      	b.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009df8:	bf00      	nop
 8009dfa:	e004      	b.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009dfc:	bf00      	nop
 8009dfe:	e002      	b.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009e00:	bf00      	nop
 8009e02:	e000      	b.n	8009e06 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009e04:	bf00      	nop
  }

}
 8009e06:	37e8      	adds	r7, #232	; 0xe8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	4b8a      	ldr	r3, [pc, #552]	; (800a0a0 <UART_SetConfig+0x254>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	6812      	ldr	r2, [r2, #0]
 8009e7e:	6979      	ldr	r1, [r7, #20]
 8009e80:	430b      	orrs	r3, r1
 8009e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a78      	ldr	r2, [pc, #480]	; (800a0a4 <UART_SetConfig+0x258>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d120      	bne.n	8009f0a <UART_SetConfig+0xbe>
 8009ec8:	4b77      	ldr	r3, [pc, #476]	; (800a0a8 <UART_SetConfig+0x25c>)
 8009eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ecc:	f003 0303 	and.w	r3, r3, #3
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d817      	bhi.n	8009f04 <UART_SetConfig+0xb8>
 8009ed4:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0x90>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009eed 	.word	0x08009eed
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009eff 	.word	0x08009eff
 8009ee8:	08009ef3 	.word	0x08009ef3
 8009eec:	2300      	movs	r3, #0
 8009eee:	77fb      	strb	r3, [r7, #31]
 8009ef0:	e01d      	b.n	8009f2e <UART_SetConfig+0xe2>
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	77fb      	strb	r3, [r7, #31]
 8009ef6:	e01a      	b.n	8009f2e <UART_SetConfig+0xe2>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	77fb      	strb	r3, [r7, #31]
 8009efc:	e017      	b.n	8009f2e <UART_SetConfig+0xe2>
 8009efe:	2308      	movs	r3, #8
 8009f00:	77fb      	strb	r3, [r7, #31]
 8009f02:	e014      	b.n	8009f2e <UART_SetConfig+0xe2>
 8009f04:	2310      	movs	r3, #16
 8009f06:	77fb      	strb	r3, [r7, #31]
 8009f08:	e011      	b.n	8009f2e <UART_SetConfig+0xe2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a67      	ldr	r2, [pc, #412]	; (800a0ac <UART_SetConfig+0x260>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d102      	bne.n	8009f1a <UART_SetConfig+0xce>
 8009f14:	2300      	movs	r3, #0
 8009f16:	77fb      	strb	r3, [r7, #31]
 8009f18:	e009      	b.n	8009f2e <UART_SetConfig+0xe2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a64      	ldr	r2, [pc, #400]	; (800a0b0 <UART_SetConfig+0x264>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d102      	bne.n	8009f2a <UART_SetConfig+0xde>
 8009f24:	2300      	movs	r3, #0
 8009f26:	77fb      	strb	r3, [r7, #31]
 8009f28:	e001      	b.n	8009f2e <UART_SetConfig+0xe2>
 8009f2a:	2310      	movs	r3, #16
 8009f2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f36:	d15a      	bne.n	8009fee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8009f38:	7ffb      	ldrb	r3, [r7, #31]
 8009f3a:	2b08      	cmp	r3, #8
 8009f3c:	d827      	bhi.n	8009f8e <UART_SetConfig+0x142>
 8009f3e:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <UART_SetConfig+0xf8>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f69 	.word	0x08009f69
 8009f48:	08009f71 	.word	0x08009f71
 8009f4c:	08009f79 	.word	0x08009f79
 8009f50:	08009f8f 	.word	0x08009f8f
 8009f54:	08009f7f 	.word	0x08009f7f
 8009f58:	08009f8f 	.word	0x08009f8f
 8009f5c:	08009f8f 	.word	0x08009f8f
 8009f60:	08009f8f 	.word	0x08009f8f
 8009f64:	08009f87 	.word	0x08009f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f68:	f7fe fbb6 	bl	80086d8 <HAL_RCC_GetPCLK1Freq>
 8009f6c:	61b8      	str	r0, [r7, #24]
        break;
 8009f6e:	e013      	b.n	8009f98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f70:	f7fe fbd4 	bl	800871c <HAL_RCC_GetPCLK2Freq>
 8009f74:	61b8      	str	r0, [r7, #24]
        break;
 8009f76:	e00f      	b.n	8009f98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f78:	4b4e      	ldr	r3, [pc, #312]	; (800a0b4 <UART_SetConfig+0x268>)
 8009f7a:	61bb      	str	r3, [r7, #24]
        break;
 8009f7c:	e00c      	b.n	8009f98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f7e:	f7fe fb35 	bl	80085ec <HAL_RCC_GetSysClockFreq>
 8009f82:	61b8      	str	r0, [r7, #24]
        break;
 8009f84:	e008      	b.n	8009f98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f8a:	61bb      	str	r3, [r7, #24]
        break;
 8009f8c:	e004      	b.n	8009f98 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	77bb      	strb	r3, [r7, #30]
        break;
 8009f96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d074      	beq.n	800a088 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	005a      	lsls	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	441a      	add	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2b0f      	cmp	r3, #15
 8009fb8:	d916      	bls.n	8009fe8 <UART_SetConfig+0x19c>
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc0:	d212      	bcs.n	8009fe8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	f023 030f 	bic.w	r3, r3, #15
 8009fca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	085b      	lsrs	r3, r3, #1
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	89fb      	ldrh	r3, [r7, #14]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	89fa      	ldrh	r2, [r7, #14]
 8009fe4:	60da      	str	r2, [r3, #12]
 8009fe6:	e04f      	b.n	800a088 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	77bb      	strb	r3, [r7, #30]
 8009fec:	e04c      	b.n	800a088 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fee:	7ffb      	ldrb	r3, [r7, #31]
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d828      	bhi.n	800a046 <UART_SetConfig+0x1fa>
 8009ff4:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <UART_SetConfig+0x1b0>)
 8009ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffa:	bf00      	nop
 8009ffc:	0800a021 	.word	0x0800a021
 800a000:	0800a029 	.word	0x0800a029
 800a004:	0800a031 	.word	0x0800a031
 800a008:	0800a047 	.word	0x0800a047
 800a00c:	0800a037 	.word	0x0800a037
 800a010:	0800a047 	.word	0x0800a047
 800a014:	0800a047 	.word	0x0800a047
 800a018:	0800a047 	.word	0x0800a047
 800a01c:	0800a03f 	.word	0x0800a03f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a020:	f7fe fb5a 	bl	80086d8 <HAL_RCC_GetPCLK1Freq>
 800a024:	61b8      	str	r0, [r7, #24]
        break;
 800a026:	e013      	b.n	800a050 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a028:	f7fe fb78 	bl	800871c <HAL_RCC_GetPCLK2Freq>
 800a02c:	61b8      	str	r0, [r7, #24]
        break;
 800a02e:	e00f      	b.n	800a050 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a030:	4b20      	ldr	r3, [pc, #128]	; (800a0b4 <UART_SetConfig+0x268>)
 800a032:	61bb      	str	r3, [r7, #24]
        break;
 800a034:	e00c      	b.n	800a050 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a036:	f7fe fad9 	bl	80085ec <HAL_RCC_GetSysClockFreq>
 800a03a:	61b8      	str	r0, [r7, #24]
        break;
 800a03c:	e008      	b.n	800a050 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a03e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a042:	61bb      	str	r3, [r7, #24]
        break;
 800a044:	e004      	b.n	800a050 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	77bb      	strb	r3, [r7, #30]
        break;
 800a04e:	bf00      	nop
    }

    if (pclk != 0U)
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d018      	beq.n	800a088 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	085a      	lsrs	r2, r3, #1
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	441a      	add	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	fbb2 f3f3 	udiv	r3, r2, r3
 800a068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b0f      	cmp	r3, #15
 800a06e:	d909      	bls.n	800a084 <UART_SetConfig+0x238>
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a076:	d205      	bcs.n	800a084 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60da      	str	r2, [r3, #12]
 800a082:	e001      	b.n	800a088 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a094:	7fbb      	ldrb	r3, [r7, #30]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	efff69f3 	.word	0xefff69f3
 800a0a4:	40013800 	.word	0x40013800
 800a0a8:	40021000 	.word	0x40021000
 800a0ac:	40004400 	.word	0x40004400
 800a0b0:	40004800 	.word	0x40004800
 800a0b4:	007a1200 	.word	0x007a1200

0800a0b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00a      	beq.n	800a126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12a:	f003 0308 	and.w	r3, r3, #8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00a      	beq.n	800a148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	430a      	orrs	r2, r1
 800a146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	f003 0310 	and.w	r3, r3, #16
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00a      	beq.n	800a16a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00a      	beq.n	800a18c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	430a      	orrs	r2, r1
 800a18a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01a      	beq.n	800a1ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b6:	d10a      	bne.n	800a1ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]
  }
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b098      	sub	sp, #96	; 0x60
 800a200:	af02      	add	r7, sp, #8
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a20c:	f7fb fc12 	bl	8005a34 <HAL_GetTick>
 800a210:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0308 	and.w	r3, r3, #8
 800a21c:	2b08      	cmp	r3, #8
 800a21e:	d12e      	bne.n	800a27e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a228:	2200      	movs	r2, #0
 800a22a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f88c 	bl	800a34c <UART_WaitOnFlagUntilTimeout>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d021      	beq.n	800a27e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a24e:	653b      	str	r3, [r7, #80]	; 0x50
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	461a      	mov	r2, r3
 800a256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a258:	647b      	str	r3, [r7, #68]	; 0x44
 800a25a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a25e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e6      	bne.n	800a23a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2220      	movs	r2, #32
 800a270:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e062      	b.n	800a344 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d149      	bne.n	800a320 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a28c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a294:	2200      	movs	r2, #0
 800a296:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f856 	bl	800a34c <UART_WaitOnFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d03c      	beq.n	800a320 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	623b      	str	r3, [r7, #32]
   return(result);
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30
 800a2c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e6      	bne.n	800a2a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f023 0301 	bic.w	r3, r3, #1
 800a2ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2f8:	61fa      	str	r2, [r7, #28]
 800a2fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	69b9      	ldr	r1, [r7, #24]
 800a2fe:	69fa      	ldr	r2, [r7, #28]
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	617b      	str	r3, [r7, #20]
   return(result);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e011      	b.n	800a344 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3758      	adds	r7, #88	; 0x58
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	4613      	mov	r3, r2
 800a35a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35c:	e049      	b.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a364:	d045      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a366:	f7fb fb65 	bl	8005a34 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <UART_WaitOnFlagUntilTimeout+0x30>
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e048      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d031      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	f003 0308 	and.w	r3, r3, #8
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d110      	bne.n	800a3be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f838 	bl	800a41a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2208      	movs	r2, #8
 800a3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e029      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3cc:	d111      	bne.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 f81e 	bl	800a41a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e00f      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	69da      	ldr	r2, [r3, #28]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	bf0c      	ite	eq
 800a402:	2301      	moveq	r3, #1
 800a404:	2300      	movne	r3, #0
 800a406:	b2db      	uxtb	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d0a6      	beq.n	800a35e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b095      	sub	sp, #84	; 0x54
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	e853 3f00 	ldrex	r3, [r3]
 800a42e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a436:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
 800a43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a440:	643b      	str	r3, [r7, #64]	; 0x40
 800a442:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e6      	bne.n	800a422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3308      	adds	r3, #8
 800a45a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	e853 3f00 	ldrex	r3, [r3]
 800a462:	61fb      	str	r3, [r7, #28]
   return(result);
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a474:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a47c:	e841 2300 	strex	r3, r2, [r1]
 800a480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1e5      	bne.n	800a454 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d118      	bne.n	800a4c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f023 0310 	bic.w	r3, r3, #16
 800a4a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6979      	ldr	r1, [r7, #20]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e6      	bne.n	800a490 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a4d6:	bf00      	nop
 800a4d8:	3754      	adds	r7, #84	; 0x54
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fc8d 	bl	8009e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a506:	bf00      	nop
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b088      	sub	sp, #32
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60bb      	str	r3, [r7, #8]
   return(result);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a52a:	61fb      	str	r3, [r7, #28]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	613b      	str	r3, [r7, #16]
   return(result);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff fc59 	bl	8009e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a55a:	bf00      	nop
 800a55c:	3720      	adds	r7, #32
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a562:	b480      	push	{r7}
 800a564:	b083      	sub	sp, #12
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
	...

0800a578 <__errno>:
 800a578:	4b01      	ldr	r3, [pc, #4]	; (800a580 <__errno+0x8>)
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	20000068 	.word	0x20000068

0800a584 <__libc_init_array>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4d0d      	ldr	r5, [pc, #52]	; (800a5bc <__libc_init_array+0x38>)
 800a588:	4c0d      	ldr	r4, [pc, #52]	; (800a5c0 <__libc_init_array+0x3c>)
 800a58a:	1b64      	subs	r4, r4, r5
 800a58c:	10a4      	asrs	r4, r4, #2
 800a58e:	2600      	movs	r6, #0
 800a590:	42a6      	cmp	r6, r4
 800a592:	d109      	bne.n	800a5a8 <__libc_init_array+0x24>
 800a594:	4d0b      	ldr	r5, [pc, #44]	; (800a5c4 <__libc_init_array+0x40>)
 800a596:	4c0c      	ldr	r4, [pc, #48]	; (800a5c8 <__libc_init_array+0x44>)
 800a598:	f001 fb14 	bl	800bbc4 <_init>
 800a59c:	1b64      	subs	r4, r4, r5
 800a59e:	10a4      	asrs	r4, r4, #2
 800a5a0:	2600      	movs	r6, #0
 800a5a2:	42a6      	cmp	r6, r4
 800a5a4:	d105      	bne.n	800a5b2 <__libc_init_array+0x2e>
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ac:	4798      	blx	r3
 800a5ae:	3601      	adds	r6, #1
 800a5b0:	e7ee      	b.n	800a590 <__libc_init_array+0xc>
 800a5b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b6:	4798      	blx	r3
 800a5b8:	3601      	adds	r6, #1
 800a5ba:	e7f2      	b.n	800a5a2 <__libc_init_array+0x1e>
 800a5bc:	0800d928 	.word	0x0800d928
 800a5c0:	0800d928 	.word	0x0800d928
 800a5c4:	0800d928 	.word	0x0800d928
 800a5c8:	0800d92c 	.word	0x0800d92c

0800a5cc <memset>:
 800a5cc:	4402      	add	r2, r0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d100      	bne.n	800a5d6 <memset+0xa>
 800a5d4:	4770      	bx	lr
 800a5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5da:	e7f9      	b.n	800a5d0 <memset+0x4>

0800a5dc <iprintf>:
 800a5dc:	b40f      	push	{r0, r1, r2, r3}
 800a5de:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <iprintf+0x2c>)
 800a5e0:	b513      	push	{r0, r1, r4, lr}
 800a5e2:	681c      	ldr	r4, [r3, #0]
 800a5e4:	b124      	cbz	r4, 800a5f0 <iprintf+0x14>
 800a5e6:	69a3      	ldr	r3, [r4, #24]
 800a5e8:	b913      	cbnz	r3, 800a5f0 <iprintf+0x14>
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fb2c 	bl	800ac48 <__sinit>
 800a5f0:	ab05      	add	r3, sp, #20
 800a5f2:	9a04      	ldr	r2, [sp, #16]
 800a5f4:	68a1      	ldr	r1, [r4, #8]
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f000 feab 	bl	800b354 <_vfiprintf_r>
 800a5fe:	b002      	add	sp, #8
 800a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a604:	b004      	add	sp, #16
 800a606:	4770      	bx	lr
 800a608:	20000068 	.word	0x20000068

0800a60c <_puts_r>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	460e      	mov	r6, r1
 800a610:	4605      	mov	r5, r0
 800a612:	b118      	cbz	r0, 800a61c <_puts_r+0x10>
 800a614:	6983      	ldr	r3, [r0, #24]
 800a616:	b90b      	cbnz	r3, 800a61c <_puts_r+0x10>
 800a618:	f000 fb16 	bl	800ac48 <__sinit>
 800a61c:	69ab      	ldr	r3, [r5, #24]
 800a61e:	68ac      	ldr	r4, [r5, #8]
 800a620:	b913      	cbnz	r3, 800a628 <_puts_r+0x1c>
 800a622:	4628      	mov	r0, r5
 800a624:	f000 fb10 	bl	800ac48 <__sinit>
 800a628:	4b2c      	ldr	r3, [pc, #176]	; (800a6dc <_puts_r+0xd0>)
 800a62a:	429c      	cmp	r4, r3
 800a62c:	d120      	bne.n	800a670 <_puts_r+0x64>
 800a62e:	686c      	ldr	r4, [r5, #4]
 800a630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a632:	07db      	lsls	r3, r3, #31
 800a634:	d405      	bmi.n	800a642 <_puts_r+0x36>
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	0598      	lsls	r0, r3, #22
 800a63a:	d402      	bmi.n	800a642 <_puts_r+0x36>
 800a63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a63e:	f000 fbb3 	bl	800ada8 <__retarget_lock_acquire_recursive>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	0719      	lsls	r1, r3, #28
 800a646:	d51d      	bpl.n	800a684 <_puts_r+0x78>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	b1db      	cbz	r3, 800a684 <_puts_r+0x78>
 800a64c:	3e01      	subs	r6, #1
 800a64e:	68a3      	ldr	r3, [r4, #8]
 800a650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a654:	3b01      	subs	r3, #1
 800a656:	60a3      	str	r3, [r4, #8]
 800a658:	bb39      	cbnz	r1, 800a6aa <_puts_r+0x9e>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	da38      	bge.n	800a6d0 <_puts_r+0xc4>
 800a65e:	4622      	mov	r2, r4
 800a660:	210a      	movs	r1, #10
 800a662:	4628      	mov	r0, r5
 800a664:	f000 f8f8 	bl	800a858 <__swbuf_r>
 800a668:	3001      	adds	r0, #1
 800a66a:	d011      	beq.n	800a690 <_puts_r+0x84>
 800a66c:	250a      	movs	r5, #10
 800a66e:	e011      	b.n	800a694 <_puts_r+0x88>
 800a670:	4b1b      	ldr	r3, [pc, #108]	; (800a6e0 <_puts_r+0xd4>)
 800a672:	429c      	cmp	r4, r3
 800a674:	d101      	bne.n	800a67a <_puts_r+0x6e>
 800a676:	68ac      	ldr	r4, [r5, #8]
 800a678:	e7da      	b.n	800a630 <_puts_r+0x24>
 800a67a:	4b1a      	ldr	r3, [pc, #104]	; (800a6e4 <_puts_r+0xd8>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	bf08      	it	eq
 800a680:	68ec      	ldreq	r4, [r5, #12]
 800a682:	e7d5      	b.n	800a630 <_puts_r+0x24>
 800a684:	4621      	mov	r1, r4
 800a686:	4628      	mov	r0, r5
 800a688:	f000 f938 	bl	800a8fc <__swsetup_r>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d0dd      	beq.n	800a64c <_puts_r+0x40>
 800a690:	f04f 35ff 	mov.w	r5, #4294967295
 800a694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a696:	07da      	lsls	r2, r3, #31
 800a698:	d405      	bmi.n	800a6a6 <_puts_r+0x9a>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	059b      	lsls	r3, r3, #22
 800a69e:	d402      	bmi.n	800a6a6 <_puts_r+0x9a>
 800a6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a2:	f000 fb82 	bl	800adaa <__retarget_lock_release_recursive>
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	bd70      	pop	{r4, r5, r6, pc}
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	da04      	bge.n	800a6b8 <_puts_r+0xac>
 800a6ae:	69a2      	ldr	r2, [r4, #24]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	dc06      	bgt.n	800a6c2 <_puts_r+0xb6>
 800a6b4:	290a      	cmp	r1, #10
 800a6b6:	d004      	beq.n	800a6c2 <_puts_r+0xb6>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	6022      	str	r2, [r4, #0]
 800a6be:	7019      	strb	r1, [r3, #0]
 800a6c0:	e7c5      	b.n	800a64e <_puts_r+0x42>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f000 f8c7 	bl	800a858 <__swbuf_r>
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d1bf      	bne.n	800a64e <_puts_r+0x42>
 800a6ce:	e7df      	b.n	800a690 <_puts_r+0x84>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	250a      	movs	r5, #10
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	6022      	str	r2, [r4, #0]
 800a6d8:	701d      	strb	r5, [r3, #0]
 800a6da:	e7db      	b.n	800a694 <_puts_r+0x88>
 800a6dc:	0800d8b4 	.word	0x0800d8b4
 800a6e0:	0800d8d4 	.word	0x0800d8d4
 800a6e4:	0800d894 	.word	0x0800d894

0800a6e8 <puts>:
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <puts+0xc>)
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f7ff bf8d 	b.w	800a60c <_puts_r>
 800a6f2:	bf00      	nop
 800a6f4:	20000068 	.word	0x20000068

0800a6f8 <srand>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4b10      	ldr	r3, [pc, #64]	; (800a73c <srand+0x44>)
 800a6fc:	681d      	ldr	r5, [r3, #0]
 800a6fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a700:	4604      	mov	r4, r0
 800a702:	b9b3      	cbnz	r3, 800a732 <srand+0x3a>
 800a704:	2018      	movs	r0, #24
 800a706:	f000 fbb7 	bl	800ae78 <malloc>
 800a70a:	4602      	mov	r2, r0
 800a70c:	63a8      	str	r0, [r5, #56]	; 0x38
 800a70e:	b920      	cbnz	r0, 800a71a <srand+0x22>
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <srand+0x48>)
 800a712:	480c      	ldr	r0, [pc, #48]	; (800a744 <srand+0x4c>)
 800a714:	2142      	movs	r1, #66	; 0x42
 800a716:	f000 f95f 	bl	800a9d8 <__assert_func>
 800a71a:	490b      	ldr	r1, [pc, #44]	; (800a748 <srand+0x50>)
 800a71c:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <srand+0x54>)
 800a71e:	e9c0 1300 	strd	r1, r3, [r0]
 800a722:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <srand+0x58>)
 800a724:	6083      	str	r3, [r0, #8]
 800a726:	230b      	movs	r3, #11
 800a728:	8183      	strh	r3, [r0, #12]
 800a72a:	2100      	movs	r1, #0
 800a72c:	2001      	movs	r0, #1
 800a72e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a732:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a734:	2200      	movs	r2, #0
 800a736:	611c      	str	r4, [r3, #16]
 800a738:	615a      	str	r2, [r3, #20]
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	20000068 	.word	0x20000068
 800a740:	0800d7e4 	.word	0x0800d7e4
 800a744:	0800d7fb 	.word	0x0800d7fb
 800a748:	abcd330e 	.word	0xabcd330e
 800a74c:	e66d1234 	.word	0xe66d1234
 800a750:	0005deec 	.word	0x0005deec

0800a754 <rand>:
 800a754:	4b16      	ldr	r3, [pc, #88]	; (800a7b0 <rand+0x5c>)
 800a756:	b510      	push	{r4, lr}
 800a758:	681c      	ldr	r4, [r3, #0]
 800a75a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a75c:	b9b3      	cbnz	r3, 800a78c <rand+0x38>
 800a75e:	2018      	movs	r0, #24
 800a760:	f000 fb8a 	bl	800ae78 <malloc>
 800a764:	63a0      	str	r0, [r4, #56]	; 0x38
 800a766:	b928      	cbnz	r0, 800a774 <rand+0x20>
 800a768:	4602      	mov	r2, r0
 800a76a:	4b12      	ldr	r3, [pc, #72]	; (800a7b4 <rand+0x60>)
 800a76c:	4812      	ldr	r0, [pc, #72]	; (800a7b8 <rand+0x64>)
 800a76e:	214e      	movs	r1, #78	; 0x4e
 800a770:	f000 f932 	bl	800a9d8 <__assert_func>
 800a774:	4a11      	ldr	r2, [pc, #68]	; (800a7bc <rand+0x68>)
 800a776:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <rand+0x6c>)
 800a778:	e9c0 2300 	strd	r2, r3, [r0]
 800a77c:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <rand+0x70>)
 800a77e:	6083      	str	r3, [r0, #8]
 800a780:	230b      	movs	r3, #11
 800a782:	8183      	strh	r3, [r0, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	2300      	movs	r3, #0
 800a788:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a78c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a78e:	4a0e      	ldr	r2, [pc, #56]	; (800a7c8 <rand+0x74>)
 800a790:	6920      	ldr	r0, [r4, #16]
 800a792:	6963      	ldr	r3, [r4, #20]
 800a794:	490d      	ldr	r1, [pc, #52]	; (800a7cc <rand+0x78>)
 800a796:	4342      	muls	r2, r0
 800a798:	fb01 2203 	mla	r2, r1, r3, r2
 800a79c:	fba0 0101 	umull	r0, r1, r0, r1
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	eb42 0001 	adc.w	r0, r2, r1
 800a7a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a7aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a7ae:	bd10      	pop	{r4, pc}
 800a7b0:	20000068 	.word	0x20000068
 800a7b4:	0800d7e4 	.word	0x0800d7e4
 800a7b8:	0800d7fb 	.word	0x0800d7fb
 800a7bc:	abcd330e 	.word	0xabcd330e
 800a7c0:	e66d1234 	.word	0xe66d1234
 800a7c4:	0005deec 	.word	0x0005deec
 800a7c8:	5851f42d 	.word	0x5851f42d
 800a7cc:	4c957f2d 	.word	0x4c957f2d

0800a7d0 <sniprintf>:
 800a7d0:	b40c      	push	{r2, r3}
 800a7d2:	b530      	push	{r4, r5, lr}
 800a7d4:	4b17      	ldr	r3, [pc, #92]	; (800a834 <sniprintf+0x64>)
 800a7d6:	1e0c      	subs	r4, r1, #0
 800a7d8:	681d      	ldr	r5, [r3, #0]
 800a7da:	b09d      	sub	sp, #116	; 0x74
 800a7dc:	da08      	bge.n	800a7f0 <sniprintf+0x20>
 800a7de:	238b      	movs	r3, #139	; 0x8b
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e6:	b01d      	add	sp, #116	; 0x74
 800a7e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7ec:	b002      	add	sp, #8
 800a7ee:	4770      	bx	lr
 800a7f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a7f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7f8:	bf14      	ite	ne
 800a7fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a7fe:	4623      	moveq	r3, r4
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	9307      	str	r3, [sp, #28]
 800a804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a808:	9002      	str	r0, [sp, #8]
 800a80a:	9006      	str	r0, [sp, #24]
 800a80c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a810:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a812:	ab21      	add	r3, sp, #132	; 0x84
 800a814:	a902      	add	r1, sp, #8
 800a816:	4628      	mov	r0, r5
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f000 fc71 	bl	800b100 <_svfiprintf_r>
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	bfbc      	itt	lt
 800a822:	238b      	movlt	r3, #139	; 0x8b
 800a824:	602b      	strlt	r3, [r5, #0]
 800a826:	2c00      	cmp	r4, #0
 800a828:	d0dd      	beq.n	800a7e6 <sniprintf+0x16>
 800a82a:	9b02      	ldr	r3, [sp, #8]
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	e7d9      	b.n	800a7e6 <sniprintf+0x16>
 800a832:	bf00      	nop
 800a834:	20000068 	.word	0x20000068

0800a838 <strcat>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	4602      	mov	r2, r0
 800a83c:	7814      	ldrb	r4, [r2, #0]
 800a83e:	4613      	mov	r3, r2
 800a840:	3201      	adds	r2, #1
 800a842:	2c00      	cmp	r4, #0
 800a844:	d1fa      	bne.n	800a83c <strcat+0x4>
 800a846:	3b01      	subs	r3, #1
 800a848:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a84c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a850:	2a00      	cmp	r2, #0
 800a852:	d1f9      	bne.n	800a848 <strcat+0x10>
 800a854:	bd10      	pop	{r4, pc}
	...

0800a858 <__swbuf_r>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	460e      	mov	r6, r1
 800a85c:	4614      	mov	r4, r2
 800a85e:	4605      	mov	r5, r0
 800a860:	b118      	cbz	r0, 800a86a <__swbuf_r+0x12>
 800a862:	6983      	ldr	r3, [r0, #24]
 800a864:	b90b      	cbnz	r3, 800a86a <__swbuf_r+0x12>
 800a866:	f000 f9ef 	bl	800ac48 <__sinit>
 800a86a:	4b21      	ldr	r3, [pc, #132]	; (800a8f0 <__swbuf_r+0x98>)
 800a86c:	429c      	cmp	r4, r3
 800a86e:	d12b      	bne.n	800a8c8 <__swbuf_r+0x70>
 800a870:	686c      	ldr	r4, [r5, #4]
 800a872:	69a3      	ldr	r3, [r4, #24]
 800a874:	60a3      	str	r3, [r4, #8]
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	071a      	lsls	r2, r3, #28
 800a87a:	d52f      	bpl.n	800a8dc <__swbuf_r+0x84>
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	b36b      	cbz	r3, 800a8dc <__swbuf_r+0x84>
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	6820      	ldr	r0, [r4, #0]
 800a884:	1ac0      	subs	r0, r0, r3
 800a886:	6963      	ldr	r3, [r4, #20]
 800a888:	b2f6      	uxtb	r6, r6
 800a88a:	4283      	cmp	r3, r0
 800a88c:	4637      	mov	r7, r6
 800a88e:	dc04      	bgt.n	800a89a <__swbuf_r+0x42>
 800a890:	4621      	mov	r1, r4
 800a892:	4628      	mov	r0, r5
 800a894:	f000 f944 	bl	800ab20 <_fflush_r>
 800a898:	bb30      	cbnz	r0, 800a8e8 <__swbuf_r+0x90>
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	60a3      	str	r3, [r4, #8]
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	6022      	str	r2, [r4, #0]
 800a8a6:	701e      	strb	r6, [r3, #0]
 800a8a8:	6963      	ldr	r3, [r4, #20]
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	4283      	cmp	r3, r0
 800a8ae:	d004      	beq.n	800a8ba <__swbuf_r+0x62>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	07db      	lsls	r3, r3, #31
 800a8b4:	d506      	bpl.n	800a8c4 <__swbuf_r+0x6c>
 800a8b6:	2e0a      	cmp	r6, #10
 800a8b8:	d104      	bne.n	800a8c4 <__swbuf_r+0x6c>
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f000 f92f 	bl	800ab20 <_fflush_r>
 800a8c2:	b988      	cbnz	r0, 800a8e8 <__swbuf_r+0x90>
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <__swbuf_r+0x9c>)
 800a8ca:	429c      	cmp	r4, r3
 800a8cc:	d101      	bne.n	800a8d2 <__swbuf_r+0x7a>
 800a8ce:	68ac      	ldr	r4, [r5, #8]
 800a8d0:	e7cf      	b.n	800a872 <__swbuf_r+0x1a>
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <__swbuf_r+0xa0>)
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	bf08      	it	eq
 800a8d8:	68ec      	ldreq	r4, [r5, #12]
 800a8da:	e7ca      	b.n	800a872 <__swbuf_r+0x1a>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f000 f80c 	bl	800a8fc <__swsetup_r>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d0cb      	beq.n	800a880 <__swbuf_r+0x28>
 800a8e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a8ec:	e7ea      	b.n	800a8c4 <__swbuf_r+0x6c>
 800a8ee:	bf00      	nop
 800a8f0:	0800d8b4 	.word	0x0800d8b4
 800a8f4:	0800d8d4 	.word	0x0800d8d4
 800a8f8:	0800d894 	.word	0x0800d894

0800a8fc <__swsetup_r>:
 800a8fc:	4b32      	ldr	r3, [pc, #200]	; (800a9c8 <__swsetup_r+0xcc>)
 800a8fe:	b570      	push	{r4, r5, r6, lr}
 800a900:	681d      	ldr	r5, [r3, #0]
 800a902:	4606      	mov	r6, r0
 800a904:	460c      	mov	r4, r1
 800a906:	b125      	cbz	r5, 800a912 <__swsetup_r+0x16>
 800a908:	69ab      	ldr	r3, [r5, #24]
 800a90a:	b913      	cbnz	r3, 800a912 <__swsetup_r+0x16>
 800a90c:	4628      	mov	r0, r5
 800a90e:	f000 f99b 	bl	800ac48 <__sinit>
 800a912:	4b2e      	ldr	r3, [pc, #184]	; (800a9cc <__swsetup_r+0xd0>)
 800a914:	429c      	cmp	r4, r3
 800a916:	d10f      	bne.n	800a938 <__swsetup_r+0x3c>
 800a918:	686c      	ldr	r4, [r5, #4]
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a920:	0719      	lsls	r1, r3, #28
 800a922:	d42c      	bmi.n	800a97e <__swsetup_r+0x82>
 800a924:	06dd      	lsls	r5, r3, #27
 800a926:	d411      	bmi.n	800a94c <__swsetup_r+0x50>
 800a928:	2309      	movs	r3, #9
 800a92a:	6033      	str	r3, [r6, #0]
 800a92c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	f04f 30ff 	mov.w	r0, #4294967295
 800a936:	e03e      	b.n	800a9b6 <__swsetup_r+0xba>
 800a938:	4b25      	ldr	r3, [pc, #148]	; (800a9d0 <__swsetup_r+0xd4>)
 800a93a:	429c      	cmp	r4, r3
 800a93c:	d101      	bne.n	800a942 <__swsetup_r+0x46>
 800a93e:	68ac      	ldr	r4, [r5, #8]
 800a940:	e7eb      	b.n	800a91a <__swsetup_r+0x1e>
 800a942:	4b24      	ldr	r3, [pc, #144]	; (800a9d4 <__swsetup_r+0xd8>)
 800a944:	429c      	cmp	r4, r3
 800a946:	bf08      	it	eq
 800a948:	68ec      	ldreq	r4, [r5, #12]
 800a94a:	e7e6      	b.n	800a91a <__swsetup_r+0x1e>
 800a94c:	0758      	lsls	r0, r3, #29
 800a94e:	d512      	bpl.n	800a976 <__swsetup_r+0x7a>
 800a950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a952:	b141      	cbz	r1, 800a966 <__swsetup_r+0x6a>
 800a954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a958:	4299      	cmp	r1, r3
 800a95a:	d002      	beq.n	800a962 <__swsetup_r+0x66>
 800a95c:	4630      	mov	r0, r6
 800a95e:	f000 fa93 	bl	800ae88 <_free_r>
 800a962:	2300      	movs	r3, #0
 800a964:	6363      	str	r3, [r4, #52]	; 0x34
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	2300      	movs	r3, #0
 800a970:	6063      	str	r3, [r4, #4]
 800a972:	6923      	ldr	r3, [r4, #16]
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	f043 0308 	orr.w	r3, r3, #8
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	b94b      	cbnz	r3, 800a996 <__swsetup_r+0x9a>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a98c:	d003      	beq.n	800a996 <__swsetup_r+0x9a>
 800a98e:	4621      	mov	r1, r4
 800a990:	4630      	mov	r0, r6
 800a992:	f000 fa31 	bl	800adf8 <__smakebuf_r>
 800a996:	89a0      	ldrh	r0, [r4, #12]
 800a998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a99c:	f010 0301 	ands.w	r3, r0, #1
 800a9a0:	d00a      	beq.n	800a9b8 <__swsetup_r+0xbc>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60a3      	str	r3, [r4, #8]
 800a9a6:	6963      	ldr	r3, [r4, #20]
 800a9a8:	425b      	negs	r3, r3
 800a9aa:	61a3      	str	r3, [r4, #24]
 800a9ac:	6923      	ldr	r3, [r4, #16]
 800a9ae:	b943      	cbnz	r3, 800a9c2 <__swsetup_r+0xc6>
 800a9b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9b4:	d1ba      	bne.n	800a92c <__swsetup_r+0x30>
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	0781      	lsls	r1, r0, #30
 800a9ba:	bf58      	it	pl
 800a9bc:	6963      	ldrpl	r3, [r4, #20]
 800a9be:	60a3      	str	r3, [r4, #8]
 800a9c0:	e7f4      	b.n	800a9ac <__swsetup_r+0xb0>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e7f7      	b.n	800a9b6 <__swsetup_r+0xba>
 800a9c6:	bf00      	nop
 800a9c8:	20000068 	.word	0x20000068
 800a9cc:	0800d8b4 	.word	0x0800d8b4
 800a9d0:	0800d8d4 	.word	0x0800d8d4
 800a9d4:	0800d894 	.word	0x0800d894

0800a9d8 <__assert_func>:
 800a9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9da:	4614      	mov	r4, r2
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <__assert_func+0x2c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	68d8      	ldr	r0, [r3, #12]
 800a9e6:	b14c      	cbz	r4, 800a9fc <__assert_func+0x24>
 800a9e8:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <__assert_func+0x30>)
 800a9ea:	9100      	str	r1, [sp, #0]
 800a9ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9f0:	4906      	ldr	r1, [pc, #24]	; (800aa0c <__assert_func+0x34>)
 800a9f2:	462b      	mov	r3, r5
 800a9f4:	f000 f9a6 	bl	800ad44 <fiprintf>
 800a9f8:	f000 ffd6 	bl	800b9a8 <abort>
 800a9fc:	4b04      	ldr	r3, [pc, #16]	; (800aa10 <__assert_func+0x38>)
 800a9fe:	461c      	mov	r4, r3
 800aa00:	e7f3      	b.n	800a9ea <__assert_func+0x12>
 800aa02:	bf00      	nop
 800aa04:	20000068 	.word	0x20000068
 800aa08:	0800d856 	.word	0x0800d856
 800aa0c:	0800d863 	.word	0x0800d863
 800aa10:	0800d891 	.word	0x0800d891

0800aa14 <__sflush_r>:
 800aa14:	898a      	ldrh	r2, [r1, #12]
 800aa16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	0710      	lsls	r0, r2, #28
 800aa1e:	460c      	mov	r4, r1
 800aa20:	d458      	bmi.n	800aad4 <__sflush_r+0xc0>
 800aa22:	684b      	ldr	r3, [r1, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	dc05      	bgt.n	800aa34 <__sflush_r+0x20>
 800aa28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dc02      	bgt.n	800aa34 <__sflush_r+0x20>
 800aa2e:	2000      	movs	r0, #0
 800aa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	d0f9      	beq.n	800aa2e <__sflush_r+0x1a>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa40:	682f      	ldr	r7, [r5, #0]
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	d032      	beq.n	800aaac <__sflush_r+0x98>
 800aa46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	075a      	lsls	r2, r3, #29
 800aa4c:	d505      	bpl.n	800aa5a <__sflush_r+0x46>
 800aa4e:	6863      	ldr	r3, [r4, #4]
 800aa50:	1ac0      	subs	r0, r0, r3
 800aa52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa54:	b10b      	cbz	r3, 800aa5a <__sflush_r+0x46>
 800aa56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa58:	1ac0      	subs	r0, r0, r3
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa60:	6a21      	ldr	r1, [r4, #32]
 800aa62:	4628      	mov	r0, r5
 800aa64:	47b0      	blx	r6
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	89a3      	ldrh	r3, [r4, #12]
 800aa6a:	d106      	bne.n	800aa7a <__sflush_r+0x66>
 800aa6c:	6829      	ldr	r1, [r5, #0]
 800aa6e:	291d      	cmp	r1, #29
 800aa70:	d82c      	bhi.n	800aacc <__sflush_r+0xb8>
 800aa72:	4a2a      	ldr	r2, [pc, #168]	; (800ab1c <__sflush_r+0x108>)
 800aa74:	40ca      	lsrs	r2, r1
 800aa76:	07d6      	lsls	r6, r2, #31
 800aa78:	d528      	bpl.n	800aacc <__sflush_r+0xb8>
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	6062      	str	r2, [r4, #4]
 800aa7e:	04d9      	lsls	r1, r3, #19
 800aa80:	6922      	ldr	r2, [r4, #16]
 800aa82:	6022      	str	r2, [r4, #0]
 800aa84:	d504      	bpl.n	800aa90 <__sflush_r+0x7c>
 800aa86:	1c42      	adds	r2, r0, #1
 800aa88:	d101      	bne.n	800aa8e <__sflush_r+0x7a>
 800aa8a:	682b      	ldr	r3, [r5, #0]
 800aa8c:	b903      	cbnz	r3, 800aa90 <__sflush_r+0x7c>
 800aa8e:	6560      	str	r0, [r4, #84]	; 0x54
 800aa90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa92:	602f      	str	r7, [r5, #0]
 800aa94:	2900      	cmp	r1, #0
 800aa96:	d0ca      	beq.n	800aa2e <__sflush_r+0x1a>
 800aa98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	d002      	beq.n	800aaa6 <__sflush_r+0x92>
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f000 f9f1 	bl	800ae88 <_free_r>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	6360      	str	r0, [r4, #52]	; 0x34
 800aaaa:	e7c1      	b.n	800aa30 <__sflush_r+0x1c>
 800aaac:	6a21      	ldr	r1, [r4, #32]
 800aaae:	2301      	movs	r3, #1
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b0      	blx	r6
 800aab4:	1c41      	adds	r1, r0, #1
 800aab6:	d1c7      	bne.n	800aa48 <__sflush_r+0x34>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0c4      	beq.n	800aa48 <__sflush_r+0x34>
 800aabe:	2b1d      	cmp	r3, #29
 800aac0:	d001      	beq.n	800aac6 <__sflush_r+0xb2>
 800aac2:	2b16      	cmp	r3, #22
 800aac4:	d101      	bne.n	800aaca <__sflush_r+0xb6>
 800aac6:	602f      	str	r7, [r5, #0]
 800aac8:	e7b1      	b.n	800aa2e <__sflush_r+0x1a>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	e7ad      	b.n	800aa30 <__sflush_r+0x1c>
 800aad4:	690f      	ldr	r7, [r1, #16]
 800aad6:	2f00      	cmp	r7, #0
 800aad8:	d0a9      	beq.n	800aa2e <__sflush_r+0x1a>
 800aada:	0793      	lsls	r3, r2, #30
 800aadc:	680e      	ldr	r6, [r1, #0]
 800aade:	bf08      	it	eq
 800aae0:	694b      	ldreq	r3, [r1, #20]
 800aae2:	600f      	str	r7, [r1, #0]
 800aae4:	bf18      	it	ne
 800aae6:	2300      	movne	r3, #0
 800aae8:	eba6 0807 	sub.w	r8, r6, r7
 800aaec:	608b      	str	r3, [r1, #8]
 800aaee:	f1b8 0f00 	cmp.w	r8, #0
 800aaf2:	dd9c      	ble.n	800aa2e <__sflush_r+0x1a>
 800aaf4:	6a21      	ldr	r1, [r4, #32]
 800aaf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aaf8:	4643      	mov	r3, r8
 800aafa:	463a      	mov	r2, r7
 800aafc:	4628      	mov	r0, r5
 800aafe:	47b0      	blx	r6
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dc06      	bgt.n	800ab12 <__sflush_r+0xfe>
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab0a:	81a3      	strh	r3, [r4, #12]
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	e78e      	b.n	800aa30 <__sflush_r+0x1c>
 800ab12:	4407      	add	r7, r0
 800ab14:	eba8 0800 	sub.w	r8, r8, r0
 800ab18:	e7e9      	b.n	800aaee <__sflush_r+0xda>
 800ab1a:	bf00      	nop
 800ab1c:	20400001 	.word	0x20400001

0800ab20 <_fflush_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	690b      	ldr	r3, [r1, #16]
 800ab24:	4605      	mov	r5, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	b913      	cbnz	r3, 800ab30 <_fflush_r+0x10>
 800ab2a:	2500      	movs	r5, #0
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	b118      	cbz	r0, 800ab3a <_fflush_r+0x1a>
 800ab32:	6983      	ldr	r3, [r0, #24]
 800ab34:	b90b      	cbnz	r3, 800ab3a <_fflush_r+0x1a>
 800ab36:	f000 f887 	bl	800ac48 <__sinit>
 800ab3a:	4b14      	ldr	r3, [pc, #80]	; (800ab8c <_fflush_r+0x6c>)
 800ab3c:	429c      	cmp	r4, r3
 800ab3e:	d11b      	bne.n	800ab78 <_fflush_r+0x58>
 800ab40:	686c      	ldr	r4, [r5, #4]
 800ab42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d0ef      	beq.n	800ab2a <_fflush_r+0xa>
 800ab4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab4c:	07d0      	lsls	r0, r2, #31
 800ab4e:	d404      	bmi.n	800ab5a <_fflush_r+0x3a>
 800ab50:	0599      	lsls	r1, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_fflush_r+0x3a>
 800ab54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab56:	f000 f927 	bl	800ada8 <__retarget_lock_acquire_recursive>
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	f7ff ff59 	bl	800aa14 <__sflush_r>
 800ab62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab64:	07da      	lsls	r2, r3, #31
 800ab66:	4605      	mov	r5, r0
 800ab68:	d4e0      	bmi.n	800ab2c <_fflush_r+0xc>
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	059b      	lsls	r3, r3, #22
 800ab6e:	d4dd      	bmi.n	800ab2c <_fflush_r+0xc>
 800ab70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab72:	f000 f91a 	bl	800adaa <__retarget_lock_release_recursive>
 800ab76:	e7d9      	b.n	800ab2c <_fflush_r+0xc>
 800ab78:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <_fflush_r+0x70>)
 800ab7a:	429c      	cmp	r4, r3
 800ab7c:	d101      	bne.n	800ab82 <_fflush_r+0x62>
 800ab7e:	68ac      	ldr	r4, [r5, #8]
 800ab80:	e7df      	b.n	800ab42 <_fflush_r+0x22>
 800ab82:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <_fflush_r+0x74>)
 800ab84:	429c      	cmp	r4, r3
 800ab86:	bf08      	it	eq
 800ab88:	68ec      	ldreq	r4, [r5, #12]
 800ab8a:	e7da      	b.n	800ab42 <_fflush_r+0x22>
 800ab8c:	0800d8b4 	.word	0x0800d8b4
 800ab90:	0800d8d4 	.word	0x0800d8d4
 800ab94:	0800d894 	.word	0x0800d894

0800ab98 <std>:
 800ab98:	2300      	movs	r3, #0
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	e9c0 3300 	strd	r3, r3, [r0]
 800aba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aba6:	6083      	str	r3, [r0, #8]
 800aba8:	8181      	strh	r1, [r0, #12]
 800abaa:	6643      	str	r3, [r0, #100]	; 0x64
 800abac:	81c2      	strh	r2, [r0, #14]
 800abae:	6183      	str	r3, [r0, #24]
 800abb0:	4619      	mov	r1, r3
 800abb2:	2208      	movs	r2, #8
 800abb4:	305c      	adds	r0, #92	; 0x5c
 800abb6:	f7ff fd09 	bl	800a5cc <memset>
 800abba:	4b05      	ldr	r3, [pc, #20]	; (800abd0 <std+0x38>)
 800abbc:	6263      	str	r3, [r4, #36]	; 0x24
 800abbe:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <std+0x3c>)
 800abc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800abc2:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <std+0x40>)
 800abc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abc6:	4b05      	ldr	r3, [pc, #20]	; (800abdc <std+0x44>)
 800abc8:	6224      	str	r4, [r4, #32]
 800abca:	6323      	str	r3, [r4, #48]	; 0x30
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	0800b8fd 	.word	0x0800b8fd
 800abd4:	0800b91f 	.word	0x0800b91f
 800abd8:	0800b957 	.word	0x0800b957
 800abdc:	0800b97b 	.word	0x0800b97b

0800abe0 <_cleanup_r>:
 800abe0:	4901      	ldr	r1, [pc, #4]	; (800abe8 <_cleanup_r+0x8>)
 800abe2:	f000 b8c1 	b.w	800ad68 <_fwalk_reent>
 800abe6:	bf00      	nop
 800abe8:	0800ab21 	.word	0x0800ab21

0800abec <__sfmoreglue>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	2268      	movs	r2, #104	; 0x68
 800abf0:	1e4d      	subs	r5, r1, #1
 800abf2:	4355      	muls	r5, r2
 800abf4:	460e      	mov	r6, r1
 800abf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abfa:	f000 f9b1 	bl	800af60 <_malloc_r>
 800abfe:	4604      	mov	r4, r0
 800ac00:	b140      	cbz	r0, 800ac14 <__sfmoreglue+0x28>
 800ac02:	2100      	movs	r1, #0
 800ac04:	e9c0 1600 	strd	r1, r6, [r0]
 800ac08:	300c      	adds	r0, #12
 800ac0a:	60a0      	str	r0, [r4, #8]
 800ac0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac10:	f7ff fcdc 	bl	800a5cc <memset>
 800ac14:	4620      	mov	r0, r4
 800ac16:	bd70      	pop	{r4, r5, r6, pc}

0800ac18 <__sfp_lock_acquire>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__sfp_lock_acquire+0x8>)
 800ac1a:	f000 b8c5 	b.w	800ada8 <__retarget_lock_acquire_recursive>
 800ac1e:	bf00      	nop
 800ac20:	200029f9 	.word	0x200029f9

0800ac24 <__sfp_lock_release>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__sfp_lock_release+0x8>)
 800ac26:	f000 b8c0 	b.w	800adaa <__retarget_lock_release_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	200029f9 	.word	0x200029f9

0800ac30 <__sinit_lock_acquire>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__sinit_lock_acquire+0x8>)
 800ac32:	f000 b8b9 	b.w	800ada8 <__retarget_lock_acquire_recursive>
 800ac36:	bf00      	nop
 800ac38:	200029fa 	.word	0x200029fa

0800ac3c <__sinit_lock_release>:
 800ac3c:	4801      	ldr	r0, [pc, #4]	; (800ac44 <__sinit_lock_release+0x8>)
 800ac3e:	f000 b8b4 	b.w	800adaa <__retarget_lock_release_recursive>
 800ac42:	bf00      	nop
 800ac44:	200029fa 	.word	0x200029fa

0800ac48 <__sinit>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	f7ff fff0 	bl	800ac30 <__sinit_lock_acquire>
 800ac50:	69a3      	ldr	r3, [r4, #24]
 800ac52:	b11b      	cbz	r3, 800ac5c <__sinit+0x14>
 800ac54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac58:	f7ff bff0 	b.w	800ac3c <__sinit_lock_release>
 800ac5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac60:	6523      	str	r3, [r4, #80]	; 0x50
 800ac62:	4b13      	ldr	r3, [pc, #76]	; (800acb0 <__sinit+0x68>)
 800ac64:	4a13      	ldr	r2, [pc, #76]	; (800acb4 <__sinit+0x6c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac6a:	42a3      	cmp	r3, r4
 800ac6c:	bf04      	itt	eq
 800ac6e:	2301      	moveq	r3, #1
 800ac70:	61a3      	streq	r3, [r4, #24]
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 f820 	bl	800acb8 <__sfp>
 800ac78:	6060      	str	r0, [r4, #4]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f81c 	bl	800acb8 <__sfp>
 800ac80:	60a0      	str	r0, [r4, #8]
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 f818 	bl	800acb8 <__sfp>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	60e0      	str	r0, [r4, #12]
 800ac8c:	2104      	movs	r1, #4
 800ac8e:	6860      	ldr	r0, [r4, #4]
 800ac90:	f7ff ff82 	bl	800ab98 <std>
 800ac94:	68a0      	ldr	r0, [r4, #8]
 800ac96:	2201      	movs	r2, #1
 800ac98:	2109      	movs	r1, #9
 800ac9a:	f7ff ff7d 	bl	800ab98 <std>
 800ac9e:	68e0      	ldr	r0, [r4, #12]
 800aca0:	2202      	movs	r2, #2
 800aca2:	2112      	movs	r1, #18
 800aca4:	f7ff ff78 	bl	800ab98 <std>
 800aca8:	2301      	movs	r3, #1
 800acaa:	61a3      	str	r3, [r4, #24]
 800acac:	e7d2      	b.n	800ac54 <__sinit+0xc>
 800acae:	bf00      	nop
 800acb0:	0800d7e0 	.word	0x0800d7e0
 800acb4:	0800abe1 	.word	0x0800abe1

0800acb8 <__sfp>:
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	4607      	mov	r7, r0
 800acbc:	f7ff ffac 	bl	800ac18 <__sfp_lock_acquire>
 800acc0:	4b1e      	ldr	r3, [pc, #120]	; (800ad3c <__sfp+0x84>)
 800acc2:	681e      	ldr	r6, [r3, #0]
 800acc4:	69b3      	ldr	r3, [r6, #24]
 800acc6:	b913      	cbnz	r3, 800acce <__sfp+0x16>
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff ffbd 	bl	800ac48 <__sinit>
 800acce:	3648      	adds	r6, #72	; 0x48
 800acd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	d503      	bpl.n	800ace0 <__sfp+0x28>
 800acd8:	6833      	ldr	r3, [r6, #0]
 800acda:	b30b      	cbz	r3, 800ad20 <__sfp+0x68>
 800acdc:	6836      	ldr	r6, [r6, #0]
 800acde:	e7f7      	b.n	800acd0 <__sfp+0x18>
 800ace0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ace4:	b9d5      	cbnz	r5, 800ad1c <__sfp+0x64>
 800ace6:	4b16      	ldr	r3, [pc, #88]	; (800ad40 <__sfp+0x88>)
 800ace8:	60e3      	str	r3, [r4, #12]
 800acea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acee:	6665      	str	r5, [r4, #100]	; 0x64
 800acf0:	f000 f859 	bl	800ada6 <__retarget_lock_init_recursive>
 800acf4:	f7ff ff96 	bl	800ac24 <__sfp_lock_release>
 800acf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad00:	6025      	str	r5, [r4, #0]
 800ad02:	61a5      	str	r5, [r4, #24]
 800ad04:	2208      	movs	r2, #8
 800ad06:	4629      	mov	r1, r5
 800ad08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad0c:	f7ff fc5e 	bl	800a5cc <memset>
 800ad10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad18:	4620      	mov	r0, r4
 800ad1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad1c:	3468      	adds	r4, #104	; 0x68
 800ad1e:	e7d9      	b.n	800acd4 <__sfp+0x1c>
 800ad20:	2104      	movs	r1, #4
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7ff ff62 	bl	800abec <__sfmoreglue>
 800ad28:	4604      	mov	r4, r0
 800ad2a:	6030      	str	r0, [r6, #0]
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1d5      	bne.n	800acdc <__sfp+0x24>
 800ad30:	f7ff ff78 	bl	800ac24 <__sfp_lock_release>
 800ad34:	230c      	movs	r3, #12
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	e7ee      	b.n	800ad18 <__sfp+0x60>
 800ad3a:	bf00      	nop
 800ad3c:	0800d7e0 	.word	0x0800d7e0
 800ad40:	ffff0001 	.word	0xffff0001

0800ad44 <fiprintf>:
 800ad44:	b40e      	push	{r1, r2, r3}
 800ad46:	b503      	push	{r0, r1, lr}
 800ad48:	4601      	mov	r1, r0
 800ad4a:	ab03      	add	r3, sp, #12
 800ad4c:	4805      	ldr	r0, [pc, #20]	; (800ad64 <fiprintf+0x20>)
 800ad4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad52:	6800      	ldr	r0, [r0, #0]
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	f000 fafd 	bl	800b354 <_vfiprintf_r>
 800ad5a:	b002      	add	sp, #8
 800ad5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad60:	b003      	add	sp, #12
 800ad62:	4770      	bx	lr
 800ad64:	20000068 	.word	0x20000068

0800ad68 <_fwalk_reent>:
 800ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	4688      	mov	r8, r1
 800ad70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad74:	2700      	movs	r7, #0
 800ad76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad7a:	f1b9 0901 	subs.w	r9, r9, #1
 800ad7e:	d505      	bpl.n	800ad8c <_fwalk_reent+0x24>
 800ad80:	6824      	ldr	r4, [r4, #0]
 800ad82:	2c00      	cmp	r4, #0
 800ad84:	d1f7      	bne.n	800ad76 <_fwalk_reent+0xe>
 800ad86:	4638      	mov	r0, r7
 800ad88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8c:	89ab      	ldrh	r3, [r5, #12]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d907      	bls.n	800ada2 <_fwalk_reent+0x3a>
 800ad92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad96:	3301      	adds	r3, #1
 800ad98:	d003      	beq.n	800ada2 <_fwalk_reent+0x3a>
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	47c0      	blx	r8
 800ada0:	4307      	orrs	r7, r0
 800ada2:	3568      	adds	r5, #104	; 0x68
 800ada4:	e7e9      	b.n	800ad7a <_fwalk_reent+0x12>

0800ada6 <__retarget_lock_init_recursive>:
 800ada6:	4770      	bx	lr

0800ada8 <__retarget_lock_acquire_recursive>:
 800ada8:	4770      	bx	lr

0800adaa <__retarget_lock_release_recursive>:
 800adaa:	4770      	bx	lr

0800adac <__swhatbuf_r>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	460e      	mov	r6, r1
 800adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb4:	2900      	cmp	r1, #0
 800adb6:	b096      	sub	sp, #88	; 0x58
 800adb8:	4614      	mov	r4, r2
 800adba:	461d      	mov	r5, r3
 800adbc:	da08      	bge.n	800add0 <__swhatbuf_r+0x24>
 800adbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	602a      	str	r2, [r5, #0]
 800adc6:	061a      	lsls	r2, r3, #24
 800adc8:	d410      	bmi.n	800adec <__swhatbuf_r+0x40>
 800adca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adce:	e00e      	b.n	800adee <__swhatbuf_r+0x42>
 800add0:	466a      	mov	r2, sp
 800add2:	f000 fe01 	bl	800b9d8 <_fstat_r>
 800add6:	2800      	cmp	r0, #0
 800add8:	dbf1      	blt.n	800adbe <__swhatbuf_r+0x12>
 800adda:	9a01      	ldr	r2, [sp, #4]
 800addc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ade0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ade4:	425a      	negs	r2, r3
 800ade6:	415a      	adcs	r2, r3
 800ade8:	602a      	str	r2, [r5, #0]
 800adea:	e7ee      	b.n	800adca <__swhatbuf_r+0x1e>
 800adec:	2340      	movs	r3, #64	; 0x40
 800adee:	2000      	movs	r0, #0
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	b016      	add	sp, #88	; 0x58
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adf8 <__smakebuf_r>:
 800adf8:	898b      	ldrh	r3, [r1, #12]
 800adfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adfc:	079d      	lsls	r5, r3, #30
 800adfe:	4606      	mov	r6, r0
 800ae00:	460c      	mov	r4, r1
 800ae02:	d507      	bpl.n	800ae14 <__smakebuf_r+0x1c>
 800ae04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	6123      	str	r3, [r4, #16]
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	6163      	str	r3, [r4, #20]
 800ae10:	b002      	add	sp, #8
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
 800ae14:	ab01      	add	r3, sp, #4
 800ae16:	466a      	mov	r2, sp
 800ae18:	f7ff ffc8 	bl	800adac <__swhatbuf_r>
 800ae1c:	9900      	ldr	r1, [sp, #0]
 800ae1e:	4605      	mov	r5, r0
 800ae20:	4630      	mov	r0, r6
 800ae22:	f000 f89d 	bl	800af60 <_malloc_r>
 800ae26:	b948      	cbnz	r0, 800ae3c <__smakebuf_r+0x44>
 800ae28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2c:	059a      	lsls	r2, r3, #22
 800ae2e:	d4ef      	bmi.n	800ae10 <__smakebuf_r+0x18>
 800ae30:	f023 0303 	bic.w	r3, r3, #3
 800ae34:	f043 0302 	orr.w	r3, r3, #2
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	e7e3      	b.n	800ae04 <__smakebuf_r+0xc>
 800ae3c:	4b0d      	ldr	r3, [pc, #52]	; (800ae74 <__smakebuf_r+0x7c>)
 800ae3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	6020      	str	r0, [r4, #0]
 800ae44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	9b00      	ldr	r3, [sp, #0]
 800ae4c:	6163      	str	r3, [r4, #20]
 800ae4e:	9b01      	ldr	r3, [sp, #4]
 800ae50:	6120      	str	r0, [r4, #16]
 800ae52:	b15b      	cbz	r3, 800ae6c <__smakebuf_r+0x74>
 800ae54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f000 fdcf 	bl	800b9fc <_isatty_r>
 800ae5e:	b128      	cbz	r0, 800ae6c <__smakebuf_r+0x74>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	f043 0301 	orr.w	r3, r3, #1
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	89a0      	ldrh	r0, [r4, #12]
 800ae6e:	4305      	orrs	r5, r0
 800ae70:	81a5      	strh	r5, [r4, #12]
 800ae72:	e7cd      	b.n	800ae10 <__smakebuf_r+0x18>
 800ae74:	0800abe1 	.word	0x0800abe1

0800ae78 <malloc>:
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <malloc+0xc>)
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	f000 b86f 	b.w	800af60 <_malloc_r>
 800ae82:	bf00      	nop
 800ae84:	20000068 	.word	0x20000068

0800ae88 <_free_r>:
 800ae88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae8a:	2900      	cmp	r1, #0
 800ae8c:	d044      	beq.n	800af18 <_free_r+0x90>
 800ae8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae92:	9001      	str	r0, [sp, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f1a1 0404 	sub.w	r4, r1, #4
 800ae9a:	bfb8      	it	lt
 800ae9c:	18e4      	addlt	r4, r4, r3
 800ae9e:	f000 fdf7 	bl	800ba90 <__malloc_lock>
 800aea2:	4a1e      	ldr	r2, [pc, #120]	; (800af1c <_free_r+0x94>)
 800aea4:	9801      	ldr	r0, [sp, #4]
 800aea6:	6813      	ldr	r3, [r2, #0]
 800aea8:	b933      	cbnz	r3, 800aeb8 <_free_r+0x30>
 800aeaa:	6063      	str	r3, [r4, #4]
 800aeac:	6014      	str	r4, [r2, #0]
 800aeae:	b003      	add	sp, #12
 800aeb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeb4:	f000 bdf2 	b.w	800ba9c <__malloc_unlock>
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	d908      	bls.n	800aece <_free_r+0x46>
 800aebc:	6825      	ldr	r5, [r4, #0]
 800aebe:	1961      	adds	r1, r4, r5
 800aec0:	428b      	cmp	r3, r1
 800aec2:	bf01      	itttt	eq
 800aec4:	6819      	ldreq	r1, [r3, #0]
 800aec6:	685b      	ldreq	r3, [r3, #4]
 800aec8:	1949      	addeq	r1, r1, r5
 800aeca:	6021      	streq	r1, [r4, #0]
 800aecc:	e7ed      	b.n	800aeaa <_free_r+0x22>
 800aece:	461a      	mov	r2, r3
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	b10b      	cbz	r3, 800aed8 <_free_r+0x50>
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	d9fa      	bls.n	800aece <_free_r+0x46>
 800aed8:	6811      	ldr	r1, [r2, #0]
 800aeda:	1855      	adds	r5, r2, r1
 800aedc:	42a5      	cmp	r5, r4
 800aede:	d10b      	bne.n	800aef8 <_free_r+0x70>
 800aee0:	6824      	ldr	r4, [r4, #0]
 800aee2:	4421      	add	r1, r4
 800aee4:	1854      	adds	r4, r2, r1
 800aee6:	42a3      	cmp	r3, r4
 800aee8:	6011      	str	r1, [r2, #0]
 800aeea:	d1e0      	bne.n	800aeae <_free_r+0x26>
 800aeec:	681c      	ldr	r4, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	6053      	str	r3, [r2, #4]
 800aef2:	4421      	add	r1, r4
 800aef4:	6011      	str	r1, [r2, #0]
 800aef6:	e7da      	b.n	800aeae <_free_r+0x26>
 800aef8:	d902      	bls.n	800af00 <_free_r+0x78>
 800aefa:	230c      	movs	r3, #12
 800aefc:	6003      	str	r3, [r0, #0]
 800aefe:	e7d6      	b.n	800aeae <_free_r+0x26>
 800af00:	6825      	ldr	r5, [r4, #0]
 800af02:	1961      	adds	r1, r4, r5
 800af04:	428b      	cmp	r3, r1
 800af06:	bf04      	itt	eq
 800af08:	6819      	ldreq	r1, [r3, #0]
 800af0a:	685b      	ldreq	r3, [r3, #4]
 800af0c:	6063      	str	r3, [r4, #4]
 800af0e:	bf04      	itt	eq
 800af10:	1949      	addeq	r1, r1, r5
 800af12:	6021      	streq	r1, [r4, #0]
 800af14:	6054      	str	r4, [r2, #4]
 800af16:	e7ca      	b.n	800aeae <_free_r+0x26>
 800af18:	b003      	add	sp, #12
 800af1a:	bd30      	pop	{r4, r5, pc}
 800af1c:	200029fc 	.word	0x200029fc

0800af20 <sbrk_aligned>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	4e0e      	ldr	r6, [pc, #56]	; (800af5c <sbrk_aligned+0x3c>)
 800af24:	460c      	mov	r4, r1
 800af26:	6831      	ldr	r1, [r6, #0]
 800af28:	4605      	mov	r5, r0
 800af2a:	b911      	cbnz	r1, 800af32 <sbrk_aligned+0x12>
 800af2c:	f000 fcd6 	bl	800b8dc <_sbrk_r>
 800af30:	6030      	str	r0, [r6, #0]
 800af32:	4621      	mov	r1, r4
 800af34:	4628      	mov	r0, r5
 800af36:	f000 fcd1 	bl	800b8dc <_sbrk_r>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	d00a      	beq.n	800af54 <sbrk_aligned+0x34>
 800af3e:	1cc4      	adds	r4, r0, #3
 800af40:	f024 0403 	bic.w	r4, r4, #3
 800af44:	42a0      	cmp	r0, r4
 800af46:	d007      	beq.n	800af58 <sbrk_aligned+0x38>
 800af48:	1a21      	subs	r1, r4, r0
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 fcc6 	bl	800b8dc <_sbrk_r>
 800af50:	3001      	adds	r0, #1
 800af52:	d101      	bne.n	800af58 <sbrk_aligned+0x38>
 800af54:	f04f 34ff 	mov.w	r4, #4294967295
 800af58:	4620      	mov	r0, r4
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	20002a00 	.word	0x20002a00

0800af60 <_malloc_r>:
 800af60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af64:	1ccd      	adds	r5, r1, #3
 800af66:	f025 0503 	bic.w	r5, r5, #3
 800af6a:	3508      	adds	r5, #8
 800af6c:	2d0c      	cmp	r5, #12
 800af6e:	bf38      	it	cc
 800af70:	250c      	movcc	r5, #12
 800af72:	2d00      	cmp	r5, #0
 800af74:	4607      	mov	r7, r0
 800af76:	db01      	blt.n	800af7c <_malloc_r+0x1c>
 800af78:	42a9      	cmp	r1, r5
 800af7a:	d905      	bls.n	800af88 <_malloc_r+0x28>
 800af7c:	230c      	movs	r3, #12
 800af7e:	603b      	str	r3, [r7, #0]
 800af80:	2600      	movs	r6, #0
 800af82:	4630      	mov	r0, r6
 800af84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af88:	4e2e      	ldr	r6, [pc, #184]	; (800b044 <_malloc_r+0xe4>)
 800af8a:	f000 fd81 	bl	800ba90 <__malloc_lock>
 800af8e:	6833      	ldr	r3, [r6, #0]
 800af90:	461c      	mov	r4, r3
 800af92:	bb34      	cbnz	r4, 800afe2 <_malloc_r+0x82>
 800af94:	4629      	mov	r1, r5
 800af96:	4638      	mov	r0, r7
 800af98:	f7ff ffc2 	bl	800af20 <sbrk_aligned>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	4604      	mov	r4, r0
 800afa0:	d14d      	bne.n	800b03e <_malloc_r+0xde>
 800afa2:	6834      	ldr	r4, [r6, #0]
 800afa4:	4626      	mov	r6, r4
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	d140      	bne.n	800b02c <_malloc_r+0xcc>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	4631      	mov	r1, r6
 800afae:	4638      	mov	r0, r7
 800afb0:	eb04 0803 	add.w	r8, r4, r3
 800afb4:	f000 fc92 	bl	800b8dc <_sbrk_r>
 800afb8:	4580      	cmp	r8, r0
 800afba:	d13a      	bne.n	800b032 <_malloc_r+0xd2>
 800afbc:	6821      	ldr	r1, [r4, #0]
 800afbe:	3503      	adds	r5, #3
 800afc0:	1a6d      	subs	r5, r5, r1
 800afc2:	f025 0503 	bic.w	r5, r5, #3
 800afc6:	3508      	adds	r5, #8
 800afc8:	2d0c      	cmp	r5, #12
 800afca:	bf38      	it	cc
 800afcc:	250c      	movcc	r5, #12
 800afce:	4629      	mov	r1, r5
 800afd0:	4638      	mov	r0, r7
 800afd2:	f7ff ffa5 	bl	800af20 <sbrk_aligned>
 800afd6:	3001      	adds	r0, #1
 800afd8:	d02b      	beq.n	800b032 <_malloc_r+0xd2>
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	442b      	add	r3, r5
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	e00e      	b.n	800b000 <_malloc_r+0xa0>
 800afe2:	6822      	ldr	r2, [r4, #0]
 800afe4:	1b52      	subs	r2, r2, r5
 800afe6:	d41e      	bmi.n	800b026 <_malloc_r+0xc6>
 800afe8:	2a0b      	cmp	r2, #11
 800afea:	d916      	bls.n	800b01a <_malloc_r+0xba>
 800afec:	1961      	adds	r1, r4, r5
 800afee:	42a3      	cmp	r3, r4
 800aff0:	6025      	str	r5, [r4, #0]
 800aff2:	bf18      	it	ne
 800aff4:	6059      	strne	r1, [r3, #4]
 800aff6:	6863      	ldr	r3, [r4, #4]
 800aff8:	bf08      	it	eq
 800affa:	6031      	streq	r1, [r6, #0]
 800affc:	5162      	str	r2, [r4, r5]
 800affe:	604b      	str	r3, [r1, #4]
 800b000:	4638      	mov	r0, r7
 800b002:	f104 060b 	add.w	r6, r4, #11
 800b006:	f000 fd49 	bl	800ba9c <__malloc_unlock>
 800b00a:	f026 0607 	bic.w	r6, r6, #7
 800b00e:	1d23      	adds	r3, r4, #4
 800b010:	1af2      	subs	r2, r6, r3
 800b012:	d0b6      	beq.n	800af82 <_malloc_r+0x22>
 800b014:	1b9b      	subs	r3, r3, r6
 800b016:	50a3      	str	r3, [r4, r2]
 800b018:	e7b3      	b.n	800af82 <_malloc_r+0x22>
 800b01a:	6862      	ldr	r2, [r4, #4]
 800b01c:	42a3      	cmp	r3, r4
 800b01e:	bf0c      	ite	eq
 800b020:	6032      	streq	r2, [r6, #0]
 800b022:	605a      	strne	r2, [r3, #4]
 800b024:	e7ec      	b.n	800b000 <_malloc_r+0xa0>
 800b026:	4623      	mov	r3, r4
 800b028:	6864      	ldr	r4, [r4, #4]
 800b02a:	e7b2      	b.n	800af92 <_malloc_r+0x32>
 800b02c:	4634      	mov	r4, r6
 800b02e:	6876      	ldr	r6, [r6, #4]
 800b030:	e7b9      	b.n	800afa6 <_malloc_r+0x46>
 800b032:	230c      	movs	r3, #12
 800b034:	603b      	str	r3, [r7, #0]
 800b036:	4638      	mov	r0, r7
 800b038:	f000 fd30 	bl	800ba9c <__malloc_unlock>
 800b03c:	e7a1      	b.n	800af82 <_malloc_r+0x22>
 800b03e:	6025      	str	r5, [r4, #0]
 800b040:	e7de      	b.n	800b000 <_malloc_r+0xa0>
 800b042:	bf00      	nop
 800b044:	200029fc 	.word	0x200029fc

0800b048 <__ssputs_r>:
 800b048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b04c:	688e      	ldr	r6, [r1, #8]
 800b04e:	429e      	cmp	r6, r3
 800b050:	4682      	mov	sl, r0
 800b052:	460c      	mov	r4, r1
 800b054:	4690      	mov	r8, r2
 800b056:	461f      	mov	r7, r3
 800b058:	d838      	bhi.n	800b0cc <__ssputs_r+0x84>
 800b05a:	898a      	ldrh	r2, [r1, #12]
 800b05c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b060:	d032      	beq.n	800b0c8 <__ssputs_r+0x80>
 800b062:	6825      	ldr	r5, [r4, #0]
 800b064:	6909      	ldr	r1, [r1, #16]
 800b066:	eba5 0901 	sub.w	r9, r5, r1
 800b06a:	6965      	ldr	r5, [r4, #20]
 800b06c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b074:	3301      	adds	r3, #1
 800b076:	444b      	add	r3, r9
 800b078:	106d      	asrs	r5, r5, #1
 800b07a:	429d      	cmp	r5, r3
 800b07c:	bf38      	it	cc
 800b07e:	461d      	movcc	r5, r3
 800b080:	0553      	lsls	r3, r2, #21
 800b082:	d531      	bpl.n	800b0e8 <__ssputs_r+0xa0>
 800b084:	4629      	mov	r1, r5
 800b086:	f7ff ff6b 	bl	800af60 <_malloc_r>
 800b08a:	4606      	mov	r6, r0
 800b08c:	b950      	cbnz	r0, 800b0a4 <__ssputs_r+0x5c>
 800b08e:	230c      	movs	r3, #12
 800b090:	f8ca 3000 	str.w	r3, [sl]
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a4:	6921      	ldr	r1, [r4, #16]
 800b0a6:	464a      	mov	r2, r9
 800b0a8:	f000 fcca 	bl	800ba40 <memcpy>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	6126      	str	r6, [r4, #16]
 800b0ba:	6165      	str	r5, [r4, #20]
 800b0bc:	444e      	add	r6, r9
 800b0be:	eba5 0509 	sub.w	r5, r5, r9
 800b0c2:	6026      	str	r6, [r4, #0]
 800b0c4:	60a5      	str	r5, [r4, #8]
 800b0c6:	463e      	mov	r6, r7
 800b0c8:	42be      	cmp	r6, r7
 800b0ca:	d900      	bls.n	800b0ce <__ssputs_r+0x86>
 800b0cc:	463e      	mov	r6, r7
 800b0ce:	6820      	ldr	r0, [r4, #0]
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	4641      	mov	r1, r8
 800b0d4:	f000 fcc2 	bl	800ba5c <memmove>
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	1b9b      	subs	r3, r3, r6
 800b0dc:	60a3      	str	r3, [r4, #8]
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	4433      	add	r3, r6
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	e7db      	b.n	800b0a0 <__ssputs_r+0x58>
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	f000 fcdd 	bl	800baa8 <_realloc_r>
 800b0ee:	4606      	mov	r6, r0
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d1e1      	bne.n	800b0b8 <__ssputs_r+0x70>
 800b0f4:	6921      	ldr	r1, [r4, #16]
 800b0f6:	4650      	mov	r0, sl
 800b0f8:	f7ff fec6 	bl	800ae88 <_free_r>
 800b0fc:	e7c7      	b.n	800b08e <__ssputs_r+0x46>
	...

0800b100 <_svfiprintf_r>:
 800b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	4698      	mov	r8, r3
 800b106:	898b      	ldrh	r3, [r1, #12]
 800b108:	061b      	lsls	r3, r3, #24
 800b10a:	b09d      	sub	sp, #116	; 0x74
 800b10c:	4607      	mov	r7, r0
 800b10e:	460d      	mov	r5, r1
 800b110:	4614      	mov	r4, r2
 800b112:	d50e      	bpl.n	800b132 <_svfiprintf_r+0x32>
 800b114:	690b      	ldr	r3, [r1, #16]
 800b116:	b963      	cbnz	r3, 800b132 <_svfiprintf_r+0x32>
 800b118:	2140      	movs	r1, #64	; 0x40
 800b11a:	f7ff ff21 	bl	800af60 <_malloc_r>
 800b11e:	6028      	str	r0, [r5, #0]
 800b120:	6128      	str	r0, [r5, #16]
 800b122:	b920      	cbnz	r0, 800b12e <_svfiprintf_r+0x2e>
 800b124:	230c      	movs	r3, #12
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	f04f 30ff 	mov.w	r0, #4294967295
 800b12c:	e0d1      	b.n	800b2d2 <_svfiprintf_r+0x1d2>
 800b12e:	2340      	movs	r3, #64	; 0x40
 800b130:	616b      	str	r3, [r5, #20]
 800b132:	2300      	movs	r3, #0
 800b134:	9309      	str	r3, [sp, #36]	; 0x24
 800b136:	2320      	movs	r3, #32
 800b138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b13c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b140:	2330      	movs	r3, #48	; 0x30
 800b142:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2ec <_svfiprintf_r+0x1ec>
 800b146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b14a:	f04f 0901 	mov.w	r9, #1
 800b14e:	4623      	mov	r3, r4
 800b150:	469a      	mov	sl, r3
 800b152:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b156:	b10a      	cbz	r2, 800b15c <_svfiprintf_r+0x5c>
 800b158:	2a25      	cmp	r2, #37	; 0x25
 800b15a:	d1f9      	bne.n	800b150 <_svfiprintf_r+0x50>
 800b15c:	ebba 0b04 	subs.w	fp, sl, r4
 800b160:	d00b      	beq.n	800b17a <_svfiprintf_r+0x7a>
 800b162:	465b      	mov	r3, fp
 800b164:	4622      	mov	r2, r4
 800b166:	4629      	mov	r1, r5
 800b168:	4638      	mov	r0, r7
 800b16a:	f7ff ff6d 	bl	800b048 <__ssputs_r>
 800b16e:	3001      	adds	r0, #1
 800b170:	f000 80aa 	beq.w	800b2c8 <_svfiprintf_r+0x1c8>
 800b174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b176:	445a      	add	r2, fp
 800b178:	9209      	str	r2, [sp, #36]	; 0x24
 800b17a:	f89a 3000 	ldrb.w	r3, [sl]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f000 80a2 	beq.w	800b2c8 <_svfiprintf_r+0x1c8>
 800b184:	2300      	movs	r3, #0
 800b186:	f04f 32ff 	mov.w	r2, #4294967295
 800b18a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b18e:	f10a 0a01 	add.w	sl, sl, #1
 800b192:	9304      	str	r3, [sp, #16]
 800b194:	9307      	str	r3, [sp, #28]
 800b196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b19a:	931a      	str	r3, [sp, #104]	; 0x68
 800b19c:	4654      	mov	r4, sl
 800b19e:	2205      	movs	r2, #5
 800b1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a4:	4851      	ldr	r0, [pc, #324]	; (800b2ec <_svfiprintf_r+0x1ec>)
 800b1a6:	f7f5 f813 	bl	80001d0 <memchr>
 800b1aa:	9a04      	ldr	r2, [sp, #16]
 800b1ac:	b9d8      	cbnz	r0, 800b1e6 <_svfiprintf_r+0xe6>
 800b1ae:	06d0      	lsls	r0, r2, #27
 800b1b0:	bf44      	itt	mi
 800b1b2:	2320      	movmi	r3, #32
 800b1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b8:	0711      	lsls	r1, r2, #28
 800b1ba:	bf44      	itt	mi
 800b1bc:	232b      	movmi	r3, #43	; 0x2b
 800b1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c8:	d015      	beq.n	800b1f6 <_svfiprintf_r+0xf6>
 800b1ca:	9a07      	ldr	r2, [sp, #28]
 800b1cc:	4654      	mov	r4, sl
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	f04f 0c0a 	mov.w	ip, #10
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1da:	3b30      	subs	r3, #48	; 0x30
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	d94e      	bls.n	800b27e <_svfiprintf_r+0x17e>
 800b1e0:	b1b0      	cbz	r0, 800b210 <_svfiprintf_r+0x110>
 800b1e2:	9207      	str	r2, [sp, #28]
 800b1e4:	e014      	b.n	800b210 <_svfiprintf_r+0x110>
 800b1e6:	eba0 0308 	sub.w	r3, r0, r8
 800b1ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	9304      	str	r3, [sp, #16]
 800b1f2:	46a2      	mov	sl, r4
 800b1f4:	e7d2      	b.n	800b19c <_svfiprintf_r+0x9c>
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	1d19      	adds	r1, r3, #4
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	9103      	str	r1, [sp, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	bfbb      	ittet	lt
 800b202:	425b      	neglt	r3, r3
 800b204:	f042 0202 	orrlt.w	r2, r2, #2
 800b208:	9307      	strge	r3, [sp, #28]
 800b20a:	9307      	strlt	r3, [sp, #28]
 800b20c:	bfb8      	it	lt
 800b20e:	9204      	strlt	r2, [sp, #16]
 800b210:	7823      	ldrb	r3, [r4, #0]
 800b212:	2b2e      	cmp	r3, #46	; 0x2e
 800b214:	d10c      	bne.n	800b230 <_svfiprintf_r+0x130>
 800b216:	7863      	ldrb	r3, [r4, #1]
 800b218:	2b2a      	cmp	r3, #42	; 0x2a
 800b21a:	d135      	bne.n	800b288 <_svfiprintf_r+0x188>
 800b21c:	9b03      	ldr	r3, [sp, #12]
 800b21e:	1d1a      	adds	r2, r3, #4
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	9203      	str	r2, [sp, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	bfb8      	it	lt
 800b228:	f04f 33ff 	movlt.w	r3, #4294967295
 800b22c:	3402      	adds	r4, #2
 800b22e:	9305      	str	r3, [sp, #20]
 800b230:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2fc <_svfiprintf_r+0x1fc>
 800b234:	7821      	ldrb	r1, [r4, #0]
 800b236:	2203      	movs	r2, #3
 800b238:	4650      	mov	r0, sl
 800b23a:	f7f4 ffc9 	bl	80001d0 <memchr>
 800b23e:	b140      	cbz	r0, 800b252 <_svfiprintf_r+0x152>
 800b240:	2340      	movs	r3, #64	; 0x40
 800b242:	eba0 000a 	sub.w	r0, r0, sl
 800b246:	fa03 f000 	lsl.w	r0, r3, r0
 800b24a:	9b04      	ldr	r3, [sp, #16]
 800b24c:	4303      	orrs	r3, r0
 800b24e:	3401      	adds	r4, #1
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	4826      	ldr	r0, [pc, #152]	; (800b2f0 <_svfiprintf_r+0x1f0>)
 800b258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b25c:	2206      	movs	r2, #6
 800b25e:	f7f4 ffb7 	bl	80001d0 <memchr>
 800b262:	2800      	cmp	r0, #0
 800b264:	d038      	beq.n	800b2d8 <_svfiprintf_r+0x1d8>
 800b266:	4b23      	ldr	r3, [pc, #140]	; (800b2f4 <_svfiprintf_r+0x1f4>)
 800b268:	bb1b      	cbnz	r3, 800b2b2 <_svfiprintf_r+0x1b2>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	3307      	adds	r3, #7
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	3308      	adds	r3, #8
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b278:	4433      	add	r3, r6
 800b27a:	9309      	str	r3, [sp, #36]	; 0x24
 800b27c:	e767      	b.n	800b14e <_svfiprintf_r+0x4e>
 800b27e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b282:	460c      	mov	r4, r1
 800b284:	2001      	movs	r0, #1
 800b286:	e7a5      	b.n	800b1d4 <_svfiprintf_r+0xd4>
 800b288:	2300      	movs	r3, #0
 800b28a:	3401      	adds	r4, #1
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	4619      	mov	r1, r3
 800b290:	f04f 0c0a 	mov.w	ip, #10
 800b294:	4620      	mov	r0, r4
 800b296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b29a:	3a30      	subs	r2, #48	; 0x30
 800b29c:	2a09      	cmp	r2, #9
 800b29e:	d903      	bls.n	800b2a8 <_svfiprintf_r+0x1a8>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0c5      	beq.n	800b230 <_svfiprintf_r+0x130>
 800b2a4:	9105      	str	r1, [sp, #20]
 800b2a6:	e7c3      	b.n	800b230 <_svfiprintf_r+0x130>
 800b2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e7f0      	b.n	800b294 <_svfiprintf_r+0x194>
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <_svfiprintf_r+0x1f8>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	4638      	mov	r0, r7
 800b2be:	f3af 8000 	nop.w
 800b2c2:	1c42      	adds	r2, r0, #1
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	d1d6      	bne.n	800b276 <_svfiprintf_r+0x176>
 800b2c8:	89ab      	ldrh	r3, [r5, #12]
 800b2ca:	065b      	lsls	r3, r3, #25
 800b2cc:	f53f af2c 	bmi.w	800b128 <_svfiprintf_r+0x28>
 800b2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2d2:	b01d      	add	sp, #116	; 0x74
 800b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d8:	ab03      	add	r3, sp, #12
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	462a      	mov	r2, r5
 800b2de:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <_svfiprintf_r+0x1f8>)
 800b2e0:	a904      	add	r1, sp, #16
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f000 f9d4 	bl	800b690 <_printf_i>
 800b2e8:	e7eb      	b.n	800b2c2 <_svfiprintf_r+0x1c2>
 800b2ea:	bf00      	nop
 800b2ec:	0800d8f4 	.word	0x0800d8f4
 800b2f0:	0800d8fe 	.word	0x0800d8fe
 800b2f4:	00000000 	.word	0x00000000
 800b2f8:	0800b049 	.word	0x0800b049
 800b2fc:	0800d8fa 	.word	0x0800d8fa

0800b300 <__sfputc_r>:
 800b300:	6893      	ldr	r3, [r2, #8]
 800b302:	3b01      	subs	r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	b410      	push	{r4}
 800b308:	6093      	str	r3, [r2, #8]
 800b30a:	da08      	bge.n	800b31e <__sfputc_r+0x1e>
 800b30c:	6994      	ldr	r4, [r2, #24]
 800b30e:	42a3      	cmp	r3, r4
 800b310:	db01      	blt.n	800b316 <__sfputc_r+0x16>
 800b312:	290a      	cmp	r1, #10
 800b314:	d103      	bne.n	800b31e <__sfputc_r+0x1e>
 800b316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b31a:	f7ff ba9d 	b.w	800a858 <__swbuf_r>
 800b31e:	6813      	ldr	r3, [r2, #0]
 800b320:	1c58      	adds	r0, r3, #1
 800b322:	6010      	str	r0, [r2, #0]
 800b324:	7019      	strb	r1, [r3, #0]
 800b326:	4608      	mov	r0, r1
 800b328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <__sfputs_r>:
 800b32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b330:	4606      	mov	r6, r0
 800b332:	460f      	mov	r7, r1
 800b334:	4614      	mov	r4, r2
 800b336:	18d5      	adds	r5, r2, r3
 800b338:	42ac      	cmp	r4, r5
 800b33a:	d101      	bne.n	800b340 <__sfputs_r+0x12>
 800b33c:	2000      	movs	r0, #0
 800b33e:	e007      	b.n	800b350 <__sfputs_r+0x22>
 800b340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b344:	463a      	mov	r2, r7
 800b346:	4630      	mov	r0, r6
 800b348:	f7ff ffda 	bl	800b300 <__sfputc_r>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d1f3      	bne.n	800b338 <__sfputs_r+0xa>
 800b350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b354 <_vfiprintf_r>:
 800b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b358:	460d      	mov	r5, r1
 800b35a:	b09d      	sub	sp, #116	; 0x74
 800b35c:	4614      	mov	r4, r2
 800b35e:	4698      	mov	r8, r3
 800b360:	4606      	mov	r6, r0
 800b362:	b118      	cbz	r0, 800b36c <_vfiprintf_r+0x18>
 800b364:	6983      	ldr	r3, [r0, #24]
 800b366:	b90b      	cbnz	r3, 800b36c <_vfiprintf_r+0x18>
 800b368:	f7ff fc6e 	bl	800ac48 <__sinit>
 800b36c:	4b89      	ldr	r3, [pc, #548]	; (800b594 <_vfiprintf_r+0x240>)
 800b36e:	429d      	cmp	r5, r3
 800b370:	d11b      	bne.n	800b3aa <_vfiprintf_r+0x56>
 800b372:	6875      	ldr	r5, [r6, #4]
 800b374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d405      	bmi.n	800b386 <_vfiprintf_r+0x32>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	059a      	lsls	r2, r3, #22
 800b37e:	d402      	bmi.n	800b386 <_vfiprintf_r+0x32>
 800b380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b382:	f7ff fd11 	bl	800ada8 <__retarget_lock_acquire_recursive>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	071b      	lsls	r3, r3, #28
 800b38a:	d501      	bpl.n	800b390 <_vfiprintf_r+0x3c>
 800b38c:	692b      	ldr	r3, [r5, #16]
 800b38e:	b9eb      	cbnz	r3, 800b3cc <_vfiprintf_r+0x78>
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff fab2 	bl	800a8fc <__swsetup_r>
 800b398:	b1c0      	cbz	r0, 800b3cc <_vfiprintf_r+0x78>
 800b39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b39c:	07dc      	lsls	r4, r3, #31
 800b39e:	d50e      	bpl.n	800b3be <_vfiprintf_r+0x6a>
 800b3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a4:	b01d      	add	sp, #116	; 0x74
 800b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3aa:	4b7b      	ldr	r3, [pc, #492]	; (800b598 <_vfiprintf_r+0x244>)
 800b3ac:	429d      	cmp	r5, r3
 800b3ae:	d101      	bne.n	800b3b4 <_vfiprintf_r+0x60>
 800b3b0:	68b5      	ldr	r5, [r6, #8]
 800b3b2:	e7df      	b.n	800b374 <_vfiprintf_r+0x20>
 800b3b4:	4b79      	ldr	r3, [pc, #484]	; (800b59c <_vfiprintf_r+0x248>)
 800b3b6:	429d      	cmp	r5, r3
 800b3b8:	bf08      	it	eq
 800b3ba:	68f5      	ldreq	r5, [r6, #12]
 800b3bc:	e7da      	b.n	800b374 <_vfiprintf_r+0x20>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	0598      	lsls	r0, r3, #22
 800b3c2:	d4ed      	bmi.n	800b3a0 <_vfiprintf_r+0x4c>
 800b3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c6:	f7ff fcf0 	bl	800adaa <__retarget_lock_release_recursive>
 800b3ca:	e7e9      	b.n	800b3a0 <_vfiprintf_r+0x4c>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d0:	2320      	movs	r3, #32
 800b3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3da:	2330      	movs	r3, #48	; 0x30
 800b3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5a0 <_vfiprintf_r+0x24c>
 800b3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e4:	f04f 0901 	mov.w	r9, #1
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	469a      	mov	sl, r3
 800b3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f0:	b10a      	cbz	r2, 800b3f6 <_vfiprintf_r+0xa2>
 800b3f2:	2a25      	cmp	r2, #37	; 0x25
 800b3f4:	d1f9      	bne.n	800b3ea <_vfiprintf_r+0x96>
 800b3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3fa:	d00b      	beq.n	800b414 <_vfiprintf_r+0xc0>
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	4622      	mov	r2, r4
 800b400:	4629      	mov	r1, r5
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff ff93 	bl	800b32e <__sfputs_r>
 800b408:	3001      	adds	r0, #1
 800b40a:	f000 80aa 	beq.w	800b562 <_vfiprintf_r+0x20e>
 800b40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b410:	445a      	add	r2, fp
 800b412:	9209      	str	r2, [sp, #36]	; 0x24
 800b414:	f89a 3000 	ldrb.w	r3, [sl]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80a2 	beq.w	800b562 <_vfiprintf_r+0x20e>
 800b41e:	2300      	movs	r3, #0
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b428:	f10a 0a01 	add.w	sl, sl, #1
 800b42c:	9304      	str	r3, [sp, #16]
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b434:	931a      	str	r3, [sp, #104]	; 0x68
 800b436:	4654      	mov	r4, sl
 800b438:	2205      	movs	r2, #5
 800b43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43e:	4858      	ldr	r0, [pc, #352]	; (800b5a0 <_vfiprintf_r+0x24c>)
 800b440:	f7f4 fec6 	bl	80001d0 <memchr>
 800b444:	9a04      	ldr	r2, [sp, #16]
 800b446:	b9d8      	cbnz	r0, 800b480 <_vfiprintf_r+0x12c>
 800b448:	06d1      	lsls	r1, r2, #27
 800b44a:	bf44      	itt	mi
 800b44c:	2320      	movmi	r3, #32
 800b44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b452:	0713      	lsls	r3, r2, #28
 800b454:	bf44      	itt	mi
 800b456:	232b      	movmi	r3, #43	; 0x2b
 800b458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45c:	f89a 3000 	ldrb.w	r3, [sl]
 800b460:	2b2a      	cmp	r3, #42	; 0x2a
 800b462:	d015      	beq.n	800b490 <_vfiprintf_r+0x13c>
 800b464:	9a07      	ldr	r2, [sp, #28]
 800b466:	4654      	mov	r4, sl
 800b468:	2000      	movs	r0, #0
 800b46a:	f04f 0c0a 	mov.w	ip, #10
 800b46e:	4621      	mov	r1, r4
 800b470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b474:	3b30      	subs	r3, #48	; 0x30
 800b476:	2b09      	cmp	r3, #9
 800b478:	d94e      	bls.n	800b518 <_vfiprintf_r+0x1c4>
 800b47a:	b1b0      	cbz	r0, 800b4aa <_vfiprintf_r+0x156>
 800b47c:	9207      	str	r2, [sp, #28]
 800b47e:	e014      	b.n	800b4aa <_vfiprintf_r+0x156>
 800b480:	eba0 0308 	sub.w	r3, r0, r8
 800b484:	fa09 f303 	lsl.w	r3, r9, r3
 800b488:	4313      	orrs	r3, r2
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	46a2      	mov	sl, r4
 800b48e:	e7d2      	b.n	800b436 <_vfiprintf_r+0xe2>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	1d19      	adds	r1, r3, #4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	9103      	str	r1, [sp, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bfbb      	ittet	lt
 800b49c:	425b      	neglt	r3, r3
 800b49e:	f042 0202 	orrlt.w	r2, r2, #2
 800b4a2:	9307      	strge	r3, [sp, #28]
 800b4a4:	9307      	strlt	r3, [sp, #28]
 800b4a6:	bfb8      	it	lt
 800b4a8:	9204      	strlt	r2, [sp, #16]
 800b4aa:	7823      	ldrb	r3, [r4, #0]
 800b4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ae:	d10c      	bne.n	800b4ca <_vfiprintf_r+0x176>
 800b4b0:	7863      	ldrb	r3, [r4, #1]
 800b4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b4:	d135      	bne.n	800b522 <_vfiprintf_r+0x1ce>
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	1d1a      	adds	r2, r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	9203      	str	r2, [sp, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bfb8      	it	lt
 800b4c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c6:	3402      	adds	r4, #2
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5b0 <_vfiprintf_r+0x25c>
 800b4ce:	7821      	ldrb	r1, [r4, #0]
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	4650      	mov	r0, sl
 800b4d4:	f7f4 fe7c 	bl	80001d0 <memchr>
 800b4d8:	b140      	cbz	r0, 800b4ec <_vfiprintf_r+0x198>
 800b4da:	2340      	movs	r3, #64	; 0x40
 800b4dc:	eba0 000a 	sub.w	r0, r0, sl
 800b4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e4:	9b04      	ldr	r3, [sp, #16]
 800b4e6:	4303      	orrs	r3, r0
 800b4e8:	3401      	adds	r4, #1
 800b4ea:	9304      	str	r3, [sp, #16]
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	482c      	ldr	r0, [pc, #176]	; (800b5a4 <_vfiprintf_r+0x250>)
 800b4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f6:	2206      	movs	r2, #6
 800b4f8:	f7f4 fe6a 	bl	80001d0 <memchr>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d03f      	beq.n	800b580 <_vfiprintf_r+0x22c>
 800b500:	4b29      	ldr	r3, [pc, #164]	; (800b5a8 <_vfiprintf_r+0x254>)
 800b502:	bb1b      	cbnz	r3, 800b54c <_vfiprintf_r+0x1f8>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	3307      	adds	r3, #7
 800b508:	f023 0307 	bic.w	r3, r3, #7
 800b50c:	3308      	adds	r3, #8
 800b50e:	9303      	str	r3, [sp, #12]
 800b510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b512:	443b      	add	r3, r7
 800b514:	9309      	str	r3, [sp, #36]	; 0x24
 800b516:	e767      	b.n	800b3e8 <_vfiprintf_r+0x94>
 800b518:	fb0c 3202 	mla	r2, ip, r2, r3
 800b51c:	460c      	mov	r4, r1
 800b51e:	2001      	movs	r0, #1
 800b520:	e7a5      	b.n	800b46e <_vfiprintf_r+0x11a>
 800b522:	2300      	movs	r3, #0
 800b524:	3401      	adds	r4, #1
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	4619      	mov	r1, r3
 800b52a:	f04f 0c0a 	mov.w	ip, #10
 800b52e:	4620      	mov	r0, r4
 800b530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b534:	3a30      	subs	r2, #48	; 0x30
 800b536:	2a09      	cmp	r2, #9
 800b538:	d903      	bls.n	800b542 <_vfiprintf_r+0x1ee>
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0c5      	beq.n	800b4ca <_vfiprintf_r+0x176>
 800b53e:	9105      	str	r1, [sp, #20]
 800b540:	e7c3      	b.n	800b4ca <_vfiprintf_r+0x176>
 800b542:	fb0c 2101 	mla	r1, ip, r1, r2
 800b546:	4604      	mov	r4, r0
 800b548:	2301      	movs	r3, #1
 800b54a:	e7f0      	b.n	800b52e <_vfiprintf_r+0x1da>
 800b54c:	ab03      	add	r3, sp, #12
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	462a      	mov	r2, r5
 800b552:	4b16      	ldr	r3, [pc, #88]	; (800b5ac <_vfiprintf_r+0x258>)
 800b554:	a904      	add	r1, sp, #16
 800b556:	4630      	mov	r0, r6
 800b558:	f3af 8000 	nop.w
 800b55c:	4607      	mov	r7, r0
 800b55e:	1c78      	adds	r0, r7, #1
 800b560:	d1d6      	bne.n	800b510 <_vfiprintf_r+0x1bc>
 800b562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b564:	07d9      	lsls	r1, r3, #31
 800b566:	d405      	bmi.n	800b574 <_vfiprintf_r+0x220>
 800b568:	89ab      	ldrh	r3, [r5, #12]
 800b56a:	059a      	lsls	r2, r3, #22
 800b56c:	d402      	bmi.n	800b574 <_vfiprintf_r+0x220>
 800b56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b570:	f7ff fc1b 	bl	800adaa <__retarget_lock_release_recursive>
 800b574:	89ab      	ldrh	r3, [r5, #12]
 800b576:	065b      	lsls	r3, r3, #25
 800b578:	f53f af12 	bmi.w	800b3a0 <_vfiprintf_r+0x4c>
 800b57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b57e:	e711      	b.n	800b3a4 <_vfiprintf_r+0x50>
 800b580:	ab03      	add	r3, sp, #12
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	462a      	mov	r2, r5
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <_vfiprintf_r+0x258>)
 800b588:	a904      	add	r1, sp, #16
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 f880 	bl	800b690 <_printf_i>
 800b590:	e7e4      	b.n	800b55c <_vfiprintf_r+0x208>
 800b592:	bf00      	nop
 800b594:	0800d8b4 	.word	0x0800d8b4
 800b598:	0800d8d4 	.word	0x0800d8d4
 800b59c:	0800d894 	.word	0x0800d894
 800b5a0:	0800d8f4 	.word	0x0800d8f4
 800b5a4:	0800d8fe 	.word	0x0800d8fe
 800b5a8:	00000000 	.word	0x00000000
 800b5ac:	0800b32f 	.word	0x0800b32f
 800b5b0:	0800d8fa 	.word	0x0800d8fa

0800b5b4 <_printf_common>:
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	4699      	mov	r9, r3
 800b5bc:	688a      	ldr	r2, [r1, #8]
 800b5be:	690b      	ldr	r3, [r1, #16]
 800b5c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	bfb8      	it	lt
 800b5c8:	4613      	movlt	r3, r2
 800b5ca:	6033      	str	r3, [r6, #0]
 800b5cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	b10a      	cbz	r2, 800b5da <_printf_common+0x26>
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	6033      	str	r3, [r6, #0]
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	0699      	lsls	r1, r3, #26
 800b5de:	bf42      	ittt	mi
 800b5e0:	6833      	ldrmi	r3, [r6, #0]
 800b5e2:	3302      	addmi	r3, #2
 800b5e4:	6033      	strmi	r3, [r6, #0]
 800b5e6:	6825      	ldr	r5, [r4, #0]
 800b5e8:	f015 0506 	ands.w	r5, r5, #6
 800b5ec:	d106      	bne.n	800b5fc <_printf_common+0x48>
 800b5ee:	f104 0a19 	add.w	sl, r4, #25
 800b5f2:	68e3      	ldr	r3, [r4, #12]
 800b5f4:	6832      	ldr	r2, [r6, #0]
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	42ab      	cmp	r3, r5
 800b5fa:	dc26      	bgt.n	800b64a <_printf_common+0x96>
 800b5fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b600:	1e13      	subs	r3, r2, #0
 800b602:	6822      	ldr	r2, [r4, #0]
 800b604:	bf18      	it	ne
 800b606:	2301      	movne	r3, #1
 800b608:	0692      	lsls	r2, r2, #26
 800b60a:	d42b      	bmi.n	800b664 <_printf_common+0xb0>
 800b60c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b610:	4649      	mov	r1, r9
 800b612:	4638      	mov	r0, r7
 800b614:	47c0      	blx	r8
 800b616:	3001      	adds	r0, #1
 800b618:	d01e      	beq.n	800b658 <_printf_common+0xa4>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	68e5      	ldr	r5, [r4, #12]
 800b61e:	6832      	ldr	r2, [r6, #0]
 800b620:	f003 0306 	and.w	r3, r3, #6
 800b624:	2b04      	cmp	r3, #4
 800b626:	bf08      	it	eq
 800b628:	1aad      	subeq	r5, r5, r2
 800b62a:	68a3      	ldr	r3, [r4, #8]
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	bf0c      	ite	eq
 800b630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b634:	2500      	movne	r5, #0
 800b636:	4293      	cmp	r3, r2
 800b638:	bfc4      	itt	gt
 800b63a:	1a9b      	subgt	r3, r3, r2
 800b63c:	18ed      	addgt	r5, r5, r3
 800b63e:	2600      	movs	r6, #0
 800b640:	341a      	adds	r4, #26
 800b642:	42b5      	cmp	r5, r6
 800b644:	d11a      	bne.n	800b67c <_printf_common+0xc8>
 800b646:	2000      	movs	r0, #0
 800b648:	e008      	b.n	800b65c <_printf_common+0xa8>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4652      	mov	r2, sl
 800b64e:	4649      	mov	r1, r9
 800b650:	4638      	mov	r0, r7
 800b652:	47c0      	blx	r8
 800b654:	3001      	adds	r0, #1
 800b656:	d103      	bne.n	800b660 <_printf_common+0xac>
 800b658:	f04f 30ff 	mov.w	r0, #4294967295
 800b65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b660:	3501      	adds	r5, #1
 800b662:	e7c6      	b.n	800b5f2 <_printf_common+0x3e>
 800b664:	18e1      	adds	r1, r4, r3
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	2030      	movs	r0, #48	; 0x30
 800b66a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b66e:	4422      	add	r2, r4
 800b670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b678:	3302      	adds	r3, #2
 800b67a:	e7c7      	b.n	800b60c <_printf_common+0x58>
 800b67c:	2301      	movs	r3, #1
 800b67e:	4622      	mov	r2, r4
 800b680:	4649      	mov	r1, r9
 800b682:	4638      	mov	r0, r7
 800b684:	47c0      	blx	r8
 800b686:	3001      	adds	r0, #1
 800b688:	d0e6      	beq.n	800b658 <_printf_common+0xa4>
 800b68a:	3601      	adds	r6, #1
 800b68c:	e7d9      	b.n	800b642 <_printf_common+0x8e>
	...

0800b690 <_printf_i>:
 800b690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	7e0f      	ldrb	r7, [r1, #24]
 800b696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b698:	2f78      	cmp	r7, #120	; 0x78
 800b69a:	4691      	mov	r9, r2
 800b69c:	4680      	mov	r8, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	469a      	mov	sl, r3
 800b6a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6a6:	d807      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6a8:	2f62      	cmp	r7, #98	; 0x62
 800b6aa:	d80a      	bhi.n	800b6c2 <_printf_i+0x32>
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	f000 80d8 	beq.w	800b862 <_printf_i+0x1d2>
 800b6b2:	2f58      	cmp	r7, #88	; 0x58
 800b6b4:	f000 80a3 	beq.w	800b7fe <_printf_i+0x16e>
 800b6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6c0:	e03a      	b.n	800b738 <_printf_i+0xa8>
 800b6c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6c6:	2b15      	cmp	r3, #21
 800b6c8:	d8f6      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6ca:	a101      	add	r1, pc, #4	; (adr r1, 800b6d0 <_printf_i+0x40>)
 800b6cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6d0:	0800b729 	.word	0x0800b729
 800b6d4:	0800b73d 	.word	0x0800b73d
 800b6d8:	0800b6b9 	.word	0x0800b6b9
 800b6dc:	0800b6b9 	.word	0x0800b6b9
 800b6e0:	0800b6b9 	.word	0x0800b6b9
 800b6e4:	0800b6b9 	.word	0x0800b6b9
 800b6e8:	0800b73d 	.word	0x0800b73d
 800b6ec:	0800b6b9 	.word	0x0800b6b9
 800b6f0:	0800b6b9 	.word	0x0800b6b9
 800b6f4:	0800b6b9 	.word	0x0800b6b9
 800b6f8:	0800b6b9 	.word	0x0800b6b9
 800b6fc:	0800b849 	.word	0x0800b849
 800b700:	0800b76d 	.word	0x0800b76d
 800b704:	0800b82b 	.word	0x0800b82b
 800b708:	0800b6b9 	.word	0x0800b6b9
 800b70c:	0800b6b9 	.word	0x0800b6b9
 800b710:	0800b86b 	.word	0x0800b86b
 800b714:	0800b6b9 	.word	0x0800b6b9
 800b718:	0800b76d 	.word	0x0800b76d
 800b71c:	0800b6b9 	.word	0x0800b6b9
 800b720:	0800b6b9 	.word	0x0800b6b9
 800b724:	0800b833 	.word	0x0800b833
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	1d1a      	adds	r2, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	602a      	str	r2, [r5, #0]
 800b730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b738:	2301      	movs	r3, #1
 800b73a:	e0a3      	b.n	800b884 <_printf_i+0x1f4>
 800b73c:	6820      	ldr	r0, [r4, #0]
 800b73e:	6829      	ldr	r1, [r5, #0]
 800b740:	0606      	lsls	r6, r0, #24
 800b742:	f101 0304 	add.w	r3, r1, #4
 800b746:	d50a      	bpl.n	800b75e <_printf_i+0xce>
 800b748:	680e      	ldr	r6, [r1, #0]
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	da03      	bge.n	800b758 <_printf_i+0xc8>
 800b750:	232d      	movs	r3, #45	; 0x2d
 800b752:	4276      	negs	r6, r6
 800b754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b758:	485e      	ldr	r0, [pc, #376]	; (800b8d4 <_printf_i+0x244>)
 800b75a:	230a      	movs	r3, #10
 800b75c:	e019      	b.n	800b792 <_printf_i+0x102>
 800b75e:	680e      	ldr	r6, [r1, #0]
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b766:	bf18      	it	ne
 800b768:	b236      	sxthne	r6, r6
 800b76a:	e7ef      	b.n	800b74c <_printf_i+0xbc>
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	1d19      	adds	r1, r3, #4
 800b772:	6029      	str	r1, [r5, #0]
 800b774:	0601      	lsls	r1, r0, #24
 800b776:	d501      	bpl.n	800b77c <_printf_i+0xec>
 800b778:	681e      	ldr	r6, [r3, #0]
 800b77a:	e002      	b.n	800b782 <_printf_i+0xf2>
 800b77c:	0646      	lsls	r6, r0, #25
 800b77e:	d5fb      	bpl.n	800b778 <_printf_i+0xe8>
 800b780:	881e      	ldrh	r6, [r3, #0]
 800b782:	4854      	ldr	r0, [pc, #336]	; (800b8d4 <_printf_i+0x244>)
 800b784:	2f6f      	cmp	r7, #111	; 0x6f
 800b786:	bf0c      	ite	eq
 800b788:	2308      	moveq	r3, #8
 800b78a:	230a      	movne	r3, #10
 800b78c:	2100      	movs	r1, #0
 800b78e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b792:	6865      	ldr	r5, [r4, #4]
 800b794:	60a5      	str	r5, [r4, #8]
 800b796:	2d00      	cmp	r5, #0
 800b798:	bfa2      	ittt	ge
 800b79a:	6821      	ldrge	r1, [r4, #0]
 800b79c:	f021 0104 	bicge.w	r1, r1, #4
 800b7a0:	6021      	strge	r1, [r4, #0]
 800b7a2:	b90e      	cbnz	r6, 800b7a8 <_printf_i+0x118>
 800b7a4:	2d00      	cmp	r5, #0
 800b7a6:	d04d      	beq.n	800b844 <_printf_i+0x1b4>
 800b7a8:	4615      	mov	r5, r2
 800b7aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ae:	fb03 6711 	mls	r7, r3, r1, r6
 800b7b2:	5dc7      	ldrb	r7, [r0, r7]
 800b7b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7b8:	4637      	mov	r7, r6
 800b7ba:	42bb      	cmp	r3, r7
 800b7bc:	460e      	mov	r6, r1
 800b7be:	d9f4      	bls.n	800b7aa <_printf_i+0x11a>
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d10b      	bne.n	800b7dc <_printf_i+0x14c>
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	07de      	lsls	r6, r3, #31
 800b7c8:	d508      	bpl.n	800b7dc <_printf_i+0x14c>
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	6861      	ldr	r1, [r4, #4]
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	bfde      	ittt	le
 800b7d2:	2330      	movle	r3, #48	; 0x30
 800b7d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7dc:	1b52      	subs	r2, r2, r5
 800b7de:	6122      	str	r2, [r4, #16]
 800b7e0:	f8cd a000 	str.w	sl, [sp]
 800b7e4:	464b      	mov	r3, r9
 800b7e6:	aa03      	add	r2, sp, #12
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	f7ff fee2 	bl	800b5b4 <_printf_common>
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d14c      	bne.n	800b88e <_printf_i+0x1fe>
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	b004      	add	sp, #16
 800b7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fe:	4835      	ldr	r0, [pc, #212]	; (800b8d4 <_printf_i+0x244>)
 800b800:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b804:	6829      	ldr	r1, [r5, #0]
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	f851 6b04 	ldr.w	r6, [r1], #4
 800b80c:	6029      	str	r1, [r5, #0]
 800b80e:	061d      	lsls	r5, r3, #24
 800b810:	d514      	bpl.n	800b83c <_printf_i+0x1ac>
 800b812:	07df      	lsls	r7, r3, #31
 800b814:	bf44      	itt	mi
 800b816:	f043 0320 	orrmi.w	r3, r3, #32
 800b81a:	6023      	strmi	r3, [r4, #0]
 800b81c:	b91e      	cbnz	r6, 800b826 <_printf_i+0x196>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	f023 0320 	bic.w	r3, r3, #32
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	2310      	movs	r3, #16
 800b828:	e7b0      	b.n	800b78c <_printf_i+0xfc>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	f043 0320 	orr.w	r3, r3, #32
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	2378      	movs	r3, #120	; 0x78
 800b834:	4828      	ldr	r0, [pc, #160]	; (800b8d8 <_printf_i+0x248>)
 800b836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b83a:	e7e3      	b.n	800b804 <_printf_i+0x174>
 800b83c:	0659      	lsls	r1, r3, #25
 800b83e:	bf48      	it	mi
 800b840:	b2b6      	uxthmi	r6, r6
 800b842:	e7e6      	b.n	800b812 <_printf_i+0x182>
 800b844:	4615      	mov	r5, r2
 800b846:	e7bb      	b.n	800b7c0 <_printf_i+0x130>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	6826      	ldr	r6, [r4, #0]
 800b84c:	6961      	ldr	r1, [r4, #20]
 800b84e:	1d18      	adds	r0, r3, #4
 800b850:	6028      	str	r0, [r5, #0]
 800b852:	0635      	lsls	r5, r6, #24
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	d501      	bpl.n	800b85c <_printf_i+0x1cc>
 800b858:	6019      	str	r1, [r3, #0]
 800b85a:	e002      	b.n	800b862 <_printf_i+0x1d2>
 800b85c:	0670      	lsls	r0, r6, #25
 800b85e:	d5fb      	bpl.n	800b858 <_printf_i+0x1c8>
 800b860:	8019      	strh	r1, [r3, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	6123      	str	r3, [r4, #16]
 800b866:	4615      	mov	r5, r2
 800b868:	e7ba      	b.n	800b7e0 <_printf_i+0x150>
 800b86a:	682b      	ldr	r3, [r5, #0]
 800b86c:	1d1a      	adds	r2, r3, #4
 800b86e:	602a      	str	r2, [r5, #0]
 800b870:	681d      	ldr	r5, [r3, #0]
 800b872:	6862      	ldr	r2, [r4, #4]
 800b874:	2100      	movs	r1, #0
 800b876:	4628      	mov	r0, r5
 800b878:	f7f4 fcaa 	bl	80001d0 <memchr>
 800b87c:	b108      	cbz	r0, 800b882 <_printf_i+0x1f2>
 800b87e:	1b40      	subs	r0, r0, r5
 800b880:	6060      	str	r0, [r4, #4]
 800b882:	6863      	ldr	r3, [r4, #4]
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	2300      	movs	r3, #0
 800b888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b88c:	e7a8      	b.n	800b7e0 <_printf_i+0x150>
 800b88e:	6923      	ldr	r3, [r4, #16]
 800b890:	462a      	mov	r2, r5
 800b892:	4649      	mov	r1, r9
 800b894:	4640      	mov	r0, r8
 800b896:	47d0      	blx	sl
 800b898:	3001      	adds	r0, #1
 800b89a:	d0ab      	beq.n	800b7f4 <_printf_i+0x164>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	079b      	lsls	r3, r3, #30
 800b8a0:	d413      	bmi.n	800b8ca <_printf_i+0x23a>
 800b8a2:	68e0      	ldr	r0, [r4, #12]
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	4298      	cmp	r0, r3
 800b8a8:	bfb8      	it	lt
 800b8aa:	4618      	movlt	r0, r3
 800b8ac:	e7a4      	b.n	800b7f8 <_printf_i+0x168>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	47d0      	blx	sl
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d09b      	beq.n	800b7f4 <_printf_i+0x164>
 800b8bc:	3501      	adds	r5, #1
 800b8be:	68e3      	ldr	r3, [r4, #12]
 800b8c0:	9903      	ldr	r1, [sp, #12]
 800b8c2:	1a5b      	subs	r3, r3, r1
 800b8c4:	42ab      	cmp	r3, r5
 800b8c6:	dcf2      	bgt.n	800b8ae <_printf_i+0x21e>
 800b8c8:	e7eb      	b.n	800b8a2 <_printf_i+0x212>
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	f104 0619 	add.w	r6, r4, #25
 800b8d0:	e7f5      	b.n	800b8be <_printf_i+0x22e>
 800b8d2:	bf00      	nop
 800b8d4:	0800d905 	.word	0x0800d905
 800b8d8:	0800d916 	.word	0x0800d916

0800b8dc <_sbrk_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d06      	ldr	r5, [pc, #24]	; (800b8f8 <_sbrk_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f9 f866 	bl	80049b8 <_sbrk>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_sbrk_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_sbrk_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20002a04 	.word	0x20002a04

0800b8fc <__sread>:
 800b8fc:	b510      	push	{r4, lr}
 800b8fe:	460c      	mov	r4, r1
 800b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b904:	f000 f900 	bl	800bb08 <_read_r>
 800b908:	2800      	cmp	r0, #0
 800b90a:	bfab      	itete	ge
 800b90c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b90e:	89a3      	ldrhlt	r3, [r4, #12]
 800b910:	181b      	addge	r3, r3, r0
 800b912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b916:	bfac      	ite	ge
 800b918:	6563      	strge	r3, [r4, #84]	; 0x54
 800b91a:	81a3      	strhlt	r3, [r4, #12]
 800b91c:	bd10      	pop	{r4, pc}

0800b91e <__swrite>:
 800b91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b922:	461f      	mov	r7, r3
 800b924:	898b      	ldrh	r3, [r1, #12]
 800b926:	05db      	lsls	r3, r3, #23
 800b928:	4605      	mov	r5, r0
 800b92a:	460c      	mov	r4, r1
 800b92c:	4616      	mov	r6, r2
 800b92e:	d505      	bpl.n	800b93c <__swrite+0x1e>
 800b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b934:	2302      	movs	r3, #2
 800b936:	2200      	movs	r2, #0
 800b938:	f000 f870 	bl	800ba1c <_lseek_r>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	4632      	mov	r2, r6
 800b94a:	463b      	mov	r3, r7
 800b94c:	4628      	mov	r0, r5
 800b94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b952:	f000 b817 	b.w	800b984 <_write_r>

0800b956 <__sseek>:
 800b956:	b510      	push	{r4, lr}
 800b958:	460c      	mov	r4, r1
 800b95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b95e:	f000 f85d 	bl	800ba1c <_lseek_r>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	bf15      	itete	ne
 800b968:	6560      	strne	r0, [r4, #84]	; 0x54
 800b96a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b96e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b972:	81a3      	strheq	r3, [r4, #12]
 800b974:	bf18      	it	ne
 800b976:	81a3      	strhne	r3, [r4, #12]
 800b978:	bd10      	pop	{r4, pc}

0800b97a <__sclose>:
 800b97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97e:	f000 b81b 	b.w	800b9b8 <_close_r>
	...

0800b984 <_write_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d07      	ldr	r5, [pc, #28]	; (800b9a4 <_write_r+0x20>)
 800b988:	4604      	mov	r4, r0
 800b98a:	4608      	mov	r0, r1
 800b98c:	4611      	mov	r1, r2
 800b98e:	2200      	movs	r2, #0
 800b990:	602a      	str	r2, [r5, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	f7f6 fc5a 	bl	800224c <_write>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d102      	bne.n	800b9a2 <_write_r+0x1e>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <_write_r+0x1e>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	20002a04 	.word	0x20002a04

0800b9a8 <abort>:
 800b9a8:	b508      	push	{r3, lr}
 800b9aa:	2006      	movs	r0, #6
 800b9ac:	f000 f8e6 	bl	800bb7c <raise>
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	f7f8 ffa5 	bl	8004900 <_exit>
	...

0800b9b8 <_close_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d06      	ldr	r5, [pc, #24]	; (800b9d4 <_close_r+0x1c>)
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	602b      	str	r3, [r5, #0]
 800b9c4:	f7f8 ffc3 	bl	800494e <_close>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_close_r+0x1a>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_close_r+0x1a>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	20002a04 	.word	0x20002a04

0800b9d8 <_fstat_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d07      	ldr	r5, [pc, #28]	; (800b9f8 <_fstat_r+0x20>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	602b      	str	r3, [r5, #0]
 800b9e6:	f7f8 ffbe 	bl	8004966 <_fstat>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	d102      	bne.n	800b9f4 <_fstat_r+0x1c>
 800b9ee:	682b      	ldr	r3, [r5, #0]
 800b9f0:	b103      	cbz	r3, 800b9f4 <_fstat_r+0x1c>
 800b9f2:	6023      	str	r3, [r4, #0]
 800b9f4:	bd38      	pop	{r3, r4, r5, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20002a04 	.word	0x20002a04

0800b9fc <_isatty_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	4d06      	ldr	r5, [pc, #24]	; (800ba18 <_isatty_r+0x1c>)
 800ba00:	2300      	movs	r3, #0
 800ba02:	4604      	mov	r4, r0
 800ba04:	4608      	mov	r0, r1
 800ba06:	602b      	str	r3, [r5, #0]
 800ba08:	f7f8 ffbd 	bl	8004986 <_isatty>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_isatty_r+0x1a>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_isatty_r+0x1a>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	20002a04 	.word	0x20002a04

0800ba1c <_lseek_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d07      	ldr	r5, [pc, #28]	; (800ba3c <_lseek_r+0x20>)
 800ba20:	4604      	mov	r4, r0
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	2200      	movs	r2, #0
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f7f8 ffb6 	bl	800499c <_lseek>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_lseek_r+0x1e>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_lseek_r+0x1e>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	20002a04 	.word	0x20002a04

0800ba40 <memcpy>:
 800ba40:	440a      	add	r2, r1
 800ba42:	4291      	cmp	r1, r2
 800ba44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba48:	d100      	bne.n	800ba4c <memcpy+0xc>
 800ba4a:	4770      	bx	lr
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba56:	4291      	cmp	r1, r2
 800ba58:	d1f9      	bne.n	800ba4e <memcpy+0xe>
 800ba5a:	bd10      	pop	{r4, pc}

0800ba5c <memmove>:
 800ba5c:	4288      	cmp	r0, r1
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	eb01 0402 	add.w	r4, r1, r2
 800ba64:	d902      	bls.n	800ba6c <memmove+0x10>
 800ba66:	4284      	cmp	r4, r0
 800ba68:	4623      	mov	r3, r4
 800ba6a:	d807      	bhi.n	800ba7c <memmove+0x20>
 800ba6c:	1e43      	subs	r3, r0, #1
 800ba6e:	42a1      	cmp	r1, r4
 800ba70:	d008      	beq.n	800ba84 <memmove+0x28>
 800ba72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba7a:	e7f8      	b.n	800ba6e <memmove+0x12>
 800ba7c:	4402      	add	r2, r0
 800ba7e:	4601      	mov	r1, r0
 800ba80:	428a      	cmp	r2, r1
 800ba82:	d100      	bne.n	800ba86 <memmove+0x2a>
 800ba84:	bd10      	pop	{r4, pc}
 800ba86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba8e:	e7f7      	b.n	800ba80 <memmove+0x24>

0800ba90 <__malloc_lock>:
 800ba90:	4801      	ldr	r0, [pc, #4]	; (800ba98 <__malloc_lock+0x8>)
 800ba92:	f7ff b989 	b.w	800ada8 <__retarget_lock_acquire_recursive>
 800ba96:	bf00      	nop
 800ba98:	200029f8 	.word	0x200029f8

0800ba9c <__malloc_unlock>:
 800ba9c:	4801      	ldr	r0, [pc, #4]	; (800baa4 <__malloc_unlock+0x8>)
 800ba9e:	f7ff b984 	b.w	800adaa <__retarget_lock_release_recursive>
 800baa2:	bf00      	nop
 800baa4:	200029f8 	.word	0x200029f8

0800baa8 <_realloc_r>:
 800baa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baac:	4680      	mov	r8, r0
 800baae:	4614      	mov	r4, r2
 800bab0:	460e      	mov	r6, r1
 800bab2:	b921      	cbnz	r1, 800babe <_realloc_r+0x16>
 800bab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	4611      	mov	r1, r2
 800baba:	f7ff ba51 	b.w	800af60 <_malloc_r>
 800babe:	b92a      	cbnz	r2, 800bacc <_realloc_r+0x24>
 800bac0:	f7ff f9e2 	bl	800ae88 <_free_r>
 800bac4:	4625      	mov	r5, r4
 800bac6:	4628      	mov	r0, r5
 800bac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bacc:	f000 f872 	bl	800bbb4 <_malloc_usable_size_r>
 800bad0:	4284      	cmp	r4, r0
 800bad2:	4607      	mov	r7, r0
 800bad4:	d802      	bhi.n	800badc <_realloc_r+0x34>
 800bad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bada:	d812      	bhi.n	800bb02 <_realloc_r+0x5a>
 800badc:	4621      	mov	r1, r4
 800bade:	4640      	mov	r0, r8
 800bae0:	f7ff fa3e 	bl	800af60 <_malloc_r>
 800bae4:	4605      	mov	r5, r0
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d0ed      	beq.n	800bac6 <_realloc_r+0x1e>
 800baea:	42bc      	cmp	r4, r7
 800baec:	4622      	mov	r2, r4
 800baee:	4631      	mov	r1, r6
 800baf0:	bf28      	it	cs
 800baf2:	463a      	movcs	r2, r7
 800baf4:	f7ff ffa4 	bl	800ba40 <memcpy>
 800baf8:	4631      	mov	r1, r6
 800bafa:	4640      	mov	r0, r8
 800bafc:	f7ff f9c4 	bl	800ae88 <_free_r>
 800bb00:	e7e1      	b.n	800bac6 <_realloc_r+0x1e>
 800bb02:	4635      	mov	r5, r6
 800bb04:	e7df      	b.n	800bac6 <_realloc_r+0x1e>
	...

0800bb08 <_read_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d07      	ldr	r5, [pc, #28]	; (800bb28 <_read_r+0x20>)
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	4608      	mov	r0, r1
 800bb10:	4611      	mov	r1, r2
 800bb12:	2200      	movs	r2, #0
 800bb14:	602a      	str	r2, [r5, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	f7f8 fefc 	bl	8004914 <_read>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_read_r+0x1e>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_read_r+0x1e>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	20002a04 	.word	0x20002a04

0800bb2c <_raise_r>:
 800bb2c:	291f      	cmp	r1, #31
 800bb2e:	b538      	push	{r3, r4, r5, lr}
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	d904      	bls.n	800bb40 <_raise_r+0x14>
 800bb36:	2316      	movs	r3, #22
 800bb38:	6003      	str	r3, [r0, #0]
 800bb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb42:	b112      	cbz	r2, 800bb4a <_raise_r+0x1e>
 800bb44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb48:	b94b      	cbnz	r3, 800bb5e <_raise_r+0x32>
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f000 f830 	bl	800bbb0 <_getpid_r>
 800bb50:	462a      	mov	r2, r5
 800bb52:	4601      	mov	r1, r0
 800bb54:	4620      	mov	r0, r4
 800bb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb5a:	f000 b817 	b.w	800bb8c <_kill_r>
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d00a      	beq.n	800bb78 <_raise_r+0x4c>
 800bb62:	1c59      	adds	r1, r3, #1
 800bb64:	d103      	bne.n	800bb6e <_raise_r+0x42>
 800bb66:	2316      	movs	r3, #22
 800bb68:	6003      	str	r3, [r0, #0]
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	e7e7      	b.n	800bb3e <_raise_r+0x12>
 800bb6e:	2400      	movs	r4, #0
 800bb70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb74:	4628      	mov	r0, r5
 800bb76:	4798      	blx	r3
 800bb78:	2000      	movs	r0, #0
 800bb7a:	e7e0      	b.n	800bb3e <_raise_r+0x12>

0800bb7c <raise>:
 800bb7c:	4b02      	ldr	r3, [pc, #8]	; (800bb88 <raise+0xc>)
 800bb7e:	4601      	mov	r1, r0
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	f7ff bfd3 	b.w	800bb2c <_raise_r>
 800bb86:	bf00      	nop
 800bb88:	20000068 	.word	0x20000068

0800bb8c <_kill_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	; (800bbac <_kill_r+0x20>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	4611      	mov	r1, r2
 800bb98:	602b      	str	r3, [r5, #0]
 800bb9a:	f7f8 fea1 	bl	80048e0 <_kill>
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	d102      	bne.n	800bba8 <_kill_r+0x1c>
 800bba2:	682b      	ldr	r3, [r5, #0]
 800bba4:	b103      	cbz	r3, 800bba8 <_kill_r+0x1c>
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	20002a04 	.word	0x20002a04

0800bbb0 <_getpid_r>:
 800bbb0:	f7f8 be8e 	b.w	80048d0 <_getpid>

0800bbb4 <_malloc_usable_size_r>:
 800bbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb8:	1f18      	subs	r0, r3, #4
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	bfbc      	itt	lt
 800bbbe:	580b      	ldrlt	r3, [r1, r0]
 800bbc0:	18c0      	addlt	r0, r0, r3
 800bbc2:	4770      	bx	lr

0800bbc4 <_init>:
 800bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc6:	bf00      	nop
 800bbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbca:	bc08      	pop	{r3}
 800bbcc:	469e      	mov	lr, r3
 800bbce:	4770      	bx	lr

0800bbd0 <_fini>:
 800bbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd2:	bf00      	nop
 800bbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd6:	bc08      	pop	{r3}
 800bbd8:	469e      	mov	lr, r3
 800bbda:	4770      	bx	lr
