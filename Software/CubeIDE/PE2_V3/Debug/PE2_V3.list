
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ea0  0800c298  0800c298  0001c298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e138  0800e138  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e138  0800e138  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e138  0800e138  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e138  0800e138  0001e138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e13c  0800e13c  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800e140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  200000d0  0800e210  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a0c  0800e210  00022a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016492  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003887  00000000  00000000  00036592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00039e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0003af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019017  00000000  00000000  0003bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019212  00000000  00000000  00054fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865b2  00000000  00000000  0006e1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f47ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000528c  00000000  00000000  000f47fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c280 	.word	0x0800c280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800c280 	.word	0x0800c280

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initBrickbreaker>:
 *      -sets score to 0
 *      -sets the first lines of bricks to visible
 *      -draws the bricks
 *
 */
void initBrickbreaker() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000286:	4b4b      	ldr	r3, [pc, #300]	; (80003b4 <initBrickbreaker+0x134>)
 8000288:	2228      	movs	r2, #40	; 0x28
 800028a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800028c:	4b49      	ldr	r3, [pc, #292]	; (80003b4 <initBrickbreaker+0x134>)
 800028e:	2237      	movs	r2, #55	; 0x37
 8000290:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000292:	4b49      	ldr	r3, [pc, #292]	; (80003b8 <initBrickbreaker+0x138>)
 8000294:	2228      	movs	r2, #40	; 0x28
 8000296:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000298:	4b47      	ldr	r3, [pc, #284]	; (80003b8 <initBrickbreaker+0x138>)
 800029a:	2236      	movs	r2, #54	; 0x36
 800029c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800029e:	4b46      	ldr	r3, [pc, #280]	; (80003b8 <initBrickbreaker+0x138>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e041      	b.n	800032e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	e038      	b.n	8000322 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	00d9      	lsls	r1, r3, #3
 80002b4:	4841      	ldr	r0, [pc, #260]	; (80003bc <initBrickbreaker+0x13c>)
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4403      	add	r3, r0
 80002c8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	f103 0108 	add.w	r1, r3, #8
 80002d0:	483a      	ldr	r0, [pc, #232]	; (80003bc <initBrickbreaker+0x13c>)
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4403      	add	r3, r0
 80002e4:	3304      	adds	r3, #4
 80002e6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002e8:	4934      	ldr	r1, [pc, #208]	; (80003bc <initBrickbreaker+0x13c>)
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	4413      	add	r3, r2
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	440b      	add	r3, r1
 80002fc:	3308      	adds	r3, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 8000302:	492e      	ldr	r1, [pc, #184]	; (80003bc <initBrickbreaker+0x13c>)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	4413      	add	r3, r2
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	440b      	add	r3, r1
 8000316:	330c      	adds	r3, #12
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b09      	cmp	r3, #9
 8000326:	ddc3      	ble.n	80002b0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b2f      	cmp	r3, #47	; 0x2f
 8000332:	ddba      	ble.n	80002aa <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e027      	b.n	800038a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800033a:	2300      	movs	r3, #0
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	e01e      	b.n	800037e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000340:	491e      	ldr	r1, [pc, #120]	; (80003bc <initBrickbreaker+0x13c>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	4413      	add	r3, r2
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	440b      	add	r3, r1
 8000354:	3308      	adds	r3, #8
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800035a:	f001 ff25 	bl	80021a8 <setBrickToughness>
 800035e:	4601      	mov	r1, r0
 8000360:	4816      	ldr	r0, [pc, #88]	; (80003bc <initBrickbreaker+0x13c>)
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4613      	mov	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	4413      	add	r3, r2
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	4403      	add	r3, r0
 8000374:	330c      	adds	r3, #12
 8000376:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b09      	cmp	r3, #9
 8000382:	dddd      	ble.n	8000340 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b09      	cmp	r3, #9
 800038e:	ddd4      	ble.n	800033a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <initBrickbreaker+0x140>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000396:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800039a:	f005 f99b 	bl	80056d4 <Displ_CLS>
    setBgColor(D_GREEN);
 800039e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80003a2:	f002 f82b 	bl	80023fc <setBgColor>
    drawBricks();
 80003a6:	f001 ff33 	bl	8002210 <drawBricks>
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000034 	.word	0x20000034
 80003b8:	20000038 	.word	0x20000038
 80003bc:	200000ec 	.word	0x200000ec
 80003c0:	20001eec 	.word	0x20001eec

080003c4 <playBall>:
 * @fn void playBall()
 * @brief handles the movement of the ball, changes its direction when needed
 * also checks if the ball hit a brick or the user bar
 *
 */
void playBall() {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003c8:	4b3d      	ldr	r3, [pc, #244]	; (80004c0 <playBall+0xfc>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <playBall+0x12>
        changeDirection(N);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f8ef 	bl	80005b4 <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003d6:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <playBall+0xfc>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	2b36      	cmp	r3, #54	; 0x36
 80003dc:	d14d      	bne.n	800047a <playBall+0xb6>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003de:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <playBall+0xfc>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <playBall+0x100>)
 80003e4:	f993 3000 	ldrsb.w	r3, [r3]
 80003e8:	3b19      	subs	r3, #25
 80003ea:	429a      	cmp	r2, r3
 80003ec:	db0b      	blt.n	8000406 <playBall+0x42>
 80003ee:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <playBall+0xfc>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <playBall+0x100>)
 80003f4:	f993 3000 	ldrsb.w	r3, [r3]
 80003f8:	3319      	adds	r3, #25
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dc03      	bgt.n	8000406 <playBall+0x42>
            changeDirection(S);
 80003fe:	2004      	movs	r0, #4
 8000400:	f000 f8d8 	bl	80005b4 <changeDirection>
 8000404:	e039      	b.n	800047a <playBall+0xb6>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 8000406:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <playBall+0xfc>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <playBall+0x100>)
 800040c:	f993 3000 	ldrsb.w	r3, [r3]
 8000410:	3b1a      	subs	r3, #26
 8000412:	429a      	cmp	r2, r3
 8000414:	d110      	bne.n	8000438 <playBall+0x74>
                if (ball.dir == SE) {
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <playBall+0xfc>)
 8000418:	7a1b      	ldrb	r3, [r3, #8]
 800041a:	2b03      	cmp	r3, #3
 800041c:	d103      	bne.n	8000426 <playBall+0x62>
                    ball.dir = NW;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <playBall+0xfc>)
 8000420:	2207      	movs	r2, #7
 8000422:	721a      	strb	r2, [r3, #8]
 8000424:	e029      	b.n	800047a <playBall+0xb6>
                } else {
                    lives1--;
 8000426:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <playBall+0x104>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <playBall+0x104>)
 8000430:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000432:	f000 f961 	bl	80006f8 <gameEnd>
 8000436:	e020      	b.n	800047a <playBall+0xb6>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 8000438:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <playBall+0xfc>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <playBall+0x100>)
 800043e:	f993 3000 	ldrsb.w	r3, [r3]
 8000442:	331a      	adds	r3, #26
 8000444:	429a      	cmp	r2, r3
 8000446:	d110      	bne.n	800046a <playBall+0xa6>
                    if (ball.dir == SW) {
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <playBall+0xfc>)
 800044a:	7a1b      	ldrb	r3, [r3, #8]
 800044c:	2b05      	cmp	r3, #5
 800044e:	d103      	bne.n	8000458 <playBall+0x94>
                        ball.dir = NE;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <playBall+0xfc>)
 8000452:	2201      	movs	r2, #1
 8000454:	721a      	strb	r2, [r3, #8]
 8000456:	e010      	b.n	800047a <playBall+0xb6>
                    } else {
                        lives1--;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <playBall+0x104>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <playBall+0x104>)
 8000462:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 8000464:	f000 f948 	bl	80006f8 <gameEnd>
 8000468:	e007      	b.n	800047a <playBall+0xb6>
                    }
                } else {
                    lives1--;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <playBall+0x104>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	3b01      	subs	r3, #1
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <playBall+0x104>)
 8000474:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000476:	f000 f93f 	bl	80006f8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <playBall+0xfc>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d102      	bne.n	8000488 <playBall+0xc4>
        changeDirection(W);
 8000482:	2006      	movs	r0, #6
 8000484:	f000 f896 	bl	80005b4 <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <playBall+0xfc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b4f      	cmp	r3, #79	; 0x4f
 800048e:	d102      	bne.n	8000496 <playBall+0xd2>
        changeDirection(E);
 8000490:	2002      	movs	r0, #2
 8000492:	f000 f88f 	bl	80005b4 <changeDirection>
    }

    if (guardian == 1) {
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <playBall+0x108>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d10a      	bne.n	80004b4 <playBall+0xf0>
        if (ball.y == person.y - 2) {
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <playBall+0xfc>)
 80004a0:	685a      	ldr	r2, [r3, #4]
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <playBall+0x100>)
 80004a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80004a8:	3b02      	subs	r3, #2
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d102      	bne.n	80004b4 <playBall+0xf0>
            changeDirection(S);
 80004ae:	2004      	movs	r0, #4
 80004b0:	f000 f880 	bl	80005b4 <changeDirection>
        }
    }

    checkBrickHit();
 80004b4:	f000 fa14 	bl	80008e0 <checkBrickHit>
    moveBall();
 80004b8:	f000 f80a 	bl	80004d0 <moveBall>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000038 	.word	0x20000038
 80004c4:	20000034 	.word	0x20000034
 80004c8:	20000002 	.word	0x20000002
 80004cc:	20001eee 	.word	0x20001eee

080004d0 <moveBall>:
/**
 * @fn void moveBall()
 * @brief moves the ball along it's direction
 *
 */
void moveBall() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004d6:	4b35      	ldr	r3, [pc, #212]	; (80005ac <moveBall+0xdc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	b298      	uxth	r0, r3
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <moveBall+0xdc>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	b299      	uxth	r1, r3
 80004ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2304      	movs	r3, #4
 80004f2:	2204      	movs	r2, #4
 80004f4:	f004 ff3a 	bl	800536c <Displ_FillArea>
    switch (ball.dir) {
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <moveBall+0xdc>)
 80004fa:	7a1b      	ldrb	r3, [r3, #8]
 80004fc:	2b08      	cmp	r3, #8
 80004fe:	d84d      	bhi.n	800059c <moveBall+0xcc>
 8000500:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <moveBall+0x38>)
 8000502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000506:	bf00      	nop
 8000508:	0800052d 	.word	0x0800052d
 800050c:	08000545 	.word	0x08000545
 8000510:	0800059d 	.word	0x0800059d
 8000514:	08000571 	.word	0x08000571
 8000518:	08000539 	.word	0x08000539
 800051c:	08000587 	.word	0x08000587
 8000520:	0800059d 	.word	0x0800059d
 8000524:	0800055b 	.word	0x0800055b
 8000528:	080005a5 	.word	0x080005a5
    case N:
        ball.y -= 1;
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <moveBall+0xdc>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a1e      	ldr	r2, [pc, #120]	; (80005ac <moveBall+0xdc>)
 8000534:	6053      	str	r3, [r2, #4]
        break;
 8000536:	e036      	b.n	80005a6 <moveBall+0xd6>
    case S:
        ball.y += 1;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <moveBall+0xdc>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <moveBall+0xdc>)
 8000540:	6053      	str	r3, [r2, #4]
        break;
 8000542:	e030      	b.n	80005a6 <moveBall+0xd6>
    case NE:
        ball.y -= 1;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <moveBall+0xdc>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a18      	ldr	r2, [pc, #96]	; (80005ac <moveBall+0xdc>)
 800054c:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <moveBall+0xdc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a15      	ldr	r2, [pc, #84]	; (80005ac <moveBall+0xdc>)
 8000556:	6013      	str	r3, [r2, #0]
        break;
 8000558:	e025      	b.n	80005a6 <moveBall+0xd6>
    case NW:
        ball.y -= 1;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <moveBall+0xdc>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	3b01      	subs	r3, #1
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <moveBall+0xdc>)
 8000562:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <moveBall+0xdc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <moveBall+0xdc>)
 800056c:	6013      	str	r3, [r2, #0]
        break;
 800056e:	e01a      	b.n	80005a6 <moveBall+0xd6>
    case SE:
        ball.y += 1;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <moveBall+0xdc>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	3301      	adds	r3, #1
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <moveBall+0xdc>)
 8000578:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <moveBall+0xdc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <moveBall+0xdc>)
 8000582:	6013      	str	r3, [r2, #0]
        break;
 8000584:	e00f      	b.n	80005a6 <moveBall+0xd6>
    case SW:
        ball.y += 1;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <moveBall+0xdc>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <moveBall+0xdc>)
 800058e:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <moveBall+0xdc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <moveBall+0xdc>)
 8000598:	6013      	str	r3, [r2, #0]
        break;
 800059a:	e004      	b.n	80005a6 <moveBall+0xd6>
    case still:
        break;
    default:
        printf("You shouldn't be here\r\n");
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <moveBall+0xe0>)
 800059e:	f00a fb63 	bl	800ac68 <puts>
    }

}
 80005a2:	e000      	b.n	80005a6 <moveBall+0xd6>
        break;
 80005a4:	bf00      	nop
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000038 	.word	0x20000038
 80005b0:	0800c298 	.word	0x0800c298

080005b4 <changeDirection>:
 * @fn void changeDirection(directions)
 * @brief changes the direction of the ball based on the direction of the obstacle the ball hit
 *
 * @param dirHit the direction where the ball hit an obstacle
 */
void changeDirection(directions dirHit) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    if (dirHit == N) {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d129      	bne.n	8000618 <changeDirection+0x64>
        switch (ball.dir) {
 80005c4:	4b4a      	ldr	r3, [pc, #296]	; (80006f0 <changeDirection+0x13c>)
 80005c6:	7a1b      	ldrb	r3, [r3, #8]
 80005c8:	2b08      	cmp	r3, #8
 80005ca:	d821      	bhi.n	8000610 <changeDirection+0x5c>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <changeDirection+0x20>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	08000609 	.word	0x08000609
 80005dc:	08000611 	.word	0x08000611
 80005e0:	08000611 	.word	0x08000611
 80005e4:	08000611 	.word	0x08000611
 80005e8:	08000611 	.word	0x08000611
 80005ec:	08000611 	.word	0x08000611
 80005f0:	08000601 	.word	0x08000601
 80005f4:	0800061d 	.word	0x0800061d
        case N:
            ball.dir = S;
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <changeDirection+0x13c>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	721a      	strb	r2, [r3, #8]
            break;
 80005fe:	e00e      	b.n	800061e <changeDirection+0x6a>
        case NW:
            ball.dir = SW;
 8000600:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <changeDirection+0x13c>)
 8000602:	2205      	movs	r2, #5
 8000604:	721a      	strb	r2, [r3, #8]
            break;
 8000606:	e00a      	b.n	800061e <changeDirection+0x6a>
        case NE:
            ball.dir = SE;
 8000608:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <changeDirection+0x13c>)
 800060a:	2203      	movs	r2, #3
 800060c:	721a      	strb	r2, [r3, #8]
            break;
 800060e:	e006      	b.n	800061e <changeDirection+0x6a>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000610:	4838      	ldr	r0, [pc, #224]	; (80006f4 <changeDirection+0x140>)
 8000612:	f00a fb29 	bl	800ac68 <puts>
 8000616:	e002      	b.n	800061e <changeDirection+0x6a>
        }
    }
 8000618:	bf00      	nop
 800061a:	e000      	b.n	800061e <changeDirection+0x6a>
            break;
 800061c:	bf00      	nop

    if (dirHit == E) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d116      	bne.n	8000652 <changeDirection+0x9e>
        switch (ball.dir) {
 8000624:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <changeDirection+0x13c>)
 8000626:	7a1b      	ldrb	r3, [r3, #8]
 8000628:	2b08      	cmp	r3, #8
 800062a:	d014      	beq.n	8000656 <changeDirection+0xa2>
 800062c:	2b08      	cmp	r3, #8
 800062e:	dc0c      	bgt.n	800064a <changeDirection+0x96>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d002      	beq.n	800063a <changeDirection+0x86>
 8000634:	2b03      	cmp	r3, #3
 8000636:	d004      	beq.n	8000642 <changeDirection+0x8e>
 8000638:	e007      	b.n	800064a <changeDirection+0x96>
        case NE:
            ball.dir = NW;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <changeDirection+0x13c>)
 800063c:	2207      	movs	r2, #7
 800063e:	721a      	strb	r2, [r3, #8]
            break;
 8000640:	e00a      	b.n	8000658 <changeDirection+0xa4>
        case SE:
            ball.dir = SW;
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <changeDirection+0x13c>)
 8000644:	2205      	movs	r2, #5
 8000646:	721a      	strb	r2, [r3, #8]
            break;
 8000648:	e006      	b.n	8000658 <changeDirection+0xa4>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 800064a:	482a      	ldr	r0, [pc, #168]	; (80006f4 <changeDirection+0x140>)
 800064c:	f00a fb0c 	bl	800ac68 <puts>
 8000650:	e002      	b.n	8000658 <changeDirection+0xa4>
        }
    }
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <changeDirection+0xa4>
            break;
 8000656:	bf00      	nop

    if (dirHit == S) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d124      	bne.n	80006a8 <changeDirection+0xf4>
        switch (ball.dir) {
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <changeDirection+0x13c>)
 8000660:	7a1b      	ldrb	r3, [r3, #8]
 8000662:	3b03      	subs	r3, #3
 8000664:	2b05      	cmp	r3, #5
 8000666:	d81b      	bhi.n	80006a0 <changeDirection+0xec>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <changeDirection+0xbc>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000691 	.word	0x08000691
 8000674:	08000689 	.word	0x08000689
 8000678:	08000699 	.word	0x08000699
 800067c:	080006a1 	.word	0x080006a1
 8000680:	080006a1 	.word	0x080006a1
 8000684:	080006ad 	.word	0x080006ad
        case S:
            ball.dir = N;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <changeDirection+0x13c>)
 800068a:	2200      	movs	r2, #0
 800068c:	721a      	strb	r2, [r3, #8]
            break;
 800068e:	e00e      	b.n	80006ae <changeDirection+0xfa>
        case SE:
            ball.dir = NE;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <changeDirection+0x13c>)
 8000692:	2201      	movs	r2, #1
 8000694:	721a      	strb	r2, [r3, #8]
            break;
 8000696:	e00a      	b.n	80006ae <changeDirection+0xfa>
        case SW:
            ball.dir = NW;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <changeDirection+0x13c>)
 800069a:	2207      	movs	r2, #7
 800069c:	721a      	strb	r2, [r3, #8]
            break;
 800069e:	e006      	b.n	80006ae <changeDirection+0xfa>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 80006a0:	4814      	ldr	r0, [pc, #80]	; (80006f4 <changeDirection+0x140>)
 80006a2:	f00a fae1 	bl	800ac68 <puts>
 80006a6:	e002      	b.n	80006ae <changeDirection+0xfa>
        }
    }
 80006a8:	bf00      	nop
 80006aa:	e000      	b.n	80006ae <changeDirection+0xfa>
            break;
 80006ac:	bf00      	nop

    if (dirHit == W) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d115      	bne.n	80006e0 <changeDirection+0x12c>
        switch (ball.dir) {
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <changeDirection+0x13c>)
 80006b6:	7a1b      	ldrb	r3, [r3, #8]
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d013      	beq.n	80006e4 <changeDirection+0x130>
 80006bc:	2b08      	cmp	r3, #8
 80006be:	dc0b      	bgt.n	80006d8 <changeDirection+0x124>
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d005      	beq.n	80006d0 <changeDirection+0x11c>
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	d107      	bne.n	80006d8 <changeDirection+0x124>
        case NW:
            ball.dir = NE;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <changeDirection+0x13c>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	721a      	strb	r2, [r3, #8]
            break;
 80006ce:	e00a      	b.n	80006e6 <changeDirection+0x132>
        case SW:
            ball.dir = SE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <changeDirection+0x13c>)
 80006d2:	2203      	movs	r2, #3
 80006d4:	721a      	strb	r2, [r3, #8]
            break;
 80006d6:	e006      	b.n	80006e6 <changeDirection+0x132>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <changeDirection+0x140>)
 80006da:	f00a fac5 	bl	800ac68 <puts>
        }
    }
}
 80006de:	e002      	b.n	80006e6 <changeDirection+0x132>
    }
 80006e0:	bf00      	nop
 80006e2:	e000      	b.n	80006e6 <changeDirection+0x132>
            break;
 80006e4:	bf00      	nop
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000038 	.word	0x20000038
 80006f4:	0800c298 	.word	0x0800c298

080006f8 <gameEnd>:
 * @fn void gameEnd()
 * @brief called when the player has lost a life, resets the player bar and ball to the initial position
 * if the player has lost all his lives, also resets score
 *
 */
void gameEnd() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <gameEnd+0x90>)
 8000700:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000704:	3b01      	subs	r3, #1
 8000706:	b29b      	uxth	r3, r3
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	b299      	uxth	r1, r3
 800070c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	230a      	movs	r3, #10
 8000714:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000718:	2000      	movs	r0, #0
 800071a:	f004 fe27 	bl	800536c <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <gameEnd+0x90>)
 8000720:	2228      	movs	r2, #40	; 0x28
 8000722:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <gameEnd+0x90>)
 8000726:	f993 3000 	ldrsb.w	r3, [r3]
 800072a:	461a      	mov	r2, r3
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <gameEnd+0x94>)
 800072e:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <gameEnd+0x94>)
 8000732:	2236      	movs	r2, #54	; 0x36
 8000734:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <gameEnd+0x94>)
 8000738:	2208      	movs	r2, #8
 800073a:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <gameEnd+0x98>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d11e      	bne.n	8000782 <gameEnd+0x8a>
        if (points > highScore) {
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <gameEnd+0x9c>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <gameEnd+0xa0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d903      	bls.n	8000758 <gameEnd+0x60>
            highScore = points;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <gameEnd+0x9c>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <gameEnd+0xa0>)
 8000756:	701a      	strb	r2, [r3, #0]
        }

        start = 0;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <gameEnd+0xa4>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
        points = 0;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <gameEnd+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <gameEnd+0x98>)
 8000766:	2203      	movs	r2, #3
 8000768:	701a      	strb	r2, [r3, #0]
        initBrickbreaker();
 800076a:	f7ff fd89 	bl	8000280 <initBrickbreaker>
        HAL_UART_Transmit(&huart2, (uint8_t *)"L", strlen("L"), 300);
 800076e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000772:	2201      	movs	r2, #1
 8000774:	490a      	ldr	r1, [pc, #40]	; (80007a0 <gameEnd+0xa8>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <gameEnd+0xac>)
 8000778:	f009 fa94 	bl	8009ca4 <HAL_UART_Transmit>
        setGameState(loss);
 800077c:	2002      	movs	r0, #2
 800077e:	f003 f89f 	bl	80038c0 <setGameState>
    }
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000034 	.word	0x20000034
 800078c:	20000038 	.word	0x20000038
 8000790:	20000002 	.word	0x20000002
 8000794:	20001eec 	.word	0x20001eec
 8000798:	20001eed 	.word	0x20001eed
 800079c:	20001ef3 	.word	0x20001ef3
 80007a0:	0800c2b0 	.word	0x0800c2b0
 80007a4:	20001ff0 	.word	0x20001ff0

080007a8 <lowerBricks>:
/**
 * @fn void lowerBricks()
 * @brief lowers the bricks to the next level
 *
 */
void lowerBricks() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007ae:	232e      	movs	r3, #46	; 0x2e
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e03d      	b.n	8000830 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	e034      	b.n	8000824 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <lowerBricks+0xcc>)
 80007c0:	68f9      	ldr	r1, [r7, #12]
 80007c2:	460b      	mov	r3, r1
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	440b      	add	r3, r1
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4403      	add	r3, r0
 80007d2:	3308      	adds	r3, #8
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	4827      	ldr	r0, [pc, #156]	; (8000874 <lowerBricks+0xcc>)
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	4413      	add	r3, r2
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	4403      	add	r3, r0
 80007e8:	3308      	adds	r3, #8
 80007ea:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	4820      	ldr	r0, [pc, #128]	; (8000874 <lowerBricks+0xcc>)
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	460b      	mov	r3, r1
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	440b      	add	r3, r1
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4403      	add	r3, r0
 8000804:	330c      	adds	r3, #12
 8000806:	6819      	ldr	r1, [r3, #0]
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <lowerBricks+0xcc>)
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	4413      	add	r3, r2
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	4403      	add	r3, r0
 800081a:	330c      	adds	r3, #12
 800081c:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b09      	cmp	r3, #9
 8000828:	ddc7      	ble.n	80007ba <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3b01      	subs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	dabe      	bge.n	80007b4 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e012      	b.n	8000862 <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <lowerBricks+0xcc>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	4413      	add	r3, r2
 8000844:	3308      	adds	r3, #8
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 800084a:	f001 fcad 	bl	80021a8 <setBrickToughness>
 800084e:	4602      	mov	r2, r0
 8000850:	4908      	ldr	r1, [pc, #32]	; (8000874 <lowerBricks+0xcc>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	440b      	add	r3, r1
 8000858:	330c      	adds	r3, #12
 800085a:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3301      	adds	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b09      	cmp	r3, #9
 8000866:	dde9      	ble.n	800083c <lowerBricks+0x94>
    }

    drawBricks();
 8000868:	f001 fcd2 	bl	8002210 <drawBricks>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000ec 	.word	0x200000ec

08000878 <checkGameOver>:
/**
 * @fn void checkGameOver()
 * @brief checks if the final line of active bricks has reaches the player bar
 *
 */
void checkGameOver() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	e01d      	b.n	80008c0 <checkGameOver+0x48>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <checkGameOver+0x58>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	4413      	add	r3, r2
 800088c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000890:	3308      	adds	r3, #8
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d110      	bne.n	80008ba <checkGameOver+0x42>

            lives1 = 0;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <checkGameOver+0x5c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <checkGameOver+0x60>)
 80008a0:	f993 3000 	ldrsb.w	r3, [r3]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <checkGameOver+0x64>)
 80008a8:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <checkGameOver+0x64>)
 80008ac:	2236      	movs	r2, #54	; 0x36
 80008ae:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <checkGameOver+0x64>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	721a      	strb	r2, [r3, #8]
            gameEnd();
 80008b6:	f7ff ff1f 	bl	80006f8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b09      	cmp	r3, #9
 80008c4:	ddde      	ble.n	8000884 <checkGameOver+0xc>
        }
    }
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000ec 	.word	0x200000ec
 80008d4:	20000002 	.word	0x20000002
 80008d8:	20000034 	.word	0x20000034
 80008dc:	20000038 	.word	0x20000038

080008e0 <checkBrickHit>:
/**
 * @fn void checkBrickHit()
 * @brief checks if the ball hit one or more bricks
 *
 */
void checkBrickHit() {
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <checkBrickHit+0x3c>)
 80008ec:	7a1b      	ldrb	r3, [r3, #8]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	f201 829d 	bhi.w	8001e30 <checkBrickHit+0x1550>
 80008f6:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <checkBrickHit+0x1c>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	08000e79 	.word	0x08000e79
 8000900:	08001e31 	.word	0x08001e31
 8000904:	080013d1 	.word	0x080013d1
 8000908:	08001e31 	.word	0x08001e31
 800090c:	08001909 	.word	0x08001909
 8000910:	08001e31 	.word	0x08001e31
 8000914:	08000921 	.word	0x08000921
 8000918:	08001e3b 	.word	0x08001e3b
 800091c:	20000038 	.word	0x20000038
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000920:	4bb7      	ldr	r3, [pc, #732]	; (8000c00 <checkBrickHit+0x320>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f1a3 0209 	sub.w	r2, r3, #9
 8000928:	4bb5      	ldr	r3, [pc, #724]	; (8000c00 <checkBrickHit+0x320>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	da00      	bge.n	8000932 <checkBrickHit+0x52>
 8000930:	3307      	adds	r3, #7
 8000932:	10db      	asrs	r3, r3, #3
 8000934:	4618      	mov	r0, r3
 8000936:	49b3      	ldr	r1, [pc, #716]	; (8000c04 <checkBrickHit+0x324>)
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4403      	add	r3, r0
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	440b      	add	r3, r1
 8000946:	3308      	adds	r3, #8
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	f040 80bc 	bne.w	8000ac8 <checkBrickHit+0x1e8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000950:	4bab      	ldr	r3, [pc, #684]	; (8000c00 <checkBrickHit+0x320>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f1a3 0209 	sub.w	r2, r3, #9
 8000958:	4ba9      	ldr	r3, [pc, #676]	; (8000c00 <checkBrickHit+0x320>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	da00      	bge.n	8000962 <checkBrickHit+0x82>
 8000960:	3307      	adds	r3, #7
 8000962:	10db      	asrs	r3, r3, #3
 8000964:	4619      	mov	r1, r3
 8000966:	48a7      	ldr	r0, [pc, #668]	; (8000c04 <checkBrickHit+0x324>)
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	440b      	add	r3, r1
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	4403      	add	r3, r0
 8000976:	330c      	adds	r3, #12
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1e58      	subs	r0, r3, #1
 800097c:	4ca1      	ldr	r4, [pc, #644]	; (8000c04 <checkBrickHit+0x324>)
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	440b      	add	r3, r1
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	4423      	add	r3, r4
 800098c:	330c      	adds	r3, #12
 800098e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000990:	4b9b      	ldr	r3, [pc, #620]	; (8000c00 <checkBrickHit+0x320>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f1a3 0209 	sub.w	r2, r3, #9
 8000998:	4b99      	ldr	r3, [pc, #612]	; (8000c00 <checkBrickHit+0x320>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	da00      	bge.n	80009a2 <checkBrickHit+0xc2>
 80009a0:	3307      	adds	r3, #7
 80009a2:	10db      	asrs	r3, r3, #3
 80009a4:	4618      	mov	r0, r3
 80009a6:	4997      	ldr	r1, [pc, #604]	; (8000c04 <checkBrickHit+0x324>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4403      	add	r3, r0
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	440b      	add	r3, r1
 80009b6:	330c      	adds	r3, #12
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	dc31      	bgt.n	8000a22 <checkBrickHit+0x142>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 80009be:	4b90      	ldr	r3, [pc, #576]	; (8000c00 <checkBrickHit+0x320>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f1a3 0209 	sub.w	r2, r3, #9
 80009c6:	4b8e      	ldr	r3, [pc, #568]	; (8000c00 <checkBrickHit+0x320>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da00      	bge.n	80009d0 <checkBrickHit+0xf0>
 80009ce:	3307      	adds	r3, #7
 80009d0:	10db      	asrs	r3, r3, #3
 80009d2:	4618      	mov	r0, r3
 80009d4:	498b      	ldr	r1, [pc, #556]	; (8000c04 <checkBrickHit+0x324>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4403      	add	r3, r0
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	440b      	add	r3, r1
 80009e4:	3308      	adds	r3, #8
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
                points++;
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <checkBrickHit+0x328>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b85      	ldr	r3, [pc, #532]	; (8000c08 <checkBrickHit+0x328>)
 80009f4:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009f6:	4b82      	ldr	r3, [pc, #520]	; (8000c00 <checkBrickHit+0x320>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da00      	bge.n	8000a00 <checkBrickHit+0x120>
 80009fe:	3307      	adds	r3, #7
 8000a00:	10db      	asrs	r3, r3, #3
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b7e      	ldr	r3, [pc, #504]	; (8000c00 <checkBrickHit+0x320>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	3b09      	subs	r3, #9
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f001 fa29 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 8000a12:	4b7b      	ldr	r3, [pc, #492]	; (8000c00 <checkBrickHit+0x320>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3b09      	subs	r3, #9
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fcb9 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000a22:	4b77      	ldr	r3, [pc, #476]	; (8000c00 <checkBrickHit+0x320>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f1a3 0209 	sub.w	r2, r3, #9
 8000a2a:	4b75      	ldr	r3, [pc, #468]	; (8000c00 <checkBrickHit+0x320>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da00      	bge.n	8000a34 <checkBrickHit+0x154>
 8000a32:	3307      	adds	r3, #7
 8000a34:	10db      	asrs	r3, r3, #3
 8000a36:	4618      	mov	r0, r3
 8000a38:	4972      	ldr	r1, [pc, #456]	; (8000c04 <checkBrickHit+0x324>)
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4403      	add	r3, r0
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	440b      	add	r3, r1
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	b298      	uxth	r0, r3
 8000a50:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <checkBrickHit+0x320>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f1a3 0209 	sub.w	r2, r3, #9
 8000a58:	4b69      	ldr	r3, [pc, #420]	; (8000c00 <checkBrickHit+0x320>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da00      	bge.n	8000a62 <checkBrickHit+0x182>
 8000a60:	3307      	adds	r3, #7
 8000a62:	10db      	asrs	r3, r3, #3
 8000a64:	461c      	mov	r4, r3
 8000a66:	4967      	ldr	r1, [pc, #412]	; (8000c04 <checkBrickHit+0x324>)
 8000a68:	4613      	mov	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4423      	add	r3, r4
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	440b      	add	r3, r1
 8000a76:	3304      	adds	r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <checkBrickHit+0x320>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f1a3 0209 	sub.w	r2, r3, #9
 8000a88:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <checkBrickHit+0x320>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da00      	bge.n	8000a92 <checkBrickHit+0x1b2>
 8000a90:	3307      	adds	r3, #7
 8000a92:	10db      	asrs	r3, r3, #3
 8000a94:	461d      	mov	r5, r3
 8000a96:	4c5b      	ldr	r4, [pc, #364]	; (8000c04 <checkBrickHit+0x324>)
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	442b      	add	r3, r5
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	4423      	add	r3, r4
 8000aa6:	330c      	adds	r3, #12
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a58      	ldr	r2, [pc, #352]	; (8000c0c <checkBrickHit+0x32c>)
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	f004 fc58 	bl	800536c <Displ_FillArea>
            bricksHit++;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000ac2:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <checkBrickHit+0x320>)
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <checkBrickHit+0x320>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f1a3 0208 	sub.w	r2, r3, #8
 8000ad0:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <checkBrickHit+0x320>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	da00      	bge.n	8000adc <checkBrickHit+0x1fc>
 8000ada:	3307      	adds	r3, #7
 8000adc:	10db      	asrs	r3, r3, #3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	4948      	ldr	r1, [pc, #288]	; (8000c04 <checkBrickHit+0x324>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4403      	add	r3, r0
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	440b      	add	r3, r1
 8000af0:	3308      	adds	r3, #8
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	f040 80d8 	bne.w	8000caa <checkBrickHit+0x3ca>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000afa:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <checkBrickHit+0x320>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f1a3 0208 	sub.w	r2, r3, #8
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <checkBrickHit+0x320>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da00      	bge.n	8000b0e <checkBrickHit+0x22e>
 8000b0c:	3307      	adds	r3, #7
 8000b0e:	10db      	asrs	r3, r3, #3
 8000b10:	4619      	mov	r1, r3
 8000b12:	483c      	ldr	r0, [pc, #240]	; (8000c04 <checkBrickHit+0x324>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	440b      	add	r3, r1
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	4403      	add	r3, r0
 8000b22:	330c      	adds	r3, #12
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1e58      	subs	r0, r3, #1
 8000b28:	4c36      	ldr	r4, [pc, #216]	; (8000c04 <checkBrickHit+0x324>)
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	440b      	add	r3, r1
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	4423      	add	r3, r4
 8000b38:	330c      	adds	r3, #12
 8000b3a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <checkBrickHit+0x320>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f1a3 0208 	sub.w	r2, r3, #8
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <checkBrickHit+0x320>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da00      	bge.n	8000b50 <checkBrickHit+0x270>
 8000b4e:	3307      	adds	r3, #7
 8000b50:	10db      	asrs	r3, r3, #3
 8000b52:	4618      	mov	r0, r3
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <checkBrickHit+0x324>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4403      	add	r3, r0
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	440b      	add	r3, r1
 8000b64:	330c      	adds	r3, #12
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dc33      	bgt.n	8000bd4 <checkBrickHit+0x2f4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <checkBrickHit+0x320>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f1a3 0208 	sub.w	r2, r3, #8
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <checkBrickHit+0x320>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da00      	bge.n	8000b80 <checkBrickHit+0x2a0>
 8000b7e:	3307      	adds	r3, #7
 8000b80:	10db      	asrs	r3, r3, #3
 8000b82:	4618      	mov	r0, r3
 8000b84:	491f      	ldr	r1, [pc, #124]	; (8000c04 <checkBrickHit+0x324>)
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4403      	add	r3, r0
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	440b      	add	r3, r1
 8000b94:	3308      	adds	r3, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
                points++;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <checkBrickHit+0x328>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <checkBrickHit+0x328>)
 8000ba4:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <checkBrickHit+0x320>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da00      	bge.n	8000bb2 <checkBrickHit+0x2d2>
 8000bb0:	3307      	adds	r3, #7
 8000bb2:	10db      	asrs	r3, r3, #3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <checkBrickHit+0x320>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	3b08      	subs	r3, #8
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	f001 f950 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <checkBrickHit+0x320>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	3b08      	subs	r3, #8
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fbe0 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <checkBrickHit+0x320>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f1a3 0208 	sub.w	r2, r3, #8
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <checkBrickHit+0x320>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	da00      	bge.n	8000be8 <checkBrickHit+0x308>
 8000be6:	3307      	adds	r3, #7
 8000be8:	10db      	asrs	r3, r3, #3
 8000bea:	4618      	mov	r0, r3
 8000bec:	4905      	ldr	r1, [pc, #20]	; (8000c04 <checkBrickHit+0x324>)
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4403      	add	r3, r0
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	440b      	add	r3, r1
 8000bfc:	e008      	b.n	8000c10 <checkBrickHit+0x330>
 8000bfe:	bf00      	nop
 8000c00:	20000038 	.word	0x20000038
 8000c04:	200000ec 	.word	0x200000ec
 8000c08:	20001eec 	.word	0x20001eec
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	b298      	uxth	r0, r3
 8000c18:	4b93      	ldr	r3, [pc, #588]	; (8000e68 <checkBrickHit+0x588>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f1a3 0208 	sub.w	r2, r3, #8
 8000c20:	4b91      	ldr	r3, [pc, #580]	; (8000e68 <checkBrickHit+0x588>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da00      	bge.n	8000c2c <checkBrickHit+0x34c>
 8000c2a:	3307      	adds	r3, #7
 8000c2c:	10db      	asrs	r3, r3, #3
 8000c2e:	461c      	mov	r4, r3
 8000c30:	498e      	ldr	r1, [pc, #568]	; (8000e6c <checkBrickHit+0x58c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4423      	add	r3, r4
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	440b      	add	r3, r1
 8000c40:	3304      	adds	r3, #4
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	4b87      	ldr	r3, [pc, #540]	; (8000e68 <checkBrickHit+0x588>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f1a3 0208 	sub.w	r2, r3, #8
 8000c52:	4b85      	ldr	r3, [pc, #532]	; (8000e68 <checkBrickHit+0x588>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <checkBrickHit+0x37e>
 8000c5c:	3307      	adds	r3, #7
 8000c5e:	10db      	asrs	r3, r3, #3
 8000c60:	461d      	mov	r5, r3
 8000c62:	4c82      	ldr	r4, [pc, #520]	; (8000e6c <checkBrickHit+0x58c>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	442b      	add	r3, r5
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4423      	add	r3, r4
 8000c72:	330c      	adds	r3, #12
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a7e      	ldr	r2, [pc, #504]	; (8000e70 <checkBrickHit+0x590>)
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2304      	movs	r3, #4
 8000c82:	2220      	movs	r2, #32
 8000c84:	f004 fb72 	bl	800536c <Displ_FillArea>
            bricksHit++;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c8e:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <checkBrickHit+0x588>)
 8000c90:	7a1b      	ldrb	r3, [r3, #8]
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	d102      	bne.n	8000c9c <checkBrickHit+0x3bc>
                ball.dir = NE;
 8000c96:	4b74      	ldr	r3, [pc, #464]	; (8000e68 <checkBrickHit+0x588>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c9c:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <checkBrickHit+0x588>)
 8000c9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ca0:	2b05      	cmp	r3, #5
 8000ca2:	d102      	bne.n	8000caa <checkBrickHit+0x3ca>
                ball.dir = SE;
 8000ca4:	4b70      	ldr	r3, [pc, #448]	; (8000e68 <checkBrickHit+0x588>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f041 80c6 	bne.w	8001e3e <checkBrickHit+0x155e>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000cb2:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <checkBrickHit+0x588>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f1a3 0209 	sub.w	r2, r3, #9
 8000cba:	4b6b      	ldr	r3, [pc, #428]	; (8000e68 <checkBrickHit+0x588>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da00      	bge.n	8000cc6 <checkBrickHit+0x3e6>
 8000cc4:	3307      	adds	r3, #7
 8000cc6:	10db      	asrs	r3, r3, #3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	4968      	ldr	r1, [pc, #416]	; (8000e6c <checkBrickHit+0x58c>)
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4403      	add	r3, r0
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	440b      	add	r3, r1
 8000cda:	3308      	adds	r3, #8
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	f041 80ad 	bne.w	8001e3e <checkBrickHit+0x155e>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000ce4:	4b60      	ldr	r3, [pc, #384]	; (8000e68 <checkBrickHit+0x588>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f1a3 0209 	sub.w	r2, r3, #9
 8000cec:	4b5e      	ldr	r3, [pc, #376]	; (8000e68 <checkBrickHit+0x588>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da00      	bge.n	8000cf8 <checkBrickHit+0x418>
 8000cf6:	3307      	adds	r3, #7
 8000cf8:	10db      	asrs	r3, r3, #3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	485b      	ldr	r0, [pc, #364]	; (8000e6c <checkBrickHit+0x58c>)
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	440b      	add	r3, r1
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	4403      	add	r3, r0
 8000d0c:	330c      	adds	r3, #12
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	1e58      	subs	r0, r3, #1
 8000d12:	4c56      	ldr	r4, [pc, #344]	; (8000e6c <checkBrickHit+0x58c>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	440b      	add	r3, r1
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4423      	add	r3, r4
 8000d22:	330c      	adds	r3, #12
 8000d24:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000d26:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <checkBrickHit+0x588>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f1a3 0209 	sub.w	r2, r3, #9
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <checkBrickHit+0x588>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <checkBrickHit+0x45a>
 8000d38:	3307      	adds	r3, #7
 8000d3a:	10db      	asrs	r3, r3, #3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	494b      	ldr	r1, [pc, #300]	; (8000e6c <checkBrickHit+0x58c>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4403      	add	r3, r0
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	440b      	add	r3, r1
 8000d4e:	330c      	adds	r3, #12
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	dc33      	bgt.n	8000dbe <checkBrickHit+0x4de>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <checkBrickHit+0x588>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f1a3 0209 	sub.w	r2, r3, #9
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <checkBrickHit+0x588>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da00      	bge.n	8000d6a <checkBrickHit+0x48a>
 8000d68:	3307      	adds	r3, #7
 8000d6a:	10db      	asrs	r3, r3, #3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	493f      	ldr	r1, [pc, #252]	; (8000e6c <checkBrickHit+0x58c>)
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4403      	add	r3, r0
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3308      	adds	r3, #8
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
                    points++;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <checkBrickHit+0x594>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <checkBrickHit+0x594>)
 8000d8e:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d90:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <checkBrickHit+0x588>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da00      	bge.n	8000d9c <checkBrickHit+0x4bc>
 8000d9a:	3307      	adds	r3, #7
 8000d9c:	10db      	asrs	r3, r3, #3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <checkBrickHit+0x588>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	3b09      	subs	r3, #9
 8000da6:	4619      	mov	r1, r3
 8000da8:	4610      	mov	r0, r2
 8000daa:	f001 f85b 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <checkBrickHit+0x588>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3b09      	subs	r3, #9
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 faeb 	bl	8002394 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <checkBrickHit+0x588>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f1a3 0209 	sub.w	r2, r3, #9
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <checkBrickHit+0x588>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da00      	bge.n	8000dd2 <checkBrickHit+0x4f2>
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	10db      	asrs	r3, r3, #3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4925      	ldr	r1, [pc, #148]	; (8000e6c <checkBrickHit+0x58c>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4403      	add	r3, r0
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	440b      	add	r3, r1
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	b298      	uxth	r0, r3
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <checkBrickHit+0x588>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f1a3 0209 	sub.w	r2, r3, #9
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <checkBrickHit+0x588>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da00      	bge.n	8000e02 <checkBrickHit+0x522>
 8000e00:	3307      	adds	r3, #7
 8000e02:	10db      	asrs	r3, r3, #3
 8000e04:	461c      	mov	r4, r3
 8000e06:	4919      	ldr	r1, [pc, #100]	; (8000e6c <checkBrickHit+0x58c>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4423      	add	r3, r4
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	440b      	add	r3, r1
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	b299      	uxth	r1, r3
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <checkBrickHit+0x588>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f1a3 0209 	sub.w	r2, r3, #9
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <checkBrickHit+0x588>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da00      	bge.n	8000e34 <checkBrickHit+0x554>
 8000e32:	3307      	adds	r3, #7
 8000e34:	10db      	asrs	r3, r3, #3
 8000e36:	461d      	mov	r5, r3
 8000e38:	4c0c      	ldr	r4, [pc, #48]	; (8000e6c <checkBrickHit+0x58c>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	442b      	add	r3, r5
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4423      	add	r3, r4
 8000e48:	330c      	adds	r3, #12
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <checkBrickHit+0x590>)
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2304      	movs	r3, #4
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f004 fa87 	bl	800536c <Displ_FillArea>
                ball.dir = SE;
 8000e5e:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <checkBrickHit+0x588>)
 8000e60:	2203      	movs	r2, #3
 8000e62:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e64:	f000 bfeb 	b.w	8001e3e <checkBrickHit+0x155e>
 8000e68:	20000038 	.word	0x20000038
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20001eec 	.word	0x20001eec
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e78:	4bb7      	ldr	r3, [pc, #732]	; (8001158 <checkBrickHit+0x878>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e80:	4bb5      	ldr	r3, [pc, #724]	; (8001158 <checkBrickHit+0x878>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	da00      	bge.n	8000e8a <checkBrickHit+0x5aa>
 8000e88:	3307      	adds	r3, #7
 8000e8a:	10db      	asrs	r3, r3, #3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	49b3      	ldr	r1, [pc, #716]	; (800115c <checkBrickHit+0x87c>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4403      	add	r3, r0
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	440b      	add	r3, r1
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	f040 80bc 	bne.w	8001020 <checkBrickHit+0x740>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000ea8:	4bab      	ldr	r3, [pc, #684]	; (8001158 <checkBrickHit+0x878>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f1a3 0209 	sub.w	r2, r3, #9
 8000eb0:	4ba9      	ldr	r3, [pc, #676]	; (8001158 <checkBrickHit+0x878>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	da00      	bge.n	8000eba <checkBrickHit+0x5da>
 8000eb8:	3307      	adds	r3, #7
 8000eba:	10db      	asrs	r3, r3, #3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	48a7      	ldr	r0, [pc, #668]	; (800115c <checkBrickHit+0x87c>)
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	440b      	add	r3, r1
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4403      	add	r3, r0
 8000ece:	330c      	adds	r3, #12
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1e58      	subs	r0, r3, #1
 8000ed4:	4ca1      	ldr	r4, [pc, #644]	; (800115c <checkBrickHit+0x87c>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	440b      	add	r3, r1
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4423      	add	r3, r4
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000ee8:	4b9b      	ldr	r3, [pc, #620]	; (8001158 <checkBrickHit+0x878>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f1a3 0209 	sub.w	r2, r3, #9
 8000ef0:	4b99      	ldr	r3, [pc, #612]	; (8001158 <checkBrickHit+0x878>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da00      	bge.n	8000efa <checkBrickHit+0x61a>
 8000ef8:	3307      	adds	r3, #7
 8000efa:	10db      	asrs	r3, r3, #3
 8000efc:	4618      	mov	r0, r3
 8000efe:	4997      	ldr	r1, [pc, #604]	; (800115c <checkBrickHit+0x87c>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4403      	add	r3, r0
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	440b      	add	r3, r1
 8000f0e:	330c      	adds	r3, #12
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dc31      	bgt.n	8000f7a <checkBrickHit+0x69a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000f16:	4b90      	ldr	r3, [pc, #576]	; (8001158 <checkBrickHit+0x878>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f1a3 0209 	sub.w	r2, r3, #9
 8000f1e:	4b8e      	ldr	r3, [pc, #568]	; (8001158 <checkBrickHit+0x878>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da00      	bge.n	8000f28 <checkBrickHit+0x648>
 8000f26:	3307      	adds	r3, #7
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	498b      	ldr	r1, [pc, #556]	; (800115c <checkBrickHit+0x87c>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4403      	add	r3, r0
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
                points++;
 8000f42:	4b87      	ldr	r3, [pc, #540]	; (8001160 <checkBrickHit+0x880>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b85      	ldr	r3, [pc, #532]	; (8001160 <checkBrickHit+0x880>)
 8000f4c:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000f4e:	4b82      	ldr	r3, [pc, #520]	; (8001158 <checkBrickHit+0x878>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da00      	bge.n	8000f58 <checkBrickHit+0x678>
 8000f56:	3307      	adds	r3, #7
 8000f58:	10db      	asrs	r3, r3, #3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b7e      	ldr	r3, [pc, #504]	; (8001158 <checkBrickHit+0x878>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	3b09      	subs	r3, #9
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f000 ff7d 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 8000f6a:	4b7b      	ldr	r3, [pc, #492]	; (8001158 <checkBrickHit+0x878>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	3b09      	subs	r3, #9
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fa0d 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f7a:	4b77      	ldr	r3, [pc, #476]	; (8001158 <checkBrickHit+0x878>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f1a3 0209 	sub.w	r2, r3, #9
 8000f82:	4b75      	ldr	r3, [pc, #468]	; (8001158 <checkBrickHit+0x878>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da00      	bge.n	8000f8c <checkBrickHit+0x6ac>
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	10db      	asrs	r3, r3, #3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	4972      	ldr	r1, [pc, #456]	; (800115c <checkBrickHit+0x87c>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4403      	add	r3, r0
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	440b      	add	r3, r1
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	b298      	uxth	r0, r3
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <checkBrickHit+0x878>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f1a3 0209 	sub.w	r2, r3, #9
 8000fb0:	4b69      	ldr	r3, [pc, #420]	; (8001158 <checkBrickHit+0x878>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da00      	bge.n	8000fba <checkBrickHit+0x6da>
 8000fb8:	3307      	adds	r3, #7
 8000fba:	10db      	asrs	r3, r3, #3
 8000fbc:	461c      	mov	r4, r3
 8000fbe:	4967      	ldr	r1, [pc, #412]	; (800115c <checkBrickHit+0x87c>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4423      	add	r3, r4
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <checkBrickHit+0x878>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f1a3 0209 	sub.w	r2, r3, #9
 8000fe0:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <checkBrickHit+0x878>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da00      	bge.n	8000fea <checkBrickHit+0x70a>
 8000fe8:	3307      	adds	r3, #7
 8000fea:	10db      	asrs	r3, r3, #3
 8000fec:	461d      	mov	r5, r3
 8000fee:	4c5b      	ldr	r4, [pc, #364]	; (800115c <checkBrickHit+0x87c>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	442b      	add	r3, r5
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4423      	add	r3, r4
 8000ffe:	330c      	adds	r3, #12
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a58      	ldr	r2, [pc, #352]	; (8001164 <checkBrickHit+0x884>)
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	b29b      	uxth	r3, r3
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2304      	movs	r3, #4
 800100e:	2220      	movs	r2, #32
 8001010:	f004 f9ac 	bl	800536c <Displ_FillArea>
            bricksHit++;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3301      	adds	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 800101a:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <checkBrickHit+0x878>)
 800101c:	2203      	movs	r2, #3
 800101e:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <checkBrickHit+0x878>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f1a3 0208 	sub.w	r2, r3, #8
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <checkBrickHit+0x878>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	da00      	bge.n	8001034 <checkBrickHit+0x754>
 8001032:	3307      	adds	r3, #7
 8001034:	10db      	asrs	r3, r3, #3
 8001036:	4618      	mov	r0, r3
 8001038:	4948      	ldr	r1, [pc, #288]	; (800115c <checkBrickHit+0x87c>)
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4403      	add	r3, r0
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 80d8 	bne.w	8001202 <checkBrickHit+0x922>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <checkBrickHit+0x878>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f1a3 0208 	sub.w	r2, r3, #8
 800105a:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <checkBrickHit+0x878>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	da00      	bge.n	8001066 <checkBrickHit+0x786>
 8001064:	3307      	adds	r3, #7
 8001066:	10db      	asrs	r3, r3, #3
 8001068:	4619      	mov	r1, r3
 800106a:	483c      	ldr	r0, [pc, #240]	; (800115c <checkBrickHit+0x87c>)
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4403      	add	r3, r0
 800107a:	330c      	adds	r3, #12
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1e58      	subs	r0, r3, #1
 8001080:	4c36      	ldr	r4, [pc, #216]	; (800115c <checkBrickHit+0x87c>)
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	440b      	add	r3, r1
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4423      	add	r3, r4
 8001090:	330c      	adds	r3, #12
 8001092:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <checkBrickHit+0x878>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f1a3 0208 	sub.w	r2, r3, #8
 800109c:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <checkBrickHit+0x878>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da00      	bge.n	80010a8 <checkBrickHit+0x7c8>
 80010a6:	3307      	adds	r3, #7
 80010a8:	10db      	asrs	r3, r3, #3
 80010aa:	4618      	mov	r0, r3
 80010ac:	492b      	ldr	r1, [pc, #172]	; (800115c <checkBrickHit+0x87c>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4403      	add	r3, r0
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dc33      	bgt.n	800112c <checkBrickHit+0x84c>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <checkBrickHit+0x878>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f1a3 0208 	sub.w	r2, r3, #8
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <checkBrickHit+0x878>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da00      	bge.n	80010d8 <checkBrickHit+0x7f8>
 80010d6:	3307      	adds	r3, #7
 80010d8:	10db      	asrs	r3, r3, #3
 80010da:	4618      	mov	r0, r3
 80010dc:	491f      	ldr	r1, [pc, #124]	; (800115c <checkBrickHit+0x87c>)
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4403      	add	r3, r0
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
                points++;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <checkBrickHit+0x880>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <checkBrickHit+0x880>)
 80010fc:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <checkBrickHit+0x878>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	da00      	bge.n	800110a <checkBrickHit+0x82a>
 8001108:	3307      	adds	r3, #7
 800110a:	10db      	asrs	r3, r3, #3
 800110c:	461a      	mov	r2, r3
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <checkBrickHit+0x878>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	3b08      	subs	r3, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4610      	mov	r0, r2
 8001118:	f000 fea4 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <checkBrickHit+0x878>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b08      	subs	r3, #8
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f934 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <checkBrickHit+0x878>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f1a3 0208 	sub.w	r2, r3, #8
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <checkBrickHit+0x878>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	da00      	bge.n	8001140 <checkBrickHit+0x860>
 800113e:	3307      	adds	r3, #7
 8001140:	10db      	asrs	r3, r3, #3
 8001142:	4618      	mov	r0, r3
 8001144:	4905      	ldr	r1, [pc, #20]	; (800115c <checkBrickHit+0x87c>)
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4403      	add	r3, r0
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	440b      	add	r3, r1
 8001154:	e008      	b.n	8001168 <checkBrickHit+0x888>
 8001156:	bf00      	nop
 8001158:	20000038 	.word	0x20000038
 800115c:	200000ec 	.word	0x200000ec
 8001160:	20001eec 	.word	0x20001eec
 8001164:	20000004 	.word	0x20000004
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b298      	uxth	r0, r3
 8001170:	4b93      	ldr	r3, [pc, #588]	; (80013c0 <checkBrickHit+0xae0>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f1a3 0208 	sub.w	r2, r3, #8
 8001178:	4b91      	ldr	r3, [pc, #580]	; (80013c0 <checkBrickHit+0xae0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	da00      	bge.n	8001184 <checkBrickHit+0x8a4>
 8001182:	3307      	adds	r3, #7
 8001184:	10db      	asrs	r3, r3, #3
 8001186:	461c      	mov	r4, r3
 8001188:	498e      	ldr	r1, [pc, #568]	; (80013c4 <checkBrickHit+0xae4>)
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4423      	add	r3, r4
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	3304      	adds	r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	b299      	uxth	r1, r3
 80011a2:	4b87      	ldr	r3, [pc, #540]	; (80013c0 <checkBrickHit+0xae0>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f1a3 0208 	sub.w	r2, r3, #8
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <checkBrickHit+0xae0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da00      	bge.n	80011b6 <checkBrickHit+0x8d6>
 80011b4:	3307      	adds	r3, #7
 80011b6:	10db      	asrs	r3, r3, #3
 80011b8:	461d      	mov	r5, r3
 80011ba:	4c82      	ldr	r4, [pc, #520]	; (80013c4 <checkBrickHit+0xae4>)
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	442b      	add	r3, r5
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4423      	add	r3, r4
 80011ca:	330c      	adds	r3, #12
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7e      	ldr	r2, [pc, #504]	; (80013c8 <checkBrickHit+0xae8>)
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2304      	movs	r3, #4
 80011da:	2220      	movs	r2, #32
 80011dc:	f004 f8c6 	bl	800536c <Displ_FillArea>
            bricksHit++;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	3301      	adds	r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 80011e6:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <checkBrickHit+0xae0>)
 80011e8:	7a1b      	ldrb	r3, [r3, #8]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <checkBrickHit+0x914>
                ball.dir = NW;
 80011ee:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <checkBrickHit+0xae0>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 80011f4:	4b72      	ldr	r3, [pc, #456]	; (80013c0 <checkBrickHit+0xae0>)
 80011f6:	7a1b      	ldrb	r3, [r3, #8]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d102      	bne.n	8001202 <checkBrickHit+0x922>
                ball.dir = SW;
 80011fc:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <checkBrickHit+0xae0>)
 80011fe:	2205      	movs	r2, #5
 8001200:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f040 861c 	bne.w	8001e42 <checkBrickHit+0x1562>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 800120a:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <checkBrickHit+0xae0>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f1a3 0209 	sub.w	r2, r3, #9
 8001212:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <checkBrickHit+0xae0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	da00      	bge.n	800121e <checkBrickHit+0x93e>
 800121c:	3307      	adds	r3, #7
 800121e:	10db      	asrs	r3, r3, #3
 8001220:	4618      	mov	r0, r3
 8001222:	4968      	ldr	r1, [pc, #416]	; (80013c4 <checkBrickHit+0xae4>)
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4403      	add	r3, r0
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	440b      	add	r3, r1
 8001232:	3308      	adds	r3, #8
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	f040 8603 	bne.w	8001e42 <checkBrickHit+0x1562>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <checkBrickHit+0xae0>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f1a3 0209 	sub.w	r2, r3, #9
 8001244:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <checkBrickHit+0xae0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	da00      	bge.n	8001250 <checkBrickHit+0x970>
 800124e:	3307      	adds	r3, #7
 8001250:	10db      	asrs	r3, r3, #3
 8001252:	4619      	mov	r1, r3
 8001254:	485b      	ldr	r0, [pc, #364]	; (80013c4 <checkBrickHit+0xae4>)
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	440b      	add	r3, r1
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4403      	add	r3, r0
 8001264:	330c      	adds	r3, #12
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	1e58      	subs	r0, r3, #1
 800126a:	4c56      	ldr	r4, [pc, #344]	; (80013c4 <checkBrickHit+0xae4>)
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	440b      	add	r3, r1
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4423      	add	r3, r4
 800127a:	330c      	adds	r3, #12
 800127c:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 800127e:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <checkBrickHit+0xae0>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f1a3 0209 	sub.w	r2, r3, #9
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <checkBrickHit+0xae0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	da00      	bge.n	8001292 <checkBrickHit+0x9b2>
 8001290:	3307      	adds	r3, #7
 8001292:	10db      	asrs	r3, r3, #3
 8001294:	4618      	mov	r0, r3
 8001296:	494b      	ldr	r1, [pc, #300]	; (80013c4 <checkBrickHit+0xae4>)
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4403      	add	r3, r0
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	330c      	adds	r3, #12
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc33      	bgt.n	8001316 <checkBrickHit+0xa36>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <checkBrickHit+0xae0>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f1a3 0209 	sub.w	r2, r3, #9
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <checkBrickHit+0xae0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da00      	bge.n	80012c2 <checkBrickHit+0x9e2>
 80012c0:	3307      	adds	r3, #7
 80012c2:	10db      	asrs	r3, r3, #3
 80012c4:	4618      	mov	r0, r3
 80012c6:	493f      	ldr	r1, [pc, #252]	; (80013c4 <checkBrickHit+0xae4>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4403      	add	r3, r0
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	440b      	add	r3, r1
 80012d6:	3308      	adds	r3, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
                    points++;
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <checkBrickHit+0xaec>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <checkBrickHit+0xaec>)
 80012e6:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <checkBrickHit+0xae0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da00      	bge.n	80012f4 <checkBrickHit+0xa14>
 80012f2:	3307      	adds	r3, #7
 80012f4:	10db      	asrs	r3, r3, #3
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <checkBrickHit+0xae0>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3b09      	subs	r3, #9
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f000 fdaf 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <checkBrickHit+0xae0>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3b09      	subs	r3, #9
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f001 f83f 	bl	8002394 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <checkBrickHit+0xae0>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f1a3 0209 	sub.w	r2, r3, #9
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <checkBrickHit+0xae0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	da00      	bge.n	800132a <checkBrickHit+0xa4a>
 8001328:	3307      	adds	r3, #7
 800132a:	10db      	asrs	r3, r3, #3
 800132c:	4618      	mov	r0, r3
 800132e:	4925      	ldr	r1, [pc, #148]	; (80013c4 <checkBrickHit+0xae4>)
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4403      	add	r3, r0
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	440b      	add	r3, r1
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	b298      	uxth	r0, r3
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <checkBrickHit+0xae0>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f1a3 0209 	sub.w	r2, r3, #9
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <checkBrickHit+0xae0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	da00      	bge.n	800135a <checkBrickHit+0xa7a>
 8001358:	3307      	adds	r3, #7
 800135a:	10db      	asrs	r3, r3, #3
 800135c:	461c      	mov	r4, r3
 800135e:	4919      	ldr	r1, [pc, #100]	; (80013c4 <checkBrickHit+0xae4>)
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4423      	add	r3, r4
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	b299      	uxth	r1, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <checkBrickHit+0xae0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f1a3 0209 	sub.w	r2, r3, #9
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <checkBrickHit+0xae0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	da00      	bge.n	800138c <checkBrickHit+0xaac>
 800138a:	3307      	adds	r3, #7
 800138c:	10db      	asrs	r3, r3, #3
 800138e:	461d      	mov	r5, r3
 8001390:	4c0c      	ldr	r4, [pc, #48]	; (80013c4 <checkBrickHit+0xae4>)
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	442b      	add	r3, r5
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4423      	add	r3, r4
 80013a0:	330c      	adds	r3, #12
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <checkBrickHit+0xae8>)
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2304      	movs	r3, #4
 80013b0:	2220      	movs	r2, #32
 80013b2:	f003 ffdb 	bl	800536c <Displ_FillArea>
                ball.dir = SW;
 80013b6:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <checkBrickHit+0xae0>)
 80013b8:	2205      	movs	r2, #5
 80013ba:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80013bc:	f000 bd41 	b.w	8001e42 <checkBrickHit+0x1562>
 80013c0:	20000038 	.word	0x20000038
 80013c4:	200000ec 	.word	0x200000ec
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20001eec 	.word	0x20001eec
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 80013d0:	4bb5      	ldr	r3, [pc, #724]	; (80016a8 <checkBrickHit+0xdc8>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	1fda      	subs	r2, r3, #7
 80013d6:	4bb4      	ldr	r3, [pc, #720]	; (80016a8 <checkBrickHit+0xdc8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da00      	bge.n	80013e0 <checkBrickHit+0xb00>
 80013de:	3307      	adds	r3, #7
 80013e0:	10db      	asrs	r3, r3, #3
 80013e2:	4618      	mov	r0, r3
 80013e4:	49b1      	ldr	r1, [pc, #708]	; (80016ac <checkBrickHit+0xdcc>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4403      	add	r3, r0
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	440b      	add	r3, r1
 80013f4:	3308      	adds	r3, #8
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 80b6 	bne.w	800156a <checkBrickHit+0xc8a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 80013fe:	4baa      	ldr	r3, [pc, #680]	; (80016a8 <checkBrickHit+0xdc8>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	1fda      	subs	r2, r3, #7
 8001404:	4ba8      	ldr	r3, [pc, #672]	; (80016a8 <checkBrickHit+0xdc8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	da00      	bge.n	800140e <checkBrickHit+0xb2e>
 800140c:	3307      	adds	r3, #7
 800140e:	10db      	asrs	r3, r3, #3
 8001410:	4619      	mov	r1, r3
 8001412:	48a6      	ldr	r0, [pc, #664]	; (80016ac <checkBrickHit+0xdcc>)
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4403      	add	r3, r0
 8001422:	330c      	adds	r3, #12
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	4ca0      	ldr	r4, [pc, #640]	; (80016ac <checkBrickHit+0xdcc>)
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	440b      	add	r3, r1
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4423      	add	r3, r4
 8001438:	330c      	adds	r3, #12
 800143a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 800143c:	4b9a      	ldr	r3, [pc, #616]	; (80016a8 <checkBrickHit+0xdc8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	1fda      	subs	r2, r3, #7
 8001442:	4b99      	ldr	r3, [pc, #612]	; (80016a8 <checkBrickHit+0xdc8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	da00      	bge.n	800144c <checkBrickHit+0xb6c>
 800144a:	3307      	adds	r3, #7
 800144c:	10db      	asrs	r3, r3, #3
 800144e:	4618      	mov	r0, r3
 8001450:	4996      	ldr	r1, [pc, #600]	; (80016ac <checkBrickHit+0xdcc>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4403      	add	r3, r0
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	440b      	add	r3, r1
 8001460:	330c      	adds	r3, #12
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dc30      	bgt.n	80014ca <checkBrickHit+0xbea>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <checkBrickHit+0xdc8>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	1fda      	subs	r2, r3, #7
 800146e:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <checkBrickHit+0xdc8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da00      	bge.n	8001478 <checkBrickHit+0xb98>
 8001476:	3307      	adds	r3, #7
 8001478:	10db      	asrs	r3, r3, #3
 800147a:	4618      	mov	r0, r3
 800147c:	498b      	ldr	r1, [pc, #556]	; (80016ac <checkBrickHit+0xdcc>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4403      	add	r3, r0
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	440b      	add	r3, r1
 800148c:	3308      	adds	r3, #8
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
                points++;
 8001492:	4b87      	ldr	r3, [pc, #540]	; (80016b0 <checkBrickHit+0xdd0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <checkBrickHit+0xdd0>)
 800149c:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800149e:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <checkBrickHit+0xdc8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da00      	bge.n	80014a8 <checkBrickHit+0xbc8>
 80014a6:	3307      	adds	r3, #7
 80014a8:	10db      	asrs	r3, r3, #3
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <checkBrickHit+0xdc8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	3b07      	subs	r3, #7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4610      	mov	r0, r2
 80014b6:	f000 fcd5 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <checkBrickHit+0xdc8>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3b07      	subs	r3, #7
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 ff65 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <checkBrickHit+0xdc8>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	1fda      	subs	r2, r3, #7
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <checkBrickHit+0xdc8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da00      	bge.n	80014da <checkBrickHit+0xbfa>
 80014d8:	3307      	adds	r3, #7
 80014da:	10db      	asrs	r3, r3, #3
 80014dc:	4618      	mov	r0, r3
 80014de:	4973      	ldr	r1, [pc, #460]	; (80016ac <checkBrickHit+0xdcc>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4403      	add	r3, r0
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	440b      	add	r3, r1
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	b298      	uxth	r0, r3
 80014f6:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <checkBrickHit+0xdc8>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	1fda      	subs	r2, r3, #7
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <checkBrickHit+0xdc8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	da00      	bge.n	8001506 <checkBrickHit+0xc26>
 8001504:	3307      	adds	r3, #7
 8001506:	10db      	asrs	r3, r3, #3
 8001508:	461c      	mov	r4, r3
 800150a:	4968      	ldr	r1, [pc, #416]	; (80016ac <checkBrickHit+0xdcc>)
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4423      	add	r3, r4
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	440b      	add	r3, r1
 800151a:	3304      	adds	r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	b299      	uxth	r1, r3
 8001524:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <checkBrickHit+0xdc8>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	1fda      	subs	r2, r3, #7
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <checkBrickHit+0xdc8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	da00      	bge.n	8001534 <checkBrickHit+0xc54>
 8001532:	3307      	adds	r3, #7
 8001534:	10db      	asrs	r3, r3, #3
 8001536:	461d      	mov	r5, r3
 8001538:	4c5c      	ldr	r4, [pc, #368]	; (80016ac <checkBrickHit+0xdcc>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	442b      	add	r3, r5
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	4423      	add	r3, r4
 8001548:	330c      	adds	r3, #12
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a59      	ldr	r2, [pc, #356]	; (80016b4 <checkBrickHit+0xdd4>)
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	b29b      	uxth	r3, r3
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2304      	movs	r3, #4
 8001558:	2220      	movs	r2, #32
 800155a:	f003 ff07 	bl	800536c <Displ_FillArea>
            bricksHit++;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3301      	adds	r3, #1
 8001562:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <checkBrickHit+0xdc8>)
 8001566:	2201      	movs	r2, #1
 8001568:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 800156a:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <checkBrickHit+0xdc8>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f1a3 0208 	sub.w	r2, r3, #8
 8001572:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <checkBrickHit+0xdc8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <checkBrickHit+0xc9e>
 800157c:	3307      	adds	r3, #7
 800157e:	10db      	asrs	r3, r3, #3
 8001580:	4618      	mov	r0, r3
 8001582:	494a      	ldr	r1, [pc, #296]	; (80016ac <checkBrickHit+0xdcc>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4403      	add	r3, r0
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	440b      	add	r3, r1
 8001592:	3308      	adds	r3, #8
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	f040 80d7 	bne.w	800174a <checkBrickHit+0xe6a>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <checkBrickHit+0xdc8>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f1a3 0208 	sub.w	r2, r3, #8
 80015a4:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <checkBrickHit+0xdc8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da00      	bge.n	80015b0 <checkBrickHit+0xcd0>
 80015ae:	3307      	adds	r3, #7
 80015b0:	10db      	asrs	r3, r3, #3
 80015b2:	4619      	mov	r1, r3
 80015b4:	483d      	ldr	r0, [pc, #244]	; (80016ac <checkBrickHit+0xdcc>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	440b      	add	r3, r1
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4403      	add	r3, r0
 80015c4:	330c      	adds	r3, #12
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	1e58      	subs	r0, r3, #1
 80015ca:	4c38      	ldr	r4, [pc, #224]	; (80016ac <checkBrickHit+0xdcc>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4423      	add	r3, r4
 80015da:	330c      	adds	r3, #12
 80015dc:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <checkBrickHit+0xdc8>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f1a3 0208 	sub.w	r2, r3, #8
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <checkBrickHit+0xdc8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <checkBrickHit+0xd12>
 80015f0:	3307      	adds	r3, #7
 80015f2:	10db      	asrs	r3, r3, #3
 80015f4:	4618      	mov	r0, r3
 80015f6:	492d      	ldr	r1, [pc, #180]	; (80016ac <checkBrickHit+0xdcc>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	330c      	adds	r3, #12
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dc33      	bgt.n	8001676 <checkBrickHit+0xd96>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <checkBrickHit+0xdc8>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f1a3 0208 	sub.w	r2, r3, #8
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <checkBrickHit+0xdc8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	da00      	bge.n	8001622 <checkBrickHit+0xd42>
 8001620:	3307      	adds	r3, #7
 8001622:	10db      	asrs	r3, r3, #3
 8001624:	4618      	mov	r0, r3
 8001626:	4921      	ldr	r1, [pc, #132]	; (80016ac <checkBrickHit+0xdcc>)
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4403      	add	r3, r0
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	440b      	add	r3, r1
 8001636:	3308      	adds	r3, #8
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
                points++;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <checkBrickHit+0xdd0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <checkBrickHit+0xdd0>)
 8001646:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <checkBrickHit+0xdc8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	da00      	bge.n	8001654 <checkBrickHit+0xd74>
 8001652:	3307      	adds	r3, #7
 8001654:	10db      	asrs	r3, r3, #3
 8001656:	461a      	mov	r2, r3
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <checkBrickHit+0xdc8>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	3b08      	subs	r3, #8
 800165e:	4619      	mov	r1, r3
 8001660:	4610      	mov	r0, r2
 8001662:	f000 fbff 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <checkBrickHit+0xdc8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3b08      	subs	r3, #8
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fe8f 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <checkBrickHit+0xdc8>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f1a3 0208 	sub.w	r2, r3, #8
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <checkBrickHit+0xdc8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	da00      	bge.n	800168a <checkBrickHit+0xdaa>
 8001688:	3307      	adds	r3, #7
 800168a:	10db      	asrs	r3, r3, #3
 800168c:	4618      	mov	r0, r3
 800168e:	4907      	ldr	r1, [pc, #28]	; (80016ac <checkBrickHit+0xdcc>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4403      	add	r3, r0
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	b298      	uxth	r0, r3
 80016a6:	e007      	b.n	80016b8 <checkBrickHit+0xdd8>
 80016a8:	20000038 	.word	0x20000038
 80016ac:	200000ec 	.word	0x200000ec
 80016b0:	20001eec 	.word	0x20001eec
 80016b4:	20000004 	.word	0x20000004
 80016b8:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <checkBrickHit+0x1018>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f1a3 0208 	sub.w	r2, r3, #8
 80016c0:	4b8d      	ldr	r3, [pc, #564]	; (80018f8 <checkBrickHit+0x1018>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da00      	bge.n	80016cc <checkBrickHit+0xdec>
 80016ca:	3307      	adds	r3, #7
 80016cc:	10db      	asrs	r3, r3, #3
 80016ce:	461c      	mov	r4, r3
 80016d0:	498a      	ldr	r1, [pc, #552]	; (80018fc <checkBrickHit+0x101c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4423      	add	r3, r4
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	440b      	add	r3, r1
 80016e0:	3304      	adds	r3, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	b299      	uxth	r1, r3
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <checkBrickHit+0x1018>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f1a3 0208 	sub.w	r2, r3, #8
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <checkBrickHit+0x1018>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da00      	bge.n	80016fe <checkBrickHit+0xe1e>
 80016fc:	3307      	adds	r3, #7
 80016fe:	10db      	asrs	r3, r3, #3
 8001700:	461d      	mov	r5, r3
 8001702:	4c7e      	ldr	r4, [pc, #504]	; (80018fc <checkBrickHit+0x101c>)
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	442b      	add	r3, r5
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4423      	add	r3, r4
 8001712:	330c      	adds	r3, #12
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <checkBrickHit+0x1020>)
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	b29b      	uxth	r3, r3
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2304      	movs	r3, #4
 8001722:	2220      	movs	r2, #32
 8001724:	f003 fe22 	bl	800536c <Displ_FillArea>
            bricksHit++;
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	3301      	adds	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <checkBrickHit+0x1018>)
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d102      	bne.n	800173c <checkBrickHit+0xe5c>
                ball.dir = SW;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <checkBrickHit+0x1018>)
 8001738:	2205      	movs	r2, #5
 800173a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 800173c:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <checkBrickHit+0x1018>)
 800173e:	7a1b      	ldrb	r3, [r3, #8]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <checkBrickHit+0xe6a>
                ball.dir = NW;
 8001744:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <checkBrickHit+0x1018>)
 8001746:	2207      	movs	r2, #7
 8001748:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f040 837a 	bne.w	8001e46 <checkBrickHit+0x1566>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 8001752:	4b69      	ldr	r3, [pc, #420]	; (80018f8 <checkBrickHit+0x1018>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	1fda      	subs	r2, r3, #7
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <checkBrickHit+0x1018>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	da00      	bge.n	8001764 <checkBrickHit+0xe84>
 8001762:	3307      	adds	r3, #7
 8001764:	10db      	asrs	r3, r3, #3
 8001766:	4618      	mov	r0, r3
 8001768:	4964      	ldr	r1, [pc, #400]	; (80018fc <checkBrickHit+0x101c>)
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4403      	add	r3, r0
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 8362 	bne.w	8001e46 <checkBrickHit+0x1566>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <checkBrickHit+0x1018>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	1fda      	subs	r2, r3, #7
 8001788:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <checkBrickHit+0x1018>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	da00      	bge.n	8001794 <checkBrickHit+0xeb4>
 8001792:	3307      	adds	r3, #7
 8001794:	10db      	asrs	r3, r3, #3
 8001796:	4619      	mov	r1, r3
 8001798:	4858      	ldr	r0, [pc, #352]	; (80018fc <checkBrickHit+0x101c>)
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	440b      	add	r3, r1
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4403      	add	r3, r0
 80017a8:	330c      	adds	r3, #12
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1e58      	subs	r0, r3, #1
 80017ae:	4c53      	ldr	r4, [pc, #332]	; (80018fc <checkBrickHit+0x101c>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4423      	add	r3, r4
 80017be:	330c      	adds	r3, #12
 80017c0:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 80017c2:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <checkBrickHit+0x1018>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	1fda      	subs	r2, r3, #7
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <checkBrickHit+0x1018>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da00      	bge.n	80017d4 <checkBrickHit+0xef4>
 80017d2:	3307      	adds	r3, #7
 80017d4:	10db      	asrs	r3, r3, #3
 80017d6:	4618      	mov	r0, r3
 80017d8:	4948      	ldr	r1, [pc, #288]	; (80018fc <checkBrickHit+0x101c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4403      	add	r3, r0
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	440b      	add	r3, r1
 80017e8:	330c      	adds	r3, #12
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dc32      	bgt.n	8001856 <checkBrickHit+0xf76>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <checkBrickHit+0x1018>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	1fda      	subs	r2, r3, #7
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <checkBrickHit+0x1018>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da00      	bge.n	8001802 <checkBrickHit+0xf22>
 8001800:	3307      	adds	r3, #7
 8001802:	10db      	asrs	r3, r3, #3
 8001804:	4618      	mov	r0, r3
 8001806:	493d      	ldr	r1, [pc, #244]	; (80018fc <checkBrickHit+0x101c>)
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4403      	add	r3, r0
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	440b      	add	r3, r1
 8001816:	3308      	adds	r3, #8
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
                    points++;
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <checkBrickHit+0x1024>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <checkBrickHit+0x1024>)
 8001826:	701a      	strb	r2, [r3, #0]

                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <checkBrickHit+0x1018>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	da00      	bge.n	8001834 <checkBrickHit+0xf54>
 8001832:	3307      	adds	r3, #7
 8001834:	10db      	asrs	r3, r3, #3
 8001836:	461a      	mov	r2, r3
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <checkBrickHit+0x1018>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	3b07      	subs	r3, #7
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f000 fb0f 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <checkBrickHit+0x1018>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3b07      	subs	r3, #7
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fd9f 	bl	8002394 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <checkBrickHit+0x1018>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	1fda      	subs	r2, r3, #7
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <checkBrickHit+0x1018>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	da00      	bge.n	8001868 <checkBrickHit+0xf88>
 8001866:	3307      	adds	r3, #7
 8001868:	10db      	asrs	r3, r3, #3
 800186a:	4618      	mov	r0, r3
 800186c:	4923      	ldr	r1, [pc, #140]	; (80018fc <checkBrickHit+0x101c>)
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4403      	add	r3, r0
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	440b      	add	r3, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	b298      	uxth	r0, r3
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <checkBrickHit+0x1018>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	1fda      	subs	r2, r3, #7
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <checkBrickHit+0x1018>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	da00      	bge.n	8001896 <checkBrickHit+0xfb6>
 8001894:	3307      	adds	r3, #7
 8001896:	10db      	asrs	r3, r3, #3
 8001898:	461c      	mov	r4, r3
 800189a:	4918      	ldr	r1, [pc, #96]	; (80018fc <checkBrickHit+0x101c>)
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4423      	add	r3, r4
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	440b      	add	r3, r1
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	b299      	uxth	r1, r3
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <checkBrickHit+0x1018>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	1fda      	subs	r2, r3, #7
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <checkBrickHit+0x1018>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da00      	bge.n	80018c6 <checkBrickHit+0xfe6>
 80018c4:	3307      	adds	r3, #7
 80018c6:	10db      	asrs	r3, r3, #3
 80018c8:	461d      	mov	r5, r3
 80018ca:	4c0c      	ldr	r4, [pc, #48]	; (80018fc <checkBrickHit+0x101c>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	442b      	add	r3, r5
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4423      	add	r3, r4
 80018da:	330c      	adds	r3, #12
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <checkBrickHit+0x1020>)
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2304      	movs	r3, #4
 80018ea:	2220      	movs	r2, #32
 80018ec:	f003 fd3e 	bl	800536c <Displ_FillArea>
                ball.dir = NW;
 80018f0:	4b01      	ldr	r3, [pc, #4]	; (80018f8 <checkBrickHit+0x1018>)
 80018f2:	2207      	movs	r2, #7
 80018f4:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80018f6:	e2a6      	b.n	8001e46 <checkBrickHit+0x1566>
 80018f8:	20000038 	.word	0x20000038
 80018fc:	200000ec 	.word	0x200000ec
 8001900:	20000004 	.word	0x20000004
 8001904:	20001eec 	.word	0x20001eec
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001908:	4bb5      	ldr	r3, [pc, #724]	; (8001be0 <checkBrickHit+0x1300>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	1fda      	subs	r2, r3, #7
 800190e:	4bb4      	ldr	r3, [pc, #720]	; (8001be0 <checkBrickHit+0x1300>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da00      	bge.n	8001918 <checkBrickHit+0x1038>
 8001916:	3307      	adds	r3, #7
 8001918:	10db      	asrs	r3, r3, #3
 800191a:	4618      	mov	r0, r3
 800191c:	49b1      	ldr	r1, [pc, #708]	; (8001be4 <checkBrickHit+0x1304>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4403      	add	r3, r0
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	440b      	add	r3, r1
 800192c:	3308      	adds	r3, #8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	f040 80b6 	bne.w	8001aa2 <checkBrickHit+0x11c2>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 8001936:	4baa      	ldr	r3, [pc, #680]	; (8001be0 <checkBrickHit+0x1300>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	1fda      	subs	r2, r3, #7
 800193c:	4ba8      	ldr	r3, [pc, #672]	; (8001be0 <checkBrickHit+0x1300>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da00      	bge.n	8001946 <checkBrickHit+0x1066>
 8001944:	3307      	adds	r3, #7
 8001946:	10db      	asrs	r3, r3, #3
 8001948:	4619      	mov	r1, r3
 800194a:	48a6      	ldr	r0, [pc, #664]	; (8001be4 <checkBrickHit+0x1304>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	440b      	add	r3, r1
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4403      	add	r3, r0
 800195a:	330c      	adds	r3, #12
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1e58      	subs	r0, r3, #1
 8001960:	4ca0      	ldr	r4, [pc, #640]	; (8001be4 <checkBrickHit+0x1304>)
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	440b      	add	r3, r1
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4423      	add	r3, r4
 8001970:	330c      	adds	r3, #12
 8001972:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 8001974:	4b9a      	ldr	r3, [pc, #616]	; (8001be0 <checkBrickHit+0x1300>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	1fda      	subs	r2, r3, #7
 800197a:	4b99      	ldr	r3, [pc, #612]	; (8001be0 <checkBrickHit+0x1300>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da00      	bge.n	8001984 <checkBrickHit+0x10a4>
 8001982:	3307      	adds	r3, #7
 8001984:	10db      	asrs	r3, r3, #3
 8001986:	4618      	mov	r0, r3
 8001988:	4996      	ldr	r1, [pc, #600]	; (8001be4 <checkBrickHit+0x1304>)
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4403      	add	r3, r0
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	440b      	add	r3, r1
 8001998:	330c      	adds	r3, #12
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc30      	bgt.n	8001a02 <checkBrickHit+0x1122>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80019a0:	4b8f      	ldr	r3, [pc, #572]	; (8001be0 <checkBrickHit+0x1300>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	1fda      	subs	r2, r3, #7
 80019a6:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <checkBrickHit+0x1300>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da00      	bge.n	80019b0 <checkBrickHit+0x10d0>
 80019ae:	3307      	adds	r3, #7
 80019b0:	10db      	asrs	r3, r3, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	498b      	ldr	r1, [pc, #556]	; (8001be4 <checkBrickHit+0x1304>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4403      	add	r3, r0
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	440b      	add	r3, r1
 80019c4:	3308      	adds	r3, #8
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
                points++;
 80019ca:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <checkBrickHit+0x1308>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <checkBrickHit+0x1308>)
 80019d4:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 80019d6:	4b82      	ldr	r3, [pc, #520]	; (8001be0 <checkBrickHit+0x1300>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da00      	bge.n	80019e0 <checkBrickHit+0x1100>
 80019de:	3307      	adds	r3, #7
 80019e0:	10db      	asrs	r3, r3, #3
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <checkBrickHit+0x1300>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	3b07      	subs	r3, #7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f000 fa39 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80019f2:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <checkBrickHit+0x1300>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3b07      	subs	r3, #7
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fcc9 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 8001a02:	4b77      	ldr	r3, [pc, #476]	; (8001be0 <checkBrickHit+0x1300>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	1fda      	subs	r2, r3, #7
 8001a08:	4b75      	ldr	r3, [pc, #468]	; (8001be0 <checkBrickHit+0x1300>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da00      	bge.n	8001a12 <checkBrickHit+0x1132>
 8001a10:	3307      	adds	r3, #7
 8001a12:	10db      	asrs	r3, r3, #3
 8001a14:	4618      	mov	r0, r3
 8001a16:	4973      	ldr	r1, [pc, #460]	; (8001be4 <checkBrickHit+0x1304>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4403      	add	r3, r0
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <checkBrickHit+0x1300>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	1fda      	subs	r2, r3, #7
 8001a34:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <checkBrickHit+0x1300>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da00      	bge.n	8001a3e <checkBrickHit+0x115e>
 8001a3c:	3307      	adds	r3, #7
 8001a3e:	10db      	asrs	r3, r3, #3
 8001a40:	461c      	mov	r4, r3
 8001a42:	4968      	ldr	r1, [pc, #416]	; (8001be4 <checkBrickHit+0x1304>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4423      	add	r3, r4
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	440b      	add	r3, r1
 8001a52:	3304      	adds	r3, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	b299      	uxth	r1, r3
 8001a5c:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <checkBrickHit+0x1300>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	1fda      	subs	r2, r3, #7
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <checkBrickHit+0x1300>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da00      	bge.n	8001a6c <checkBrickHit+0x118c>
 8001a6a:	3307      	adds	r3, #7
 8001a6c:	10db      	asrs	r3, r3, #3
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4c5c      	ldr	r4, [pc, #368]	; (8001be4 <checkBrickHit+0x1304>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	442b      	add	r3, r5
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4423      	add	r3, r4
 8001a80:	330c      	adds	r3, #12
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a59      	ldr	r2, [pc, #356]	; (8001bec <checkBrickHit+0x130c>)
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2304      	movs	r3, #4
 8001a90:	2220      	movs	r2, #32
 8001a92:	f003 fc6b 	bl	800536c <Displ_FillArea>
            bricksHit++;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <checkBrickHit+0x1300>)
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8001aa2:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <checkBrickHit+0x1300>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f1a3 0208 	sub.w	r2, r3, #8
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <checkBrickHit+0x1300>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da00      	bge.n	8001ab6 <checkBrickHit+0x11d6>
 8001ab4:	3307      	adds	r3, #7
 8001ab6:	10db      	asrs	r3, r3, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	494a      	ldr	r1, [pc, #296]	; (8001be4 <checkBrickHit+0x1304>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4403      	add	r3, r0
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	440b      	add	r3, r1
 8001aca:	3308      	adds	r3, #8
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80d7 	bne.w	8001c82 <checkBrickHit+0x13a2>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <checkBrickHit+0x1300>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f1a3 0208 	sub.w	r2, r3, #8
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <checkBrickHit+0x1300>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da00      	bge.n	8001ae8 <checkBrickHit+0x1208>
 8001ae6:	3307      	adds	r3, #7
 8001ae8:	10db      	asrs	r3, r3, #3
 8001aea:	4619      	mov	r1, r3
 8001aec:	483d      	ldr	r0, [pc, #244]	; (8001be4 <checkBrickHit+0x1304>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	440b      	add	r3, r1
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	4403      	add	r3, r0
 8001afc:	330c      	adds	r3, #12
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1e58      	subs	r0, r3, #1
 8001b02:	4c38      	ldr	r4, [pc, #224]	; (8001be4 <checkBrickHit+0x1304>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	440b      	add	r3, r1
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	4423      	add	r3, r4
 8001b12:	330c      	adds	r3, #12
 8001b14:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <checkBrickHit+0x1300>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f1a3 0208 	sub.w	r2, r3, #8
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <checkBrickHit+0x1300>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da00      	bge.n	8001b2a <checkBrickHit+0x124a>
 8001b28:	3307      	adds	r3, #7
 8001b2a:	10db      	asrs	r3, r3, #3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	492d      	ldr	r1, [pc, #180]	; (8001be4 <checkBrickHit+0x1304>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4403      	add	r3, r0
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	440b      	add	r3, r1
 8001b3e:	330c      	adds	r3, #12
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dc33      	bgt.n	8001bae <checkBrickHit+0x12ce>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <checkBrickHit+0x1300>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f1a3 0208 	sub.w	r2, r3, #8
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <checkBrickHit+0x1300>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da00      	bge.n	8001b5a <checkBrickHit+0x127a>
 8001b58:	3307      	adds	r3, #7
 8001b5a:	10db      	asrs	r3, r3, #3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4921      	ldr	r1, [pc, #132]	; (8001be4 <checkBrickHit+0x1304>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4403      	add	r3, r0
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3308      	adds	r3, #8
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
                points++;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <checkBrickHit+0x1308>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <checkBrickHit+0x1308>)
 8001b7e:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <checkBrickHit+0x1300>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da00      	bge.n	8001b8c <checkBrickHit+0x12ac>
 8001b8a:	3307      	adds	r3, #7
 8001b8c:	10db      	asrs	r3, r3, #3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <checkBrickHit+0x1300>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	3b08      	subs	r3, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f000 f963 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <checkBrickHit+0x1300>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fbf3 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <checkBrickHit+0x1300>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f1a3 0208 	sub.w	r2, r3, #8
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <checkBrickHit+0x1300>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da00      	bge.n	8001bc2 <checkBrickHit+0x12e2>
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	10db      	asrs	r3, r3, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	4907      	ldr	r1, [pc, #28]	; (8001be4 <checkBrickHit+0x1304>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	b298      	uxth	r0, r3
 8001bde:	e007      	b.n	8001bf0 <checkBrickHit+0x1310>
 8001be0:	20000038 	.word	0x20000038
 8001be4:	200000ec 	.word	0x200000ec
 8001be8:	20001eec 	.word	0x20001eec
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	4b98      	ldr	r3, [pc, #608]	; (8001e54 <checkBrickHit+0x1574>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f1a3 0208 	sub.w	r2, r3, #8
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <checkBrickHit+0x1574>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da00      	bge.n	8001c04 <checkBrickHit+0x1324>
 8001c02:	3307      	adds	r3, #7
 8001c04:	10db      	asrs	r3, r3, #3
 8001c06:	461c      	mov	r4, r3
 8001c08:	4993      	ldr	r1, [pc, #588]	; (8001e58 <checkBrickHit+0x1578>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4423      	add	r3, r4
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	440b      	add	r3, r1
 8001c18:	3304      	adds	r3, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	b299      	uxth	r1, r3
 8001c22:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <checkBrickHit+0x1574>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f1a3 0208 	sub.w	r2, r3, #8
 8001c2a:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <checkBrickHit+0x1574>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da00      	bge.n	8001c36 <checkBrickHit+0x1356>
 8001c34:	3307      	adds	r3, #7
 8001c36:	10db      	asrs	r3, r3, #3
 8001c38:	461d      	mov	r5, r3
 8001c3a:	4c87      	ldr	r4, [pc, #540]	; (8001e58 <checkBrickHit+0x1578>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	442b      	add	r3, r5
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4423      	add	r3, r4
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a83      	ldr	r2, [pc, #524]	; (8001e5c <checkBrickHit+0x157c>)
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2304      	movs	r3, #4
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f003 fb86 	bl	800536c <Displ_FillArea>
            bricksHit++;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	3301      	adds	r3, #1
 8001c64:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <checkBrickHit+0x1574>)
 8001c68:	7a1b      	ldrb	r3, [r3, #8]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d102      	bne.n	8001c74 <checkBrickHit+0x1394>
                ball.dir = SE;
 8001c6e:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <checkBrickHit+0x1574>)
 8001c70:	2203      	movs	r2, #3
 8001c72:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001c74:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <checkBrickHit+0x1574>)
 8001c76:	7a1b      	ldrb	r3, [r3, #8]
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	d102      	bne.n	8001c82 <checkBrickHit+0x13a2>
                ball.dir = NE;
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <checkBrickHit+0x1574>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 80e0 	bne.w	8001e4a <checkBrickHit+0x156a>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001c8a:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <checkBrickHit+0x1574>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	1fda      	subs	r2, r3, #7
 8001c90:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <checkBrickHit+0x1574>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da00      	bge.n	8001c9c <checkBrickHit+0x13bc>
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	10db      	asrs	r3, r3, #3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	496d      	ldr	r1, [pc, #436]	; (8001e58 <checkBrickHit+0x1578>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4403      	add	r3, r0
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	440b      	add	r3, r1
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	f040 80c8 	bne.w	8001e4a <checkBrickHit+0x156a>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001cba:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <checkBrickHit+0x1574>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	1fda      	subs	r2, r3, #7
 8001cc0:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <checkBrickHit+0x1574>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da00      	bge.n	8001ccc <checkBrickHit+0x13ec>
 8001cca:	3307      	adds	r3, #7
 8001ccc:	10db      	asrs	r3, r3, #3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4861      	ldr	r0, [pc, #388]	; (8001e58 <checkBrickHit+0x1578>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4403      	add	r3, r0
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1e58      	subs	r0, r3, #1
 8001ce6:	4c5c      	ldr	r4, [pc, #368]	; (8001e58 <checkBrickHit+0x1578>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4423      	add	r3, r4
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001cfa:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <checkBrickHit+0x1574>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	1fda      	subs	r2, r3, #7
 8001d00:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <checkBrickHit+0x1574>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da00      	bge.n	8001d0c <checkBrickHit+0x142c>
 8001d0a:	3307      	adds	r3, #7
 8001d0c:	10db      	asrs	r3, r3, #3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4951      	ldr	r1, [pc, #324]	; (8001e58 <checkBrickHit+0x1578>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4403      	add	r3, r0
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	440b      	add	r3, r1
 8001d20:	330c      	adds	r3, #12
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	dc32      	bgt.n	8001d8e <checkBrickHit+0x14ae>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001d28:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <checkBrickHit+0x1574>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	1fda      	subs	r2, r3, #7
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <checkBrickHit+0x1574>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da00      	bge.n	8001d3a <checkBrickHit+0x145a>
 8001d38:	3307      	adds	r3, #7
 8001d3a:	10db      	asrs	r3, r3, #3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4946      	ldr	r1, [pc, #280]	; (8001e58 <checkBrickHit+0x1578>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4403      	add	r3, r0
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3308      	adds	r3, #8
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
                    points++;
 8001d54:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <checkBrickHit+0x1580>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <checkBrickHit+0x1580>)
 8001d5e:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001d60:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <checkBrickHit+0x1574>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da00      	bge.n	8001d6c <checkBrickHit+0x148c>
 8001d6a:	3307      	adds	r3, #7
 8001d6c:	10db      	asrs	r3, r3, #3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <checkBrickHit+0x1574>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	3b07      	subs	r3, #7
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f000 f873 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <checkBrickHit+0x1574>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3b07      	subs	r3, #7
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fb03 	bl	8002394 <checkEmptyRow>
                }
                ball.dir = NE;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <checkBrickHit+0x1574>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <checkBrickHit+0x1574>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	1fda      	subs	r2, r3, #7
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <checkBrickHit+0x1574>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	da00      	bge.n	8001da6 <checkBrickHit+0x14c6>
 8001da4:	3307      	adds	r3, #7
 8001da6:	10db      	asrs	r3, r3, #3
 8001da8:	4618      	mov	r0, r3
 8001daa:	492b      	ldr	r1, [pc, #172]	; (8001e58 <checkBrickHit+0x1578>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4403      	add	r3, r0
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	b298      	uxth	r0, r3
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <checkBrickHit+0x1574>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	1fda      	subs	r2, r3, #7
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <checkBrickHit+0x1574>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da00      	bge.n	8001dd4 <checkBrickHit+0x14f4>
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	10db      	asrs	r3, r3, #3
 8001dd6:	461c      	mov	r4, r3
 8001dd8:	491f      	ldr	r1, [pc, #124]	; (8001e58 <checkBrickHit+0x1578>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4423      	add	r3, r4
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	440b      	add	r3, r1
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	b299      	uxth	r1, r3
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <checkBrickHit+0x1574>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	1fda      	subs	r2, r3, #7
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <checkBrickHit+0x1574>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da00      	bge.n	8001e04 <checkBrickHit+0x1524>
 8001e02:	3307      	adds	r3, #7
 8001e04:	10db      	asrs	r3, r3, #3
 8001e06:	461d      	mov	r5, r3
 8001e08:	4c13      	ldr	r4, [pc, #76]	; (8001e58 <checkBrickHit+0x1578>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	442b      	add	r3, r5
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4423      	add	r3, r4
 8001e18:	330c      	adds	r3, #12
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <checkBrickHit+0x157c>)
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2304      	movs	r3, #4
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f003 fa9f 	bl	800536c <Displ_FillArea>
            }
        }
        break;
 8001e2e:	e00c      	b.n	8001e4a <checkBrickHit+0x156a>
    case still:
        break;
    default:
        ball.dir = ball.dir;
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <checkBrickHit+0x1574>)
 8001e32:	7a1a      	ldrb	r2, [r3, #8]
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <checkBrickHit+0x1574>)
 8001e36:	721a      	strb	r2, [r3, #8]
    }
}
 8001e38:	e008      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e3a:	bf00      	nop
 8001e3c:	e006      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e3e:	bf00      	nop
 8001e40:	e004      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e42:	bf00      	nop
 8001e44:	e002      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e46:	bf00      	nop
 8001e48:	e000      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e4a:	bf00      	nop
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdb0      	pop	{r4, r5, r7, pc}
 8001e54:	20000038 	.word	0x20000038
 8001e58:	200000ec 	.word	0x200000ec
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20001eec 	.word	0x20001eec

08001e64 <dropPowerUp>:
 * @brief drops a potential powerup when a brick has been destroyed
 *
 * @param x x-coordinate of the destroyed brick
 * @param y y-coordinate of the destroyed brick
 */
void dropPowerUp(int x, int y) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <dropPowerUp+0x70>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d114      	bne.n	8001ea4 <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001e7a:	f004 f897 	bl	8005fac <HAL_GetTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f008 fef9 	bl	800ac78 <srand>
        dropChance = RANDOM(0, 100);
 8001e86:	f008 ff25 	bl	800acd4 <rand>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <dropPowerUp+0x74>)
 8001e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e92:	1111      	asrs	r1, r2, #4
 8001e94:	17da      	asrs	r2, r3, #31
 8001e96:	1a8a      	subs	r2, r1, r2
 8001e98:	2165      	movs	r1, #101	; 0x65
 8001e9a:	fb01 f202 	mul.w	r2, r1, r2
 8001e9e:	1a9a      	subs	r2, r3, r2
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b0a      	cmp	r3, #10
 8001ea8:	d805      	bhi.n	8001eb6 <dropPowerUp+0x52>
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <dropPowerUp+0x52>
        guardian = 1;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <dropPowerUp+0x70>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d806      	bhi.n	8001eca <dropPowerUp+0x66>
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b0a      	cmp	r3, #10
 8001ec0:	d903      	bls.n	8001eca <dropPowerUp+0x66>
        explodeBricks(x, y);
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8d5 	bl	8002074 <explodeBricks>
    }
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001eee 	.word	0x20001eee
 8001ed8:	288df0cb 	.word	0x288df0cb

08001edc <printScreen>:
/**
 * @fn void printScreen()
 * @brief prints the game screen
 *
 */
void printScreen() {
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	b08b      	sub	sp, #44	; 0x2c
 8001ee0:	af06      	add	r7, sp, #24
    Displ_FillArea(SCREEN_WIDTH*4 - 8 - (3*8), 4, 30, 4, D_GREEN);
 8001ee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2304      	movs	r3, #4
 8001eea:	221e      	movs	r2, #30
 8001eec:	2104      	movs	r1, #4
 8001eee:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001ef2:	f003 fa3b 	bl	800536c <Displ_FillArea>

    for (int i = 0; i < lives1; i++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e00f      	b.n	8001f1c <printScreen+0x40>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	b298      	uxth	r0, r3
 8001f08:	2318      	movs	r3, #24
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	2204      	movs	r2, #4
 8001f10:	2104      	movs	r1, #4
 8001f12:	f003 fa2b 	bl	800536c <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <printScreen+0x114>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	dbe9      	blt.n	8001efc <printScreen+0x20>
    }

    if (guardian == 1) {
 8001f28:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <printScreen+0x118>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10f      	bne.n	8001f50 <printScreen+0x74>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <printScreen+0x11c>)
 8001f32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	f249 6396 	movw	r3, #38550	; 0x9696
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2304      	movs	r3, #4
 8001f46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f003 fa0e 	bl	800536c <Displ_FillArea>
    }

    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <printScreen+0x11c>)
 8001f52:	f993 3000 	ldrsb.w	r3, [r3]
 8001f56:	3b19      	subs	r3, #25
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	b298      	uxth	r0, r3
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <printScreen+0x11c>)
 8001f60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2304      	movs	r3, #4
 8001f72:	22c8      	movs	r2, #200	; 0xc8
 8001f74:	f003 f9fa 	bl	800536c <Displ_FillArea>

    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <printScreen+0x120>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	b298      	uxth	r0, r3
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <printScreen+0x120>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	b299      	uxth	r1, r3
 8001f8c:	2318      	movs	r3, #24
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2304      	movs	r3, #4
 8001f92:	2204      	movs	r2, #4
 8001f94:	f003 f9ea 	bl	800536c <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <printScreen+0x124>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <printScreen+0x128>)
 8001fa0:	210c      	movs	r1, #12
 8001fa2:	f008 fed5 	bl	800ad50 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <printScreen+0x12c>)
 8001fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	b29c      	uxth	r4, r3
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <printScreen+0x12c>)
 8001fb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fb8:	b29d      	uxth	r5, r3
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <printScreen+0x130>)
 8001fbc:	463e      	mov	r6, r7
 8001fbe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fc2:	9204      	str	r2, [sp, #16]
 8001fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	9202      	str	r2, [sp, #8]
 8001fce:	46ec      	mov	ip, sp
 8001fd0:	1d1a      	adds	r2, r3, #4
 8001fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fd6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4632      	mov	r2, r6
 8001fde:	4629      	mov	r1, r5
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f003 ff1f 	bl	8005e24 <Displ_WString>
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000002 	.word	0x20000002
 8001ff4:	20001eee 	.word	0x20001eee
 8001ff8:	20000034 	.word	0x20000034
 8001ffc:	20000038 	.word	0x20000038
 8002000:	20001eec 	.word	0x20001eec
 8002004:	0800c2b4 	.word	0x0800c2b4
 8002008:	20000000 	.word	0x20000000
 800200c:	20000018 	.word	0x20000018

08002010 <checkGuardianTimer>:
/**
 * @fn void checkGuardianTimer()
 * @brief checks the timer for the guardian power up
 *
 */
void checkGuardianTimer() {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <checkGuardianTimer+0x58>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d120      	bne.n	8002060 <checkGuardianTimer+0x50>
        if (guardianTimer <= 0) {
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <checkGuardianTimer+0x5c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <checkGuardianTimer+0x44>
            guardian = 0;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <checkGuardianTimer+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <checkGuardianTimer+0x5c>)
 800202e:	2264      	movs	r2, #100	; 0x64
 8002030:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <checkGuardianTimer+0x60>)
 8002034:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002038:	3b01      	subs	r3, #1
 800203a:	b29b      	uxth	r3, r3
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	b299      	uxth	r1, r3
 8002040:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2304      	movs	r3, #4
 8002048:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800204c:	2000      	movs	r0, #0
 800204e:	f003 f98d 	bl	800536c <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8002052:	e005      	b.n	8002060 <checkGuardianTimer+0x50>
            guardianTimer--;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <checkGuardianTimer+0x5c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <checkGuardianTimer+0x5c>)
 800205e:	701a      	strb	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20001eee 	.word	0x20001eee
 800206c:	20000003 	.word	0x20000003
 8002070:	20000034 	.word	0x20000034

08002074 <explodeBricks>:
 * @brief explodes bricks in a radius of 1 (power up)
 *
 * @param x x-coordinate of the central brick of the explosion
 * @param y y-coordinate of the central brick of the explosion
 */
void explodeBricks(int x, int y) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <explodeBricks+0x2c>
        ymin = y;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b30      	cmp	r3, #48	; 0x30
 80020a4:	d101      	bne.n	80020aa <explodeBricks+0x36>
        ymax = y;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <explodeBricks+0x40>
        xmin = x;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d101      	bne.n	80020be <explodeBricks+0x4a>
        xmax = x;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e063      	b.n	800218c <explodeBricks+0x118>
        for(int j = xmin; j <= xmax; j++) {
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	e059      	b.n	800217e <explodeBricks+0x10a>
            if(bricks[i][j].visible == 1) {
 80020ca:	4935      	ldr	r1, [pc, #212]	; (80021a0 <explodeBricks+0x12c>)
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4413      	add	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	440b      	add	r3, r1
 80020de:	3308      	adds	r3, #8
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d148      	bne.n	8002178 <explodeBricks+0x104>
                bricks[i][j].toughness = 0;
 80020e6:	492e      	ldr	r1, [pc, #184]	; (80021a0 <explodeBricks+0x12c>)
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	440b      	add	r3, r1
 80020fa:	330c      	adds	r3, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8002100:	4927      	ldr	r1, [pc, #156]	; (80021a0 <explodeBricks+0x12c>)
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4413      	add	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	440b      	add	r3, r1
 8002114:	3308      	adds	r3, #8
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
                points++;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <explodeBricks+0x130>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <explodeBricks+0x130>)
 8002124:	701a      	strb	r2, [r3, #0]

                Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, D_GREEN);
 8002126:	491e      	ldr	r1, [pc, #120]	; (80021a0 <explodeBricks+0x12c>)
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4413      	add	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	440b      	add	r3, r1
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	b298      	uxth	r0, r3
 8002142:	4917      	ldr	r1, [pc, #92]	; (80021a0 <explodeBricks+0x12c>)
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	440b      	add	r3, r1
 8002156:	3304      	adds	r3, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	b299      	uxth	r1, r3
 8002160:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2304      	movs	r3, #4
 8002168:	2220      	movs	r2, #32
 800216a:	f003 f8ff 	bl	800536c <Displ_FillArea>
                checkEmptyRow(i);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f90e 	bl	8002394 <checkEmptyRow>
        for(int j = xmin; j <= xmax; j++) {
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3301      	adds	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	429a      	cmp	r2, r3
 8002184:	dda1      	ble.n	80020ca <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	dd97      	ble.n	80020c4 <explodeBricks+0x50>
            }
        }
    }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200000ec 	.word	0x200000ec
 80021a4:	20001eec 	.word	0x20001eec

080021a8 <setBrickToughness>:
 * @fn int setBrickToughness(void)
 * @brief generates a random toughness level for a brick
 *
 * @return a toughness level for a brick or the amount of times a brick needs to be hit before being destroyed
 */
int setBrickToughness(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]

    toughnessPercent = RANDOM(0, 100);
 80021b2:	f008 fd8f 	bl	800acd4 <rand>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <setBrickToughness+0x64>)
 80021ba:	fb82 1203 	smull	r1, r2, r2, r3
 80021be:	1111      	asrs	r1, r2, #4
 80021c0:	17da      	asrs	r2, r3, #31
 80021c2:	1a8a      	subs	r2, r1, r2
 80021c4:	2165      	movs	r1, #101	; 0x65
 80021c6:	fb01 f202 	mul.w	r2, r1, r2
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	dd05      	ble.n	80021e0 <setBrickToughness+0x38>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b3c      	cmp	r3, #60	; 0x3c
 80021d8:	dc02      	bgt.n	80021e0 <setBrickToughness+0x38>
        toughness = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	e010      	b.n	8002202 <setBrickToughness+0x5a>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b3c      	cmp	r3, #60	; 0x3c
 80021e4:	dd05      	ble.n	80021f2 <setBrickToughness+0x4a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b59      	cmp	r3, #89	; 0x59
 80021ea:	dc02      	bgt.n	80021f2 <setBrickToughness+0x4a>
        toughness = 2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	e007      	b.n	8002202 <setBrickToughness+0x5a>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b5a      	cmp	r3, #90	; 0x5a
 80021f6:	dd04      	ble.n	8002202 <setBrickToughness+0x5a>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b63      	cmp	r3, #99	; 0x63
 80021fc:	dc01      	bgt.n	8002202 <setBrickToughness+0x5a>
        toughness = 3;
 80021fe:	2303      	movs	r3, #3
 8002200:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	288df0cb 	.word	0x288df0cb

08002210 <drawBricks>:
/**
 * @fn void drawBricks()
 * @brief draws the visible bricks in their respective color based on their toughness
 *
 */
void drawBricks() {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	e0b0      	b.n	800237e <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	e0a6      	b.n	8002370 <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 8002222:	495b      	ldr	r1, [pc, #364]	; (8002390 <drawBricks+0x180>)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	440b      	add	r3, r1
 8002236:	3308      	adds	r3, #8
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	f040 8095 	bne.w	800236a <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 8002240:	4953      	ldr	r1, [pc, #332]	; (8002390 <drawBricks+0x180>)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	440b      	add	r3, r1
 8002254:	330c      	adds	r3, #12
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d122      	bne.n	80022a2 <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 800225c:	494c      	ldr	r1, [pc, #304]	; (8002390 <drawBricks+0x180>)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	4413      	add	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	440b      	add	r3, r1
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	b298      	uxth	r0, r3
 8002278:	4945      	ldr	r1, [pc, #276]	; (8002390 <drawBricks+0x180>)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	440b      	add	r3, r1
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	b299      	uxth	r1, r3
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2304      	movs	r3, #4
 800229c:	2220      	movs	r2, #32
 800229e:	f003 f865 	bl	800536c <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 80022a2:	493b      	ldr	r1, [pc, #236]	; (8002390 <drawBricks+0x180>)
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	440b      	add	r3, r1
 80022b6:	330c      	adds	r3, #12
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d123      	bne.n	8002306 <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 80022be:	4934      	ldr	r1, [pc, #208]	; (8002390 <drawBricks+0x180>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	b298      	uxth	r0, r3
 80022da:	492d      	ldr	r1, [pc, #180]	; (8002390 <drawBricks+0x180>)
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	440b      	add	r3, r1
 80022ee:	3304      	adds	r3, #4
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	b299      	uxth	r1, r3
 80022f8:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2304      	movs	r3, #4
 8002300:	2220      	movs	r2, #32
 8002302:	f003 f833 	bl	800536c <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 8002306:	4922      	ldr	r1, [pc, #136]	; (8002390 <drawBricks+0x180>)
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	440b      	add	r3, r1
 800231a:	330c      	adds	r3, #12
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d123      	bne.n	800236a <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <drawBricks+0x180>)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4413      	add	r3, r2
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	440b      	add	r3, r1
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	b298      	uxth	r0, r3
 800233e:	4914      	ldr	r1, [pc, #80]	; (8002390 <drawBricks+0x180>)
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	440b      	add	r3, r1
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	b299      	uxth	r1, r3
 800235c:	f249 6396 	movw	r3, #38550	; 0x9696
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2304      	movs	r3, #4
 8002364:	2220      	movs	r2, #32
 8002366:	f003 f801 	bl	800536c <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b09      	cmp	r3, #9
 8002374:	f77f af55 	ble.w	8002222 <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3301      	adds	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b2f      	cmp	r3, #47	; 0x2f
 8002382:	f77f af4b 	ble.w	800221c <drawBricks+0xc>
                }
            }
        }
    }
}
 8002386:	bf00      	nop
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200000ec 	.word	0x200000ec

08002394 <checkEmptyRow>:
 * @fn void checkEmptyRow(uint8_t)
 * @brief checks if a row is empty
 *
 * @param row index for the row needed to be checked
 */
void checkEmptyRow(uint8_t row) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
    uint8_t empty = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]

    for(int i = 0; i < 10; i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	e012      	b.n	80023ce <checkEmptyRow+0x3a>
        if(bricks[row][i].visible > 0) {
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4911      	ldr	r1, [pc, #68]	; (80023f0 <checkEmptyRow+0x5c>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	4413      	add	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	440b      	add	r3, r1
 80023bc:	3308      	adds	r3, #8
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	dd01      	ble.n	80023c8 <checkEmptyRow+0x34>
            empty = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < 10; i++) {
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	dde9      	ble.n	80023a8 <checkEmptyRow+0x14>
        }
    }
    if(empty == 0) {
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <checkEmptyRow+0x54>
        HAL_UART_Transmit(&huart2, (uint8_t *)"O", strlen("O"), 300);
 80023da:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80023de:	2201      	movs	r2, #1
 80023e0:	4904      	ldr	r1, [pc, #16]	; (80023f4 <checkEmptyRow+0x60>)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <checkEmptyRow+0x64>)
 80023e4:	f007 fc5e 	bl	8009ca4 <HAL_UART_Transmit>
    }

}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200000ec 	.word	0x200000ec
 80023f4:	0800c2b8 	.word	0x0800c2b8
 80023f8:	20001ff0 	.word	0x20001ff0

080023fc <setBgColor>:

#include "common.h"

uint16_t bg_color = 0x9696;

void setBgColor(uint16_t color){
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
	bg_color = color;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <setBgColor+0x1c>)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	8013      	strh	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000014 	.word	0x20000014

0800241c <getBgColor>:

uint16_t getBgColor(){
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
	return bg_color;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <getBgColor+0x14>)
 8002422:	881b      	ldrh	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000014 	.word	0x20000014

08002434 <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8002444:	2b01      	cmp	r3, #1
 8002446:	d814      	bhi.n	8002472 <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	480f      	ldr	r0, [pc, #60]	; (8002490 <_write+0x5c>)
 8002454:	f007 fc26 	bl	8009ca4 <HAL_UART_Transmit>
 8002458:	4603      	mov	r3, r0
 800245a:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00f      	beq.n	8002482 <_write+0x4e>
            errno = EIO;
 8002462:	f008 fb49 	bl	800aaf8 <__errno>
 8002466:	4603      	mov	r3, r0
 8002468:	2205      	movs	r2, #5
 800246a:	601a      	str	r2, [r3, #0]
            return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	e009      	b.n	8002486 <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 8002472:	f008 fb41 	bl	800aaf8 <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2209      	movs	r2, #9
 800247a:	601a      	str	r2, [r3, #0]
        return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	e001      	b.n	8002486 <_write+0x52>
        break;
 8002482:	bf00      	nop
    }
    return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20002078 	.word	0x20002078

08002494 <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
    choice = 0;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <init+0x28>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <init+0x2c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <init+0x18>
        initSpaceInvaders();
 80024a6:	f001 fa1b 	bl	80038e0 <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 80024aa:	e005      	b.n	80024b8 <init+0x24>
    }else if(gamechoice == 2){
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <init+0x2c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d101      	bne.n	80024b8 <init+0x24>
        initBrickbreaker();
 80024b4:	f7fd fee4 	bl	8000280 <initBrickbreaker>
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001ef0 	.word	0x20001ef0
 80024c0:	20001ef1 	.word	0x20001ef1

080024c4 <loop>:

int loop (int key) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	6078      	str	r0, [r7, #4]
    updateScreen();
 80024cc:	f000 faf8 	bl	8002ac0 <updateScreen>
    if (play == menu){
 80024d0:	4b96      	ldr	r3, [pc, #600]	; (800272c <loop+0x268>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d104      	bne.n	80024e2 <loop+0x1e>
        max_choice = total_games;
 80024d8:	4b95      	ldr	r3, [pc, #596]	; (8002730 <loop+0x26c>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4b95      	ldr	r3, [pc, #596]	; (8002734 <loop+0x270>)
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e002      	b.n	80024e8 <loop+0x24>
    }else{
        max_choice = 1;
 80024e2:	4b94      	ldr	r3, [pc, #592]	; (8002734 <loop+0x270>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d160      	bne.n	80025b0 <loop+0xec>
        if(play < paused){
 80024ee:	4b8f      	ldr	r3, [pc, #572]	; (800272c <loop+0x268>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d84f      	bhi.n	8002596 <loop+0xd2>
        	if(gamechoice == 1){
 80024f6:	4b90      	ldr	r3, [pc, #576]	; (8002738 <loop+0x274>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d104      	bne.n	8002508 <loop+0x44>
        		moveSpaceship(-1);
 80024fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002502:	f001 fe4d 	bl	80041a0 <moveSpaceship>
 8002506:	e046      	b.n	8002596 <loop+0xd2>
        	}else if(gamechoice == 2) {
 8002508:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <loop+0x274>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d142      	bne.n	8002596 <loop+0xd2>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8002510:	4b8a      	ldr	r3, [pc, #552]	; (800273c <loop+0x278>)
 8002512:	f993 3000 	ldrsb.w	r3, [r3]
 8002516:	3b19      	subs	r3, #25
 8002518:	b29b      	uxth	r3, r3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	b298      	uxth	r0, r3
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <loop+0x278>)
 8002520:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002524:	b29b      	uxth	r3, r3
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	b299      	uxth	r1, r3
 800252a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2304      	movs	r3, #4
 8002532:	22c8      	movs	r2, #200	; 0xc8
 8002534:	f002 ff1a 	bl	800536c <Displ_FillArea>
                person.x--;
 8002538:	4b80      	ldr	r3, [pc, #512]	; (800273c <loop+0x278>)
 800253a:	f993 3000 	ldrsb.w	r3, [r3]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	b25a      	sxtb	r2, r3
 8002546:	4b7d      	ldr	r3, [pc, #500]	; (800273c <loop+0x278>)
 8002548:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 800254a:	4b7c      	ldr	r3, [pc, #496]	; (800273c <loop+0x278>)
 800254c:	f993 3000 	ldrsb.w	r3, [r3]
 8002550:	2b18      	cmp	r3, #24
 8002552:	dc03      	bgt.n	800255c <loop+0x98>
                    person.x = (BAR_SIZE/2);
 8002554:	4b79      	ldr	r3, [pc, #484]	; (800273c <loop+0x278>)
 8002556:	2219      	movs	r2, #25
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e01c      	b.n	8002596 <loop+0xd2>
                } else {
                    if (ball.dir == still) {
 800255c:	4b78      	ldr	r3, [pc, #480]	; (8002740 <loop+0x27c>)
 800255e:	7a1b      	ldrb	r3, [r3, #8]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d118      	bne.n	8002596 <loop+0xd2>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002564:	4b76      	ldr	r3, [pc, #472]	; (8002740 <loop+0x27c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	b298      	uxth	r0, r3
 800256e:	4b74      	ldr	r3, [pc, #464]	; (8002740 <loop+0x27c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b29b      	uxth	r3, r3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	b299      	uxth	r1, r3
 8002578:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2304      	movs	r3, #4
 8002580:	2204      	movs	r2, #4
 8002582:	f002 fef3 	bl	800536c <Displ_FillArea>
                        ball.x--;
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <loop+0x27c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3b01      	subs	r3, #1
 800258c:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <loop+0x27c>)
 800258e:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 8002590:	4b6c      	ldr	r3, [pc, #432]	; (8002744 <loop+0x280>)
 8002592:	2207      	movs	r2, #7
 8002594:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <loop+0x284>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <loop+0xe6>
        	choice--;
 800259e:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <loop+0x284>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b68      	ldr	r3, [pc, #416]	; (8002748 <loop+0x284>)
 80025a8:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	e177      	b.n	80028a0 <loop+0x3dc>
    }
    else if(key == right) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d160      	bne.n	8002678 <loop+0x1b4>
    	if(play < paused){
 80025b6:	4b5d      	ldr	r3, [pc, #372]	; (800272c <loop+0x268>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d84d      	bhi.n	800265a <loop+0x196>
    		if(gamechoice == 1){
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <loop+0x274>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d103      	bne.n	80025ce <loop+0x10a>
    			moveSpaceship(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f001 fdea 	bl	80041a0 <moveSpaceship>
 80025cc:	e045      	b.n	800265a <loop+0x196>
    		}else if (gamechoice == 2) {
 80025ce:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <loop+0x274>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d141      	bne.n	800265a <loop+0x196>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <loop+0x278>)
 80025d8:	f993 3000 	ldrsb.w	r3, [r3]
 80025dc:	3b19      	subs	r3, #25
 80025de:	b29b      	uxth	r3, r3
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	b298      	uxth	r0, r3
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <loop+0x278>)
 80025e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	b299      	uxth	r1, r3
 80025f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2304      	movs	r3, #4
 80025f8:	22c8      	movs	r2, #200	; 0xc8
 80025fa:	f002 feb7 	bl	800536c <Displ_FillArea>
    			person.x++;
 80025fe:	4b4f      	ldr	r3, [pc, #316]	; (800273c <loop+0x278>)
 8002600:	f993 3000 	ldrsb.w	r3, [r3]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	b25a      	sxtb	r2, r3
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <loop+0x278>)
 800260e:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <loop+0x278>)
 8002612:	f993 3000 	ldrsb.w	r3, [r3]
 8002616:	2b36      	cmp	r3, #54	; 0x36
 8002618:	dd02      	ble.n	8002620 <loop+0x15c>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 800261a:	4b48      	ldr	r3, [pc, #288]	; (800273c <loop+0x278>)
 800261c:	2236      	movs	r2, #54	; 0x36
 800261e:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <loop+0x27c>)
 8002622:	7a1b      	ldrb	r3, [r3, #8]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d118      	bne.n	800265a <loop+0x196>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <loop+0x27c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	b298      	uxth	r0, r3
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <loop+0x27c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b29b      	uxth	r3, r3
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b299      	uxth	r1, r3
 800263c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2304      	movs	r3, #4
 8002644:	2204      	movs	r2, #4
 8002646:	f002 fe91 	bl	800536c <Displ_FillArea>
    				ball.x++;
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <loop+0x27c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <loop+0x27c>)
 8002652:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <loop+0x280>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <loop+0x284>)
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <loop+0x270>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d005      	beq.n	8002672 <loop+0x1ae>
    		choice++;
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <loop+0x284>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <loop+0x284>)
 8002670:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	e113      	b.n	80028a0 <loop+0x3dc>
    }
    else if(key == down){
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b04      	cmp	r3, #4
 800267c:	f040 80ee 	bne.w	800285c <loop+0x398>
        if (play == notPlay){
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <loop+0x268>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11a      	bne.n	80026be <loop+0x1fa>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, getBgColor());
 8002688:	f7ff fec8 	bl	800241c <getBgColor>
 800268c:	4603      	mov	r3, r0
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2314      	movs	r3, #20
 8002692:	228c      	movs	r2, #140	; 0x8c
 8002694:	2178      	movs	r1, #120	; 0x78
 8002696:	205a      	movs	r0, #90	; 0x5a
 8002698:	f002 fe68 	bl	800536c <Displ_FillArea>
            play = inPlay;
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <loop+0x268>)
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
            if(getConnection() == 1) {
 80026a2:	f001 f881 	bl	80037a8 <getConnection>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	f040 80d4 	bne.w	8002856 <loop+0x392>
                HAL_UART_Transmit(&huart2, (uint8_t *)"S", strlen("S"), 300);
 80026ae:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026b2:	2201      	movs	r2, #1
 80026b4:	4925      	ldr	r1, [pc, #148]	; (800274c <loop+0x288>)
 80026b6:	4826      	ldr	r0, [pc, #152]	; (8002750 <loop+0x28c>)
 80026b8:	f007 faf4 	bl	8009ca4 <HAL_UART_Transmit>
 80026bc:	e0cb      	b.n	8002856 <loop+0x392>
            }
        }else if(play == inPlay) {
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <loop+0x268>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d114      	bne.n	80026f0 <loop+0x22c>
            if (ball.dir == still) {
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <loop+0x27c>)
 80026c8:	7a1b      	ldrb	r3, [r3, #8]
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d108      	bne.n	80026e0 <loop+0x21c>
                ball.dir = ballDirection;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <loop+0x280>)
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <loop+0x27c>)
 80026d4:	721a      	strb	r2, [r3, #8]
                start = 1;
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <loop+0x290>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
                playBall();
 80026dc:	f7fd fe72 	bl	80003c4 <playBall>
            }
            if(!hit){
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <loop+0x294>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 80b6 	bne.w	8002856 <loop+0x392>
                spawnBullet();
 80026ea:	f001 fa47 	bl	8003b7c <spawnBullet>
 80026ee:	e0b2      	b.n	8002856 <loop+0x392>
            }
        }else if(play == paused){
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <loop+0x268>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d14f      	bne.n	8002798 <loop+0x2d4>
            if(choice == 0){
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <loop+0x284>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12f      	bne.n	8002760 <loop+0x29c>
                if(getConnection() == 1) {
 8002700:	f001 f852 	bl	80037a8 <getConnection>
 8002704:	4603      	mov	r3, r0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <loop+0x254>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"M", strlen("M"), 300);
 800270a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800270e:	2201      	movs	r2, #1
 8002710:	4912      	ldr	r1, [pc, #72]	; (800275c <loop+0x298>)
 8002712:	480f      	ldr	r0, [pc, #60]	; (8002750 <loop+0x28c>)
 8002714:	f007 fac6 	bl	8009ca4 <HAL_UART_Transmit>
                }
                play = menu;
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <loop+0x268>)
 800271a:	2203      	movs	r2, #3
 800271c:	701a      	strb	r2, [r3, #0]
                gamechoice = 0;
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <loop+0x274>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
                Displ_CLS(BLACK);
 8002724:	2000      	movs	r0, #0
 8002726:	f002 ffd5 	bl	80056d4 <Displ_CLS>
 800272a:	e094      	b.n	8002856 <loop+0x392>
 800272c:	2000004f 	.word	0x2000004f
 8002730:	20000048 	.word	0x20000048
 8002734:	20000031 	.word	0x20000031
 8002738:	20001ef1 	.word	0x20001ef1
 800273c:	20000034 	.word	0x20000034
 8002740:	20000038 	.word	0x20000038
 8002744:	20000045 	.word	0x20000045
 8002748:	20001ef0 	.word	0x20001ef0
 800274c:	0800c2bc 	.word	0x0800c2bc
 8002750:	20001ff0 	.word	0x20001ff0
 8002754:	20001ef3 	.word	0x20001ef3
 8002758:	20001eef 	.word	0x20001eef
 800275c:	0800c2c0 	.word	0x0800c2c0
            }
            else if(choice == 1){
 8002760:	4baa      	ldr	r3, [pc, #680]	; (8002a0c <loop+0x548>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d113      	bne.n	8002790 <loop+0x2cc>
            	displayPauseMenu(1);
 8002768:	2001      	movs	r0, #1
 800276a:	f000 fd51 	bl	8003210 <displayPauseMenu>
                play = last_state;
 800276e:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <loop+0x54c>)
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	4ba8      	ldr	r3, [pc, #672]	; (8002a14 <loop+0x550>)
 8002774:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 8002776:	f001 f817 	bl	80037a8 <getConnection>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d16a      	bne.n	8002856 <loop+0x392>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"C", strlen("C"), 300);
 8002780:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002784:	2201      	movs	r2, #1
 8002786:	49a4      	ldr	r1, [pc, #656]	; (8002a18 <loop+0x554>)
 8002788:	48a4      	ldr	r0, [pc, #656]	; (8002a1c <loop+0x558>)
 800278a:	f007 fa8b 	bl	8009ca4 <HAL_UART_Transmit>
 800278e:	e062      	b.n	8002856 <loop+0x392>
                }
            }else{
                displayPauseMenu(0);
 8002790:	2000      	movs	r0, #0
 8002792:	f000 fd3d 	bl	8003210 <displayPauseMenu>
 8002796:	e05e      	b.n	8002856 <loop+0x392>
            }

        }else if(play == menu){
 8002798:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <loop+0x550>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d154      	bne.n	800284a <loop+0x386>
            if(choice == 0){
 80027a0:	4b9a      	ldr	r3, [pc, #616]	; (8002a0c <loop+0x548>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11b      	bne.n	80027e0 <loop+0x31c>
                if(getConnection() == 0) {
 80027a8:	f000 fffe 	bl	80037a8 <getConnection>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <loop+0x2fe>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"?", strlen("?"), 300);
 80027b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027b6:	2201      	movs	r2, #1
 80027b8:	4999      	ldr	r1, [pc, #612]	; (8002a20 <loop+0x55c>)
 80027ba:	4898      	ldr	r0, [pc, #608]	; (8002a1c <loop+0x558>)
 80027bc:	f007 fa72 	bl	8009ca4 <HAL_UART_Transmit>
 80027c0:	e049      	b.n	8002856 <loop+0x392>
                } else if(getConnection() == 1) {
 80027c2:	f000 fff1 	bl	80037a8 <getConnection>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d144      	bne.n	8002856 <loop+0x392>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"X", strlen("X"), 300);
 80027cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027d0:	2201      	movs	r2, #1
 80027d2:	4994      	ldr	r1, [pc, #592]	; (8002a24 <loop+0x560>)
 80027d4:	4891      	ldr	r0, [pc, #580]	; (8002a1c <loop+0x558>)
 80027d6:	f007 fa65 	bl	8009ca4 <HAL_UART_Transmit>
                    closeConnection();
 80027da:	f001 f853 	bl	8003884 <closeConnection>
 80027de:	e03a      	b.n	8002856 <loop+0x392>
                }

            }else if(choice == 1){
 80027e0:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <loop+0x548>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d114      	bne.n	8002812 <loop+0x34e>
                gamechoice = 2;
 80027e8:	4b8f      	ldr	r3, [pc, #572]	; (8002a28 <loop+0x564>)
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <loop+0x550>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 80027f4:	f000 ffd8 	bl	80037a8 <getConnection>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d106      	bne.n	800280c <loop+0x348>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"2G", strlen("2G"), 300);
 80027fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002802:	2202      	movs	r2, #2
 8002804:	4989      	ldr	r1, [pc, #548]	; (8002a2c <loop+0x568>)
 8002806:	4885      	ldr	r0, [pc, #532]	; (8002a1c <loop+0x558>)
 8002808:	f007 fa4c 	bl	8009ca4 <HAL_UART_Transmit>
                }
                init();
 800280c:	f7ff fe42 	bl	8002494 <init>
 8002810:	e021      	b.n	8002856 <loop+0x392>
            }
            else if(choice == 2){
 8002812:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <loop+0x548>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d114      	bne.n	8002844 <loop+0x380>
                gamechoice = 1;
 800281a:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <loop+0x564>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 8002820:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <loop+0x550>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 8002826:	f000 ffbf 	bl	80037a8 <getConnection>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <loop+0x37a>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"1G", strlen("1G"), 300);
 8002830:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002834:	2202      	movs	r2, #2
 8002836:	497e      	ldr	r1, [pc, #504]	; (8002a30 <loop+0x56c>)
 8002838:	4878      	ldr	r0, [pc, #480]	; (8002a1c <loop+0x558>)
 800283a:	f007 fa33 	bl	8009ca4 <HAL_UART_Transmit>
                }
                init();
 800283e:	f7ff fe29 	bl	8002494 <init>
 8002842:	e008      	b.n	8002856 <loop+0x392>
            }else{
                displayMenu();
 8002844:	f000 fd4a 	bl	80032dc <displayMenu>
 8002848:	e005      	b.n	8002856 <loop+0x392>
            }

        }
        else if(!hit){
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <loop+0x570>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <loop+0x392>
            spawnBullet();
 8002852:	f001 f993 	bl	8003b7c <spawnBullet>
        }
        key = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	e021      	b.n	80028a0 <loop+0x3dc>
    }
    else if(key == up && play < 2){
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11e      	bne.n	80028a0 <loop+0x3dc>
 8002862:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <loop+0x550>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d81a      	bhi.n	80028a0 <loop+0x3dc>
    	last_state = play;
 800286a:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <loop+0x550>)
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <loop+0x54c>)
 8002870:	701a      	strb	r2, [r3, #0]
        play = paused;
 8002872:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <loop+0x550>)
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <loop+0x548>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 800287e:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <loop+0x574>)
 8002880:	2228      	movs	r2, #40	; 0x28
 8002882:	701a      	strb	r2, [r3, #0]
        key = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
        if(getConnection() == 1) {
 8002888:	f000 ff8e 	bl	80037a8 <getConnection>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d106      	bne.n	80028a0 <loop+0x3dc>
            HAL_UART_Transmit(&huart2, (uint8_t *)"P", strlen("P"), 300);
 8002892:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002896:	2201      	movs	r2, #1
 8002898:	4968      	ldr	r1, [pc, #416]	; (8002a3c <loop+0x578>)
 800289a:	4860      	ldr	r0, [pc, #384]	; (8002a1c <loop+0x558>)
 800289c:	f007 fa02 	bl	8009ca4 <HAL_UART_Transmit>
        }
    }

    if(play == inPlay){
 80028a0:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <loop+0x550>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d132      	bne.n	800290e <loop+0x44a>
    	if(gamechoice == 1){
 80028a8:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <loop+0x564>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10a      	bne.n	80028c6 <loop+0x402>
    		spawnComet();
 80028b0:	f001 f8de 	bl	8003a70 <spawnComet>
    		delayBullet();
 80028b4:	f001 fe90 	bl	80045d8 <delayBullet>
    		moveComets();
 80028b8:	f001 faf8 	bl	8003eac <moveComets>
    		moveBullets();
 80028bc:	f001 fa3a 	bl	8003d34 <moveBullets>
    		moveEnemyBullets();
 80028c0:	f001 fe9e 	bl	8004600 <moveEnemyBullets>
 80028c4:	e021      	b.n	800290a <loop+0x446>
    	}else if(gamechoice == 2) {
 80028c6:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <loop+0x564>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d11d      	bne.n	800290a <loop+0x446>
            if (start == 1 && ball.dir != still) {
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <loop+0x57c>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d115      	bne.n	8002902 <loop+0x43e>
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <loop+0x580>)
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d011      	beq.n	8002902 <loop+0x43e>
                if (delay <= 0) {
 80028de:	4b5a      	ldr	r3, [pc, #360]	; (8002a48 <loop+0x584>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <loop+0x42e>
                    lowerBricks();
 80028e6:	f7fd ff5f 	bl	80007a8 <lowerBricks>
                    delay = BRICK_SPEED;
 80028ea:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <loop+0x584>)
 80028ec:	228c      	movs	r2, #140	; 0x8c
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e005      	b.n	80028fe <loop+0x43a>
                } else {
                    delay--;
 80028f2:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <loop+0x584>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <loop+0x584>)
 80028fc:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 80028fe:	f7fd ffbb 	bl	8000878 <checkGameOver>
            }
            checkGuardianTimer();
 8002902:	f7ff fb85 	bl	8002010 <checkGuardianTimer>
            playBall();
 8002906:	f7fd fd5d 	bl	80003c4 <playBall>
        }

    	updateScreen();
 800290a:	f000 f8d9 	bl	8002ac0 <updateScreen>
    }if(play < paused){
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <loop+0x550>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d807      	bhi.n	8002926 <loop+0x462>
    	if(gamechoice == 1){
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <loop+0x564>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d103      	bne.n	8002926 <loop+0x462>
    		spawnStar();
 800291e:	f001 f9b1 	bl	8003c84 <spawnStar>
    		moveStars();
 8002922:	f001 fbdb 	bl	80040dc <moveStars>
    	}

    }


    if (getConnection() == 1 && getSignal() == 1) {
 8002926:	f000 ff3f 	bl	80037a8 <getConnection>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 80bd 	bne.w	8002aac <loop+0x5e8>
 8002932:	f000 ff21 	bl	8003778 <getSignal>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 80b7 	bne.w	8002aac <loop+0x5e8>
        if(gamechoice == 0) {
 800293e:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <loop+0x564>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d111      	bne.n	800296a <loop+0x4a6>
            gamechoice = getMPGameChoice();
 8002946:	f000 ff51 	bl	80037ec <getMPGameChoice>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <loop+0x564>)
 8002950:	701a      	strb	r2, [r3, #0]
            printArray();
 8002952:	f000 fef9 	bl	8003748 <printArray>
            clearArray();
 8002956:	f000 ff03 	bl	8003760 <clearArray>
            turnOffSignal();
 800295a:	f000 ff19 	bl	8003790 <turnOffSignal>
            play = notPlay;
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <loop+0x550>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
            init();
 8002964:	f7ff fd96 	bl	8002494 <init>
 8002968:	e0a0      	b.n	8002aac <loop+0x5e8>
        }else if(play == notPlay && getMPMenuState() == inPlay){
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <loop+0x550>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d114      	bne.n	800299c <loop+0x4d8>
 8002972:	f000 ff99 	bl	80038a8 <getMPMenuState>
 8002976:	4603      	mov	r3, r0
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10f      	bne.n	800299c <loop+0x4d8>
        	play = inPlay;
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <loop+0x550>)
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
        	turnOffSignal();
 8002982:	f000 ff05 	bl	8003790 <turnOffSignal>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, getBgColor());
 8002986:	f7ff fd49 	bl	800241c <getBgColor>
 800298a:	4603      	mov	r3, r0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2314      	movs	r3, #20
 8002990:	228c      	movs	r2, #140	; 0x8c
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	205a      	movs	r0, #90	; 0x5a
 8002996:	f002 fce9 	bl	800536c <Displ_FillArea>
 800299a:	e087      	b.n	8002aac <loop+0x5e8>
        }else if (play < 2 && getMPMenuState() == paused) {
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <loop+0x550>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d814      	bhi.n	80029ce <loop+0x50a>
 80029a4:	f000 ff80 	bl	80038a8 <getMPMenuState>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d10f      	bne.n	80029ce <loop+0x50a>
            last_state = play;
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <loop+0x550>)
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <loop+0x54c>)
 80029b4:	701a      	strb	r2, [r3, #0]
            play = paused;
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <loop+0x550>)
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
            choice = 1;
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <loop+0x548>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
            last_choice_pause = 40;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <loop+0x574>)
 80029c4:	2228      	movs	r2, #40	; 0x28
 80029c6:	701a      	strb	r2, [r3, #0]
            turnOffSignal();
 80029c8:	f000 fee2 	bl	8003790 <turnOffSignal>
 80029cc:	e06e      	b.n	8002aac <loop+0x5e8>
        }else if (play == paused && getMPMenuState() == inPlay) {
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <loop+0x550>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d13c      	bne.n	8002a50 <loop+0x58c>
 80029d6:	f000 ff67 	bl	80038a8 <getMPMenuState>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d137      	bne.n	8002a50 <loop+0x58c>
            printf("play = %d, mpMenu = %d\r\n", play, getMPMenuState());
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <loop+0x550>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461c      	mov	r4, r3
 80029e6:	f000 ff5f 	bl	80038a8 <getMPMenuState>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	4621      	mov	r1, r4
 80029f0:	4816      	ldr	r0, [pc, #88]	; (8002a4c <loop+0x588>)
 80029f2:	f008 f8b3 	bl	800ab5c <iprintf>
            turnOffSignal();
 80029f6:	f000 fecb 	bl	8003790 <turnOffSignal>
            displayPauseMenu(1);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f000 fc08 	bl	8003210 <displayPauseMenu>
            play = last_state;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <loop+0x54c>)
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <loop+0x550>)
 8002a06:	701a      	strb	r2, [r3, #0]
        }else if (play == paused && getMPMenuState() == inPlay) {
 8002a08:	e050      	b.n	8002aac <loop+0x5e8>
 8002a0a:	bf00      	nop
 8002a0c:	20001ef0 	.word	0x20001ef0
 8002a10:	20001ef2 	.word	0x20001ef2
 8002a14:	2000004f 	.word	0x2000004f
 8002a18:	0800c2c4 	.word	0x0800c2c4
 8002a1c:	20001ff0 	.word	0x20001ff0
 8002a20:	0800c2c8 	.word	0x0800c2c8
 8002a24:	0800c2cc 	.word	0x0800c2cc
 8002a28:	20001ef1 	.word	0x20001ef1
 8002a2c:	0800c2d0 	.word	0x0800c2d0
 8002a30:	0800c2d4 	.word	0x0800c2d4
 8002a34:	20001eef 	.word	0x20001eef
 8002a38:	20000030 	.word	0x20000030
 8002a3c:	0800c2d8 	.word	0x0800c2d8
 8002a40:	20001ef3 	.word	0x20001ef3
 8002a44:	20000038 	.word	0x20000038
 8002a48:	20000044 	.word	0x20000044
 8002a4c:	0800c2dc 	.word	0x0800c2dc
        }else if (play == paused && getMPMenuState() == menu) {
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <loop+0x5f4>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d114      	bne.n	8002a82 <loop+0x5be>
 8002a58:	f000 ff26 	bl	80038a8 <getMPMenuState>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d10f      	bne.n	8002a82 <loop+0x5be>
            turnOffSignal();
 8002a62:	f000 fe95 	bl	8003790 <turnOffSignal>
            play = menu;
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <loop+0x5f4>)
 8002a68:	2203      	movs	r2, #3
 8002a6a:	701a      	strb	r2, [r3, #0]
            gamechoice = 0;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <loop+0x5f8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
            Displ_CLS(BLACK);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f002 fe2e 	bl	80056d4 <Displ_CLS>
            resetLastChoiceMenu();
 8002a78:	f000 fbbe 	bl	80031f8 <resetLastChoiceMenu>
            init();
 8002a7c:	f7ff fd0a 	bl	8002494 <init>
 8002a80:	e014      	b.n	8002aac <loop+0x5e8>
        }else if(gamechoice == 1) {
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <loop+0x5f8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d104      	bne.n	8002a94 <loop+0x5d0>
        	spawnEnemyBullet();
 8002a8a:	f001 f8bf 	bl	8003c0c <spawnEnemyBullet>
        	turnOffSignal();
 8002a8e:	f000 fe7f 	bl	8003790 <turnOffSignal>
 8002a92:	e00b      	b.n	8002aac <loop+0x5e8>
        }else if (gamechoice == 2) {
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <loop+0x5f8>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d107      	bne.n	8002aac <loop+0x5e8>
            lowerBricks();
 8002a9c:	f7fd fe84 	bl	80007a8 <lowerBricks>
            printArray();
 8002aa0:	f000 fe52 	bl	8003748 <printArray>
            clearArray();
 8002aa4:	f000 fe5c 	bl	8003760 <clearArray>
            turnOffSignal();
 8002aa8:	f000 fe72 	bl	8003790 <turnOffSignal>
        }
    }

    return key;
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000004f 	.word	0x2000004f
 8002abc:	20001ef1 	.word	0x20001ef1

08002ac0 <updateScreen>:


void updateScreen()
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af06      	add	r7, sp, #24
    if (play == menu){
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <updateScreen+0x90>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d102      	bne.n	8002ad4 <updateScreen+0x14>
    	displayMenu();
 8002ace:	f000 fc05 	bl	80032dc <displayMenu>
        return;
 8002ad2:	e039      	b.n	8002b48 <updateScreen+0x88>
    }

    if (gamechoice == 1){
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <updateScreen+0x94>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10c      	bne.n	8002af6 <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <updateScreen+0x98>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002ae4:	f001 fd2e 	bl	8004544 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 8002ae8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002aec:	f001 fc9e 	bl	800442c <displaySpaceShip>

        //lives
        displayLives();
 8002af0:	f001 fcde 	bl	80044b0 <displayLives>
 8002af4:	e005      	b.n	8002b02 <updateScreen+0x42>
    }else if(gamechoice == 2) {
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <updateScreen+0x94>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d101      	bne.n	8002b02 <updateScreen+0x42>
        printScreen();
 8002afe:	f7ff f9ed 	bl	8001edc <printScreen>
    }

    //start
    if(!play){
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <updateScreen+0x90>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d117      	bne.n	8002b3a <updateScreen+0x7a>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, getBgColor());
 8002b0a:	f7ff fc87 	bl	800241c <getBgColor>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <updateScreen+0x9c>)
 8002b14:	9204      	str	r2, [sp, #16]
 8002b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b1a:	9203      	str	r2, [sp, #12]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	9202      	str	r2, [sp, #8]
 8002b20:	466c      	mov	r4, sp
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b28:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <updateScreen+0xa0>)
 8002b30:	2178      	movs	r1, #120	; 0x78
 8002b32:	205a      	movs	r0, #90	; 0x5a
 8002b34:	f003 f976 	bl	8005e24 <Displ_WString>
 8002b38:	e006      	b.n	8002b48 <updateScreen+0x88>
    }
    else if(play == paused){
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <updateScreen+0x90>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d102      	bne.n	8002b48 <updateScreen+0x88>
    	displayPauseMenu(0);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f000 fb64 	bl	8003210 <displayPauseMenu>
    }
}
 8002b48:	3704      	adds	r7, #4
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000004f 	.word	0x2000004f
 8002b54:	20001ef1 	.word	0x20001ef1
 8002b58:	20001eef 	.word	0x20001eef
 8002b5c:	20000024 	.word	0x20000024
 8002b60:	0800c2f8 	.word	0x0800c2f8

08002b64 <read_MPU_mem>:
volatile uint32_t debounce_time = 0;
#define DEBOUNCE_DELAY 30 // doesn't work that well

uint8_t key = 0;

uint8_t read_MPU_mem(uint8_t reg_addr){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af04      	add	r7, sp, #16
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	2364      	movs	r3, #100	; 0x64
 8002b74:	9302      	str	r3, [sp, #8]
 8002b76:	2301      	movs	r3, #1
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	f107 030f 	add.w	r3, r7, #15
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2301      	movs	r3, #1
 8002b82:	21d0      	movs	r1, #208	; 0xd0
 8002b84:	4807      	ldr	r0, [pc, #28]	; (8002ba4 <read_MPU_mem+0x40>)
 8002b86:	f004 f8bf 	bl	8006d08 <HAL_I2C_Mem_Read>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <read_MPU_mem+0x30>
		return data;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	e003      	b.n	8002b9c <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <read_MPU_mem+0x44>)
 8002b96:	f008 f867 	bl	800ac68 <puts>
		return 0;
 8002b9a:	2300      	movs	r3, #0
	}
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20001ef4 	.word	0x20001ef4
 8002ba8:	0800c300 	.word	0x0800c300

08002bac <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af04      	add	r7, sp, #16
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	71fb      	strb	r3, [r7, #7]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2364      	movs	r3, #100	; 0x64
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	1dbb      	adds	r3, r7, #6
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	21d1      	movs	r1, #209	; 0xd1
 8002bd0:	4806      	ldr	r0, [pc, #24]	; (8002bec <write_MPU_mem+0x40>)
 8002bd2:	f003 ff85 	bl	8006ae0 <HAL_I2C_Mem_Write>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8002bdc:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <write_MPU_mem+0x44>)
 8002bde:	f008 f843 	bl	800ac68 <puts>
    }
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20001ef4 	.word	0x20001ef4
 8002bf0:	0800c310 	.word	0x0800c310

08002bf4 <read_y_accel>:

void read_y_accel(){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8002bfa:	203e      	movs	r0, #62	; 0x3e
 8002bfc:	f7ff ffb2 	bl	8002b64 <read_MPU_mem>
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8002c04:	203d      	movs	r0, #61	; 0x3d
 8002c06:	f7ff ffad 	bl	8002b64 <read_MPU_mem>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8002c0e:	79bb      	ldrb	r3, [r7, #6]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <read_y_accel+0x34>)
 8002c1e:	801a      	strh	r2, [r3, #0]

}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20002100 	.word	0x20002100

08002c2c <init_MPU>:

void init_MPU(){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002c30:	2100      	movs	r1, #0
 8002c32:	206b      	movs	r0, #107	; 0x6b
 8002c34:	f7ff ffba 	bl	8002bac <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8002c38:	2107      	movs	r1, #7
 8002c3a:	2019      	movs	r0, #25
 8002c3c:	f7ff ffb6 	bl	8002bac <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8002c40:	2100      	movs	r1, #0
 8002c42:	201b      	movs	r0, #27
 8002c44:	f7ff ffb2 	bl	8002bac <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	201c      	movs	r0, #28
 8002c4c:	f7ff ffae 	bl	8002bac <write_MPU_mem>
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c58:	f003 f94e 	bl	8005ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c5c:	f000 f85c 	bl	8002d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c60:	f000 f9b2 	bl	8002fc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c64:	f000 f992 	bl	8002f8c <MX_DMA_Init>
  MX_I2C2_Init();
 8002c68:	f000 f8ac 	bl	8002dc4 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002c6c:	f000 f8ea 	bl	8002e44 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002c70:	f000 f926 	bl	8002ec0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002c74:	f000 f95a 	bl	8002f2c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002c78:	2064      	movs	r0, #100	; 0x64
 8002c7a:	f003 f9a3 	bl	8005fc4 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002c7e:	2364      	movs	r3, #100	; 0x64
 8002c80:	2201      	movs	r2, #1
 8002c82:	21d0      	movs	r1, #208	; 0xd0
 8002c84:	481f      	ldr	r0, [pc, #124]	; (8002d04 <main+0xb0>)
 8002c86:	f004 f959 	bl	8006f3c <HAL_I2C_IsDeviceReady>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <main+0x48>
	  printf("succesfully communicated\r\n");
 8002c90:	481d      	ldr	r0, [pc, #116]	; (8002d08 <main+0xb4>)
 8002c92:	f007 ffe9 	bl	800ac68 <puts>
	  init_MPU();
 8002c96:	f7ff ffc9 	bl	8002c2c <init_MPU>
 8002c9a:	e002      	b.n	8002ca2 <main+0x4e>
  }
  else{
	  printf("I2C device not found\r\n");
 8002c9c:	481b      	ldr	r0, [pc, #108]	; (8002d0c <main+0xb8>)
 8002c9e:	f007 ffe3 	bl	800ac68 <puts>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f002 fac0 	bl	8005228 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f002 fd13 	bl	80056d4 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8002cae:	2064      	movs	r0, #100	; 0x64
 8002cb0:	f003 f988 	bl	8005fc4 <HAL_Delay>
      if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002cb4:	2364      	movs	r3, #100	; 0x64
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	21d0      	movs	r1, #208	; 0xd0
 8002cba:	4812      	ldr	r0, [pc, #72]	; (8002d04 <main+0xb0>)
 8002cbc:	f004 f93e 	bl	8006f3c <HAL_I2C_IsDeviceReady>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d114      	bne.n	8002cf0 <main+0x9c>
		  read_y_accel();
 8002cc6:	f7ff ff95 	bl	8002bf4 <read_y_accel>
		  if (ay > 2000){
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <main+0xbc>)
 8002ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002cd4:	dd03      	ble.n	8002cde <main+0x8a>
			  key = right;
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <main+0xc0>)
 8002cd8:	2203      	movs	r2, #3
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e008      	b.n	8002cf0 <main+0x9c>
		  }
		  else if (ay < -2000){
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <main+0xbc>)
 8002ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce4:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002ce8:	da02      	bge.n	8002cf0 <main+0x9c>
			  key = left;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <main+0xc0>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
		  }
      }
      key = loop(key);
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <main+0xc0>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fbe5 	bl	80024c4 <loop>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <main+0xc0>)
 8002d00:	701a      	strb	r2, [r3, #0]
      HAL_Delay(100);
 8002d02:	e7d4      	b.n	8002cae <main+0x5a>
 8002d04:	20001ef4 	.word	0x20001ef4
 8002d08:	0800c324 	.word	0x0800c324
 8002d0c:	0800c340 	.word	0x0800c340
 8002d10:	20002100 	.word	0x20002100
 8002d14:	20002108 	.word	0x20002108

08002d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b09c      	sub	sp, #112	; 0x70
 8002d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d22:	2228      	movs	r2, #40	; 0x28
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f007 ff10 	bl	800ab4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	2230      	movs	r2, #48	; 0x30
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f007 ff02 	bl	800ab4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d50:	2310      	movs	r3, #16
 8002d52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d54:	2302      	movs	r3, #2
 8002d56:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002d5c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002d60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 fd42 	bl	80077f0 <HAL_RCC_OscConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002d72:	f000 fa3b 	bl	80031ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d76:	230f      	movs	r3, #15
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f005 fd6a 	bl	800886c <HAL_RCC_ClockConfig>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002d9e:	f000 fa25 	bl	80031ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002da2:	2340      	movs	r3, #64	; 0x40
 8002da4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	4618      	mov	r0, r3
 8002dae:	f005 ff93 	bl	8008cd8 <HAL_RCCEx_PeriphCLKConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002db8:	f000 fa18 	bl	80031ec <Error_Handler>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3770      	adds	r7, #112	; 0x70
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002dca:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <MX_I2C2_Init+0x78>)
 8002dcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <MX_I2C2_Init+0x7c>)
 8002dd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dfe:	480e      	ldr	r0, [pc, #56]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002e00:	f003 fdde 	bl	80069c0 <HAL_I2C_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002e0a:	f000 f9ef 	bl	80031ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4809      	ldr	r0, [pc, #36]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002e12:	f004 fc55 	bl	80076c0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002e1c:	f000 f9e6 	bl	80031ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002e20:	2100      	movs	r1, #0
 8002e22:	4805      	ldr	r0, [pc, #20]	; (8002e38 <MX_I2C2_Init+0x74>)
 8002e24:	f004 fc97 	bl	8007756 <HAL_I2CEx_ConfigDigitalFilter>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002e2e:	f000 f9dd 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20001ef4 	.word	0x20001ef4
 8002e3c:	40005800 	.word	0x40005800
 8002e40:	2000090e 	.word	0x2000090e

08002e44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <MX_SPI2_Init+0x78>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e62:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e76:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e92:	2207      	movs	r2, #7
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_SPI2_Init+0x74>)
 8002ea4:	f006 f89c 	bl	8008fe0 <HAL_SPI_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002eae:	f000 f99d 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20001f48 	.word	0x20001f48
 8002ebc:	40003800 	.word	0x40003800

08002ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002ec6:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <MX_USART2_UART_Init+0x68>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002ecc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f02:	4808      	ldr	r0, [pc, #32]	; (8002f24 <MX_USART2_UART_Init+0x64>)
 8002f04:	f006 fe80 	bl	8009c08 <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f0e:	f000 f96d 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <MX_USART2_UART_Init+0x68>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <MX_USART2_UART_Init+0x68>)
 8002f18:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20001ff0 	.word	0x20001ff0
 8002f28:	40004400 	.word	0x40004400

08002f2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f32:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <MX_USART3_UART_Init+0x5c>)
 8002f34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002f36:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f38:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002f3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f52:	220c      	movs	r2, #12
 8002f54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f6e:	4805      	ldr	r0, [pc, #20]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f70:	f006 fe4a 	bl	8009c08 <HAL_UART_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f7a:	f000 f937 	bl	80031ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20002078 	.word	0x20002078
 8002f88:	40004800 	.word	0x40004800

08002f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <MX_DMA_Init+0x38>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <MX_DMA_Init+0x38>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6153      	str	r3, [r2, #20]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <MX_DMA_Init+0x38>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	200f      	movs	r0, #15
 8002fb0:	f003 f907 	bl	80061c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002fb4:	200f      	movs	r0, #15
 8002fb6:	f003 f920 	bl	80061fa <HAL_NVIC_EnableIRQ>

}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <MX_GPIO_Init+0x130>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4a45      	ldr	r2, [pc, #276]	; (80030f8 <MX_GPIO_Init+0x130>)
 8002fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fe8:	6153      	str	r3, [r2, #20]
 8002fea:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <MX_GPIO_Init+0x130>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ff6:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <MX_GPIO_Init+0x130>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <MX_GPIO_Init+0x130>)
 8002ffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003000:	6153      	str	r3, [r2, #20]
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <MX_GPIO_Init+0x130>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <MX_GPIO_Init+0x130>)
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <MX_GPIO_Init+0x130>)
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	6153      	str	r3, [r2, #20]
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <MX_GPIO_Init+0x130>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <MX_GPIO_Init+0x130>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4a33      	ldr	r2, [pc, #204]	; (80030f8 <MX_GPIO_Init+0x130>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6153      	str	r3, [r2, #20]
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <MX_GPIO_Init+0x130>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003044:	482d      	ldr	r0, [pc, #180]	; (80030fc <MX_GPIO_Init+0x134>)
 8003046:	f003 fc8b 	bl	8006960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003054:	f003 fc84 	bl	8006960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8003058:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800305c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800305e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003064:	2301      	movs	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4824      	ldr	r0, [pc, #144]	; (8003100 <MX_GPIO_Init+0x138>)
 8003070:	f003 faec 	bl	800664c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8003074:	2301      	movs	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003078:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800307c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800307e:	2301      	movs	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800308c:	f003 fade 	bl	800664c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003096:	2301      	movs	r3, #1
 8003098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	4814      	ldr	r0, [pc, #80]	; (80030fc <MX_GPIO_Init+0x134>)
 80030aa:	f003 facf 	bl	800664c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 80030ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80030b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b4:	2301      	movs	r3, #1
 80030b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	2300      	movs	r3, #0
 80030be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ca:	f003 fabf 	bl	800664c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	2006      	movs	r0, #6
 80030d4:	f003 f875 	bl	80061c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030d8:	2006      	movs	r0, #6
 80030da:	f003 f88e 	bl	80061fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2028      	movs	r0, #40	; 0x28
 80030e4:	f003 f86d 	bl	80061c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e8:	2028      	movs	r0, #40	; 0x28
 80030ea:	f003 f886 	bl	80061fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	48000400 	.word	0x48000400
 8003100:	48000800 	.word	0x48000800

08003104 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 800310e:	f002 ff4d 	bl	8005fac <HAL_GetTick>
 8003112:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last interrupt
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8003114:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b1e      	cmp	r3, #30
 800311e:	d951      	bls.n	80031c4 <HAL_GPIO_EXTI_Callback+0xc0>
        debounce_time = current_time;
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6013      	str	r3, [r2, #0]
        printf("interrupt!\r\n");
 8003126:	482a      	ldr	r0, [pc, #168]	; (80031d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003128:	f007 fd9e 	bl	800ac68 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003132:	d10e      	bne.n	8003152 <HAL_GPIO_EXTI_Callback+0x4e>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4619      	mov	r1, r3
 8003138:	4826      	ldr	r0, [pc, #152]	; (80031d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800313a:	f003 fbf9 	bl	8006930 <HAL_GPIO_ReadPin>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 800314a:	4824      	ldr	r0, [pc, #144]	; (80031dc <HAL_GPIO_EXTI_Callback+0xd8>)
 800314c:	f007 fd8c 	bl	800ac68 <puts>
 8003150:	e038      	b.n	80031c4 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003158:	d10e      	bne.n	8003178 <HAL_GPIO_EXTI_Callback+0x74>
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4619      	mov	r1, r3
 800315e:	481d      	ldr	r0, [pc, #116]	; (80031d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003160:	f003 fbe6 	bl	8006930 <HAL_GPIO_ReadPin>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8003170:	481b      	ldr	r0, [pc, #108]	; (80031e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003172:	f007 fd79 	bl	800ac68 <puts>
 8003176:	e025      	b.n	80031c4 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800317e:	d10e      	bne.n	800319e <HAL_GPIO_EXTI_Callback+0x9a>
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4619      	mov	r1, r3
 8003184:	4813      	ldr	r0, [pc, #76]	; (80031d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003186:	f003 fbd3 	bl	8006930 <HAL_GPIO_ReadPin>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003192:	2203      	movs	r2, #3
 8003194:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8003196:	4813      	ldr	r0, [pc, #76]	; (80031e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003198:	f007 fd66 	bl	800ac68 <puts>
 800319c:	e012      	b.n	80031c4 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10f      	bne.n	80031c4 <HAL_GPIO_EXTI_Callback+0xc0>
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ac:	f003 fbc0 	bl	8006930 <HAL_GPIO_ReadPin>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 80031b8:	2204      	movs	r2, #4
 80031ba:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 80031bc:	480a      	ldr	r0, [pc, #40]	; (80031e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80031be:	f007 fd53 	bl	800ac68 <puts>
        }
    }
}
 80031c2:	e7ff      	b.n	80031c4 <HAL_GPIO_EXTI_Callback+0xc0>
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20002104 	.word	0x20002104
 80031d0:	0800c358 	.word	0x0800c358
 80031d4:	48000800 	.word	0x48000800
 80031d8:	20002108 	.word	0x20002108
 80031dc:	0800c364 	.word	0x0800c364
 80031e0:	0800c374 	.word	0x0800c374
 80031e4:	0800c380 	.word	0x0800c380
 80031e8:	0800c390 	.word	0x0800c390

080031ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031f0:	b672      	cpsid	i
}
 80031f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <Error_Handler+0x8>
	...

080031f8 <resetLastChoiceMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void resetLastChoiceMenu(void){
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	last_choice_menu = 40;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <resetLastChoiceMenu+0x14>)
 80031fe:	2228      	movs	r2, #40	; 0x28
 8003200:	701a      	strb	r2, [r3, #0]
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	2000004c 	.word	0x2000004c

08003210 <displayPauseMenu>:

void displayPauseMenu(uint8_t clear){
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af04      	add	r7, sp, #16
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 800321a:	f249 6396 	movw	r3, #38550	; 0x9696
 800321e:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8003220:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003224:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8003226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800322a:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <displayPauseMenu+0xc4>)
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <displayPauseMenu+0xc8>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d102      	bne.n	800323e <displayPauseMenu+0x2e>
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d045      	beq.n	80032ca <displayPauseMenu+0xba>
		last_choice_pause = choice;
 800323e:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <displayPauseMenu+0xc4>)
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <displayPauseMenu+0xc8>)
 8003244:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8003246:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <displayPauseMenu+0xc4>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <displayPauseMenu+0x4c>
			back_color = RED;
 800324e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003252:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8003254:	f249 6396 	movw	r3, #38550	; 0x9696
 8003258:	81bb      	strh	r3, [r7, #12]
 800325a:	e00e      	b.n	800327a <displayPauseMenu+0x6a>
		}
		else if(clear){
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <displayPauseMenu+0x6a>
			back_color = getBgColor();
 8003262:	f7ff f8db 	bl	800241c <getBgColor>
 8003266:	4603      	mov	r3, r0
 8003268:	81fb      	strh	r3, [r7, #14]
			continue_color = getBgColor();
 800326a:	f7ff f8d7 	bl	800241c <getBgColor>
 800326e:	4603      	mov	r3, r0
 8003270:	81bb      	strh	r3, [r7, #12]
			triangle_color = getBgColor();
 8003272:	f7ff f8d3 	bl	800241c <getBgColor>
 8003276:	4603      	mov	r3, r0
 8003278:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2340      	movs	r3, #64	; 0x40
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	2158      	movs	r1, #88	; 0x58
 8003284:	2054      	movs	r0, #84	; 0x54
 8003286:	f002 f871 	bl	800536c <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 800328a:	89bb      	ldrh	r3, [r7, #12]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2340      	movs	r3, #64	; 0x40
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	2158      	movs	r1, #88	; 0x58
 8003294:	20ac      	movs	r0, #172	; 0xac
 8003296:	f002 f869 	bl	800536c <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	9302      	str	r3, [sp, #8]
 800329e:	2378      	movs	r3, #120	; 0x78
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	23e4      	movs	r3, #228	; 0xe4
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2390      	movs	r3, #144	; 0x90
 80032a8:	22b4      	movs	r2, #180	; 0xb4
 80032aa:	2160      	movs	r1, #96	; 0x60
 80032ac:	20b4      	movs	r0, #180	; 0xb4
 80032ae:	f002 fb5e 	bl	800596e <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	2378      	movs	r3, #120	; 0x78
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	235c      	movs	r3, #92	; 0x5c
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2390      	movs	r3, #144	; 0x90
 80032c0:	228c      	movs	r2, #140	; 0x8c
 80032c2:	2160      	movs	r1, #96	; 0x60
 80032c4:	208c      	movs	r0, #140	; 0x8c
 80032c6:	f002 fb52 	bl	800596e <Displ_fillTriangle>
	}

}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20001ef0 	.word	0x20001ef0
 80032d8:	20000030 	.word	0x20000030

080032dc <displayMenu>:

void displayMenu(){
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b08b      	sub	sp, #44	; 0x2c
 80032e0:	af06      	add	r7, sp, #24
	int y_offset = 12;
 80032e2:	230c      	movs	r3, #12
 80032e4:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 80032e6:	230c      	movs	r3, #12
 80032e8:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 80032ea:	4b4c      	ldr	r3, [pc, #304]	; (800341c <displayMenu+0x140>)
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	4b4c      	ldr	r3, [pc, #304]	; (8003420 <displayMenu+0x144>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d03d      	beq.n	8003372 <displayMenu+0x96>
		last_choice_menu =  choice;
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <displayMenu+0x140>)
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <displayMenu+0x144>)
 80032fc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	e02e      	b.n	8003362 <displayMenu+0x86>
			if(i == choice){
 8003304:	4b45      	ldr	r3, [pc, #276]	; (800341c <displayMenu+0x140>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4293      	cmp	r3, r2
 800330e:	d10b      	bne.n	8003328 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	b298      	uxth	r0, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	b299      	uxth	r1, r3
 8003318:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2340      	movs	r3, #64	; 0x40
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	f002 f823 	bl	800536c <Displ_FillArea>
 8003326:	e00a      	b.n	800333e <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	b298      	uxth	r0, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	b299      	uxth	r1, r3
 8003330:	f249 6396 	movw	r3, #38550	; 0x9696
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	2240      	movs	r2, #64	; 0x40
 800333a:	f002 f817 	bl	800536c <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3301      	adds	r3, #1
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d105      	bne.n	8003356 <displayMenu+0x7a>
				x_offset = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	334c      	adds	r3, #76	; 0x4c
 8003352:	60fb      	str	r3, [r7, #12]
				continue;
 8003354:	e002      	b.n	800335c <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	334c      	adds	r3, #76	; 0x4c
 800335a:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3301      	adds	r3, #1
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <displayMenu+0x148>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	dc02      	bgt.n	8003372 <displayMenu+0x96>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b07      	cmp	r3, #7
 8003370:	ddc8      	ble.n	8003304 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8003372:	f000 f861 	bl	8003438 <displayMenuIcons>

    // text
    switch (choice) {
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <displayMenu+0x140>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d032      	beq.n	80033e4 <displayMenu+0x108>
 800337e:	2b02      	cmp	r3, #2
 8003380:	dc46      	bgt.n	8003410 <displayMenu+0x134>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <displayMenu+0xb0>
 8003386:	2b01      	cmp	r3, #1
 8003388:	d016      	beq.n	80033b8 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 800338a:	e041      	b.n	8003410 <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 800338c:	4b26      	ldr	r3, [pc, #152]	; (8003428 <displayMenu+0x14c>)
 800338e:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003392:	9204      	str	r2, [sp, #16]
 8003394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003398:	9203      	str	r2, [sp, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	9202      	str	r2, [sp, #8]
 800339e:	466c      	mov	r4, sp
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <displayMenu+0x150>)
 80033ae:	21c8      	movs	r1, #200	; 0xc8
 80033b0:	2008      	movs	r0, #8
 80033b2:	f002 fd37 	bl	8005e24 <Displ_WString>
        break;
 80033b6:	e02c      	b.n	8003412 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <displayMenu+0x14c>)
 80033ba:	f642 422c 	movw	r2, #11308	; 0x2c2c
 80033be:	9204      	str	r2, [sp, #16]
 80033c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c4:	9203      	str	r2, [sp, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	9202      	str	r2, [sp, #8]
 80033ca:	466c      	mov	r4, sp
 80033cc:	1d1a      	adds	r2, r3, #4
 80033ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <displayMenu+0x154>)
 80033da:	21c8      	movs	r1, #200	; 0xc8
 80033dc:	2008      	movs	r0, #8
 80033de:	f002 fd21 	bl	8005e24 <Displ_WString>
        break;
 80033e2:	e016      	b.n	8003412 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <displayMenu+0x14c>)
 80033e6:	f642 422c 	movw	r2, #11308	; 0x2c2c
 80033ea:	9204      	str	r2, [sp, #16]
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	9203      	str	r2, [sp, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	9202      	str	r2, [sp, #8]
 80033f6:	466c      	mov	r4, sp
 80033f8:	1d1a      	adds	r2, r3, #4
 80033fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <displayMenu+0x158>)
 8003406:	21c8      	movs	r1, #200	; 0xc8
 8003408:	2008      	movs	r0, #8
 800340a:	f002 fd0b 	bl	8005e24 <Displ_WString>
        break;
 800340e:	e000      	b.n	8003412 <displayMenu+0x136>
        break;
 8003410:	bf00      	nop
    }
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop
 800341c:	20001ef0 	.word	0x20001ef0
 8003420:	2000004c 	.word	0x2000004c
 8003424:	20000048 	.word	0x20000048
 8003428:	20000024 	.word	0x20000024
 800342c:	0800c3a0 	.word	0x0800c3a0
 8003430:	0800c3b0 	.word	0x0800c3b0
 8003434:	0800c3c0 	.word	0x0800c3c0

08003438 <displayMenuIcons>:

void displayMenuIcons(){
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 800343c:	f000 f806 	bl	800344c <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8003440:	f000 f86a 	bl	8003518 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 8003444:	f000 f892 	bl	800356c <displaySpaceIcon>
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}

0800344c <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af02      	add	r7, sp, #8
	uint16_t color = LIGHT_GREEN;
 8003452:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003456:	807b      	strh	r3, [r7, #2]
	if(connected){
 8003458:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <displayMultiplayerIcon+0xc8>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <displayMultiplayerIcon+0x5c>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8003460:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2304      	movs	r3, #4
 8003468:	2230      	movs	r2, #48	; 0x30
 800346a:	2114      	movs	r1, #20
 800346c:	2014      	movs	r0, #20
 800346e:	f001 ff7d 	bl	800536c <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 8003472:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2308      	movs	r3, #8
 800347a:	2204      	movs	r2, #4
 800347c:	210c      	movs	r1, #12
 800347e:	2014      	movs	r0, #20
 8003480:	f001 ff74 	bl	800536c <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 8003484:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2308      	movs	r3, #8
 800348c:	2204      	movs	r2, #4
 800348e:	210c      	movs	r1, #12
 8003490:	2040      	movs	r0, #64	; 0x40
 8003492:	f001 ff6b 	bl	800536c <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 8003496:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2328      	movs	r3, #40	; 0x28
 800349e:	2208      	movs	r2, #8
 80034a0:	2118      	movs	r1, #24
 80034a2:	2028      	movs	r0, #40	; 0x28
 80034a4:	f001 ff62 	bl	800536c <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80034a8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2304      	movs	r3, #4
 80034b0:	2230      	movs	r2, #48	; 0x30
 80034b2:	2140      	movs	r1, #64	; 0x40
 80034b4:	2014      	movs	r0, #20
 80034b6:	f001 ff59 	bl	800536c <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 80034ba:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2308      	movs	r3, #8
 80034c2:	2204      	movs	r2, #4
 80034c4:	2144      	movs	r1, #68	; 0x44
 80034c6:	2014      	movs	r0, #20
 80034c8:	f001 ff50 	bl	800536c <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 80034cc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2308      	movs	r3, #8
 80034d4:	2204      	movs	r2, #4
 80034d6:	2144      	movs	r1, #68	; 0x44
 80034d8:	2040      	movs	r0, #64	; 0x40
 80034da:	f001 ff47 	bl	800536c <Displ_FillArea>
	if(!connected){
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <displayMultiplayerIcon+0xc8>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d112      	bne.n	800350c <displayMultiplayerIcon+0xc0>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 80034e6:	2318      	movs	r3, #24
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e00c      	b.n	8003506 <displayMultiplayerIcon+0xba>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	b299      	uxth	r1, r3
 80034f0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2304      	movs	r3, #4
 80034f8:	2208      	movs	r2, #8
 80034fa:	2028      	movs	r0, #40	; 0x28
 80034fc:	f001 ff36 	bl	800536c <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3308      	adds	r3, #8
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b3f      	cmp	r3, #63	; 0x3f
 800350a:	ddef      	ble.n	80034ec <displayMultiplayerIcon+0xa0>
		}
	}
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20002109 	.word	0x20002109

08003518 <displayBricksIcon>:

void displayBricksIcon(){
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 800351e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2304      	movs	r3, #4
 8003526:	2214      	movs	r2, #20
 8003528:	2140      	movs	r1, #64	; 0x40
 800352a:	2068      	movs	r0, #104	; 0x68
 800352c:	f001 ff1e 	bl	800536c <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8003530:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2340      	movs	r3, #64	; 0x40
 8003538:	2204      	movs	r2, #4
 800353a:	210c      	movs	r1, #12
 800353c:	205c      	movs	r0, #92	; 0x5c
 800353e:	f001 ff15 	bl	800536c <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8003542:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2340      	movs	r3, #64	; 0x40
 800354a:	2204      	movs	r2, #4
 800354c:	210c      	movs	r1, #12
 800354e:	2090      	movs	r0, #144	; 0x90
 8003550:	f001 ff0c 	bl	800536c <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 8003554:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2304      	movs	r3, #4
 800355c:	2204      	movs	r2, #4
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	2068      	movs	r0, #104	; 0x68
 8003562:	f001 ff03 	bl	800536c <Displ_FillArea>
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <displaySpaceIcon>:

void displaySpaceIcon(){
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8003572:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	2310      	movs	r3, #16
 800357a:	2204      	movs	r2, #4
 800357c:	2134      	movs	r1, #52	; 0x34
 800357e:	20b4      	movs	r0, #180	; 0xb4
 8003580:	f001 fef4 	bl	800536c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8003584:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2310      	movs	r3, #16
 800358c:	2204      	movs	r2, #4
 800358e:	2134      	movs	r1, #52	; 0x34
 8003590:	20c4      	movs	r0, #196	; 0xc4
 8003592:	f001 feeb 	bl	800536c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 8003596:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2304      	movs	r3, #4
 800359e:	220c      	movs	r2, #12
 80035a0:	2138      	movs	r1, #56	; 0x38
 80035a2:	20b8      	movs	r0, #184	; 0xb8
 80035a4:	f001 fee2 	bl	800536c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 80035a8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2310      	movs	r3, #16
 80035b0:	2204      	movs	r2, #4
 80035b2:	2130      	movs	r1, #48	; 0x30
 80035b4:	20bc      	movs	r0, #188	; 0xbc
 80035b6:	f001 fed9 	bl	800536c <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 80035ba:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	230c      	movs	r3, #12
 80035c2:	220c      	movs	r2, #12
 80035c4:	2118      	movs	r1, #24
 80035c6:	20c0      	movs	r0, #192	; 0xc0
 80035c8:	f001 fed0 	bl	800536c <Displ_FillArea>
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <addCharacterToArray>:
 * @fn void addCharacterToArray(char)
 * @brief adds the incoming character to the input buffer array and checks if it is a command character
 *
 * @param c incoming character
 */
void addCharacterToArray(char c) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 80035e2:	2300      	movs	r3, #0
 80035e4:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	4619      	mov	r1, r3
 80035ec:	484e      	ldr	r0, [pc, #312]	; (8003728 <addCharacterToArray+0x154>)
 80035ee:	f007 fbe3 	bl	800adb8 <strcat>
    //printf("%c\r\n", c);

    if(c == 'O' && mp == enabled) {
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	2b4f      	cmp	r3, #79	; 0x4f
 80035f6:	d10b      	bne.n	8003610 <addCharacterToArray+0x3c>
 80035f8:	4b4c      	ldr	r3, [pc, #304]	; (800372c <addCharacterToArray+0x158>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <addCharacterToArray+0x3c>
        inSignal = 1;
 8003600:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <addCharacterToArray+0x15c>)
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
        printArray();
 8003606:	f000 f89f 	bl	8003748 <printArray>
        clearArray();
 800360a:	f000 f8a9 	bl	8003760 <clearArray>
        printArray();
        clearArray();
    }else if(c == 'L') {
        mpGameState = win;
    }
}
 800360e:	e086      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == '?') {
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	2b3f      	cmp	r3, #63	; 0x3f
 8003614:	d111      	bne.n	800363a <addCharacterToArray+0x66>
        HAL_UART_Transmit(&huart2, (uint8_t *)"!", strlen("!"), 300);
 8003616:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800361a:	2201      	movs	r2, #1
 800361c:	4945      	ldr	r1, [pc, #276]	; (8003734 <addCharacterToArray+0x160>)
 800361e:	4846      	ldr	r0, [pc, #280]	; (8003738 <addCharacterToArray+0x164>)
 8003620:	f006 fb40 	bl	8009ca4 <HAL_UART_Transmit>
        printArray();
 8003624:	f000 f890 	bl	8003748 <printArray>
        clearArray();
 8003628:	f000 f89a 	bl	8003760 <clearArray>
        connected = 1;
 800362c:	4b43      	ldr	r3, [pc, #268]	; (800373c <addCharacterToArray+0x168>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <addCharacterToArray+0x158>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
}
 8003638:	e071      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == '!') {
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b21      	cmp	r3, #33	; 0x21
 800363e:	d10a      	bne.n	8003656 <addCharacterToArray+0x82>
        connected = 1;
 8003640:	4b3e      	ldr	r3, [pc, #248]	; (800373c <addCharacterToArray+0x168>)
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <addCharacterToArray+0x158>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
        printArray();
 800364c:	f000 f87c 	bl	8003748 <printArray>
        clearArray();
 8003650:	f000 f886 	bl	8003760 <clearArray>
}
 8003654:	e063      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'G') {
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b47      	cmp	r3, #71	; 0x47
 800365a:	d109      	bne.n	8003670 <addCharacterToArray+0x9c>
        inSignal = 1;
 800365c:	4b34      	ldr	r3, [pc, #208]	; (8003730 <addCharacterToArray+0x15c>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
        setMPGameChoice();
 8003662:	f000 f8ad 	bl	80037c0 <setMPGameChoice>
        printArray();
 8003666:	f000 f86f 	bl	8003748 <printArray>
        clearArray();
 800366a:	f000 f879 	bl	8003760 <clearArray>
}
 800366e:	e056      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'B') {
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b42      	cmp	r3, #66	; 0x42
 8003674:	d107      	bne.n	8003686 <addCharacterToArray+0xb2>
    	inSignal = 1;
 8003676:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <addCharacterToArray+0x15c>)
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
        setCoord();
 800367c:	f000 f8ce 	bl	800381c <setCoord>
        printArray();
 8003680:	f000 f862 	bl	8003748 <printArray>
}
 8003684:	e04b      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'S'){
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	2b53      	cmp	r3, #83	; 0x53
 800368a:	d10a      	bne.n	80036a2 <addCharacterToArray+0xce>
        inSignal = 1;
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <addCharacterToArray+0x15c>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
    	mpMenuState = 1;
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <addCharacterToArray+0x16c>)
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
    	printArray();
 8003698:	f000 f856 	bl	8003748 <printArray>
    	clearArray();
 800369c:	f000 f860 	bl	8003760 <clearArray>
}
 80036a0:	e03d      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'X') {
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b58      	cmp	r3, #88	; 0x58
 80036a6:	d10a      	bne.n	80036be <addCharacterToArray+0xea>
       connected = 0;
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <addCharacterToArray+0x168>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
       mp = disabled;
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <addCharacterToArray+0x158>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
       printArray();
 80036b4:	f000 f848 	bl	8003748 <printArray>
       clearArray();
 80036b8:	f000 f852 	bl	8003760 <clearArray>
}
 80036bc:	e02f      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'P') {
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	2b50      	cmp	r3, #80	; 0x50
 80036c2:	d10a      	bne.n	80036da <addCharacterToArray+0x106>
        inSignal = 1;
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <addCharacterToArray+0x15c>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
        mpMenuState = 2;
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <addCharacterToArray+0x16c>)
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]
        printArray();
 80036d0:	f000 f83a 	bl	8003748 <printArray>
        clearArray();
 80036d4:	f000 f844 	bl	8003760 <clearArray>
}
 80036d8:	e021      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'C') {
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b43      	cmp	r3, #67	; 0x43
 80036de:	d10a      	bne.n	80036f6 <addCharacterToArray+0x122>
        inSignal = 1;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <addCharacterToArray+0x15c>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
        mpMenuState = 1;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <addCharacterToArray+0x16c>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
        printArray();
 80036ec:	f000 f82c 	bl	8003748 <printArray>
        clearArray();
 80036f0:	f000 f836 	bl	8003760 <clearArray>
}
 80036f4:	e013      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'M') {
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b4d      	cmp	r3, #77	; 0x4d
 80036fa:	d10a      	bne.n	8003712 <addCharacterToArray+0x13e>
        inSignal = 1;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <addCharacterToArray+0x15c>)
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
        mpMenuState = 3;
 8003702:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <addCharacterToArray+0x16c>)
 8003704:	2203      	movs	r2, #3
 8003706:	701a      	strb	r2, [r3, #0]
        printArray();
 8003708:	f000 f81e 	bl	8003748 <printArray>
        clearArray();
 800370c:	f000 f828 	bl	8003760 <clearArray>
}
 8003710:	e005      	b.n	800371e <addCharacterToArray+0x14a>
    }else if(c == 'L') {
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	2b4c      	cmp	r3, #76	; 0x4c
 8003716:	d102      	bne.n	800371e <addCharacterToArray+0x14a>
        mpGameState = win;
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <addCharacterToArray+0x170>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	2000210c 	.word	0x2000210c
 800372c:	2000210a 	.word	0x2000210a
 8003730:	20002170 	.word	0x20002170
 8003734:	0800c3d4 	.word	0x0800c3d4
 8003738:	20001ff0 	.word	0x20001ff0
 800373c:	20002109 	.word	0x20002109
 8003740:	20002173 	.word	0x20002173
 8003744:	20002172 	.word	0x20002172

08003748 <printArray>:
/**
 * @fn void printArray()
 * @brief prints the buffer array
 *
 */
void printArray() {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
    printf("%s\r\n", characterArray);
 800374c:	4902      	ldr	r1, [pc, #8]	; (8003758 <printArray+0x10>)
 800374e:	4803      	ldr	r0, [pc, #12]	; (800375c <printArray+0x14>)
 8003750:	f007 fa04 	bl	800ab5c <iprintf>
}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000210c 	.word	0x2000210c
 800375c:	0800c3d8 	.word	0x0800c3d8

08003760 <clearArray>:
/**
 * @fn void clearArray()
 * @brief clears the buffer array
 *
 */
void clearArray() {
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
    memset(characterArray, '\0', sizeof(characterArray));
 8003764:	2264      	movs	r2, #100	; 0x64
 8003766:	2100      	movs	r1, #0
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <clearArray+0x14>)
 800376a:	f007 f9ef 	bl	800ab4c <memset>
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000210c 	.word	0x2000210c

08003778 <getSignal>:
 * @fn uint8_t getSignal()
 * @brief returns the inSignal variable
 *
 * @return 1 there has been incoming data, 0 if not
 */
uint8_t getSignal() {
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
    return inSignal;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <getSignal+0x14>)
 800377e:	781b      	ldrb	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20002170 	.word	0x20002170

08003790 <turnOffSignal>:
/**
 * @fn void turnOffSignal()
 * @brief sets the inSignal variable to 0, meaning the incoming data has been handled
 *
 */
void turnOffSignal() {
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
    inSignal = 0;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <turnOffSignal+0x14>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	20002170 	.word	0x20002170

080037a8 <getConnection>:
 * @fn uint8_t getConnection()
 * @brief returns the connection state of multiplayer
 *
 * @return 0 if no connection has been made, 1 if there is a connection established
 */
uint8_t getConnection() {
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
    return connected;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <getConnection+0x14>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20002109 	.word	0x20002109

080037c0 <setMPGameChoice>:
/**
 * @fn void setMPGameChoice()
 * @brief saves the number of the game chosen by the opposing console
 *
 */
void setMPGameChoice() {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
    mpGameChoice = characterArray[0] - '0';
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <setMPGameChoice+0x20>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	3b30      	subs	r3, #48	; 0x30
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <setMPGameChoice+0x24>)
 80037ce:	701a      	strb	r2, [r3, #0]
    printf("%d\r\n", mpGameChoice);
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <setMPGameChoice+0x24>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4619      	mov	r1, r3
 80037d6:	4804      	ldr	r0, [pc, #16]	; (80037e8 <setMPGameChoice+0x28>)
 80037d8:	f007 f9c0 	bl	800ab5c <iprintf>
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	2000210c 	.word	0x2000210c
 80037e4:	20002171 	.word	0x20002171
 80037e8:	0800c3e0 	.word	0x0800c3e0

080037ec <getMPGameChoice>:
 * @fn uint8_t getMPGameChoice()
 * @brief returns the number of the game chosen by the opposing console
 *
 * @return the number of the game chosen by the opposing console
 */
uint8_t getMPGameChoice() {
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
    return mpGameChoice;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <getMPGameChoice+0x14>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20002171 	.word	0x20002171

08003804 <getCoord>:
 * @fn uint8_t getCoord()
 * @brief returns the x coordinate of the bullet shot by the opposing player
 *
 * @return x coordinate between 0 <= x < 80
 */
uint8_t getCoord() {
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
    return x_coord;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <getCoord+0x14>)
 800380a:	781b      	ldrb	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	2000004d 	.word	0x2000004d

0800381c <setCoord>:
/**
 * @fn void setCoord()
 * @brief converts the incomming coordinate to a uint8_t and saves it
 *
 */
void setCoord() {
 800381c:	b580      	push	{r7, lr}
 800381e:	b09a      	sub	sp, #104	; 0x68
 8003820:	af00      	add	r7, sp, #0
    char buffer[100];
    strncpy(buffer, characterArray, strlen(characterArray) - 1);
 8003822:	4810      	ldr	r0, [pc, #64]	; (8003864 <setCoord+0x48>)
 8003824:	f7fc fcd4 	bl	80001d0 <strlen>
 8003828:	4603      	mov	r3, r0
 800382a:	1e5a      	subs	r2, r3, #1
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	490d      	ldr	r1, [pc, #52]	; (8003864 <setCoord+0x48>)
 8003830:	4618      	mov	r0, r3
 8003832:	f007 fad0 	bl	800add6 <strncpy>
    buffer[strlen(characterArray) - 1] = '\0';
 8003836:	480b      	ldr	r0, [pc, #44]	; (8003864 <setCoord+0x48>)
 8003838:	f7fc fcca 	bl	80001d0 <strlen>
 800383c:	4603      	mov	r3, r0
 800383e:	3b01      	subs	r3, #1
 8003840:	3368      	adds	r3, #104	; 0x68
 8003842:	443b      	add	r3, r7
 8003844:	2200      	movs	r2, #0
 8003846:	f803 2c64 	strb.w	r2, [r3, #-100]

    x_coord = (uint8_t)atoi(buffer);
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f007 f94e 	bl	800aaee <atoi>
 8003852:	4603      	mov	r3, r0
 8003854:	b2da      	uxtb	r2, r3
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <setCoord+0x4c>)
 8003858:	701a      	strb	r2, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	3768      	adds	r7, #104	; 0x68
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000210c 	.word	0x2000210c
 8003868:	2000004d 	.word	0x2000004d

0800386c <clearCoord>:
/**
 * @fn void clearCoord()
 * @brief clears the coordinate
 *
 */
void clearCoord(){
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	x_coord = -1;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <clearCoord+0x14>)
 8003872:	22ff      	movs	r2, #255	; 0xff
 8003874:	701a      	strb	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	2000004d 	.word	0x2000004d

08003884 <closeConnection>:
/**
 * @fn void closeConnection()
 * @brief Closes the connection for multiplayer
 *
 */
void closeConnection() {
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
    connected = 0;
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <closeConnection+0x1c>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
    mp = disabled;
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <closeConnection+0x20>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20002109 	.word	0x20002109
 80038a4:	2000210a 	.word	0x2000210a

080038a8 <getMPMenuState>:
 * @fn uint8_t getMPMenuState()
 * @brief returns the Menu State in multiplayer when the opposing player has made a change
 *
 * @return the Menu State in multiplayer when the opposing player has made a change
 */
uint8_t getMPMenuState() {
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
    return mpMenuState;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <getMPMenuState+0x14>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20002173 	.word	0x20002173

080038c0 <setGameState>:
 * @fn void setGameState(GameState)
 * @brief when the player loses or wins, the state of the game is saved
 *
 * @param state holds the state of the game: ongoing, won or lost
 */
void setGameState(GameState state) {
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
    mpGameState = state;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <setGameState+0x1c>)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	7013      	strb	r3, [r2, #0]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20002172 	.word	0x20002172

080038e0 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
    money = 0;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <initSpaceInvaders+0x74>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    lives = 3;
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <initSpaceInvaders+0x78>)
 80038ec:	2203      	movs	r2, #3
 80038ee:	701a      	strb	r2, [r3, #0]
    setBgColor(DARK_GREY);
 80038f0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80038f4:	f7fe fd82 	bl	80023fc <setBgColor>
    Displ_CLS(DARK_GREY);
 80038f8:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80038fc:	f001 feea 	bl	80056d4 <Displ_CLS>

    srand(HAL_GetTick());		   // Seed the random number generator
 8003900:	f002 fb54 	bl	8005fac <HAL_GetTick>
 8003904:	4603      	mov	r3, r0
 8003906:	4618      	mov	r0, r3
 8003908:	f007 f9b6 	bl	800ac78 <srand>
    comet_delay = RANDOM(5,20);
 800390c:	f007 f9e2 	bl	800acd4 <rand>
 8003910:	4603      	mov	r3, r0
 8003912:	425a      	negs	r2, r3
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	f002 020f 	and.w	r2, r2, #15
 800391c:	bf58      	it	pl
 800391e:	4253      	negpl	r3, r2
 8003920:	b2db      	uxtb	r3, r3
 8003922:	3305      	adds	r3, #5
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <initSpaceInvaders+0x7c>)
 8003928:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 800392a:	f000 f81f 	bl	800396c <initSpaceShip>
    initAmmo(&ammo,0);
 800392e:	2100      	movs	r1, #0
 8003930:	480b      	ldr	r0, [pc, #44]	; (8003960 <initSpaceInvaders+0x80>)
 8003932:	f000 f827 	bl	8003984 <initAmmo>
    if(connected){
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <initSpaceInvaders+0x84>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <initSpaceInvaders+0x66>
        initAmmo(&enemy_ammo,1);
 800393e:	2101      	movs	r1, #1
 8003940:	4809      	ldr	r0, [pc, #36]	; (8003968 <initSpaceInvaders+0x88>)
 8003942:	f000 f81f 	bl	8003984 <initAmmo>
    }
    initComets();
 8003946:	f000 f845 	bl	80039d4 <initComets>
    initStars();
 800394a:	f000 f86d 	bl	8003a28 <initStars>
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200021dc 	.word	0x200021dc
 8003958:	2000004e 	.word	0x2000004e
 800395c:	200021d6 	.word	0x200021d6
 8003960:	20002174 	.word	0x20002174
 8003964:	20002109 	.word	0x20002109
 8003968:	20002184 	.word	0x20002184

0800396c <initSpaceShip>:
/**
 * @fn void initSpaceShip(void)
 * @brief initialises the spaceship
 *
 */
void initSpaceShip(){
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <initSpaceShip+0x14>)
 8003972:	2228      	movs	r2, #40	; 0x28
 8003974:	701a      	strb	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	20000050 	.word	0x20000050

08003984 <initAmmo>:
 * x and y cords are set to -1
 *
 * @param[out] am bullets_t*: the bullets to initialise, can be your own or the enemy's
 * @param[in] enemy int: if 1, bullets pointer is for the enemy bullets
 */
void initAmmo(bullets_t *am,int enemy){
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	b25a      	sxtb	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e00e      	b.n	80039c0 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	22ff      	movs	r2, #255	; 0xff
 80039b8:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	dded      	ble.n	80039a2 <initAmmo+0x1e>
    }
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <initComets>:
 * @brief initialises the comets
 * the comets in play are set to 0
 * x and y cords are set to -1
 *
 */
void initComets(){
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <initComets+0x50>)
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e014      	b.n	8003a10 <initComets+0x3c>
        COMET_X(i) = -1;
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <initComets+0x50>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	22ff      	movs	r2, #255	; 0xff
 80039f0:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <initComets+0x50>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <initComets+0x50>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	2202      	movs	r2, #2
 8003a08:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b09      	cmp	r3, #9
 8003a14:	dde7      	ble.n	80039e6 <initComets+0x12>
    }
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	20002194 	.word	0x20002194

08003a28 <initStars>:
 * @brief initialises the stars
 * the stars in play are set to 0
 * x and y cords are set to -1
 *
 */
void initStars(){
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <initStars+0x44>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003a34:	2300      	movs	r3, #0
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	e00e      	b.n	8003a58 <initStars+0x30>
    	STAR_X(i) = -1;
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <initStars+0x44>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	22ff      	movs	r2, #255	; 0xff
 8003a44:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <initStars+0x44>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	22ff      	movs	r2, #255	; 0xff
 8003a50:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3301      	adds	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	dded      	ble.n	8003a3a <initStars+0x12>
    }
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	200021c0 	.word	0x200021c0

08003a70 <spawnComet>:
 * @fn void spawnComet()
 * @brief spawns a comet at a random x-cord with a random size
 * generates a random delay for the spawning of the next comet
 *
 */
void spawnComet(){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003a74:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <spawnComet+0xfc>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d16e      	bne.n	8003b5a <spawnComet+0xea>
 8003a7c:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <spawnComet+0x100>)
 8003a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	dc69      	bgt.n	8003b5a <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 8003a86:	f007 f925 	bl	800acd4 <rand>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <spawnComet+0x104>)
 8003a8e:	fb83 1302 	smull	r1, r3, r3, r2
 8003a92:	4413      	add	r3, r2
 8003a94:	1199      	asrs	r1, r3, #6
 8003a96:	17d3      	asrs	r3, r2, #31
 8003a98:	1ac9      	subs	r1, r1, r3
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a5b      	subs	r3, r3, r1
 8003aa4:	1ad1      	subs	r1, r2, r3
 8003aa6:	b2cb      	uxtb	r3, r1
 8003aa8:	4a31      	ldr	r2, [pc, #196]	; (8003b70 <spawnComet+0x100>)
 8003aaa:	f992 2000 	ldrsb.w	r2, [r2]
 8003aae:	4610      	mov	r0, r2
 8003ab0:	3305      	adds	r3, #5
 8003ab2:	b2d9      	uxtb	r1, r3
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <spawnComet+0x100>)
 8003ab6:	0083      	lsls	r3, r0, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	460a      	mov	r2, r1
 8003abc:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 8003abe:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <spawnComet+0x100>)
 8003ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <spawnComet+0x100>)
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	2200      	movs	r2, #0
 8003acc:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 8003ace:	f007 f901 	bl	800acd4 <rand>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <spawnComet+0x108>)
 8003ad6:	fb83 3102 	smull	r3, r1, r3, r2
 8003ada:	17d3      	asrs	r3, r2, #31
 8003adc:	1ac9      	subs	r1, r1, r3
 8003ade:	460b      	mov	r3, r1
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	440b      	add	r3, r1
 8003ae4:	1ad1      	subs	r1, r2, r3
 8003ae6:	b2cb      	uxtb	r3, r1
 8003ae8:	3302      	adds	r3, #2
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <spawnComet+0x100>)
 8003aee:	f993 3000 	ldrsb.w	r3, [r3]
 8003af2:	b251      	sxtb	r1, r2
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <spawnComet+0x100>)
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	460a      	mov	r2, r1
 8003afc:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 8003afe:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <spawnComet+0x100>)
 8003b00:	f993 3000 	ldrsb.w	r3, [r3]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <spawnComet+0x100>)
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f1c3 0307 	rsb	r3, r3, #7
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <spawnComet+0x100>)
 8003b18:	f993 3000 	ldrsb.w	r3, [r3]
 8003b1c:	b251      	sxtb	r1, r2
 8003b1e:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <spawnComet+0x100>)
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	460a      	mov	r2, r1
 8003b26:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 8003b28:	f007 f8d4 	bl	800acd4 <rand>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	425a      	negs	r2, r3
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	f002 020f 	and.w	r2, r2, #15
 8003b38:	bf58      	it	pl
 8003b3a:	4253      	negpl	r3, r2
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	3305      	adds	r3, #5
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <spawnComet+0xfc>)
 8003b44:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <spawnComet+0x100>)
 8003b48:	f993 3000 	ldrsb.w	r3, [r3]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	b25a      	sxtb	r2, r3
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <spawnComet+0x100>)
 8003b56:	701a      	strb	r2, [r3, #0]
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003b58:	e006      	b.n	8003b68 <spawnComet+0xf8>
    }else{
        comet_delay--;
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <spawnComet+0xfc>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b02      	ldr	r3, [pc, #8]	; (8003b6c <spawnComet+0xfc>)
 8003b64:	701a      	strb	r2, [r3, #0]
    }

}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	200021d6 	.word	0x200021d6
 8003b70:	20002194 	.word	0x20002194
 8003b74:	e6c2b449 	.word	0xe6c2b449
 8003b78:	55555556 	.word	0x55555556

08003b7c <spawnBullet>:
 * @fn void spawnBullet()
 * @brief spawns a bullet at the x-cord of the spaceship
 * reloads the bullet_delay variable, so the user can't spam bullets
 *
 */
void spawnBullet(){
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
    int x_val = SpaceShip.x;
 8003b82:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <spawnBullet+0x84>)
 8003b84:	f993 3000 	ldrsb.w	r3, [r3]
 8003b88:	603b      	str	r3, [r7, #0]
    int y_val = SpaceShip.y - 3;
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <spawnBullet+0x84>)
 8003b8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b90:	3b03      	subs	r3, #3
 8003b92:	607b      	str	r3, [r7, #4]

    if(ammo.in_play < MAX_BULLETS && bullet_delay == 0){
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <spawnBullet+0x88>)
 8003b96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	dc2a      	bgt.n	8003bf4 <spawnBullet+0x78>
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <spawnBullet+0x8c>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d126      	bne.n	8003bf4 <spawnBullet+0x78>
        if(ammo.enemy){
 8003ba6:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <spawnBullet+0x88>)
 8003ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <spawnBullet+0x38>
            //x_val = read the input from multiplayer;
            y_val = 3;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	607b      	str	r3, [r7, #4]
        }
        ammo.bullet_ar[ammo.in_play].x = x_val;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <spawnBullet+0x88>)
 8003bb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	b251      	sxtb	r1, r2
 8003bbe:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <spawnBullet+0x88>)
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	460a      	mov	r2, r1
 8003bc6:	709a      	strb	r2, [r3, #2]
        ammo.bullet_ar[ammo.in_play].y = y_val;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <spawnBullet+0x88>)
 8003bca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	b251      	sxtb	r1, r2
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <spawnBullet+0x88>)
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	460a      	mov	r2, r1
 8003bda:	70da      	strb	r2, [r3, #3]
        ammo.in_play++;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <spawnBullet+0x88>)
 8003bde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	b25a      	sxtb	r2, r3
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <spawnBullet+0x88>)
 8003bec:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <spawnBullet+0x8c>)
 8003bf0:	220a      	movs	r2, #10
 8003bf2:	701a      	strb	r2, [r3, #0]
    }
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	20000050 	.word	0x20000050
 8003c04:	20002174 	.word	0x20002174
 8003c08:	200021d5 	.word	0x200021d5

08003c0c <spawnEnemyBullet>:
/**
 * @fn void spawnEnemyBullet()
 * @brief spawns an enemy bullet
 *
 */
void spawnEnemyBullet(){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
	uint8_t x_val;
	int8_t y_val;

	if(enemy_ammo.in_play < MAX_BULLETS){
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c18:	2b05      	cmp	r3, #5
 8003c1a:	dc2c      	bgt.n	8003c76 <spawnEnemyBullet+0x6a>
		if(enemy_ammo.enemy){
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <spawnEnemyBullet+0x30>
			x_val = getCoord();
 8003c26:	f7ff fded 	bl	8003804 <getCoord>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
			printf("%d\r\n",x_val);
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	4619      	mov	r1, r3
 8003c32:	4813      	ldr	r0, [pc, #76]	; (8003c80 <spawnEnemyBullet+0x74>)
 8003c34:	f006 ff92 	bl	800ab5c <iprintf>
			if(x_val > 80 && x_val < 0){
				printf("return\r\n");
				return;
			}
			y_val = 3;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	71bb      	strb	r3, [r7, #6]
		}
		enemy_ammo.bullet_ar[enemy_ammo.in_play].x = x_val;
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c42:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8003c46:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	709a      	strb	r2, [r3, #2]
		enemy_ammo.bullet_ar[enemy_ammo.in_play].y = y_val;
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c56:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	79ba      	ldrb	r2, [r7, #6]
 8003c5e:	70da      	strb	r2, [r3, #3]
		enemy_ammo.in_play++;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	b25a      	sxtb	r2, r3
 8003c6e:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <spawnEnemyBullet+0x70>)
 8003c70:	705a      	strb	r2, [r3, #1]
		clearCoord();
 8003c72:	f7ff fdfb 	bl	800386c <clearCoord>
	}
}
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20002184 	.word	0x20002184
 8003c80:	0800c3e8 	.word	0x0800c3e8

08003c84 <spawnStar>:
 * @fn void spawnStar()
 * @brief spawns a star at a random x-cord
 * generates a random delay for the spawning of the next star
 *
 */
void spawnStar(){
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <spawnStar+0xa4>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d141      	bne.n	8003d14 <spawnStar+0x90>
 8003c90:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <spawnStar+0xa8>)
 8003c92:	f993 3000 	ldrsb.w	r3, [r3]
 8003c96:	2b09      	cmp	r3, #9
 8003c98:	dc3c      	bgt.n	8003d14 <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 8003c9a:	f007 f81b 	bl	800acd4 <rand>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <spawnStar+0xac>)
 8003ca2:	fb83 1302 	smull	r1, r3, r3, r2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	1199      	asrs	r1, r3, #6
 8003caa:	17d3      	asrs	r3, r2, #31
 8003cac:	1ac9      	subs	r1, r1, r3
 8003cae:	460b      	mov	r3, r1
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	440b      	add	r3, r1
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a5b      	subs	r3, r3, r1
 8003cb8:	1ad1      	subs	r1, r2, r3
 8003cba:	b2cb      	uxtb	r3, r1
 8003cbc:	3305      	adds	r3, #5
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <spawnStar+0xa8>)
 8003cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8003cc6:	b251      	sxtb	r1, r2
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <spawnStar+0xa8>)
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	460a      	mov	r2, r1
 8003cd0:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <spawnStar+0xa8>)
 8003cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <spawnStar+0xa8>)
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 8003ce2:	f006 fff7 	bl	800acd4 <rand>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	425a      	negs	r2, r3
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	f002 020f 	and.w	r2, r2, #15
 8003cf2:	bf58      	it	pl
 8003cf4:	4253      	negpl	r3, r2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3305      	adds	r3, #5
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <spawnStar+0xa4>)
 8003cfe:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <spawnStar+0xa8>)
 8003d02:	f993 3000 	ldrsb.w	r3, [r3]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	b25a      	sxtb	r2, r3
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <spawnStar+0xa8>)
 8003d10:	701a      	strb	r2, [r3, #0]
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003d12:	e006      	b.n	8003d22 <spawnStar+0x9e>
    }else{
        star_delay--;
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <spawnStar+0xa4>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b02      	ldr	r3, [pc, #8]	; (8003d28 <spawnStar+0xa4>)
 8003d1e:	701a      	strb	r2, [r3, #0]
    }
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200021d7 	.word	0x200021d7
 8003d2c:	200021c0 	.word	0x200021c0
 8003d30:	e6c2b449 	.word	0xe6c2b449

08003d34 <moveBullets>:
/**
 * @fn void moveBullets(void)
 * @brief moves the bullets and displays them on the screen aswell by calling "displayAmmo()"
 *
 */
void moveBullets(){
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 8003d3a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003d3e:	f000 facd 	bl	80042dc <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){											  // For every bullet in play
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e09c      	b.n	8003e82 <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){									  	// For every comet in play
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	e040      	b.n	8003dd0 <moveBullets+0x9c>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){    		// check whether there's a comet at the same x-cord
 8003d4e:	4a55      	ldr	r2, [pc, #340]	; (8003ea4 <moveBullets+0x170>)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4a52      	ldr	r2, [pc, #328]	; (8003ea8 <moveBullets+0x174>)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	4299      	cmp	r1, r3
 8003d68:	db2f      	blt.n	8003dca <moveBullets+0x96>
 8003d6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ea4 <moveBullets+0x170>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4a4b      	ldr	r2, [pc, #300]	; (8003ea8 <moveBullets+0x174>)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	4618      	mov	r0, r3
 8003d84:	4a48      	ldr	r2, [pc, #288]	; (8003ea8 <moveBullets+0x174>)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d90:	4403      	add	r3, r0
 8003d92:	4299      	cmp	r1, r3
 8003d94:	da19      	bge.n	8003dca <moveBullets+0x96>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){					  		// if the y-cord is also smaller, a comet has been hit by this bullet
 8003d96:	4a44      	ldr	r2, [pc, #272]	; (8003ea8 <moveBullets+0x174>)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	789b      	ldrb	r3, [r3, #2]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4a41      	ldr	r2, [pc, #260]	; (8003ea8 <moveBullets+0x174>)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003dae:	18ca      	adds	r2, r1, r3
 8003db0:	493c      	ldr	r1, [pc, #240]	; (8003ea4 <moveBullets+0x170>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	440b      	add	r3, r1
 8003db8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	dd04      	ble.n	8003dca <moveBullets+0x96>
					hitComet(i,j);
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fd08 	bl	80047d8 <hitComet>
					continue;
 8003dc8:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){									  	// For every comet in play
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <moveBullets+0x174>)
 8003dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	dbb7      	blt.n	8003d4e <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 8003dde:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <moveBullets+0x170>)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	b259      	sxtb	r1, r3
 8003df2:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <moveBullets+0x170>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	70da      	strb	r2, [r3, #3]
		if (AMMO_Y(i) < 0){																// If the y-cord is negative, the bullet left the screen and should be deleted.
 8003dfe:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <moveBullets+0x170>)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da36      	bge.n	8003e7c <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);													// send the bullet to the other console (if connected)
 8003e0e:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <moveBullets+0x170>)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4413      	add	r3, r2
 8003e16:	885a      	ldrh	r2, [r3, #2]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f362 030f 	bfi	r3, r2, #0, #16
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fcb6 	bl	8004790 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){										// move every bullet that's behind the one that should be deleted
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	607b      	str	r3, [r7, #4]
 8003e28:	e01c      	b.n	8003e64 <moveBullets+0x130>
				AMMO_X(j) = AMMO_X(j+1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <moveBullets+0x170>)
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003e38:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <moveBullets+0x170>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	460a      	mov	r2, r1
 8003e42:	709a      	strb	r2, [r3, #2]
				AMMO_Y(j) = AMMO_Y(j+1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <moveBullets+0x170>)
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003e52:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <moveBullets+0x170>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){										// move every bullet that's behind the one that should be deleted
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3301      	adds	r3, #1
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	dddf      	ble.n	8003e2a <moveBullets+0xf6>
			}
			ammo.in_play--;																	// decrement ammo in play
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <moveBullets+0x170>)
 8003e6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	b25a      	sxtb	r2, r3
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <moveBullets+0x170>)
 8003e7a:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){											  // For every bullet in play
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <moveBullets+0x170>)
 8003e84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	f6ff af5b 	blt.w	8003d48 <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 8003e92:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003e96:	f000 fa21 	bl	80042dc <displayAmmo>
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20002174 	.word	0x20002174
 8003ea8:	20002194 	.word	0x20002194

08003eac <moveComets>:
/**
 * @fn void moveComets(void)
 * @brief moves the comets and displays them on the screen aswell by calling "displayComets()"
 *
 */
void moveComets(){
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003eb2:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003eb6:	f000 fa79 	bl	80043ac <displayComets>
	for (int i = 0; i<Comet.in_play; i++){															   // For every comet in play
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e0f3      	b.n	80040a8 <moveComets+0x1fc>
		for(int j = 0; j < COMET_SIZE(i); j++){														   // For the size of the current comet
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	e060      	b.n	8003f88 <moveComets+0xdc>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){      // if the comet's x_cords are in between the bounds of the spaceship
 8003ec6:	4a80      	ldr	r2, [pc, #512]	; (80040c8 <moveComets+0x21c>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	441a      	add	r2, r3
 8003ed6:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <moveComets+0x220>)
 8003ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8003edc:	3302      	adds	r3, #2
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	dc4f      	bgt.n	8003f82 <moveComets+0xd6>
 8003ee2:	4a79      	ldr	r2, [pc, #484]	; (80040c8 <moveComets+0x21c>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	461a      	mov	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	441a      	add	r2, r3
 8003ef2:	4b76      	ldr	r3, [pc, #472]	; (80040cc <moveComets+0x220>)
 8003ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ef8:	3b02      	subs	r3, #2
 8003efa:	429a      	cmp	r2, r3
 8003efc:	db41      	blt.n	8003f82 <moveComets+0xd6>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){			   // if shield is enabled and the comet hit it, delete comet and get rid of shield
 8003efe:	4b74      	ldr	r3, [pc, #464]	; (80040d0 <moveComets+0x224>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d11f      	bne.n	8003f46 <moveComets+0x9a>
 8003f06:	4a70      	ldr	r2, [pc, #448]	; (80040c8 <moveComets+0x21c>)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	789b      	ldrb	r3, [r3, #2]
 8003f10:	4619      	mov	r1, r3
 8003f12:	4a6d      	ldr	r2, [pc, #436]	; (80040c8 <moveComets+0x21c>)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f1e:	18ca      	adds	r2, r1, r3
 8003f20:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <moveComets+0x220>)
 8003f22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	db0c      	blt.n	8003f46 <moveComets+0x9a>
					hitComet(420,i);
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003f32:	f000 fc51 	bl	80047d8 <hitComet>
					displayPowerup(DARK_GREY);
 8003f36:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003f3a:	f000 fd61 	bl	8004a00 <displayPowerup>
					powerUp = 0;
 8003f3e:	4b64      	ldr	r3, [pc, #400]	; (80040d0 <moveComets+0x224>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e01d      	b.n	8003f82 <moveComets+0xd6>
				}
				else if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){			   // else the spaceship has been hit
 8003f46:	4a60      	ldr	r2, [pc, #384]	; (80040c8 <moveComets+0x21c>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	789b      	ldrb	r3, [r3, #2]
 8003f50:	4619      	mov	r1, r3
 8003f52:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <moveComets+0x21c>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f5e:	18ca      	adds	r2, r1, r3
 8003f60:	4b5a      	ldr	r3, [pc, #360]	; (80040cc <moveComets+0x220>)
 8003f62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	db0a      	blt.n	8003f82 <moveComets+0xd6>
 8003f6c:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <moveComets+0x228>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <moveComets+0xd6>
                    hitComet(420,i);
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003f7a:	f000 fc2d 	bl	80047d8 <hitComet>
                    beenHit();
 8003f7e:	f000 fccd 	bl	800491c <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){														   // For the size of the current comet
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	4a4f      	ldr	r2, [pc, #316]	; (80040c8 <moveComets+0x21c>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f94:	461a      	mov	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	db94      	blt.n	8003ec6 <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){    // If death-ray is enabled and the comet is above the spaceship, obliterate it
 8003f9c:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <moveComets+0x224>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d133      	bne.n	800400c <moveComets+0x160>
 8003fa4:	4b49      	ldr	r3, [pc, #292]	; (80040cc <moveComets+0x220>)
 8003fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4a46      	ldr	r2, [pc, #280]	; (80040c8 <moveComets+0x21c>)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	db28      	blt.n	800400c <moveComets+0x160>
 8003fba:	4b44      	ldr	r3, [pc, #272]	; (80040cc <moveComets+0x220>)
 8003fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4a41      	ldr	r2, [pc, #260]	; (80040c8 <moveComets+0x21c>)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	4a3e      	ldr	r2, [pc, #248]	; (80040c8 <moveComets+0x21c>)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fda:	4403      	add	r3, r0
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	dc15      	bgt.n	800400c <moveComets+0x160>
        	hitComet(420,i);
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003fe6:	f000 fbf7 	bl	80047d8 <hitComet>
        	if(powerUp_delay == 0){																	   // If death ray has hit MAX_DELAY_POWERUP comets, disable powerup
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <moveComets+0x22c>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <moveComets+0x154>
        		displayPowerup(DARK_GREY);
 8003ff2:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003ff6:	f000 fd03 	bl	8004a00 <displayPowerup>
        		powerUp = 0;
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <moveComets+0x224>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8004000:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <moveComets+0x22c>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <moveComets+0x22c>)
 800400a:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 800400c:	4a2e      	ldr	r2, [pc, #184]	; (80040c8 <moveComets+0x21c>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	789b      	ldrb	r3, [r3, #2]
 8004016:	3301      	adds	r3, #1
 8004018:	b2d9      	uxtb	r1, r3
 800401a:	4a2b      	ldr	r2, [pc, #172]	; (80040c8 <moveComets+0x21c>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	460a      	mov	r2, r1
 8004024:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){														   // if the comet went out of the screen, delete it
 8004026:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <moveComets+0x21c>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	789b      	ldrb	r3, [r3, #2]
 8004030:	2b3b      	cmp	r3, #59	; 0x3b
 8004032:	d936      	bls.n	80040a2 <moveComets+0x1f6>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	e027      	b.n	800408a <moveComets+0x1de>
            	COMET_X(j) = COMET_X(j+1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3301      	adds	r3, #1
 800403e:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <moveComets+0x21c>)
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	7859      	ldrb	r1, [r3, #1]
 8004046:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <moveComets+0x21c>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	460a      	mov	r2, r1
 8004050:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3301      	adds	r3, #1
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <moveComets+0x21c>)
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	7899      	ldrb	r1, [r3, #2]
 800405e:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <moveComets+0x21c>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	460a      	mov	r2, r1
 8004068:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3301      	adds	r3, #1
 800406e:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <moveComets+0x21c>)
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <moveComets+0x21c>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	460a      	mov	r2, r1
 8004082:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3301      	adds	r3, #1
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b08      	cmp	r3, #8
 800408e:	ddd4      	ble.n	800403a <moveComets+0x18e>
            }
            Comet.in_play--;
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <moveComets+0x21c>)
 8004092:	f993 3000 	ldrsb.w	r3, [r3]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	b25a      	sxtb	r2, r3
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <moveComets+0x21c>)
 80040a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){															   // For every comet in play
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <moveComets+0x21c>)
 80040aa:	f993 3000 	ldrsb.w	r3, [r3]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4293      	cmp	r3, r2
 80040b4:	f6ff af04 	blt.w	8003ec0 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 80040b8:	f249 6096 	movw	r0, #38550	; 0x9696
 80040bc:	f000 f976 	bl	80043ac <displayComets>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20002194 	.word	0x20002194
 80040cc:	20000050 	.word	0x20000050
 80040d0:	200021e0 	.word	0x200021e0
 80040d4:	20001eef 	.word	0x20001eef
 80040d8:	200021d8 	.word	0x200021d8

080040dc <moveStars>:
/**
 * @fn void moveStars(void)
 * @brief moves the stars and displays them on the screen aswell by calling "displayStars()"
 *
 */
void moveStars(){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 80040e2:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80040e6:	f000 f8c7 	bl	8004278 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	e046      	b.n	800417e <moveStars+0xa2>
    	STAR_Y(i)++;
 80040f0:	4a2a      	ldr	r2, [pc, #168]	; (800419c <moveStars+0xc0>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	3301      	adds	r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	b259      	sxtb	r1, r3
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <moveStars+0xc0>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	460a      	mov	r2, r1
 800410e:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <moveStars+0xc0>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800411c:	2b38      	cmp	r3, #56	; 0x38
 800411e:	dd2b      	ble.n	8004178 <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	e01c      	b.n	8004160 <moveStars+0x84>
            	STAR_X(j) = STAR_X(j+1);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	4a1c      	ldr	r2, [pc, #112]	; (800419c <moveStars+0xc0>)
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8004134:	4a19      	ldr	r2, [pc, #100]	; (800419c <moveStars+0xc0>)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	460a      	mov	r2, r1
 800413e:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <moveStars+0xc0>)
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <moveStars+0xc0>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	460a      	mov	r2, r1
 8004158:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b08      	cmp	r3, #8
 8004164:	dddf      	ble.n	8004126 <moveStars+0x4a>
            }
            Star.in_play--;
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <moveStars+0xc0>)
 8004168:	f993 3000 	ldrsb.w	r3, [r3]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	b25a      	sxtb	r2, r3
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <moveStars+0xc0>)
 8004176:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3301      	adds	r3, #1
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <moveStars+0xc0>)
 8004180:	f993 3000 	ldrsb.w	r3, [r3]
 8004184:	461a      	mov	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4293      	cmp	r3, r2
 800418a:	dbb1      	blt.n	80040f0 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 800418c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004190:	f000 f872 	bl	8004278 <displayStars>
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	200021c0 	.word	0x200021c0

080041a0 <moveSpaceship>:
 * @fn void moveSpaceship(int)
 * @brief moves the spaceship and displays it on the screen aswell by calling "displaySpaceShip()"
 *
 * @param
 */
void moveSpaceship(int direction){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 80041a8:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80041ac:	f000 f93e 	bl	800442c <displaySpaceShip>
	if(powerUp > 0){
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <moveSpaceship+0xcc>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 80041b8:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80041bc:	f000 fc20 	bl	8004a00 <displayPowerup>
	}
    if(direction < 0){
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da26      	bge.n	8004214 <moveSpaceship+0x74>
        SpaceShip.x--;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <moveSpaceship+0xd0>)
 80041c8:	f993 3000 	ldrsb.w	r3, [r3]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	b25a      	sxtb	r2, r3
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <moveSpaceship+0xd0>)
 80041d6:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 80041d8:	4b25      	ldr	r3, [pc, #148]	; (8004270 <moveSpaceship+0xd0>)
 80041da:	f993 3000 	ldrsb.w	r3, [r3]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	dc02      	bgt.n	80041e8 <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 80041e2:	4b23      	ldr	r3, [pc, #140]	; (8004270 <moveSpaceship+0xd0>)
 80041e4:	2202      	movs	r2, #2
 80041e6:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 80041e8:	4b22      	ldr	r3, [pc, #136]	; (8004274 <moveSpaceship+0xd4>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f91d 	bl	800442c <displaySpaceShip>
        if(powerUp == 1){
 80041f2:	4b1e      	ldr	r3, [pc, #120]	; (800426c <moveSpaceship+0xcc>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d103      	bne.n	8004202 <moveSpaceship+0x62>
        	displayPowerup(RED);
 80041fa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80041fe:	f000 fbff 	bl	8004a00 <displayPowerup>
        }
        if(powerUp == 2){
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <moveSpaceship+0xcc>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d12b      	bne.n	8004262 <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 800420a:	f24f 70db 	movw	r0, #63451	; 0xf7db
 800420e:	f000 fbf7 	bl	8004a00 <displayPowerup>
        }
        return;
 8004212:	e026      	b.n	8004262 <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <moveSpaceship+0xd0>)
 8004216:	f993 3000 	ldrsb.w	r3, [r3]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3301      	adds	r3, #1
 800421e:	b2db      	uxtb	r3, r3
 8004220:	b25a      	sxtb	r2, r3
 8004222:	4b13      	ldr	r3, [pc, #76]	; (8004270 <moveSpaceship+0xd0>)
 8004224:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <moveSpaceship+0xd0>)
 8004228:	f993 3000 	ldrsb.w	r3, [r3]
 800422c:	2b4d      	cmp	r3, #77	; 0x4d
 800422e:	dd02      	ble.n	8004236 <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <moveSpaceship+0xd0>)
 8004232:	224d      	movs	r2, #77	; 0x4d
 8004234:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <moveSpaceship+0xd4>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f8f6 	bl	800442c <displaySpaceShip>
    if(powerUp == 1){
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <moveSpaceship+0xcc>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d103      	bne.n	8004250 <moveSpaceship+0xb0>
    	displayPowerup(RED);
 8004248:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800424c:	f000 fbd8 	bl	8004a00 <displayPowerup>
    }
	if(powerUp == 2){
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <moveSpaceship+0xcc>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d105      	bne.n	8004264 <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 8004258:	f24f 70db 	movw	r0, #63451	; 0xf7db
 800425c:	f000 fbd0 	bl	8004a00 <displayPowerup>
 8004260:	e000      	b.n	8004264 <moveSpaceship+0xc4>
        return;
 8004262:	bf00      	nop
	}
}
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200021e0 	.word	0x200021e0
 8004270:	20000050 	.word	0x20000050
 8004274:	20000052 	.word	0x20000052

08004278 <displayStars>:
 * @fn void displayStars(uint16_t)
 * @brief 	displays the stars on the screen
 *
 * @param[in] color uint16_t: the color the star should be displayed with
 */
void displayStars(uint16_t color){
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af02      	add	r7, sp, #8
 800427e:	4603      	mov	r3, r0
 8004280:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e01a      	b.n	80042be <displayStars+0x46>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 8004288:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <displayStars+0x60>)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004294:	b29b      	uxth	r3, r3
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	b298      	uxth	r0, r3
 800429a:	4a0f      	ldr	r2, [pc, #60]	; (80042d8 <displayStars+0x60>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	b299      	uxth	r1, r3
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2304      	movs	r3, #4
 80042b2:	2204      	movs	r2, #4
 80042b4:	f001 f85a 	bl	800536c <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <displayStars+0x60>)
 80042c0:	f993 3000 	ldrsb.w	r3, [r3]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4293      	cmp	r3, r2
 80042ca:	dbdd      	blt.n	8004288 <displayStars+0x10>
    }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200021c0 	.word	0x200021c0

080042dc <displayAmmo>:
 * @fn void displayAmmo(uint16_t)
 * @brief displays the Bullets on the screen
 *
 * @param[in] color uint16_t: the color the ammo should be displayed with
 */
void displayAmmo(uint16_t color){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	4603      	mov	r3, r0
 80042e4:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e01a      	b.n	8004322 <displayAmmo+0x46>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <displayAmmo+0x60>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	b298      	uxth	r0, r3
 80042fe:	4a0f      	ldr	r2, [pc, #60]	; (800433c <displayAmmo+0x60>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800430a:	b29b      	uxth	r3, r3
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	b299      	uxth	r1, r3
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2304      	movs	r3, #4
 8004316:	2204      	movs	r2, #4
 8004318:	f001 f828 	bl	800536c <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3301      	adds	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <displayAmmo+0x60>)
 8004324:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004328:	461a      	mov	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4293      	cmp	r3, r2
 800432e:	dbdd      	blt.n	80042ec <displayAmmo+0x10>
    }

}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20002174 	.word	0x20002174

08004340 <displayEnemyAmmo>:
 * @fn void displayEnemyAmmo(uint16_t)
 * @brief displays the enemy Bullets on the screen
 *
 * @param[in] color uint16_t: the color the ammo should be displayed with
 */
void displayEnemyAmmo(uint16_t color){
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
 8004346:	4603      	mov	r3, r0
 8004348:	80fb      	strh	r3, [r7, #6]
	if(connected){
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <displayEnemyAmmo+0x64>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d024      	beq.n	800439c <displayEnemyAmmo+0x5c>
		for(int i = 0; i < enemy_ammo.in_play; i++){
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e01a      	b.n	800438e <displayEnemyAmmo+0x4e>
			Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, color);
 8004358:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <displayEnemyAmmo+0x68>)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004364:	b29b      	uxth	r3, r3
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	b298      	uxth	r0, r3
 800436a:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <displayEnemyAmmo+0x68>)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004376:	b29b      	uxth	r3, r3
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	b299      	uxth	r1, r3
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2304      	movs	r3, #4
 8004382:	2204      	movs	r2, #4
 8004384:	f000 fff2 	bl	800536c <Displ_FillArea>
		for(int i = 0; i < enemy_ammo.in_play; i++){
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <displayEnemyAmmo+0x68>)
 8004390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004394:	461a      	mov	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4293      	cmp	r3, r2
 800439a:	dbdd      	blt.n	8004358 <displayEnemyAmmo+0x18>
		}
	}
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20002109 	.word	0x20002109
 80043a8:	20002184 	.word	0x20002184

080043ac <displayComets>:
 * @fn void displayComets(uint16_t)
 * @brief displays the comets on the screen
 *
 * @param[in] color uint16_t: the color the comets should be displayed with
 */
void displayComets(uint16_t color){
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e029      	b.n	8004410 <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 80043bc:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <displayComets+0x7c>)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	b298      	uxth	r0, r3
 80043cc:	4a16      	ldr	r2, [pc, #88]	; (8004428 <displayComets+0x7c>)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	789b      	ldrb	r3, [r3, #2]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	b299      	uxth	r1, r3
 80043dc:	4a12      	ldr	r2, [pc, #72]	; (8004428 <displayComets+0x7c>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	4c0e      	ldr	r4, [pc, #56]	; (8004428 <displayComets+0x7c>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4423      	add	r3, r4
 80043f6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	b29c      	uxth	r4, r3
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4623      	mov	r3, r4
 8004406:	f000 ffb1 	bl	800536c <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <displayComets+0x7c>)
 8004412:	f993 3000 	ldrsb.w	r3, [r3]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4293      	cmp	r3, r2
 800441c:	dbce      	blt.n	80043bc <displayComets+0x10>
    }
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}
 8004428:	20002194 	.word	0x20002194

0800442c <displaySpaceShip>:
 * @fn void displaySpaceShip(uint16_t)
 * @brief displays the spaceship on the screen
 *
 * @param[in] color uint16_t: the color the spaceship should be displayed with
 */
void displaySpaceShip(uint16_t color){
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af02      	add	r7, sp, #8
 8004432:	4603      	mov	r3, r0
 8004434:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <displaySpaceShip+0x80>)
 8004438:	f993 3000 	ldrsb.w	r3, [r3]
 800443c:	3b02      	subs	r3, #2
 800443e:	b29b      	uxth	r3, r3
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	b298      	uxth	r0, r3
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2310      	movs	r3, #16
 800444a:	2204      	movs	r2, #4
 800444c:	21d8      	movs	r1, #216	; 0xd8
 800444e:	f000 ff8d 	bl	800536c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004452:	4b16      	ldr	r3, [pc, #88]	; (80044ac <displaySpaceShip+0x80>)
 8004454:	f993 3000 	ldrsb.w	r3, [r3]
 8004458:	3302      	adds	r3, #2
 800445a:	b29b      	uxth	r3, r3
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	b298      	uxth	r0, r3
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2310      	movs	r3, #16
 8004466:	2204      	movs	r2, #4
 8004468:	21d8      	movs	r1, #216	; 0xd8
 800446a:	f000 ff7f 	bl	800536c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <displaySpaceShip+0x80>)
 8004470:	f993 3000 	ldrsb.w	r3, [r3]
 8004474:	3b01      	subs	r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	b298      	uxth	r0, r3
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2304      	movs	r3, #4
 8004482:	220c      	movs	r2, #12
 8004484:	21dc      	movs	r1, #220	; 0xdc
 8004486:	f000 ff71 	bl	800536c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <displaySpaceShip+0x80>)
 800448c:	f993 3000 	ldrsb.w	r3, [r3]
 8004490:	b29b      	uxth	r3, r3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	b298      	uxth	r0, r3
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2310      	movs	r3, #16
 800449c:	2204      	movs	r2, #4
 800449e:	21d4      	movs	r1, #212	; 0xd4
 80044a0:	f000 ff64 	bl	800536c <Displ_FillArea>

}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000050 	.word	0x20000050

080044b0 <displayLives>:
/**
 * @fn void displayLives(void)
 * @brief displays the amount of lives left on the screen
 *
 */
void displayLives(){
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	e013      	b.n	80044e4 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	0052      	lsls	r2, r2, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3308      	adds	r3, #8
 80044cc:	b298      	uxth	r0, r3
 80044ce:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2304      	movs	r3, #4
 80044d6:	2204      	movs	r2, #4
 80044d8:	2108      	movs	r1, #8
 80044da:	f000 ff47 	bl	800536c <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <displayLives+0x90>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	dbe5      	blt.n	80044bc <displayLives+0xc>
    }
    if(lives < 3){
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <displayLives+0x90>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d81f      	bhi.n	8004538 <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 80044f8:	2300      	movs	r3, #0
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	e015      	b.n	800452a <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f1c3 0303 	rsb	r3, r3, #3
 8004504:	b29b      	uxth	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	0052      	lsls	r2, r2, #1
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	b29b      	uxth	r3, r3
 8004510:	3308      	adds	r3, #8
 8004512:	b298      	uxth	r0, r3
 8004514:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2304      	movs	r3, #4
 800451c:	2204      	movs	r2, #4
 800451e:	2108      	movs	r1, #8
 8004520:	f000 ff24 	bl	800536c <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <displayLives+0x90>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f1c3 0303 	rsb	r3, r3, #3
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	dbe2      	blt.n	80044fe <displayLives+0x4e>
    	}
    }
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	2000004e 	.word	0x2000004e

08004544 <spaceShipHitColorToggle>:
/**
 * @fn void spaceShipHitColorToggle(void)
 * @brief if the spaceship was hit by an enemy bullet or a comet, the spaceship has to blink red/white for a while
 *
 */
void spaceShipHitColorToggle(){
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 8004548:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <spaceShipHitColorToggle+0x84>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8004550:	d112      	bne.n	8004578 <spaceShipHitColorToggle+0x34>
 8004552:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <spaceShipHitColorToggle+0x88>)
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <spaceShipHitColorToggle+0x8c>)
 8004558:	fba3 1302 	umull	r1, r3, r3, r2
 800455c:	08d9      	lsrs	r1, r3, #3
 800455e:	460b      	mov	r3, r1
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <spaceShipHitColorToggle+0x84>)
 8004570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e011      	b.n	800459c <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <spaceShipHitColorToggle+0x88>)
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <spaceShipHitColorToggle+0x8c>)
 800457e:	fba3 1302 	umull	r1, r3, r3, r2
 8004582:	08d9      	lsrs	r1, r3, #3
 8004584:	460b      	mov	r3, r1
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <spaceShipHitColorToggle+0x84>)
 8004596:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800459a:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <spaceShipHitColorToggle+0x88>)
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <spaceShipHitColorToggle+0x90>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d206      	bcs.n	80045b6 <spaceShipHitColorToggle+0x72>
        hit++;
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <spaceShipHitColorToggle+0x88>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <spaceShipHitColorToggle+0x88>)
 80045b2:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 80045b4:	e002      	b.n	80045bc <spaceShipHitColorToggle+0x78>
        hit = 0;
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <spaceShipHitColorToggle+0x88>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000052 	.word	0x20000052
 80045cc:	20001eef 	.word	0x20001eef
 80045d0:	cccccccd 	.word	0xcccccccd
 80045d4:	20000054 	.word	0x20000054

080045d8 <delayBullet>:
/**
 * @fn void delayBullet(void)
 * @brief decrements the bullet_delay variable, if 0 the spaceship can shoot a bullet again
 *
 */
void delayBullet(){
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <delayBullet+0x24>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <delayBullet+0x18>
        bullet_delay--;
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <delayBullet+0x24>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <delayBullet+0x24>)
 80045ee:	701a      	strb	r2, [r3, #0]
    }
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	200021d5 	.word	0x200021d5

08004600 <moveEnemyBullets>:
/**
 * @fn void moveEnemyBullets(void)
 * @brief move the enemy bullets
 *
 */
void moveEnemyBullets(void){
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
    if (!connected){
 8004606:	4b5e      	ldr	r3, [pc, #376]	; (8004780 <moveEnemyBullets+0x180>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80b4 	beq.w	8004778 <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayEnemyAmmo(DARK_GREY);
 8004610:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8004614:	f7ff fe94 	bl	8004340 <displayEnemyAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){										   // For every enemy bullet in play
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e09f      	b.n	800475e <moveEnemyBullets+0x15e>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){    // if it's x-cord is in the path of the spaceship
 800461e:	4a59      	ldr	r2, [pc, #356]	; (8004784 <moveEnemyBullets+0x184>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800462a:	461a      	mov	r2, r3
 800462c:	4b56      	ldr	r3, [pc, #344]	; (8004788 <moveEnemyBullets+0x188>)
 800462e:	f993 3000 	ldrsb.w	r3, [r3]
 8004632:	3302      	adds	r3, #2
 8004634:	429a      	cmp	r2, r3
 8004636:	dc4b      	bgt.n	80046d0 <moveEnemyBullets+0xd0>
 8004638:	4a52      	ldr	r2, [pc, #328]	; (8004784 <moveEnemyBullets+0x184>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004644:	461a      	mov	r2, r3
 8004646:	4b50      	ldr	r3, [pc, #320]	; (8004788 <moveEnemyBullets+0x188>)
 8004648:	f993 3000 	ldrsb.w	r3, [r3]
 800464c:	3b02      	subs	r3, #2
 800464e:	429a      	cmp	r2, r3
 8004650:	db3e      	blt.n	80046d0 <moveEnemyBullets+0xd0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){							   // and it's y value is higher than the spaceship's, the spaceship has been hit
 8004652:	4a4c      	ldr	r2, [pc, #304]	; (8004784 <moveEnemyBullets+0x184>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800465e:	461a      	mov	r2, r3
 8004660:	4b49      	ldr	r3, [pc, #292]	; (8004788 <moveEnemyBullets+0x188>)
 8004662:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004666:	3b02      	subs	r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	db31      	blt.n	80046d0 <moveEnemyBullets+0xd0>
 800466c:	4b47      	ldr	r3, [pc, #284]	; (800478c <moveEnemyBullets+0x18c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d12d      	bne.n	80046d0 <moveEnemyBullets+0xd0>
                beenHit();
 8004674:	f000 f952 	bl	800491c <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){								   // Delete this enemy bullet
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	e01c      	b.n	80046b8 <moveEnemyBullets+0xb8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3301      	adds	r3, #1
 8004682:	4a40      	ldr	r2, [pc, #256]	; (8004784 <moveEnemyBullets+0x184>)
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800468c:	4a3d      	ldr	r2, [pc, #244]	; (8004784 <moveEnemyBullets+0x184>)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	460a      	mov	r2, r1
 8004696:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3301      	adds	r3, #1
 800469c:	4a39      	ldr	r2, [pc, #228]	; (8004784 <moveEnemyBullets+0x184>)
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80046a6:	4a37      	ldr	r2, [pc, #220]	; (8004784 <moveEnemyBullets+0x184>)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	460a      	mov	r2, r1
 80046b0:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){								   // Delete this enemy bullet
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	dddf      	ble.n	800467e <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 80046be:	4b31      	ldr	r3, [pc, #196]	; (8004784 <moveEnemyBullets+0x184>)
 80046c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	b25a      	sxtb	r2, r3
 80046cc:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <moveEnemyBullets+0x184>)
 80046ce:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 80046d0:	4a2c      	ldr	r2, [pc, #176]	; (8004784 <moveEnemyBullets+0x184>)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	b259      	sxtb	r1, r3
 80046e4:	4a27      	ldr	r2, [pc, #156]	; (8004784 <moveEnemyBullets+0x184>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	460a      	mov	r2, r1
 80046ee:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){											   // If the bullet left the screen, delete it
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <moveEnemyBullets+0x184>)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80046fc:	2b3b      	cmp	r3, #59	; 0x3b
 80046fe:	dd2b      	ble.n	8004758 <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	e01c      	b.n	8004740 <moveEnemyBullets+0x140>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3301      	adds	r3, #1
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <moveEnemyBullets+0x184>)
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4413      	add	r3, r2
 8004710:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8004714:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <moveEnemyBullets+0x184>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	460a      	mov	r2, r1
 800471e:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3301      	adds	r3, #1
 8004724:	4a17      	ldr	r2, [pc, #92]	; (8004784 <moveEnemyBullets+0x184>)
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800472e:	4a15      	ldr	r2, [pc, #84]	; (8004784 <moveEnemyBullets+0x184>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	460a      	mov	r2, r1
 8004738:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3301      	adds	r3, #1
 800473e:	607b      	str	r3, [r7, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b04      	cmp	r3, #4
 8004744:	dddf      	ble.n	8004706 <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <moveEnemyBullets+0x184>)
 8004748:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	b25a      	sxtb	r2, r3
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <moveEnemyBullets+0x184>)
 8004756:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){										   // For every enemy bullet in play
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <moveEnemyBullets+0x184>)
 8004760:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004764:	461a      	mov	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4293      	cmp	r3, r2
 800476a:	f6ff af58 	blt.w	800461e <moveEnemyBullets+0x1e>
        }
    }
    displayEnemyAmmo(LIGHT_BLUE);
 800476e:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004772:	f7ff fde5 	bl	8004340 <displayEnemyAmmo>
 8004776:	e000      	b.n	800477a <moveEnemyBullets+0x17a>
        return;
 8004778:	bf00      	nop
}
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20002109 	.word	0x20002109
 8004784:	20002184 	.word	0x20002184
 8004788:	20000050 	.word	0x20000050
 800478c:	20001eef 	.word	0x20001eef

08004790 <send_Bullet>:
 * @brief if a bullet leaves the screen this function is called
 * if multiplayer is enabled, it sends this bullet's x_cord to the other console
 *
 * @param[in] bullet so the x cord can be send to the other console
 */
void send_Bullet(point bullet){
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	80b8      	strh	r0, [r7, #4]
	char *coord = "45B";
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <send_Bullet+0x3c>)
 800479a:	60fb      	str	r3, [r7, #12]
    if(connected && bullet.y != -2){
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <send_Bullet+0x40>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00f      	beq.n	80047c4 <send_Bullet+0x34>
 80047a4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80047a8:	f113 0f02 	cmn.w	r3, #2
 80047ac:	d00a      	beq.n	80047c4 <send_Bullet+0x34>
    	HAL_UART_Transmit(&huart2, (uint8_t *)coord, strlen(coord), 300);
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7fb fd0e 	bl	80001d0 <strlen>
 80047b4:	4603      	mov	r3, r0
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <send_Bullet+0x44>)
 80047c0:	f005 fa70 	bl	8009ca4 <HAL_UART_Transmit>
        }else{
            star_delay--;
        }
        */
    }
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	0800c3f0 	.word	0x0800c3f0
 80047d0:	20002109 	.word	0x20002109
 80047d4:	20001ff0 	.word	0x20001ff0

080047d8 <hitComet>:
 * @brief if a bullet or the spaceship hits a comet, this is called to delete the correct comet (and bullet if applicable)
 *
 * @param[in] bul int: the index of the bullet that hit a comet, if the spaceship hit the comet 420 is given to this function
 * @param[in] com int: the index of the comet that has been hit
 */
void hitComet(int bul,int com){
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b087      	sub	sp, #28
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 80047e2:	4a4b      	ldr	r2, [pc, #300]	; (8004910 <hitComet+0x138>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b48      	ldr	r3, [pc, #288]	; (8004914 <hitComet+0x13c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	4a47      	ldr	r2, [pc, #284]	; (8004914 <hitComet+0x13c>)
 80047f8:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 80047fa:	4a45      	ldr	r2, [pc, #276]	; (8004910 <hitComet+0x138>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	b29b      	uxth	r3, r3
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	b298      	uxth	r0, r3
 800480a:	4a41      	ldr	r2, [pc, #260]	; (8004910 <hitComet+0x138>)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	789b      	ldrb	r3, [r3, #2]
 8004814:	b29b      	uxth	r3, r3
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	b299      	uxth	r1, r3
 800481a:	4a3d      	ldr	r2, [pc, #244]	; (8004910 <hitComet+0x138>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004826:	b29b      	uxth	r3, r3
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	b29a      	uxth	r2, r3
 800482c:	4c38      	ldr	r4, [pc, #224]	; (8004910 <hitComet+0x138>)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4423      	add	r3, r4
 8004834:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004838:	b29b      	uxth	r3, r3
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	b29b      	uxth	r3, r3
 800483e:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8004842:	9400      	str	r4, [sp, #0]
 8004844:	f000 fd92 	bl	800536c <Displ_FillArea>
    if(bul != 420){
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800484e:	d024      	beq.n	800489a <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e01c      	b.n	8004890 <hitComet+0xb8>
        	AMMO_X(j)= AMMO_X(j+1);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	4a2f      	ldr	r2, [pc, #188]	; (8004918 <hitComet+0x140>)
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8004864:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <hitComet+0x140>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	460a      	mov	r2, r1
 800486e:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <hitComet+0x140>)
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800487e:	4a26      	ldr	r2, [pc, #152]	; (8004918 <hitComet+0x140>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	460a      	mov	r2, r1
 8004888:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b04      	cmp	r3, #4
 8004894:	dddf      	ble.n	8004856 <hitComet+0x7e>
        }
        powerups();
 8004896:	f000 f86f 	bl	8004978 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	e027      	b.n	80048f0 <hitComet+0x118>
    	COMET_X(j) = COMET_X(j+1);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <hitComet+0x138>)
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	7859      	ldrb	r1, [r3, #1]
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <hitComet+0x138>)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	460a      	mov	r2, r1
 80048b6:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <hitComet+0x138>)
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	7899      	ldrb	r1, [r3, #2]
 80048c4:	4a12      	ldr	r2, [pc, #72]	; (8004910 <hitComet+0x138>)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	460a      	mov	r2, r1
 80048ce:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a0e      	ldr	r2, [pc, #56]	; (8004910 <hitComet+0x138>)
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80048de:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <hitComet+0x138>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	460a      	mov	r2, r1
 80048e8:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	ddd4      	ble.n	80048a0 <hitComet+0xc8>
    }
    Comet.in_play--;
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <hitComet+0x138>)
 80048f8:	f993 3000 	ldrsb.w	r3, [r3]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	b25a      	sxtb	r2, r3
 8004904:	4b02      	ldr	r3, [pc, #8]	; (8004910 <hitComet+0x138>)
 8004906:	701a      	strb	r2, [r3, #0]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bd90      	pop	{r4, r7, pc}
 8004910:	20002194 	.word	0x20002194
 8004914:	200021dc 	.word	0x200021dc
 8004918:	20002174 	.word	0x20002174

0800491c <beenHit>:
 * @fn void beenHit(void)
 * @brief if the spaceship has been hit by a comet or an enemy bullet, this function is called
 * decrements the lives, if lives is 0, the game is restarted in the notPlay state by calling initSpaceInvaders
 *
 */
void beenHit(){
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
    hit = 1;
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <beenHit+0x48>)
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
    lives--;
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <beenHit+0x4c>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	3b01      	subs	r3, #1
 800492c:	b2da      	uxtb	r2, r3
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <beenHit+0x4c>)
 8004930:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <beenHit+0x4c>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d111      	bne.n	800495e <beenHit+0x42>
        play = 0;
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <beenHit+0x50>)
 800493c:	2200      	movs	r2, #0
 800493e:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <beenHit+0x48>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)"L", strlen("L"), 300);
 8004946:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800494a:	2201      	movs	r2, #1
 800494c:	4908      	ldr	r1, [pc, #32]	; (8004970 <beenHit+0x54>)
 800494e:	4809      	ldr	r0, [pc, #36]	; (8004974 <beenHit+0x58>)
 8004950:	f005 f9a8 	bl	8009ca4 <HAL_UART_Transmit>
        setGameState(loss);
 8004954:	2002      	movs	r0, #2
 8004956:	f7fe ffb3 	bl	80038c0 <setGameState>
        initSpaceInvaders();
 800495a:	f7fe ffc1 	bl	80038e0 <initSpaceInvaders>
    }
}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20001eef 	.word	0x20001eef
 8004968:	2000004e 	.word	0x2000004e
 800496c:	2000004f 	.word	0x2000004f
 8004970:	0800c3f4 	.word	0x0800c3f4
 8004974:	20001ff0 	.word	0x20001ff0

08004978 <powerups>:
/**
 * @fn void powerups(void)
 * @brief randomly gives a power-up when a comet has been hit
 *
 */
void powerups(){
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 800497e:	f006 f9a9 	bl	800acd4 <rand>
 8004982:	4603      	mov	r3, r0
 8004984:	425a      	negs	r2, r3
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	f002 0203 	and.w	r2, r2, #3
 800498e:	bf58      	it	pl
 8004990:	4253      	negpl	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <powerups+0x7c>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d127      	bne.n	80049ec <powerups+0x74>
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d124      	bne.n	80049ec <powerups+0x74>
        powerUp = RANDOM(1,3);
 80049a2:	f006 f997 	bl	800acd4 <rand>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <powerups+0x80>)
 80049aa:	fb83 3102 	smull	r3, r1, r3, r2
 80049ae:	17d3      	asrs	r3, r2, #31
 80049b0:	1ac9      	subs	r1, r1, r3
 80049b2:	460b      	mov	r3, r1
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	440b      	add	r3, r1
 80049b8:	1ad1      	subs	r1, r2, r3
 80049ba:	b2cb      	uxtb	r3, r1
 80049bc:	3301      	adds	r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <powerups+0x7c>)
 80049c2:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <powerups+0x7c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d104      	bne.n	80049d6 <powerups+0x5e>
        	displayPowerup(RED);
 80049cc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80049d0:	f000 f816 	bl	8004a00 <displayPowerup>
 80049d4:	e007      	b.n	80049e6 <powerups+0x6e>
        }
        else if(powerUp == 2){
 80049d6:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <powerups+0x7c>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d103      	bne.n	80049e6 <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 80049de:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80049e2:	f000 f80d 	bl	8004a00 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <powerups+0x84>)
 80049e8:	2205      	movs	r2, #5
 80049ea:	701a      	strb	r2, [r3, #0]
    }
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	200021e0 	.word	0x200021e0
 80049f8:	55555556 	.word	0x55555556
 80049fc:	200021d8 	.word	0x200021d8

08004a00 <displayPowerup>:
 * @fn void displayPowerup(uint16_t)
 * @brief displays the power-up on the screen
 *
 * @param[in] color uint16_t: the color to display the power-up with
 */
void displayPowerup(uint16_t color){
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	; (8004a88 <displayPowerup+0x88>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d11c      	bne.n	8004a4c <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <displayPowerup+0x8c>)
 8004a14:	f993 3000 	ldrsb.w	r3, [r3]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	b298      	uxth	r0, r3
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	23b4      	movs	r3, #180	; 0xb4
 8004a24:	2204      	movs	r2, #4
 8004a26:	2100      	movs	r1, #0
 8004a28:	f000 fca0 	bl	800536c <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 8004a2c:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <displayPowerup+0x8c>)
 8004a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b298      	uxth	r0, r3
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	231e      	movs	r3, #30
 8004a42:	2202      	movs	r2, #2
 8004a44:	21b4      	movs	r1, #180	; 0xb4
 8004a46:	f000 fc91 	bl	800536c <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 8004a4a:	e019      	b.n	8004a80 <displayPowerup+0x80>
    else if(powerUp == 2){
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <displayPowerup+0x88>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d115      	bne.n	8004a80 <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004a54:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <displayPowerup+0x8c>)
 8004a56:	f993 3000 	ldrsb.w	r3, [r3]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3301      	adds	r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	b218      	sxth	r0, r3
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <displayPowerup+0x8c>)
 8004a68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3302      	adds	r3, #2
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	b219      	sxth	r1, r3
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	220e      	movs	r2, #14
 8004a7c:	f000 fd56 	bl	800552c <Displ_drawCircle>
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200021e0 	.word	0x200021e0
 8004a8c:	20000050 	.word	0x20000050

08004a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <HAL_MspInit+0x44>)
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <HAL_MspInit+0x44>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6193      	str	r3, [r2, #24]
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <HAL_MspInit+0x44>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_MspInit+0x44>)
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <HAL_MspInit+0x44>)
 8004ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	61d3      	str	r3, [r2, #28]
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_MspInit+0x44>)
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <HAL_I2C_MspInit+0x7c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d127      	bne.n	8004b4a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_I2C_MspInit+0x80>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_I2C_MspInit+0x80>)
 8004b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b04:	6153      	str	r3, [r2, #20]
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_I2C_MspInit+0x80>)
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b12:	2303      	movs	r3, #3
 8004b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b16:	2312      	movs	r3, #18
 8004b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b22:	2304      	movs	r3, #4
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	480b      	ldr	r0, [pc, #44]	; (8004b5c <HAL_I2C_MspInit+0x84>)
 8004b2e:	f001 fd8d 	bl	800664c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_I2C_MspInit+0x80>)
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_I2C_MspInit+0x80>)
 8004b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b3c:	61d3      	str	r3, [r2, #28]
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_I2C_MspInit+0x80>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b4a:	bf00      	nop
 8004b4c:	3728      	adds	r7, #40	; 0x28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40005800 	.word	0x40005800
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	48001400 	.word	0x48001400

08004b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b68:	f107 0314 	add.w	r3, r7, #20
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2e      	ldr	r2, [pc, #184]	; (8004c38 <HAL_SPI_MspInit+0xd8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d156      	bne.n	8004c30 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b82:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HAL_SPI_MspInit+0xdc>)
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <HAL_SPI_MspInit+0xdc>)
 8004b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b8c:	61d3      	str	r3, [r2, #28]
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <HAL_SPI_MspInit+0xdc>)
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9a:	4b28      	ldr	r3, [pc, #160]	; (8004c3c <HAL_SPI_MspInit+0xdc>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4a27      	ldr	r2, [pc, #156]	; (8004c3c <HAL_SPI_MspInit+0xdc>)
 8004ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba4:	6153      	str	r3, [r2, #20]
 8004ba6:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <HAL_SPI_MspInit+0xdc>)
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8004bb2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bc4:	2305      	movs	r3, #5
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	4619      	mov	r1, r3
 8004bce:	481c      	ldr	r0, [pc, #112]	; (8004c40 <HAL_SPI_MspInit+0xe0>)
 8004bd0:	f001 fd3c 	bl	800664c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004bd6:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <HAL_SPI_MspInit+0xe8>)
 8004bd8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004bdc:	2210      	movs	r2, #16
 8004bde:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004be0:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bec:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bfe:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004c04:	480f      	ldr	r0, [pc, #60]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004c06:	f001 fb12 	bl	800622e <HAL_DMA_Init>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004c10:	f7fe faec 	bl	80031ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <HAL_SPI_MspInit+0xe4>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	2024      	movs	r0, #36	; 0x24
 8004c26:	f001 facc 	bl	80061c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004c2a:	2024      	movs	r0, #36	; 0x24
 8004c2c:	f001 fae5 	bl	80061fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c30:	bf00      	nop
 8004c32:	3728      	adds	r7, #40	; 0x28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40003800 	.word	0x40003800
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	48000400 	.word	0x48000400
 8004c44:	20001fac 	.word	0x20001fac
 8004c48:	40020058 	.word	0x40020058

08004c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	f107 031c 	add.w	r3, r7, #28
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <HAL_UART_MspInit+0xec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d131      	bne.n	8004cd2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c6e:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	4a32      	ldr	r2, [pc, #200]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c78:	61d3      	str	r3, [r2, #28]
 8004c7a:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c86:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c90:	6153      	str	r3, [r2, #20]
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004caa:	2303      	movs	r3, #3
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cae:	2307      	movs	r3, #7
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb2:	f107 031c 	add.w	r3, r7, #28
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cbc:	f001 fcc6 	bl	800664c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	2026      	movs	r0, #38	; 0x26
 8004cc6:	f001 fa7c 	bl	80061c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004cca:	2026      	movs	r0, #38	; 0x26
 8004ccc:	f001 fa95 	bl	80061fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004cd0:	e02d      	b.n	8004d2e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <HAL_UART_MspInit+0xf4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d128      	bne.n	8004d2e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce6:	61d3      	str	r3, [r2, #28]
 8004ce8:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cfe:	6153      	str	r3, [r2, #20]
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <HAL_UART_MspInit+0xf0>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d12:	2302      	movs	r3, #2
 8004d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d1e:	2307      	movs	r3, #7
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d22:	f107 031c 	add.w	r3, r7, #28
 8004d26:	4619      	mov	r1, r3
 8004d28:	4806      	ldr	r0, [pc, #24]	; (8004d44 <HAL_UART_MspInit+0xf8>)
 8004d2a:	f001 fc8f 	bl	800664c <HAL_GPIO_Init>
}
 8004d2e:	bf00      	nop
 8004d30:	3730      	adds	r7, #48	; 0x30
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40004400 	.word	0x40004400
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40004800 	.word	0x40004800
 8004d44:	48000400 	.word	0x48000400

08004d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d4c:	e7fe      	b.n	8004d4c <NMI_Handler+0x4>

08004d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d52:	e7fe      	b.n	8004d52 <HardFault_Handler+0x4>

08004d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d58:	e7fe      	b.n	8004d58 <MemManage_Handler+0x4>

08004d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d5e:	e7fe      	b.n	8004d5e <BusFault_Handler+0x4>

08004d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d64:	e7fe      	b.n	8004d64 <UsageFault_Handler+0x4>

08004d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d94:	f001 f8f6 	bl	8005f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d98:	bf00      	nop
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8004da0:	2001      	movs	r0, #1
 8004da2:	f001 fdf5 	bl	8006990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004db0:	4802      	ldr	r0, [pc, #8]	; (8004dbc <DMA1_Channel5_IRQHandler+0x10>)
 8004db2:	f001 fb59 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20001fac 	.word	0x20001fac

08004dc0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004dc4:	4802      	ldr	r0, [pc, #8]	; (8004dd0 <SPI2_IRQHandler+0x10>)
 8004dc6:	f004 fc1b 	bl	8009600 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20001f48 	.word	0x20001f48

08004dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <USART2_IRQHandler+0x50>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <USART2_IRQHandler+0x50>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <USART2_IRQHandler+0x42>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <USART2_IRQHandler+0x50>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <USART2_IRQHandler+0x50>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fbdf 	bl	80035d4 <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e16:	4803      	ldr	r0, [pc, #12]	; (8004e24 <USART2_IRQHandler+0x50>)
 8004e18:	f004 ffce 	bl	8009db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20001ff0 	.word	0x20001ff0

08004e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8004e2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e30:	f001 fdae 	bl	8006990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8004e34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e38:	f001 fdaa 	bl	8006990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8004e3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e40:	f001 fda6 	bl	8006990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return 1;
 8004e4c:	2301      	movs	r3, #1
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <_kill>:

int _kill(int pid, int sig)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e62:	f005 fe49 	bl	800aaf8 <__errno>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2216      	movs	r2, #22
 8004e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8004e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <_exit>:

void _exit (int status)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e80:	f04f 31ff 	mov.w	r1, #4294967295
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ffe7 	bl	8004e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e8a:	e7fe      	b.n	8004e8a <_exit+0x12>

08004e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e00a      	b.n	8004eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e9e:	f3af 8000 	nop.w
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	60ba      	str	r2, [r7, #8]
 8004eaa:	b2ca      	uxtb	r2, r1
 8004eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	dbf0      	blt.n	8004e9e <_read+0x12>
  }

  return len;
 8004ebc:	687b      	ldr	r3, [r7, #4]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eee:	605a      	str	r2, [r3, #4]
  return 0;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <_isatty>:

int _isatty(int file)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f06:	2301      	movs	r3, #1
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f38:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <_sbrk+0x5c>)
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <_sbrk+0x60>)
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <_sbrk+0x64>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <_sbrk+0x64>)
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <_sbrk+0x68>)
 8004f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <_sbrk+0x64>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d207      	bcs.n	8004f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f60:	f005 fdca 	bl	800aaf8 <__errno>
 8004f64:	4603      	mov	r3, r0
 8004f66:	220c      	movs	r2, #12
 8004f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	e009      	b.n	8004f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f70:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <_sbrk+0x64>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <_sbrk+0x64>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <_sbrk+0x64>)
 8004f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f82:	68fb      	ldr	r3, [r7, #12]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20004000 	.word	0x20004000
 8004f90:	00000400 	.word	0x00000400
 8004f94:	200021e4 	.word	0x200021e4
 8004f98:	20002a10 	.word	0x20002a10

08004f9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <SystemInit+0x20>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	4a05      	ldr	r2, [pc, #20]	; (8004fbc <SystemInit+0x20>)
 8004fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 8004fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fcc:	f001 fcb0 	bl	8006930 <HAL_GPIO_ReadPin>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d017      	beq.n	8005006 <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fdc:	480b      	ldr	r0, [pc, #44]	; (800500c <Displ_Select+0x4c>)
 8004fde:	f001 fcbf 	bl	8006960 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <Displ_Select+0x50>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	490a      	ldr	r1, [pc, #40]	; (8005010 <Displ_Select+0x50>)
 8004fe8:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004fec:	4013      	ands	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <Displ_Select+0x50>)
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <Displ_Select+0x50>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005002:	f001 fcad 	bl	8006960 <HAL_GPIO_WritePin>
        }
    }
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	48000400 	.word	0x48000400
 8005010:	40003800 	.word	0x40003800

08005014 <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6039      	str	r1, [r7, #0]
 800501c:	4611      	mov	r1, r2
 800501e:	461a      	mov	r2, r3
 8005020:	4603      	mov	r3, r0
 8005022:	71fb      	strb	r3, [r7, #7]
 8005024:	460b      	mov	r3, r1
 8005026:	80bb      	strh	r3, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 800502c:	bf00      	nop
 800502e:	4b23      	ldr	r3, [pc, #140]	; (80050bc <Displ_Transmit+0xa8>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0fa      	beq.n	800502e <Displ_Transmit+0x1a>

    Displ_Select();
 8005038:	f7ff ffc2 	bl	8004fc0 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	461a      	mov	r2, r3
 8005040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005048:	f001 fc8a 	bl	8006960 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 800504c:	79bb      	ldrb	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 8005052:	88bb      	ldrh	r3, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	4413      	add	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e00b      	b.n	8005078 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	ba5b      	rev16	r3, r3
 800506a:	60bb      	str	r3, [r7, #8]
  return result;
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3304      	adds	r3, #4
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	d3ef      	bcc.n	8005060 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	2b13      	cmp	r3, #19
 8005084:	d80d      	bhi.n	80050a2 <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <Displ_Transmit+0xa8>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 800508c:	88ba      	ldrh	r2, [r7, #4]
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	480a      	ldr	r0, [pc, #40]	; (80050c0 <Displ_Transmit+0xac>)
 8005096:	f004 f84e 	bl	8009136 <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <Displ_Transmit+0xa8>)
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 80050a0:	e008      	b.n	80050b4 <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <Displ_Transmit+0xa8>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80050a8:	88bb      	ldrh	r3, [r7, #4]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	4804      	ldr	r0, [pc, #16]	; (80050c0 <Displ_Transmit+0xac>)
 80050b0:	f004 f9b6 	bl	8009420 <HAL_SPI_Transmit_DMA>
    }
 80050b4:	bf00      	nop
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	2000005c 	.word	0x2000005c
 80050c0:	20001f48 	.word	0x20001f48

080050c4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80050ce:	1df9      	adds	r1, r7, #7
 80050d0:	2300      	movs	r3, #0
 80050d2:	2201      	movs	r2, #1
 80050d4:	2000      	movs	r0, #0
 80050d6:	f7ff ff9d 	bl	8005014 <Displ_Transmit>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	4613      	mov	r3, r2
 80050ee:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	2001      	movs	r0, #1
 8005100:	f7ff ff88 	bl	8005014 <Displ_Transmit>
 8005104:	e000      	b.n	8005108 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 8005106:	bf00      	nop
}
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
    Displ_Select();
 8005114:	f7ff ff54 	bl	8004fc0 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8005118:	2200      	movs	r2, #0
 800511a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800511e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005122:	f001 fc1d 	bl	8006960 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8005126:	2001      	movs	r0, #1
 8005128:	f000 ff4c 	bl	8005fc4 <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 800512c:	2201      	movs	r2, #1
 800512e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005136:	f001 fc13 	bl	8006960 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 800513a:	2096      	movs	r0, #150	; 0x96
 800513c:	f000 ff42 	bl	8005fc4 <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005140:	203a      	movs	r0, #58	; 0x3a
 8005142:	f7ff ffbf 	bl	80050c4 <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8005146:	2200      	movs	r2, #0
 8005148:	2101      	movs	r1, #1
 800514a:	4810      	ldr	r0, [pc, #64]	; (800518c <ILI9XXX_Init+0x7c>)
 800514c:	f7ff ffc9 	bl	80050e2 <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005150:	20b0      	movs	r0, #176	; 0xb0
 8005152:	f7ff ffb7 	bl	80050c4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005156:	2200      	movs	r2, #0
 8005158:	2101      	movs	r1, #1
 800515a:	480d      	ldr	r0, [pc, #52]	; (8005190 <ILI9XXX_Init+0x80>)
 800515c:	f7ff ffc1 	bl	80050e2 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005160:	20b0      	movs	r0, #176	; 0xb0
 8005162:	f7ff ffaf 	bl	80050c4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005166:	2200      	movs	r2, #0
 8005168:	2101      	movs	r1, #1
 800516a:	4809      	ldr	r0, [pc, #36]	; (8005190 <ILI9XXX_Init+0x80>)
 800516c:	f7ff ffb9 	bl	80050e2 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8005170:	2011      	movs	r0, #17
 8005172:	f7ff ffa7 	bl	80050c4 <Displ_WriteCommand>
    HAL_Delay(120);
 8005176:	2078      	movs	r0, #120	; 0x78
 8005178:	f000 ff24 	bl	8005fc4 <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 800517c:	2029      	movs	r0, #41	; 0x29
 800517e:	f7ff ffa1 	bl	80050c4 <Displ_WriteCommand>
    HAL_Delay(5);
 8005182:	2005      	movs	r0, #5
 8005184:	f000 ff1e 	bl	8005fc4 <HAL_Delay>

}
 8005188:	bf00      	nop
 800518a:	bd80      	pop	{r7, pc}
 800518c:	0800c3f8 	.word	0x0800c3f8
 8005190:	0800c3fc 	.word	0x0800c3fc

08005194 <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4623      	mov	r3, r4
 80051a4:	80fb      	strh	r3, [r7, #6]
 80051a6:	4603      	mov	r3, r0
 80051a8:	80bb      	strh	r3, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]
 80051ae:	4613      	mov	r3, r2
 80051b0:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	061a      	lsls	r2, r3, #24
 80051b6:	887b      	ldrh	r3, [r7, #2]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051be:	431a      	orrs	r2, r3
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	0a12      	lsrs	r2, r2, #8
 80051cc:	b292      	uxth	r2, r2
 80051ce:	431a      	orrs	r2, r3
 80051d0:	4b14      	ldr	r3, [pc, #80]	; (8005224 <Displ_SetAddressWindow+0x90>)
 80051d2:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80051d4:	202a      	movs	r0, #42	; 0x2a
 80051d6:	f7ff ff75 	bl	80050c4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2104      	movs	r1, #4
 80051de:	4811      	ldr	r0, [pc, #68]	; (8005224 <Displ_SetAddressWindow+0x90>)
 80051e0:	f7ff ff7f 	bl	80050e2 <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80051e4:	883b      	ldrh	r3, [r7, #0]
 80051e6:	061a      	lsls	r2, r3, #24
 80051e8:	883b      	ldrh	r3, [r7, #0]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f0:	431a      	orrs	r2, r3
 80051f2:	88bb      	ldrh	r3, [r7, #4]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	88ba      	ldrh	r2, [r7, #4]
 80051fc:	0a12      	lsrs	r2, r2, #8
 80051fe:	b292      	uxth	r2, r2
 8005200:	431a      	orrs	r2, r3
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <Displ_SetAddressWindow+0x90>)
 8005204:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8005206:	202b      	movs	r0, #43	; 0x2b
 8005208:	f7ff ff5c 	bl	80050c4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 800520c:	2200      	movs	r2, #0
 800520e:	2104      	movs	r1, #4
 8005210:	4804      	ldr	r0, [pc, #16]	; (8005224 <Displ_SetAddressWindow+0x90>)
 8005212:	f7ff ff66 	bl	80050e2 <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8005216:	202c      	movs	r0, #44	; 0x2c
 8005218:	f7ff ff54 	bl	80050c4 <Displ_WriteCommand>
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bd90      	pop	{r4, r7, pc}
 8005224:	200029f0 	.word	0x200029f0

08005228 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8005232:	2201      	movs	r2, #1
 8005234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800523c:	f001 fb90 	bl	8006960 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8005240:	2201      	movs	r2, #1
 8005242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005246:	4806      	ldr	r0, [pc, #24]	; (8005260 <Displ_Init+0x38>)
 8005248:	f001 fb8a 	bl	8006960 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 800524c:	f7ff ff60 	bl	8005110 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f806 	bl	8005264 <Displ_Orientation>
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	48000400 	.word	0x48000400

08005264 <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d837      	bhi.n	80052e4 <Displ_Orientation+0x80>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <Displ_Orientation+0x18>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	0800528d 	.word	0x0800528d
 8005280:	080052a3 	.word	0x080052a3
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052cf 	.word	0x080052cf
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <Displ_Orientation+0xa0>)
 800528e:	2288      	movs	r2, #136	; 0x88
 8005290:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8005292:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <Displ_Orientation+0xa4>)
 8005294:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005298:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <Displ_Orientation+0xa8>)
 800529c:	22f0      	movs	r2, #240	; 0xf0
 800529e:	801a      	strh	r2, [r3, #0]
            break;
 80052a0:	e020      	b.n	80052e4 <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <Displ_Orientation+0xa0>)
 80052a4:	22e8      	movs	r2, #232	; 0xe8
 80052a6:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <Displ_Orientation+0xa4>)
 80052aa:	22f0      	movs	r2, #240	; 0xf0
 80052ac:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 80052ae:	4b17      	ldr	r3, [pc, #92]	; (800530c <Displ_Orientation+0xa8>)
 80052b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052b4:	801a      	strh	r2, [r3, #0]
            break;
 80052b6:	e015      	b.n	80052e4 <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 80052b8:	4b12      	ldr	r3, [pc, #72]	; (8005304 <Displ_Orientation+0xa0>)
 80052ba:	2248      	movs	r2, #72	; 0x48
 80052bc:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <Displ_Orientation+0xa4>)
 80052c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052c4:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <Displ_Orientation+0xa8>)
 80052c8:	22f0      	movs	r2, #240	; 0xf0
 80052ca:	801a      	strh	r2, [r3, #0]
            break;
 80052cc:	e00a      	b.n	80052e4 <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 80052ce:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <Displ_Orientation+0xa0>)
 80052d0:	2228      	movs	r2, #40	; 0x28
 80052d2:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <Displ_Orientation+0xa4>)
 80052d6:	22f0      	movs	r2, #240	; 0xf0
 80052d8:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <Displ_Orientation+0xa8>)
 80052dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052e0:	801a      	strh	r2, [r3, #0]
            break;
 80052e2:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 80052e4:	2036      	movs	r0, #54	; 0x36
 80052e6:	f7ff feed 	bl	80050c4 <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2101      	movs	r1, #1
 80052ee:	4805      	ldr	r0, [pc, #20]	; (8005304 <Displ_Orientation+0xa0>)
 80052f0:	f7ff fef7 	bl	80050e2 <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80052f4:	4a06      	ldr	r2, [pc, #24]	; (8005310 <Displ_Orientation+0xac>)
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	7013      	strb	r3, [r2, #0]
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	200029f4 	.word	0x200029f4
 8005308:	200021ec 	.word	0x200021ec
 800530c:	200021ea 	.word	0x200021ea
 8005310:	200021e8 	.word	0x200021e8

08005314 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a05      	ldr	r2, [pc, #20]	; (8005338 <HAL_SPI_ErrorCallback+0x24>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d102      	bne.n	800532c <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_SPI_ErrorCallback+0x28>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
    }
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40003800 	.word	0x40003800
 800533c:	2000005c 	.word	0x2000005c

08005340 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a05      	ldr	r2, [pc, #20]	; (8005364 <HAL_SPI_TxCpltCallback+0x24>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d102      	bne.n	8005358 <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_SPI_TxCpltCallback+0x28>)
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40003800 	.word	0x40003800
 8005368:	2000005c 	.word	0x2000005c

0800536c <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b08b      	sub	sp, #44	; 0x2c
 8005370:	af00      	add	r7, sp, #0
 8005372:	4604      	mov	r4, r0
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	4623      	mov	r3, r4
 800537c:	80fb      	strh	r3, [r7, #6]
 800537e:	4603      	mov	r3, r0
 8005380:	80bb      	strh	r3, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	807b      	strh	r3, [r7, #2]
 8005386:	4613      	mov	r3, r2
 8005388:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	4a4f      	ldr	r2, [pc, #316]	; (80054cc <Displ_FillArea+0x160>)
 800538e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005392:	4293      	cmp	r3, r2
 8005394:	f280 8096 	bge.w	80054c4 <Displ_FillArea+0x158>
 8005398:	88bb      	ldrh	r3, [r7, #4]
 800539a:	4a4d      	ldr	r2, [pc, #308]	; (80054d0 <Displ_FillArea+0x164>)
 800539c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80053a0:	4293      	cmp	r3, r2
 80053a2:	f280 808f 	bge.w	80054c4 <Displ_FillArea+0x158>
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 808b 	beq.w	80054c4 <Displ_FillArea+0x158>
 80053ae:	883b      	ldrh	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8087 	beq.w	80054c4 <Displ_FillArea+0x158>

    x1=x + w - 1;
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	887b      	ldrh	r3, [r7, #2]
 80053ba:	4413      	add	r3, r2
 80053bc:	3b01      	subs	r3, #1
 80053be:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 80053c0:	4b42      	ldr	r3, [pc, #264]	; (80054cc <Displ_FillArea+0x160>)
 80053c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d903      	bls.n	80053d6 <Displ_FillArea+0x6a>
        x1=_width;
 80053ce:	4b3f      	ldr	r3, [pc, #252]	; (80054cc <Displ_FillArea+0x160>)
 80053d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053d4:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 80053d6:	88ba      	ldrh	r2, [r7, #4]
 80053d8:	883b      	ldrh	r3, [r7, #0]
 80053da:	4413      	add	r3, r2
 80053dc:	3b01      	subs	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 80053e0:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <Displ_FillArea+0x164>)
 80053e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e6:	461a      	mov	r2, r3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d903      	bls.n	80053f6 <Displ_FillArea+0x8a>
        y1=_height;
 80053ee:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <Displ_FillArea+0x164>)
 80053f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053f4:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 80053f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	431a      	orrs	r2, r3
 8005404:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 800540c:	88bb      	ldrh	r3, [r7, #4]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	3301      	adds	r3, #1
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	6a39      	ldr	r1, [r7, #32]
 8005418:	1a8a      	subs	r2, r1, r2
 800541a:	3201      	adds	r2, #1
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8005422:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <Displ_FillArea+0x168>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542e:	d204      	bcs.n	800543a <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	3301      	adds	r3, #1
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e002      	b.n	8005440 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 800543a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800543e:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8005440:	2300      	movs	r3, #0
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
 8005444:	e007      	b.n	8005456 <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	617a      	str	r2, [r7, #20]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	3301      	adds	r3, #1
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	429a      	cmp	r2, r3
 800545c:	d3f3      	bcc.n	8005446 <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	b29a      	uxth	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	b29b      	uxth	r3, r3
 8005466:	88b9      	ldrh	r1, [r7, #4]
 8005468:	88f8      	ldrh	r0, [r7, #6]
 800546a:	f7ff fe93 	bl	8005194 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	0a5b      	lsrs	r3, r3, #9
 8005472:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	e00a      	b.n	8005490 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <Displ_FillArea+0x168>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fe2c 	bl	80050e2 <Displ_WriteData>
    for  (k=0;k<times;k++) {
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	3301      	adds	r3, #1
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	d3f0      	bcc.n	800547a <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <Displ_FillArea+0x168>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	005a      	lsls	r2, r3, #1
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	029b      	lsls	r3, r3, #10
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2200      	movs	r2, #0
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7ff fe1a 	bl	80050e2 <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <Displ_FillArea+0x168>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <Displ_FillArea+0x16c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d101      	bne.n	80054bc <Displ_FillArea+0x150>
 80054b8:	4b08      	ldr	r3, [pc, #32]	; (80054dc <Displ_FillArea+0x170>)
 80054ba:	e000      	b.n	80054be <Displ_FillArea+0x152>
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <Displ_FillArea+0x16c>)
 80054be:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <Displ_FillArea+0x168>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e000      	b.n	80054c6 <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80054c4:	bf00      	nop

}
 80054c6:	372c      	adds	r7, #44	; 0x2c
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd90      	pop	{r4, r7, pc}
 80054cc:	200021ea 	.word	0x200021ea
 80054d0:	200021ec 	.word	0x200021ec
 80054d4:	20000060 	.word	0x20000060
 80054d8:	200021f0 	.word	0x200021f0
 80054dc:	200025f0 	.word	0x200025f0

080054e0 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
 80054ea:	460b      	mov	r3, r1
 80054ec:	80bb      	strh	r3, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <Displ_Pixel+0x44>)
 80054f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	da0e      	bge.n	800551c <Displ_Pixel+0x3c>
 80054fe:	88bb      	ldrh	r3, [r7, #4]
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <Displ_Pixel+0x48>)
 8005502:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005506:	4293      	cmp	r3, r2
 8005508:	da08      	bge.n	800551c <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 800550a:	88b9      	ldrh	r1, [r7, #4]
 800550c:	88f8      	ldrh	r0, [r7, #6]
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	2301      	movs	r3, #1
 8005514:	2201      	movs	r2, #1
 8005516:	f7ff ff29 	bl	800536c <Displ_FillArea>
 800551a:	e000      	b.n	800551e <Displ_Pixel+0x3e>
        return;
 800551c:	bf00      	nop

}
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	200021ea 	.word	0x200021ea
 8005528:	200021ec 	.word	0x200021ec

0800552c <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	4604      	mov	r4, r0
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	4623      	mov	r3, r4
 800553c:	80fb      	strh	r3, [r7, #6]
 800553e:	4603      	mov	r3, r0
 8005540:	80bb      	strh	r3, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	807b      	strh	r3, [r7, #2]
 8005546:	4613      	mov	r3, r2
 8005548:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	f1c3 0301 	rsb	r3, r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005554:	2301      	movs	r3, #1
 8005556:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	461a      	mov	r2, r3
 800555c:	03d2      	lsls	r2, r2, #15
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	b29b      	uxth	r3, r3
 8005564:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800556a:	887b      	ldrh	r3, [r7, #2]
 800556c:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 800556e:	88f8      	ldrh	r0, [r7, #6]
 8005570:	88ba      	ldrh	r2, [r7, #4]
 8005572:	887b      	ldrh	r3, [r7, #2]
 8005574:	4413      	add	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	883a      	ldrh	r2, [r7, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	f7ff ffb0 	bl	80054e0 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005580:	88f8      	ldrh	r0, [r7, #6]
 8005582:	88ba      	ldrh	r2, [r7, #4]
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	b29b      	uxth	r3, r3
 800558a:	883a      	ldrh	r2, [r7, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	f7ff ffa7 	bl	80054e0 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	887b      	ldrh	r3, [r7, #2]
 8005596:	4413      	add	r3, r2
 8005598:	b29b      	uxth	r3, r3
 800559a:	88b9      	ldrh	r1, [r7, #4]
 800559c:	883a      	ldrh	r2, [r7, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ff9e 	bl	80054e0 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	88b9      	ldrh	r1, [r7, #4]
 80055ae:	883a      	ldrh	r2, [r7, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff95 	bl	80054e0 <Displ_Pixel>

    while (x<y) {
 80055b6:	e081      	b.n	80056bc <Displ_drawCircle+0x190>
        if (f >= 0) {
 80055b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	db0e      	blt.n	80055de <Displ_drawCircle+0xb2>
            y--;
 80055c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80055cc:	8a7b      	ldrh	r3, [r7, #18]
 80055ce:	3302      	adds	r3, #2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80055d4:	8afa      	ldrh	r2, [r7, #22]
 80055d6:	8a7b      	ldrh	r3, [r7, #18]
 80055d8:	4413      	add	r3, r2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80055de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3301      	adds	r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80055ea:	8abb      	ldrh	r3, [r7, #20]
 80055ec:	3302      	adds	r3, #2
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80055f2:	8afa      	ldrh	r2, [r7, #22]
 80055f4:	8abb      	ldrh	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	8a3b      	ldrh	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	b298      	uxth	r0, r3
 8005604:	88ba      	ldrh	r2, [r7, #4]
 8005606:	89fb      	ldrh	r3, [r7, #14]
 8005608:	4413      	add	r3, r2
 800560a:	b29b      	uxth	r3, r3
 800560c:	883a      	ldrh	r2, [r7, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	f7ff ff66 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	8a3b      	ldrh	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	b298      	uxth	r0, r3
 800561c:	88ba      	ldrh	r2, [r7, #4]
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	4413      	add	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	883a      	ldrh	r2, [r7, #0]
 8005626:	4619      	mov	r1, r3
 8005628:	f7ff ff5a 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	8a3b      	ldrh	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	b298      	uxth	r0, r3
 8005634:	88ba      	ldrh	r2, [r7, #4]
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	b29b      	uxth	r3, r3
 800563c:	883a      	ldrh	r2, [r7, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	f7ff ff4e 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	8a3b      	ldrh	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	b298      	uxth	r0, r3
 800564c:	88ba      	ldrh	r2, [r7, #4]
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	b29b      	uxth	r3, r3
 8005654:	883a      	ldrh	r2, [r7, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	f7ff ff42 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	89fb      	ldrh	r3, [r7, #14]
 8005660:	4413      	add	r3, r2
 8005662:	b298      	uxth	r0, r3
 8005664:	88ba      	ldrh	r2, [r7, #4]
 8005666:	8a3b      	ldrh	r3, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	b29b      	uxth	r3, r3
 800566c:	883a      	ldrh	r2, [r7, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	f7ff ff36 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	89fb      	ldrh	r3, [r7, #14]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	b298      	uxth	r0, r3
 800567c:	88ba      	ldrh	r2, [r7, #4]
 800567e:	8a3b      	ldrh	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	883a      	ldrh	r2, [r7, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	f7ff ff2a 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	4413      	add	r3, r2
 8005692:	b298      	uxth	r0, r3
 8005694:	88ba      	ldrh	r2, [r7, #4]
 8005696:	8a3b      	ldrh	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	b29b      	uxth	r3, r3
 800569c:	883a      	ldrh	r2, [r7, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	f7ff ff1e 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	b298      	uxth	r0, r3
 80056ac:	88ba      	ldrh	r2, [r7, #4]
 80056ae:	8a3b      	ldrh	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	883a      	ldrh	r2, [r7, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	f7ff ff12 	bl	80054e0 <Displ_Pixel>
    while (x<y) {
 80056bc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80056c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	f6ff af77 	blt.w	80055b8 <Displ_drawCircle+0x8c>
    }
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd90      	pop	{r4, r7, pc}

080056d4 <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af02      	add	r7, sp, #8
 80056da:	4603      	mov	r3, r0
 80056dc:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <Displ_CLS+0x30>)
 80056e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <Displ_CLS+0x34>)
 80056e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ec:	b299      	uxth	r1, r3
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	460b      	mov	r3, r1
 80056f4:	2100      	movs	r1, #0
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7ff fe38 	bl	800536c <Displ_FillArea>
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	200021ea 	.word	0x200021ea
 8005708:	200021ec 	.word	0x200021ec

0800570c <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b08b      	sub	sp, #44	; 0x2c
 8005710:	af02      	add	r7, sp, #8
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	461a      	mov	r2, r3
 800571a:	4623      	mov	r3, r4
 800571c:	80fb      	strh	r3, [r7, #6]
 800571e:	4603      	mov	r3, r0
 8005720:	80bb      	strh	r3, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	807b      	strh	r3, [r7, #2]
 8005726:	4613      	mov	r3, r2
 8005728:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 800572a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800572e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005732:	429a      	cmp	r2, r3
 8005734:	d123      	bne.n	800577e <Displ_Line+0x72>
        if (y1>y0){
 8005736:	f9b7 2000 	ldrsh.w	r2, [r7]
 800573a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	dd0e      	ble.n	8005760 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005742:	88f8      	ldrh	r0, [r7, #6]
 8005744:	88b9      	ldrh	r1, [r7, #4]
 8005746:	883a      	ldrh	r2, [r7, #0]
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	b29b      	uxth	r3, r3
 800574e:	3301      	adds	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4613      	mov	r3, r2
 8005758:	2201      	movs	r2, #1
 800575a:	f7ff fe07 	bl	800536c <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 800575e:	e103      	b.n	8005968 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005760:	88f8      	ldrh	r0, [r7, #6]
 8005762:	8839      	ldrh	r1, [r7, #0]
 8005764:	88ba      	ldrh	r2, [r7, #4]
 8005766:	883b      	ldrh	r3, [r7, #0]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	b29b      	uxth	r3, r3
 800576c:	3301      	adds	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	2201      	movs	r2, #1
 8005778:	f7ff fdf8 	bl	800536c <Displ_FillArea>
        return;
 800577c:	e0f4      	b.n	8005968 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 800577e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005782:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005786:	429a      	cmp	r2, r3
 8005788:	d121      	bne.n	80057ce <Displ_Line+0xc2>
        if (x1>x0)
 800578a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800578e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005792:	429a      	cmp	r2, r3
 8005794:	dd0d      	ble.n	80057b2 <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8005796:	88f8      	ldrh	r0, [r7, #6]
 8005798:	88b9      	ldrh	r1, [r7, #4]
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3301      	adds	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2301      	movs	r3, #1
 80057ac:	f7ff fdde 	bl	800536c <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 80057b0:	e0da      	b.n	8005968 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80057b2:	8878      	ldrh	r0, [r7, #2]
 80057b4:	8839      	ldrh	r1, [r7, #0]
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3301      	adds	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2301      	movs	r3, #1
 80057c8:	f7ff fdd0 	bl	800536c <Displ_FillArea>
        return;
 80057cc:	e0cc      	b.n	8005968 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80057ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80057d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	dd05      	ble.n	80057e6 <Displ_Line+0xda>
 80057da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80057de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	e004      	b.n	80057f0 <Displ_Line+0xe4>
 80057e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80057ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057ee:	1ad2      	subs	r2, r2, r3
 80057f0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80057f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057f8:	4299      	cmp	r1, r3
 80057fa:	dd05      	ble.n	8005808 <Displ_Line+0xfc>
 80057fc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005804:	1acb      	subs	r3, r1, r3
 8005806:	e004      	b.n	8005812 <Displ_Line+0x106>
 8005808:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800580c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005810:	1acb      	subs	r3, r1, r3
 8005812:	429a      	cmp	r2, r3
 8005814:	bfcc      	ite	gt
 8005816:	2301      	movgt	r3, #1
 8005818:	2300      	movle	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 800581e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	827b      	strh	r3, [r7, #18]
 800582a:	88bb      	ldrh	r3, [r7, #4]
 800582c:	80fb      	strh	r3, [r7, #6]
 800582e:	8a7b      	ldrh	r3, [r7, #18]
 8005830:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	823b      	strh	r3, [r7, #16]
 8005836:	883b      	ldrh	r3, [r7, #0]
 8005838:	807b      	strh	r3, [r7, #2]
 800583a:	8a3b      	ldrh	r3, [r7, #16]
 800583c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800583e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005842:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005846:	429a      	cmp	r2, r3
 8005848:	dd0b      	ble.n	8005862 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	81fb      	strh	r3, [r7, #14]
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	80fb      	strh	r3, [r7, #6]
 8005852:	89fb      	ldrh	r3, [r7, #14]
 8005854:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005856:	88bb      	ldrh	r3, [r7, #4]
 8005858:	81bb      	strh	r3, [r7, #12]
 800585a:	883b      	ldrh	r3, [r7, #0]
 800585c:	80bb      	strh	r3, [r7, #4]
 800585e:	89bb      	ldrh	r3, [r7, #12]
 8005860:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	b29b      	uxth	r3, r3
 800586a:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 800586c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005870:	105b      	asrs	r3, r3, #1
 8005872:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005874:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005878:	f9b7 3000 	ldrsh.w	r3, [r7]
 800587c:	429a      	cmp	r2, r3
 800587e:	da07      	bge.n	8005890 <Displ_Line+0x184>
        dy = y1-y0;
 8005880:	883a      	ldrh	r2, [r7, #0]
 8005882:	88bb      	ldrh	r3, [r7, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	b29b      	uxth	r3, r3
 8005888:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 800588a:	2301      	movs	r3, #1
 800588c:	837b      	strh	r3, [r7, #26]
 800588e:	e007      	b.n	80058a0 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005890:	88ba      	ldrh	r2, [r7, #4]
 8005892:	883b      	ldrh	r3, [r7, #0]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	b29b      	uxth	r3, r3
 8005898:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 800589a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800589e:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80058a0:	2300      	movs	r3, #0
 80058a2:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	83bb      	strh	r3, [r7, #28]
 80058a8:	e03a      	b.n	8005920 <Displ_Line+0x214>
        l++;
 80058aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3301      	adds	r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80058b6:	8b3a      	ldrh	r2, [r7, #24]
 80058b8:	8afb      	ldrh	r3, [r7, #22]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	b29b      	uxth	r3, r3
 80058be:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80058c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da25      	bge.n	8005914 <Displ_Line+0x208>
            if (steep) {
 80058c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 80058d0:	88b8      	ldrh	r0, [r7, #4]
 80058d2:	88f9      	ldrh	r1, [r7, #6]
 80058d4:	8bfa      	ldrh	r2, [r7, #30]
 80058d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	2201      	movs	r2, #1
 80058de:	f7ff fd45 	bl	800536c <Displ_FillArea>
 80058e2:	e007      	b.n	80058f4 <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 80058e4:	88f8      	ldrh	r0, [r7, #6]
 80058e6:	88b9      	ldrh	r1, [r7, #4]
 80058e8:	8bfa      	ldrh	r2, [r7, #30]
 80058ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2301      	movs	r3, #1
 80058f0:	f7ff fd3c 	bl	800536c <Displ_FillArea>
            }
            y0 += ystep;
 80058f4:	88ba      	ldrh	r2, [r7, #4]
 80058f6:	8b7b      	ldrh	r3, [r7, #26]
 80058f8:	4413      	add	r3, r2
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	80bb      	strh	r3, [r7, #4]
            l=0;
 80058fe:	2300      	movs	r3, #0
 8005900:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005902:	8bbb      	ldrh	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	b29b      	uxth	r3, r3
 8005908:	80fb      	strh	r3, [r7, #6]
            err += dx;
 800590a:	8b3a      	ldrh	r2, [r7, #24]
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	4413      	add	r3, r2
 8005910:	b29b      	uxth	r3, r3
 8005912:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005914:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005918:	b29b      	uxth	r3, r3
 800591a:	3301      	adds	r3, #1
 800591c:	b29b      	uxth	r3, r3
 800591e:	83bb      	strh	r3, [r7, #28]
 8005920:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005924:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005928:	429a      	cmp	r2, r3
 800592a:	ddbe      	ble.n	80058aa <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 800592c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d019      	beq.n	8005968 <Displ_Line+0x25c>
        if (steep) {
 8005934:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00b      	beq.n	8005954 <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 800593c:	88b8      	ldrh	r0, [r7, #4]
 800593e:	88f9      	ldrh	r1, [r7, #6]
 8005940:	8bfb      	ldrh	r3, [r7, #30]
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	2201      	movs	r2, #1
 800594e:	f7ff fd0d 	bl	800536c <Displ_FillArea>
 8005952:	e009      	b.n	8005968 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 8005954:	88f8      	ldrh	r0, [r7, #6]
 8005956:	88b9      	ldrh	r1, [r7, #4]
 8005958:	8bfb      	ldrh	r3, [r7, #30]
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	2301      	movs	r3, #1
 8005964:	f7ff fd02 	bl	800536c <Displ_FillArea>
        }
    }
}
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd90      	pop	{r4, r7, pc}

0800596e <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800596e:	b590      	push	{r4, r7, lr}
 8005970:	b091      	sub	sp, #68	; 0x44
 8005972:	af02      	add	r7, sp, #8
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	461a      	mov	r2, r3
 800597c:	4623      	mov	r3, r4
 800597e:	80fb      	strh	r3, [r7, #6]
 8005980:	4603      	mov	r3, r0
 8005982:	80bb      	strh	r3, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
 8005988:	4613      	mov	r3, r2
 800598a:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800598c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005994:	429a      	cmp	r2, r3
 8005996:	dd0b      	ble.n	80059b0 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005998:	88bb      	ldrh	r3, [r7, #4]
 800599a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800599c:	883b      	ldrh	r3, [r7, #0]
 800599e:	80bb      	strh	r3, [r7, #4]
 80059a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059a2:	803b      	strh	r3, [r7, #0]
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059a8:	887b      	ldrh	r3, [r7, #2]
 80059aa:	80fb      	strh	r3, [r7, #6]
 80059ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ae:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80059b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80059b4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	dd0f      	ble.n	80059dc <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80059bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80059c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80059c2:	883b      	ldrh	r3, [r7, #0]
 80059c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80059c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059ca:	803b      	strh	r3, [r7, #0]
 80059cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059d0:	843b      	strh	r3, [r7, #32]
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059d8:	8c3b      	ldrh	r3, [r7, #32]
 80059da:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80059dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80059e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	dd0b      	ble.n	8005a00 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80059e8:	88bb      	ldrh	r3, [r7, #4]
 80059ea:	83fb      	strh	r3, [r7, #30]
 80059ec:	883b      	ldrh	r3, [r7, #0]
 80059ee:	80bb      	strh	r3, [r7, #4]
 80059f0:	8bfb      	ldrh	r3, [r7, #30]
 80059f2:	803b      	strh	r3, [r7, #0]
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	83bb      	strh	r3, [r7, #28]
 80059f8:	887b      	ldrh	r3, [r7, #2]
 80059fa:	80fb      	strh	r3, [r7, #6]
 80059fc:	8bbb      	ldrh	r3, [r7, #28]
 80059fe:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005a00:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a04:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d136      	bne.n	8005a7a <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005a10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a12:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005a14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	da02      	bge.n	8005a26 <Displ_fillTriangle+0xb8>
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a24:	e007      	b.n	8005a36 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005a26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a2a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	dd01      	ble.n	8005a36 <Displ_fillTriangle+0xc8>
 8005a32:	887b      	ldrh	r3, [r7, #2]
 8005a34:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005a36:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005a3a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	da03      	bge.n	8005a4a <Displ_fillTriangle+0xdc>
 8005a42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a48:	e008      	b.n	8005a5c <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005a4a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005a4e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005a52:	429a      	cmp	r2, r3
 8005a54:	dd02      	ble.n	8005a5c <Displ_fillTriangle+0xee>
 8005a56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a5a:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005a5c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005a60:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005a64:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a68:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005a6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	4623      	mov	r3, r4
 8005a74:	f7ff fe4a 	bl	800570c <Displ_Line>
        return;
 8005a78:	e0d2      	b.n	8005c20 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005a84:	883a      	ldrh	r2, [r7, #0]
 8005a86:	88bb      	ldrh	r3, [r7, #4]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005a8e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8005a9a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005a9e:	88bb      	ldrh	r3, [r7, #4]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005aa6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005ab2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005ab6:	883b      	ldrh	r3, [r7, #0]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8005abe:	2300      	movs	r3, #0
 8005ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8005ac6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005aca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d102      	bne.n	8005ad8 <Displ_fillTriangle+0x16a>
 8005ad2:	883b      	ldrh	r3, [r7, #0]
 8005ad4:	863b      	strh	r3, [r7, #48]	; 0x30
 8005ad6:	e003      	b.n	8005ae0 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005ad8:	883b      	ldrh	r3, [r7, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005ae0:	88bb      	ldrh	r3, [r7, #4]
 8005ae2:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ae4:	e03d      	b.n	8005b62 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005ae6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aec:	fb92 f3f3 	sdiv	r3, r2, r3
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	4413      	add	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005afa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b00:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	4413      	add	r3, r2
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005b0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	4413      	add	r3, r2
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005b18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1e:	4413      	add	r3, r2
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005b22:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005b26:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	dd05      	ble.n	8005b3a <Displ_fillTriangle+0x1cc>
 8005b2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b30:	81bb      	strh	r3, [r7, #12]
 8005b32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b36:	89bb      	ldrh	r3, [r7, #12]
 8005b38:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005b3a:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005b3e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005b42:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b46:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005b4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4623      	mov	r3, r4
 8005b52:	f7ff fddb 	bl	800570c <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005b56:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b62:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005b66:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	ddbb      	ble.n	8005ae6 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005b6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b72:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b76:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005b7a:	1a8a      	subs	r2, r1, r2
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005b82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b86:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005b8e:	1a8a      	subs	r2, r1, r2
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005b96:	e03d      	b.n	8005c14 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005b98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	887b      	ldrh	r3, [r7, #2]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005bac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	4413      	add	r3, r2
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005bc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc6:	4413      	add	r3, r2
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005bca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd0:	4413      	add	r3, r2
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005bd4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005bd8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	dd05      	ble.n	8005bec <Displ_fillTriangle+0x27e>
 8005be0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005be2:	81fb      	strh	r3, [r7, #14]
 8005be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005be6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005be8:	89fb      	ldrh	r3, [r7, #14]
 8005bea:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005bec:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005bf0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005bf4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005bf8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005bfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	4623      	mov	r3, r4
 8005c04:	f7ff fd82 	bl	800570c <Displ_Line>
    for(; y<=y2; y++) {
 8005c08:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c14:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005c18:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	ddbb      	ble.n	8005b98 <Displ_fillTriangle+0x22a>
    }
}
 8005c20:	373c      	adds	r7, #60	; 0x3c
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd90      	pop	{r4, r7, pc}
	...

08005c28 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005c28:	b082      	sub	sp, #8
 8005c2a:	b590      	push	{r4, r7, lr}
 8005c2c:	b08d      	sub	sp, #52	; 0x34
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	647b      	str	r3, [r7, #68]	; 0x44
 8005c32:	4603      	mov	r3, r0
 8005c34:	80fb      	strh	r3, [r7, #6]
 8005c36:	460b      	mov	r3, r1
 8005c38:	80bb      	strh	r3, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 8005c3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c42:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 8005c44:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d102      	bne.n	8005c52 <Displ_WChar+0x2a>
        wsize<<= 1;
 8005c4c:	7efb      	ldrb	r3, [r7, #27]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 8005c56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c5a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
 8005c62:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	3b20      	subs	r3, #32
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 8005c76:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d005      	beq.n	8005c8a <Displ_WChar+0x62>
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d107      	bne.n	8005c92 <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 8005c82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c86:	61fb      	str	r3, [r7, #28]
            break;
 8005c88:	e005      	b.n	8005c96 <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 8005c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8e:	61fb      	str	r3, [r7, #28]
            break;
 8005c90:	e001      	b.n	8005c96 <Displ_WChar+0x6e>
        default:
            mask=0x80;
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8005c96:	4b60      	ldr	r3, [pc, #384]	; (8005e18 <Displ_WChar+0x1f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005c9c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	b21a      	sxth	r2, r3
 8005ca4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b21b      	sxth	r3, r3
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005cb4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	b21a      	sxth	r2, r3
 8005cbc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	b21b      	sxth	r3, r3
 8005cca:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd0:	e06f      	b.n	8005db2 <Displ_WChar+0x18a>
        b=0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 8005cd6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d015      	beq.n	8005d0a <Displ_WChar+0xe2>
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d120      	bne.n	8005d24 <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	4413      	add	r3, r2
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	041a      	lsls	r2, r3, #16
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	3301      	adds	r3, #1
 8005cf0:	6939      	ldr	r1, [r7, #16]
 8005cf2:	440b      	add	r3, r1
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfc:	3202      	adds	r2, #2
 8005cfe:	6939      	ldr	r1, [r7, #16]
 8005d00:	440a      	add	r2, r1
 8005d02:	7812      	ldrb	r2, [r2, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005d08:	e011      	b.n	8005d2e <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	4413      	add	r3, r2
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d16:	3201      	adds	r2, #1
 8005d18:	6939      	ldr	r1, [r7, #16]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005d22:	e004      	b.n	8005d2e <Displ_WChar+0x106>
            default:
                b=pos[i];
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	4413      	add	r3, r2
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 8005d2e:	2300      	movs	r3, #0
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
 8005d32:	e032      	b.n	8005d9a <Displ_WChar+0x172>
            if((b << j) & mask)  {
 8005d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d014      	beq.n	8005d6c <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	623a      	str	r2, [r7, #32]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	897a      	ldrh	r2, [r7, #10]
 8005d50:	801a      	strh	r2, [r3, #0]
                if (size==2){
 8005d52:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d11c      	bne.n	8005d94 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	623a      	str	r2, [r7, #32]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	897a      	ldrh	r2, [r7, #10]
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e013      	b.n	8005d94 <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	623a      	str	r2, [r7, #32]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	893a      	ldrh	r2, [r7, #8]
 8005d7a:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005d7c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d107      	bne.n	8005d94 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	623a      	str	r2, [r7, #32]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	893a      	ldrh	r2, [r7, #8]
 8005d92:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	3301      	adds	r3, #1
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d3c6      	bcc.n	8005d34 <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 8005da6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005daa:	461a      	mov	r2, r3
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	4413      	add	r3, r2
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d38b      	bcc.n	8005cd2 <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005dc0:	7efb      	ldrb	r3, [r7, #27]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29c      	uxth	r4, r3
 8005dce:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005dd2:	88bb      	ldrh	r3, [r7, #4]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	88b9      	ldrh	r1, [r7, #4]
 8005dde:	88f8      	ldrh	r0, [r7, #6]
 8005de0:	4622      	mov	r2, r4
 8005de2:	f7ff f9d7 	bl	8005194 <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <Displ_WChar+0x1f0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	6a39      	ldr	r1, [r7, #32]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff f977 	bl	80050e2 <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005df4:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <Displ_WChar+0x1f0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <Displ_WChar+0x1f4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <Displ_WChar+0x1da>
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <Displ_WChar+0x1f8>)
 8005e00:	e000      	b.n	8005e04 <Displ_WChar+0x1dc>
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <Displ_WChar+0x1f4>)
 8005e04:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <Displ_WChar+0x1f0>)
 8005e06:	6013      	str	r3, [r2, #0]

}
 8005e08:	bf00      	nop
 8005e0a:	3734      	adds	r7, #52	; 0x34
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005e12:	b002      	add	sp, #8
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000060 	.word	0x20000060
 8005e1c:	200021f0 	.word	0x200021f0
 8005e20:	200025f0 	.word	0x200025f0

08005e24 <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005e24:	b082      	sub	sp, #8
 8005e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e28:	b08b      	sub	sp, #44	; 0x2c
 8005e2a:	af06      	add	r7, sp, #24
 8005e2c:	603a      	str	r2, [r7, #0]
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e30:	4603      	mov	r3, r0
 8005e32:	80fb      	strh	r3, [r7, #6]
 8005e34:	460b      	mov	r3, r1
 8005e36:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005e38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e3a:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 8005e3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d922      	bls.n	8005e8a <Displ_WString+0x66>
        delta<<=1;
 8005e44:	89fb      	ldrh	r3, [r7, #14]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8005e4a:	e01e      	b.n	8005e8a <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	88bd      	ldrh	r5, [r7, #4]
 8005e52:	88fc      	ldrh	r4, [r7, #6]
 8005e54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005e62:	9302      	str	r3, [sp, #8]
 8005e64:	466e      	mov	r6, sp
 8005e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e6e:	e886 0003 	stmia.w	r6, {r0, r1}
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	4629      	mov	r1, r5
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7ff fed6 	bl	8005c28 <Displ_WChar>
        x += delta;
 8005e7c:	88fa      	ldrh	r2, [r7, #6]
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	4413      	add	r3, r2
 8005e82:	80fb      	strh	r3, [r7, #6]
        str++;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	3301      	adds	r3, #1
 8005e88:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1dc      	bne.n	8005e4c <Displ_WString+0x28>
    }
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005e9e:	b002      	add	sp, #8
 8005ea0:	4770      	bx	lr
	...

08005ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005edc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ea8:	f7ff f878 	bl	8004f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005eac:	480c      	ldr	r0, [pc, #48]	; (8005ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8005eae:	490d      	ldr	r1, [pc, #52]	; (8005ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <LoopForever+0xe>)
  movs r3, #0
 8005eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005eb4:	e002      	b.n	8005ebc <LoopCopyDataInit>

08005eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005eba:	3304      	adds	r3, #4

08005ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ec0:	d3f9      	bcc.n	8005eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ec4:	4c0a      	ldr	r4, [pc, #40]	; (8005ef0 <LoopForever+0x16>)
  movs r3, #0
 8005ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ec8:	e001      	b.n	8005ece <LoopFillZerobss>

08005eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ecc:	3204      	adds	r2, #4

08005ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ed0:	d3fb      	bcc.n	8005eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ed2:	f004 fe17 	bl	800ab04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ed6:	f7fc febd 	bl	8002c54 <main>

08005eda <LoopForever>:

LoopForever:
    b LoopForever
 8005eda:	e7fe      	b.n	8005eda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005edc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ee4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005ee8:	0800e140 	.word	0x0800e140
  ldr r2, =_sbss
 8005eec:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8005ef0:	20002a0c 	.word	0x20002a0c

08005ef4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ef4:	e7fe      	b.n	8005ef4 <ADC1_IRQHandler>
	...

08005ef8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005efc:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <HAL_Init+0x28>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <HAL_Init+0x28>)
 8005f02:	f043 0310 	orr.w	r3, r3, #16
 8005f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f08:	2003      	movs	r0, #3
 8005f0a:	f000 f94f 	bl	80061ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f0e:	200f      	movs	r0, #15
 8005f10:	f000 f808 	bl	8005f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f14:	f7fe fdbc 	bl	8004a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40022000 	.word	0x40022000

08005f24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <HAL_InitTick+0x54>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_InitTick+0x58>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	4619      	mov	r1, r3
 8005f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 f967 	bl	8006216 <HAL_SYSTICK_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e00e      	b.n	8005f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b0f      	cmp	r3, #15
 8005f56:	d80a      	bhi.n	8005f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f58:	2200      	movs	r2, #0
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	f000 f92f 	bl	80061c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f64:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <HAL_InitTick+0x5c>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000058 	.word	0x20000058
 8005f7c:	20000068 	.word	0x20000068
 8005f80:	20000064 	.word	0x20000064

08005f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <HAL_IncTick+0x20>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_IncTick+0x24>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4413      	add	r3, r2
 8005f94:	4a04      	ldr	r2, [pc, #16]	; (8005fa8 <HAL_IncTick+0x24>)
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000068 	.word	0x20000068
 8005fa8:	200029f8 	.word	0x200029f8

08005fac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  return uwTick;  
 8005fb0:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <HAL_GetTick+0x14>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	200029f8 	.word	0x200029f8

08005fc4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fcc:	f7ff ffee 	bl	8005fac <HAL_GetTick>
 8005fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d005      	beq.n	8005fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fde:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <HAL_Delay+0x44>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005fea:	bf00      	nop
 8005fec:	f7ff ffde 	bl	8005fac <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d8f7      	bhi.n	8005fec <HAL_Delay+0x28>
  {
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000068 	.word	0x20000068

0800600c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <__NVIC_SetPriorityGrouping+0x44>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006028:	4013      	ands	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800603c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800603e:	4a04      	ldr	r2, [pc, #16]	; (8006050 <__NVIC_SetPriorityGrouping+0x44>)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	60d3      	str	r3, [r2, #12]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	e000ed00 	.word	0xe000ed00

08006054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <__NVIC_GetPriorityGrouping+0x18>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	f003 0307 	and.w	r3, r3, #7
}
 8006062:	4618      	mov	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	e000ed00 	.word	0xe000ed00

08006070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800607a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607e:	2b00      	cmp	r3, #0
 8006080:	db0b      	blt.n	800609a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	f003 021f 	and.w	r2, r3, #31
 8006088:	4907      	ldr	r1, [pc, #28]	; (80060a8 <__NVIC_EnableIRQ+0x38>)
 800608a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2001      	movs	r0, #1
 8006092:	fa00 f202 	lsl.w	r2, r0, r2
 8006096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	e000e100 	.word	0xe000e100

080060ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	6039      	str	r1, [r7, #0]
 80060b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db0a      	blt.n	80060d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	490c      	ldr	r1, [pc, #48]	; (80060f8 <__NVIC_SetPriority+0x4c>)
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	0112      	lsls	r2, r2, #4
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	440b      	add	r3, r1
 80060d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060d4:	e00a      	b.n	80060ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4908      	ldr	r1, [pc, #32]	; (80060fc <__NVIC_SetPriority+0x50>)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	3b04      	subs	r3, #4
 80060e4:	0112      	lsls	r2, r2, #4
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	440b      	add	r3, r1
 80060ea:	761a      	strb	r2, [r3, #24]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	e000e100 	.word	0xe000e100
 80060fc:	e000ed00 	.word	0xe000ed00

08006100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	; 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f1c3 0307 	rsb	r3, r3, #7
 800611a:	2b04      	cmp	r3, #4
 800611c:	bf28      	it	cs
 800611e:	2304      	movcs	r3, #4
 8006120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3304      	adds	r3, #4
 8006126:	2b06      	cmp	r3, #6
 8006128:	d902      	bls.n	8006130 <NVIC_EncodePriority+0x30>
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3b03      	subs	r3, #3
 800612e:	e000      	b.n	8006132 <NVIC_EncodePriority+0x32>
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006134:	f04f 32ff 	mov.w	r2, #4294967295
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43da      	mvns	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	401a      	ands	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006148:	f04f 31ff 	mov.w	r1, #4294967295
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	fa01 f303 	lsl.w	r3, r1, r3
 8006152:	43d9      	mvns	r1, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006158:	4313      	orrs	r3, r2
         );
}
 800615a:	4618      	mov	r0, r3
 800615c:	3724      	adds	r7, #36	; 0x24
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3b01      	subs	r3, #1
 8006174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006178:	d301      	bcc.n	800617e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800617a:	2301      	movs	r3, #1
 800617c:	e00f      	b.n	800619e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800617e:	4a0a      	ldr	r2, [pc, #40]	; (80061a8 <SysTick_Config+0x40>)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3b01      	subs	r3, #1
 8006184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006186:	210f      	movs	r1, #15
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	f7ff ff8e 	bl	80060ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <SysTick_Config+0x40>)
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006196:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <SysTick_Config+0x40>)
 8006198:	2207      	movs	r2, #7
 800619a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	e000e010 	.word	0xe000e010

080061ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff29 	bl	800600c <__NVIC_SetPriorityGrouping>
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	4603      	mov	r3, r0
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061d4:	f7ff ff3e 	bl	8006054 <__NVIC_GetPriorityGrouping>
 80061d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	6978      	ldr	r0, [r7, #20]
 80061e0:	f7ff ff8e 	bl	8006100 <NVIC_EncodePriority>
 80061e4:	4602      	mov	r2, r0
 80061e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff ff5d 	bl	80060ac <__NVIC_SetPriority>
}
 80061f2:	bf00      	nop
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	4603      	mov	r3, r0
 8006202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff ff31 	bl	8006070 <__NVIC_EnableIRQ>
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ffa2 	bl	8006168 <SysTick_Config>
 8006224:	4603      	mov	r3, r0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e037      	b.n	80062b4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800625a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800625e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f9b8 	bl	800660c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}  
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_DMA_Start_IT+0x20>
 80062d8:	2302      	movs	r3, #2
 80062da:	e04a      	b.n	8006372 <HAL_DMA_Start_IT+0xb6>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d13a      	bne.n	8006364 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f94b 	bl	80065ae <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 020e 	orr.w	r2, r2, #14
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e00f      	b.n	8006352 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 020a 	orr.w	r2, r2, #10
 8006340:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0204 	bic.w	r2, r2, #4
 8006350:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e005      	b.n	8006370 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800636c:	2302      	movs	r3, #2
 800636e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006370:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006388:	2b02      	cmp	r3, #2
 800638a:	d008      	beq.n	800639e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2204      	movs	r2, #4
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e020      	b.n	80063e0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 020e 	bic.w	r2, r2, #14
 80063ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f202 	lsl.w	r2, r1, r2
 80063cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d005      	beq.n	800640e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	e027      	b.n	800645e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 020e 	bic.w	r2, r2, #14
 800641c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2101      	movs	r1, #1
 8006438:	fa01 f202 	lsl.w	r2, r1, r2
 800643c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
    } 
  }
  return status;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	2204      	movs	r2, #4
 8006486:	409a      	lsls	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d024      	beq.n	80064da <HAL_DMA_IRQHandler+0x72>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01f      	beq.n	80064da <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d107      	bne.n	80064b8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0204 	bic.w	r2, r2, #4
 80064b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	2104      	movs	r1, #4
 80064c2:	fa01 f202 	lsl.w	r2, r1, r2
 80064c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d06a      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80064d8:	e065      	b.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	2202      	movs	r2, #2
 80064e0:	409a      	lsls	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d02c      	beq.n	8006544 <HAL_DMA_IRQHandler+0xdc>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d027      	beq.n	8006544 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 020a 	bic.w	r2, r2, #10
 8006510:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	2102      	movs	r1, #2
 8006524:	fa01 f202 	lsl.w	r2, r1, r2
 8006528:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d035      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006542:	e030      	b.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2208      	movs	r2, #8
 800654a:	409a      	lsls	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4013      	ands	r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d028      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d023      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 020e 	bic.w	r2, r2, #14
 800656c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	2101      	movs	r1, #1
 8006578:	fa01 f202 	lsl.w	r2, r1, r2
 800657c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	4798      	blx	r3
    }
  }
}  
 80065a4:	e7ff      	b.n	80065a6 <HAL_DMA_IRQHandler+0x13e>
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f202 	lsl.w	r2, r1, r2
 80065ca:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d108      	bne.n	80065ee <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80065ec:	e007      	b.n	80065fe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	60da      	str	r2, [r3, #12]
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <DMA_CalcBaseAndBitshift+0x34>)
 800661c:	4413      	add	r3, r2
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <DMA_CalcBaseAndBitshift+0x38>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	009a      	lsls	r2, r3, #2
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a06      	ldr	r2, [pc, #24]	; (8006648 <DMA_CalcBaseAndBitshift+0x3c>)
 8006630:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	bffdfff8 	.word	0xbffdfff8
 8006644:	cccccccd 	.word	0xcccccccd
 8006648:	40020000 	.word	0x40020000

0800664c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800665a:	e14e      	b.n	80068fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	2101      	movs	r1, #1
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8140 	beq.w	80068f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d005      	beq.n	800668c <HAL_GPIO_Init+0x40>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d130      	bne.n	80066ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	2203      	movs	r2, #3
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4013      	ands	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066c2:	2201      	movs	r2, #1
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	43db      	mvns	r3, r3
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4013      	ands	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 0201 	and.w	r2, r3, #1
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d017      	beq.n	800672a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	2203      	movs	r2, #3
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4013      	ands	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d123      	bne.n	800677e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	08da      	lsrs	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3208      	adds	r2, #8
 800673e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	220f      	movs	r2, #15
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4013      	ands	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	08da      	lsrs	r2, r3, #3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3208      	adds	r2, #8
 8006778:	6939      	ldr	r1, [r7, #16]
 800677a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	2203      	movs	r2, #3
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	43db      	mvns	r3, r3
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4013      	ands	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 0203 	and.w	r2, r3, #3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 809a 	beq.w	80068f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c0:	4b55      	ldr	r3, [pc, #340]	; (8006918 <HAL_GPIO_Init+0x2cc>)
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	4a54      	ldr	r2, [pc, #336]	; (8006918 <HAL_GPIO_Init+0x2cc>)
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	6193      	str	r3, [r2, #24]
 80067cc:	4b52      	ldr	r3, [pc, #328]	; (8006918 <HAL_GPIO_Init+0x2cc>)
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80067d8:	4a50      	ldr	r2, [pc, #320]	; (800691c <HAL_GPIO_Init+0x2d0>)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	089b      	lsrs	r3, r3, #2
 80067de:	3302      	adds	r3, #2
 80067e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	220f      	movs	r2, #15
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	43db      	mvns	r3, r3
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4013      	ands	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006802:	d013      	beq.n	800682c <HAL_GPIO_Init+0x1e0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a46      	ldr	r2, [pc, #280]	; (8006920 <HAL_GPIO_Init+0x2d4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00d      	beq.n	8006828 <HAL_GPIO_Init+0x1dc>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a45      	ldr	r2, [pc, #276]	; (8006924 <HAL_GPIO_Init+0x2d8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <HAL_GPIO_Init+0x1d8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a44      	ldr	r2, [pc, #272]	; (8006928 <HAL_GPIO_Init+0x2dc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <HAL_GPIO_Init+0x1d4>
 800681c:	2303      	movs	r3, #3
 800681e:	e006      	b.n	800682e <HAL_GPIO_Init+0x1e2>
 8006820:	2305      	movs	r3, #5
 8006822:	e004      	b.n	800682e <HAL_GPIO_Init+0x1e2>
 8006824:	2302      	movs	r3, #2
 8006826:	e002      	b.n	800682e <HAL_GPIO_Init+0x1e2>
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_GPIO_Init+0x1e2>
 800682c:	2300      	movs	r3, #0
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	f002 0203 	and.w	r2, r2, #3
 8006834:	0092      	lsls	r2, r2, #2
 8006836:	4093      	lsls	r3, r2
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800683e:	4937      	ldr	r1, [pc, #220]	; (800691c <HAL_GPIO_Init+0x2d0>)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	3302      	adds	r3, #2
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800684c:	4b37      	ldr	r3, [pc, #220]	; (800692c <HAL_GPIO_Init+0x2e0>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	43db      	mvns	r3, r3
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4013      	ands	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006870:	4a2e      	ldr	r2, [pc, #184]	; (800692c <HAL_GPIO_Init+0x2e0>)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006876:	4b2d      	ldr	r3, [pc, #180]	; (800692c <HAL_GPIO_Init+0x2e0>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	43db      	mvns	r3, r3
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4013      	ands	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800689a:	4a24      	ldr	r2, [pc, #144]	; (800692c <HAL_GPIO_Init+0x2e0>)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068a0:	4b22      	ldr	r3, [pc, #136]	; (800692c <HAL_GPIO_Init+0x2e0>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	43db      	mvns	r3, r3
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4013      	ands	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80068c4:	4a19      	ldr	r2, [pc, #100]	; (800692c <HAL_GPIO_Init+0x2e0>)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068ca:	4b18      	ldr	r3, [pc, #96]	; (800692c <HAL_GPIO_Init+0x2e0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	43db      	mvns	r3, r3
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4013      	ands	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80068ee:	4a0f      	ldr	r2, [pc, #60]	; (800692c <HAL_GPIO_Init+0x2e0>)
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3301      	adds	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	f47f aea9 	bne.w	800665c <HAL_GPIO_Init+0x10>
  }
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40021000 	.word	0x40021000
 800691c:	40010000 	.word	0x40010000
 8006920:	48000400 	.word	0x48000400
 8006924:	48000800 	.word	0x48000800
 8006928:	48000c00 	.word	0x48000c00
 800692c:	40010400 	.word	0x40010400

08006930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	887b      	ldrh	r3, [r7, #2]
 8006942:	4013      	ands	r3, r2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
 800694c:	e001      	b.n	8006952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	807b      	strh	r3, [r7, #2]
 800696c:	4613      	mov	r3, r2
 800696e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006970:	787b      	ldrb	r3, [r7, #1]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006976:	887a      	ldrh	r2, [r7, #2]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800697c:	e002      	b.n	8006984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800697e:	887a      	ldrh	r2, [r7, #2]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800699a:	4b08      	ldr	r3, [pc, #32]	; (80069bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d006      	beq.n	80069b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069a6:	4a05      	ldr	r2, [pc, #20]	; (80069bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fc fba8 	bl	8003104 <HAL_GPIO_EXTI_Callback>
  }
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40010400 	.word	0x40010400

080069c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e081      	b.n	8006ad6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fe f876 	bl	8004ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d107      	bne.n	8006a3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a36:	609a      	str	r2, [r3, #8]
 8006a38:	e006      	b.n	8006a48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d104      	bne.n	8006a5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0201 	orr.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	461a      	mov	r2, r3
 8006aee:	4603      	mov	r3, r0
 8006af0:	817b      	strh	r3, [r7, #10]
 8006af2:	460b      	mov	r3, r1
 8006af4:	813b      	strh	r3, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	f040 80f9 	bne.w	8006cfa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_I2C_Mem_Write+0x34>
 8006b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e0ed      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_I2C_Mem_Write+0x4e>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e0e6      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b36:	f7ff fa39 	bl	8005fac <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2319      	movs	r3, #25
 8006b42:	2201      	movs	r2, #1
 8006b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fbcd 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e0d1      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2221      	movs	r2, #33	; 0x21
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2240      	movs	r2, #64	; 0x40
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b80:	88f8      	ldrh	r0, [r7, #6]
 8006b82:	893a      	ldrh	r2, [r7, #8]
 8006b84:	8979      	ldrh	r1, [r7, #10]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4603      	mov	r3, r0
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fadd 	bl	8007150 <I2C_RequestMemoryWrite>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0a9      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2bff      	cmp	r3, #255	; 0xff
 8006bb0:	d90e      	bls.n	8006bd0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	22ff      	movs	r2, #255	; 0xff
 8006bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	8979      	ldrh	r1, [r7, #10]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fd47 	bl	800765c <I2C_TransferConfig>
 8006bce:	e00f      	b.n	8006bf0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	8979      	ldrh	r1, [r7, #10]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fd36 	bl	800765c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 fbc6 	bl	8007386 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e07b      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d034      	beq.n	8006ca8 <HAL_I2C_Mem_Write+0x1c8>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d130      	bne.n	8006ca8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2180      	movs	r1, #128	; 0x80
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fb49 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e04d      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2bff      	cmp	r3, #255	; 0xff
 8006c68:	d90e      	bls.n	8006c88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	22ff      	movs	r2, #255	; 0xff
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	8979      	ldrh	r1, [r7, #10]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fceb 	bl	800765c <I2C_TransferConfig>
 8006c86:	e00f      	b.n	8006ca8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	8979      	ldrh	r1, [r7, #10]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fcda 	bl	800765c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d19e      	bne.n	8006bf0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fbac 	bl	8007414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e01a      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <HAL_I2C_Mem_Write+0x224>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e000      	b.n	8006cfc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
  }
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	fe00e800 	.word	0xfe00e800

08006d08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	461a      	mov	r2, r3
 8006d16:	4603      	mov	r3, r0
 8006d18:	817b      	strh	r3, [r7, #10]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	813b      	strh	r3, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	f040 80fd 	bne.w	8006f2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_I2C_Mem_Read+0x34>
 8006d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0f1      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_I2C_Mem_Read+0x4e>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e0ea      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d5e:	f7ff f925 	bl	8005fac <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2319      	movs	r3, #25
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fab9 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0d5      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2222      	movs	r2, #34	; 0x22
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2240      	movs	r2, #64	; 0x40
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a3a      	ldr	r2, [r7, #32]
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006da8:	88f8      	ldrh	r0, [r7, #6]
 8006daa:	893a      	ldrh	r2, [r7, #8]
 8006dac:	8979      	ldrh	r1, [r7, #10]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	4603      	mov	r3, r0
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fa1d 	bl	80071f8 <I2C_RequestMemoryRead>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0ad      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2bff      	cmp	r3, #255	; 0xff
 8006dd8:	d90e      	bls.n	8006df8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	22ff      	movs	r2, #255	; 0xff
 8006dde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	8979      	ldrh	r1, [r7, #10]
 8006de8:	4b52      	ldr	r3, [pc, #328]	; (8006f34 <HAL_I2C_Mem_Read+0x22c>)
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fc33 	bl	800765c <I2C_TransferConfig>
 8006df6:	e00f      	b.n	8006e18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	8979      	ldrh	r1, [r7, #10]
 8006e0a:	4b4a      	ldr	r3, [pc, #296]	; (8006f34 <HAL_I2C_Mem_Read+0x22c>)
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fc22 	bl	800765c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2104      	movs	r1, #4
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fa60 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e07c      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d034      	beq.n	8006ed8 <HAL_I2C_Mem_Read+0x1d0>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d130      	bne.n	8006ed8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fa31 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e04d      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2bff      	cmp	r3, #255	; 0xff
 8006e98:	d90e      	bls.n	8006eb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	22ff      	movs	r2, #255	; 0xff
 8006e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	8979      	ldrh	r1, [r7, #10]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 fbd3 	bl	800765c <I2C_TransferConfig>
 8006eb6:	e00f      	b.n	8006ed8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	8979      	ldrh	r1, [r7, #10]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fbc2 	bl	800765c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d19a      	bne.n	8006e18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 fa94 	bl	8007414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e01a      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2220      	movs	r2, #32
 8006efc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <HAL_I2C_Mem_Read+0x230>)
 8006f0a:	400b      	ands	r3, r1
 8006f0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e000      	b.n	8006f2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	80002400 	.word	0x80002400
 8006f38:	fe00e800 	.word	0xfe00e800

08006f3c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	; 0x28
 8006f40:	af02      	add	r7, sp, #8
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	f040 80f3 	bne.w	8007144 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d101      	bne.n	8006f72 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e0e9      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_I2C_IsDeviceReady+0x44>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e0e2      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2224      	movs	r2, #36	; 0x24
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d107      	bne.n	8006fae <HAL_I2C_IsDeviceReady+0x72>
 8006f9e:	897b      	ldrh	r3, [r7, #10]
 8006fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fac:	e006      	b.n	8006fbc <HAL_I2C_IsDeviceReady+0x80>
 8006fae:	897b      	ldrh	r3, [r7, #10]
 8006fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fb8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006fc2:	f7fe fff3 	bl	8005fac <HAL_GetTick>
 8006fc6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006ff4:	e034      	b.n	8007060 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d01a      	beq.n	8007034 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ffe:	f7fe ffd5 	bl	8005fac <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d302      	bcc.n	8007014 <HAL_I2C_IsDeviceReady+0xd8>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10f      	bne.n	8007034 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	f043 0220 	orr.w	r2, r3, #32
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e088      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b20      	cmp	r3, #32
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b10      	cmp	r3, #16
 8007056:	bf0c      	ite	eq
 8007058:	2301      	moveq	r3, #1
 800705a:	2300      	movne	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <HAL_I2C_IsDeviceReady+0x130>
 8007066:	7fbb      	ldrb	r3, [r7, #30]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0c4      	beq.n	8006ff6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b10      	cmp	r3, #16
 8007078:	d01a      	beq.n	80070b0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2200      	movs	r2, #0
 8007082:	2120      	movs	r1, #32
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f92f 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e058      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2220      	movs	r2, #32
 800709a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e04a      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2200      	movs	r2, #0
 80070b8:	2120      	movs	r1, #32
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f914 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e03d      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2210      	movs	r2, #16
 80070d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2220      	movs	r2, #32
 80070d8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d118      	bne.n	8007114 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2120      	movs	r1, #32
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f8f3 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e01c      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2220      	movs	r2, #32
 8007112:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3301      	adds	r3, #1
 8007118:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	f63f af39 	bhi.w	8006f96 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	4608      	mov	r0, r1
 800715a:	4611      	mov	r1, r2
 800715c:	461a      	mov	r2, r3
 800715e:	4603      	mov	r3, r0
 8007160:	817b      	strh	r3, [r7, #10]
 8007162:	460b      	mov	r3, r1
 8007164:	813b      	strh	r3, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	8979      	ldrh	r1, [r7, #10]
 8007170:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <I2C_RequestMemoryWrite+0xa4>)
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fa6f 	bl	800765c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	69b9      	ldr	r1, [r7, #24]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f8ff 	bl	8007386 <I2C_WaitOnTXISFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e02c      	b.n	80071ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d105      	bne.n	80071a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007198:	893b      	ldrh	r3, [r7, #8]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28
 80071a2:	e015      	b.n	80071d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	69b9      	ldr	r1, [r7, #24]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f8e5 	bl	8007386 <I2C_WaitOnTXISFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e012      	b.n	80071ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071c6:	893b      	ldrh	r3, [r7, #8]
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2200      	movs	r2, #0
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f884 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	80002000 	.word	0x80002000

080071f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	4603      	mov	r3, r0
 8007208:	817b      	strh	r3, [r7, #10]
 800720a:	460b      	mov	r3, r1
 800720c:	813b      	strh	r3, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	8979      	ldrh	r1, [r7, #10]
 8007218:	4b20      	ldr	r3, [pc, #128]	; (800729c <I2C_RequestMemoryRead+0xa4>)
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	2300      	movs	r3, #0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 fa1c 	bl	800765c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	69b9      	ldr	r1, [r7, #24]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f8ac 	bl	8007386 <I2C_WaitOnTXISFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e02c      	b.n	8007292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d105      	bne.n	800724a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800723e:	893b      	ldrh	r3, [r7, #8]
 8007240:	b2da      	uxtb	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	629a      	str	r2, [r3, #40]	; 0x28
 8007248:	e015      	b.n	8007276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	b29b      	uxth	r3, r3
 8007250:	b2da      	uxtb	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f892 	bl	8007386 <I2C_WaitOnTXISFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e012      	b.n	8007292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800726c:	893b      	ldrh	r3, [r7, #8]
 800726e:	b2da      	uxtb	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2200      	movs	r2, #0
 800727e:	2140      	movs	r1, #64	; 0x40
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f831 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	80002000 	.word	0x80002000

080072a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d103      	bne.n	80072be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d007      	beq.n	80072dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	619a      	str	r2, [r3, #24]
  }
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072f8:	e031      	b.n	800735e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d02d      	beq.n	800735e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007302:	f7fe fe53 	bl	8005fac <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d122      	bne.n	800735e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	4013      	ands	r3, r2
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	429a      	cmp	r2, r3
 8007326:	bf0c      	ite	eq
 8007328:	2301      	moveq	r3, #1
 800732a:	2300      	movne	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	429a      	cmp	r2, r3
 8007334:	d113      	bne.n	800735e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	f043 0220 	orr.w	r2, r3, #32
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e00f      	b.n	800737e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4013      	ands	r3, r2
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	429a      	cmp	r2, r3
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	429a      	cmp	r2, r3
 800737a:	d0be      	beq.n	80072fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007392:	e033      	b.n	80073fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f87f 	bl	800749c <I2C_IsErrorOccurred>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e031      	b.n	800740c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d025      	beq.n	80073fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b0:	f7fe fdfc 	bl	8005fac <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d11a      	bne.n	80073fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d013      	beq.n	80073fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d8:	f043 0220 	orr.w	r2, r3, #32
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e007      	b.n	800740c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b02      	cmp	r3, #2
 8007408:	d1c4      	bne.n	8007394 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007420:	e02f      	b.n	8007482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f838 	bl	800749c <I2C_IsErrorOccurred>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e02d      	b.n	8007492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007436:	f7fe fdb9 	bl	8005fac <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d11a      	bne.n	8007482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b20      	cmp	r3, #32
 8007458:	d013      	beq.n	8007482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745e:	f043 0220 	orr.w	r2, r3, #32
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e007      	b.n	8007492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b20      	cmp	r3, #32
 800748e:	d1c8      	bne.n	8007422 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d068      	beq.n	800759a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2210      	movs	r2, #16
 80074ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074d0:	e049      	b.n	8007566 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d8:	d045      	beq.n	8007566 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074da:	f7fe fd67 	bl	8005fac <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d302      	bcc.n	80074f0 <I2C_IsErrorOccurred+0x54>
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d13a      	bne.n	8007566 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007502:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800750e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007512:	d121      	bne.n	8007558 <I2C_IsErrorOccurred+0xbc>
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800751a:	d01d      	beq.n	8007558 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800751c:	7cfb      	ldrb	r3, [r7, #19]
 800751e:	2b20      	cmp	r3, #32
 8007520:	d01a      	beq.n	8007558 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007530:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007532:	f7fe fd3b 	bl	8005fac <HAL_GetTick>
 8007536:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007538:	e00e      	b.n	8007558 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800753a:	f7fe fd37 	bl	8005fac <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b19      	cmp	r3, #25
 8007546:	d907      	bls.n	8007558 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	f043 0320 	orr.w	r3, r3, #32
 800754e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007556:	e006      	b.n	8007566 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b20      	cmp	r3, #32
 8007564:	d1e9      	bne.n	800753a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b20      	cmp	r3, #32
 8007572:	d003      	beq.n	800757c <I2C_IsErrorOccurred+0xe0>
 8007574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0aa      	beq.n	80074d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800757c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2220      	movs	r2, #32
 800758a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	f043 0304 	orr.w	r3, r3, #4
 8007592:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f043 0308 	orr.w	r3, r3, #8
 80075d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	f043 0302 	orr.w	r3, r3, #2
 80075f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01c      	beq.n	800764a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff fe45 	bl	80072a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6859      	ldr	r1, [r3, #4]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <I2C_IsErrorOccurred+0x1bc>)
 8007622:	400b      	ands	r3, r1
 8007624:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	431a      	orrs	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800764a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800764e:	4618      	mov	r0, r3
 8007650:	3728      	adds	r7, #40	; 0x28
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	fe00e800 	.word	0xfe00e800

0800765c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	607b      	str	r3, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	817b      	strh	r3, [r7, #10]
 800766a:	4613      	mov	r3, r2
 800766c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800766e:	897b      	ldrh	r3, [r7, #10]
 8007670:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007674:	7a7b      	ldrb	r3, [r7, #9]
 8007676:	041b      	lsls	r3, r3, #16
 8007678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800767c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	4313      	orrs	r3, r2
 8007686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800768a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	0d5b      	lsrs	r3, r3, #21
 8007696:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800769a:	4b08      	ldr	r3, [pc, #32]	; (80076bc <I2C_TransferConfig+0x60>)
 800769c:	430b      	orrs	r3, r1
 800769e:	43db      	mvns	r3, r3
 80076a0:	ea02 0103 	and.w	r1, r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	03ff63ff 	.word	0x03ff63ff

080076c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d138      	bne.n	8007748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e032      	b.n	800774a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2224      	movs	r2, #36	; 0x24
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	e000      	b.n	800774a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
  }
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b20      	cmp	r3, #32
 800776a:	d139      	bne.n	80077e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007776:	2302      	movs	r3, #2
 8007778:	e033      	b.n	80077e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2224      	movs	r2, #36	; 0x24
 8007786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	e000      	b.n	80077e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
  }
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007800:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f001 b823 	b.w	800885c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800781a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 817d 	beq.w	8007b26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800782c:	4bbc      	ldr	r3, [pc, #752]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f003 030c 	and.w	r3, r3, #12
 8007834:	2b04      	cmp	r3, #4
 8007836:	d00c      	beq.n	8007852 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007838:	4bb9      	ldr	r3, [pc, #740]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f003 030c 	and.w	r3, r3, #12
 8007840:	2b08      	cmp	r3, #8
 8007842:	d15c      	bne.n	80078fe <HAL_RCC_OscConfig+0x10e>
 8007844:	4bb6      	ldr	r3, [pc, #728]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007850:	d155      	bne.n	80078fe <HAL_RCC_OscConfig+0x10e>
 8007852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007856:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800785e:	fa93 f3a3 	rbit	r3, r3
 8007862:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007866:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786a:	fab3 f383 	clz	r3, r3
 800786e:	b2db      	uxtb	r3, r3
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b01      	cmp	r3, #1
 800787c:	d102      	bne.n	8007884 <HAL_RCC_OscConfig+0x94>
 800787e:	4ba8      	ldr	r3, [pc, #672]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	e015      	b.n	80078b0 <HAL_RCC_OscConfig+0xc0>
 8007884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007888:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007890:	fa93 f3a3 	rbit	r3, r3
 8007894:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800789c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80078a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80078a4:	fa93 f3a3 	rbit	r3, r3
 80078a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80078ac:	4b9c      	ldr	r3, [pc, #624]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80078b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80078bc:	fa92 f2a2 	rbit	r2, r2
 80078c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80078c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80078c8:	fab2 f282 	clz	r2, r2
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	f042 0220 	orr.w	r2, r2, #32
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	f002 021f 	and.w	r2, r2, #31
 80078d8:	2101      	movs	r1, #1
 80078da:	fa01 f202 	lsl.w	r2, r1, r2
 80078de:	4013      	ands	r3, r2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 811f 	beq.w	8007b24 <HAL_RCC_OscConfig+0x334>
 80078e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 8116 	bne.w	8007b24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f000 bfaf 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800790e:	d106      	bne.n	800791e <HAL_RCC_OscConfig+0x12e>
 8007910:	4b83      	ldr	r3, [pc, #524]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a82      	ldr	r2, [pc, #520]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	e036      	b.n	800798c <HAL_RCC_OscConfig+0x19c>
 800791e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10c      	bne.n	8007948 <HAL_RCC_OscConfig+0x158>
 800792e:	4b7c      	ldr	r3, [pc, #496]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a7b      	ldr	r2, [pc, #492]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	4b79      	ldr	r3, [pc, #484]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a78      	ldr	r2, [pc, #480]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	e021      	b.n	800798c <HAL_RCC_OscConfig+0x19c>
 8007948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007958:	d10c      	bne.n	8007974 <HAL_RCC_OscConfig+0x184>
 800795a:	4b71      	ldr	r3, [pc, #452]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a70      	ldr	r2, [pc, #448]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	4b6e      	ldr	r3, [pc, #440]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a6d      	ldr	r2, [pc, #436]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 800796c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	e00b      	b.n	800798c <HAL_RCC_OscConfig+0x19c>
 8007974:	4b6a      	ldr	r3, [pc, #424]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a69      	ldr	r2, [pc, #420]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 800797a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	4b67      	ldr	r3, [pc, #412]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a66      	ldr	r2, [pc, #408]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800798a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800798c:	4b64      	ldr	r3, [pc, #400]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	f023 020f 	bic.w	r2, r3, #15
 8007994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	495f      	ldr	r1, [pc, #380]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d059      	beq.n	8007a6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b6:	f7fe faf9 	bl	8005fac <HAL_GetTick>
 80079ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079c0:	f7fe faf4 	bl	8005fac <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b64      	cmp	r3, #100	; 0x64
 80079ce:	d902      	bls.n	80079d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	f000 bf43 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
 80079d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80079e2:	fa93 f3a3 	rbit	r3, r3
 80079e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80079ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ee:	fab3 f383 	clz	r3, r3
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	095b      	lsrs	r3, r3, #5
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d102      	bne.n	8007a08 <HAL_RCC_OscConfig+0x218>
 8007a02:	4b47      	ldr	r3, [pc, #284]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	e015      	b.n	8007a34 <HAL_RCC_OscConfig+0x244>
 8007a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a0c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007a14:	fa93 f3a3 	rbit	r3, r3
 8007a18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007a24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007a28:	fa93 f3a3 	rbit	r3, r3
 8007a2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007a30:	4b3b      	ldr	r3, [pc, #236]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a38:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007a3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007a40:	fa92 f2a2 	rbit	r2, r2
 8007a44:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007a48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007a4c:	fab2 f282 	clz	r2, r2
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	f042 0220 	orr.w	r2, r2, #32
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	f002 021f 	and.w	r2, r2, #31
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0ab      	beq.n	80079c0 <HAL_RCC_OscConfig+0x1d0>
 8007a68:	e05d      	b.n	8007b26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6a:	f7fe fa9f 	bl	8005fac <HAL_GetTick>
 8007a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a72:	e00a      	b.n	8007a8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a74:	f7fe fa9a 	bl	8005fac <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b64      	cmp	r3, #100	; 0x64
 8007a82:	d902      	bls.n	8007a8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	f000 bee9 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
 8007a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007a96:	fa93 f3a3 	rbit	r3, r3
 8007a9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007a9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aa2:	fab3 f383 	clz	r3, r3
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	095b      	lsrs	r3, r3, #5
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f043 0301 	orr.w	r3, r3, #1
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d102      	bne.n	8007abc <HAL_RCC_OscConfig+0x2cc>
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	e015      	b.n	8007ae8 <HAL_RCC_OscConfig+0x2f8>
 8007abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ac0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007ac8:	fa93 f3a3 	rbit	r3, r3
 8007acc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ad4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007ad8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007adc:	fa93 f3a3 	rbit	r3, r3
 8007ae0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <HAL_RCC_OscConfig+0x330>)
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007aec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007af0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007af4:	fa92 f2a2 	rbit	r2, r2
 8007af8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007afc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007b00:	fab2 f282 	clz	r2, r2
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	f042 0220 	orr.w	r2, r2, #32
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	f002 021f 	and.w	r2, r2, #31
 8007b10:	2101      	movs	r1, #1
 8007b12:	fa01 f202 	lsl.w	r2, r1, r2
 8007b16:	4013      	ands	r3, r2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1ab      	bne.n	8007a74 <HAL_RCC_OscConfig+0x284>
 8007b1c:	e003      	b.n	8007b26 <HAL_RCC_OscConfig+0x336>
 8007b1e:	bf00      	nop
 8007b20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 817d 	beq.w	8007e36 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007b3c:	4ba6      	ldr	r3, [pc, #664]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f003 030c 	and.w	r3, r3, #12
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007b48:	4ba3      	ldr	r3, [pc, #652]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f003 030c 	and.w	r3, r3, #12
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d172      	bne.n	8007c3a <HAL_RCC_OscConfig+0x44a>
 8007b54:	4ba0      	ldr	r3, [pc, #640]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d16c      	bne.n	8007c3a <HAL_RCC_OscConfig+0x44a>
 8007b60:	2302      	movs	r3, #2
 8007b62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007b6a:	fa93 f3a3 	rbit	r3, r3
 8007b6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007b72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b76:	fab3 f383 	clz	r3, r3
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f043 0301 	orr.w	r3, r3, #1
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d102      	bne.n	8007b90 <HAL_RCC_OscConfig+0x3a0>
 8007b8a:	4b93      	ldr	r3, [pc, #588]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	e013      	b.n	8007bb8 <HAL_RCC_OscConfig+0x3c8>
 8007b90:	2302      	movs	r3, #2
 8007b92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007b9a:	fa93 f3a3 	rbit	r3, r3
 8007b9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007ba8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007bac:	fa93 f3a3 	rbit	r3, r3
 8007bb0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007bb4:	4b88      	ldr	r3, [pc, #544]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2202      	movs	r2, #2
 8007bba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007bbe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007bc2:	fa92 f2a2 	rbit	r2, r2
 8007bc6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007bca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007bce:	fab2 f282 	clz	r2, r2
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	f042 0220 	orr.w	r2, r2, #32
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	f002 021f 	and.w	r2, r2, #31
 8007bde:	2101      	movs	r1, #1
 8007be0:	fa01 f202 	lsl.w	r2, r1, r2
 8007be4:	4013      	ands	r3, r2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <HAL_RCC_OscConfig+0x410>
 8007bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d002      	beq.n	8007c00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f000 be2e 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c00:	4b75      	ldr	r3, [pc, #468]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	21f8      	movs	r1, #248	; 0xf8
 8007c16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007c1e:	fa91 f1a1 	rbit	r1, r1
 8007c22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007c26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007c2a:	fab1 f181 	clz	r1, r1
 8007c2e:	b2c9      	uxtb	r1, r1
 8007c30:	408b      	lsls	r3, r1
 8007c32:	4969      	ldr	r1, [pc, #420]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c38:	e0fd      	b.n	8007e36 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8088 	beq.w	8007d5c <HAL_RCC_OscConfig+0x56c>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007c56:	fa93 f3a3 	rbit	r3, r3
 8007c5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007c5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c62:	fab3 f383 	clz	r3, r3
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	461a      	mov	r2, r3
 8007c74:	2301      	movs	r3, #1
 8007c76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c78:	f7fe f998 	bl	8005fac <HAL_GetTick>
 8007c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c80:	e00a      	b.n	8007c98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c82:	f7fe f993 	bl	8005fac <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d902      	bls.n	8007c98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	f000 bde2 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007ca2:	fa93 f3a3 	rbit	r3, r3
 8007ca6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007caa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cae:	fab3 f383 	clz	r3, r3
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d102      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x4d8>
 8007cc2:	4b45      	ldr	r3, [pc, #276]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	e013      	b.n	8007cf0 <HAL_RCC_OscConfig+0x500>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007cd2:	fa93 f3a3 	rbit	r3, r3
 8007cd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007cda:	2302      	movs	r3, #2
 8007cdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007ce0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007ce4:	fa93 f3a3 	rbit	r3, r3
 8007ce8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007cec:	4b3a      	ldr	r3, [pc, #232]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007cf6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007cfa:	fa92 f2a2 	rbit	r2, r2
 8007cfe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007d02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007d06:	fab2 f282 	clz	r2, r2
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	f042 0220 	orr.w	r2, r2, #32
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	f002 021f 	and.w	r2, r2, #31
 8007d16:	2101      	movs	r1, #1
 8007d18:	fa01 f202 	lsl.w	r2, r1, r2
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0af      	beq.n	8007c82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d22:	4b2d      	ldr	r3, [pc, #180]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	21f8      	movs	r1, #248	; 0xf8
 8007d38:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007d40:	fa91 f1a1 	rbit	r1, r1
 8007d44:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007d48:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007d4c:	fab1 f181 	clz	r1, r1
 8007d50:	b2c9      	uxtb	r1, r1
 8007d52:	408b      	lsls	r3, r1
 8007d54:	4920      	ldr	r1, [pc, #128]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	600b      	str	r3, [r1, #0]
 8007d5a:	e06c      	b.n	8007e36 <HAL_RCC_OscConfig+0x646>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d66:	fa93 f3a3 	rbit	r3, r3
 8007d6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d72:	fab3 f383 	clz	r3, r3
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	461a      	mov	r2, r3
 8007d84:	2300      	movs	r3, #0
 8007d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d88:	f7fe f910 	bl	8005fac <HAL_GetTick>
 8007d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d90:	e00a      	b.n	8007da8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d92:	f7fe f90b 	bl	8005fac <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d902      	bls.n	8007da8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	f000 bd5a 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
 8007da8:	2302      	movs	r3, #2
 8007daa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007db2:	fa93 f3a3 	rbit	r3, r3
 8007db6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dbe:	fab3 f383 	clz	r3, r3
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	f043 0301 	orr.w	r3, r3, #1
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d104      	bne.n	8007ddc <HAL_RCC_OscConfig+0x5ec>
 8007dd2:	4b01      	ldr	r3, [pc, #4]	; (8007dd8 <HAL_RCC_OscConfig+0x5e8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	e015      	b.n	8007e04 <HAL_RCC_OscConfig+0x614>
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	2302      	movs	r3, #2
 8007dde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007de6:	fa93 f3a3 	rbit	r3, r3
 8007dea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007dee:	2302      	movs	r3, #2
 8007df0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007df4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007df8:	fa93 f3a3 	rbit	r3, r3
 8007dfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007e00:	4bc8      	ldr	r3, [pc, #800]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	2202      	movs	r2, #2
 8007e06:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007e0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007e0e:	fa92 f2a2 	rbit	r2, r2
 8007e12:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007e16:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007e1a:	fab2 f282 	clz	r2, r2
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	f042 0220 	orr.w	r2, r2, #32
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	f002 021f 	and.w	r2, r2, #31
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e30:	4013      	ands	r3, r2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1ad      	bne.n	8007d92 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8110 	beq.w	800806c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d079      	beq.n	8007f50 <HAL_RCC_OscConfig+0x760>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e66:	fa93 f3a3 	rbit	r3, r3
 8007e6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e72:	fab3 f383 	clz	r3, r3
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	461a      	mov	r2, r3
 8007e7a:	4bab      	ldr	r3, [pc, #684]	; (8008128 <HAL_RCC_OscConfig+0x938>)
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	461a      	mov	r2, r3
 8007e82:	2301      	movs	r3, #1
 8007e84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e86:	f7fe f891 	bl	8005fac <HAL_GetTick>
 8007e8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e8e:	e00a      	b.n	8007ea6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e90:	f7fe f88c 	bl	8005fac <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d902      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	f000 bcdb 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007eb0:	fa93 f3a3 	rbit	r3, r3
 8007eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ebc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ec8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	fa93 f2a3 	rbit	r2, r3
 8007ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	fa93 f2a3 	rbit	r2, r3
 8007ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007efe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f00:	4b88      	ldr	r3, [pc, #544]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 8007f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007f0c:	2102      	movs	r1, #2
 8007f0e:	6019      	str	r1, [r3, #0]
 8007f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	fa93 f1a3 	rbit	r1, r3
 8007f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f26:	6019      	str	r1, [r3, #0]
  return result;
 8007f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	fab3 f383 	clz	r3, r3
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 031f 	and.w	r3, r3, #31
 8007f42:	2101      	movs	r1, #1
 8007f44:	fa01 f303 	lsl.w	r3, r1, r3
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0a0      	beq.n	8007e90 <HAL_RCC_OscConfig+0x6a0>
 8007f4e:	e08d      	b.n	800806c <HAL_RCC_OscConfig+0x87c>
 8007f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f58:	2201      	movs	r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	fa93 f2a3 	rbit	r2, r3
 8007f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f72:	601a      	str	r2, [r3, #0]
  return result;
 8007f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f7e:	fab3 f383 	clz	r3, r3
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	4b68      	ldr	r3, [pc, #416]	; (8008128 <HAL_RCC_OscConfig+0x938>)
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f92:	f7fe f80b 	bl	8005fac <HAL_GetTick>
 8007f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f9a:	e00a      	b.n	8007fb2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f9c:	f7fe f806 	bl	8005fac <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d902      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	f000 bc55 	b.w	800885c <HAL_RCC_OscConfig+0x106c>
 8007fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007fba:	2202      	movs	r2, #2
 8007fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fc2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	fa93 f2a3 	rbit	r2, r3
 8007fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007fde:	2202      	movs	r2, #2
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	fa93 f2a3 	rbit	r2, r3
 8007ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008002:	2202      	movs	r2, #2
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800800a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	fa93 f2a3 	rbit	r2, r3
 8008014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008018:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800801c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800801e:	4b41      	ldr	r3, [pc, #260]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 8008020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008026:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800802a:	2102      	movs	r1, #2
 800802c:	6019      	str	r1, [r3, #0]
 800802e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008032:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	fa93 f1a3 	rbit	r1, r3
 800803c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008040:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008044:	6019      	str	r1, [r3, #0]
  return result;
 8008046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800804a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	fab3 f383 	clz	r3, r3
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 031f 	and.w	r3, r3, #31
 8008060:	2101      	movs	r1, #1
 8008062:	fa01 f303 	lsl.w	r3, r1, r3
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d197      	bne.n	8007f9c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800806c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 81a1 	beq.w	80083c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008082:	2300      	movs	r3, #0
 8008084:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008088:	4b26      	ldr	r3, [pc, #152]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d116      	bne.n	80080c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008094:	4b23      	ldr	r3, [pc, #140]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	4a22      	ldr	r2, [pc, #136]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 800809a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809e:	61d3      	str	r3, [r2, #28]
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80080a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80080ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <HAL_RCC_OscConfig+0x93c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d11a      	bne.n	8008104 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080ce:	4b17      	ldr	r3, [pc, #92]	; (800812c <HAL_RCC_OscConfig+0x93c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a16      	ldr	r2, [pc, #88]	; (800812c <HAL_RCC_OscConfig+0x93c>)
 80080d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080da:	f7fd ff67 	bl	8005fac <HAL_GetTick>
 80080de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e2:	e009      	b.n	80080f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080e4:	f7fd ff62 	bl	8005fac <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b64      	cmp	r3, #100	; 0x64
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e3b1      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <HAL_RCC_OscConfig+0x93c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0ef      	beq.n	80080e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008108:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d10d      	bne.n	8008130 <HAL_RCC_OscConfig+0x940>
 8008114:	4b03      	ldr	r3, [pc, #12]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	4a02      	ldr	r2, [pc, #8]	; (8008124 <HAL_RCC_OscConfig+0x934>)
 800811a:	f043 0301 	orr.w	r3, r3, #1
 800811e:	6213      	str	r3, [r2, #32]
 8008120:	e03c      	b.n	800819c <HAL_RCC_OscConfig+0x9ac>
 8008122:	bf00      	nop
 8008124:	40021000 	.word	0x40021000
 8008128:	10908120 	.word	0x10908120
 800812c:	40007000 	.word	0x40007000
 8008130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10c      	bne.n	800815a <HAL_RCC_OscConfig+0x96a>
 8008140:	4bc1      	ldr	r3, [pc, #772]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	4ac0      	ldr	r2, [pc, #768]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	6213      	str	r3, [r2, #32]
 800814c:	4bbe      	ldr	r3, [pc, #760]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	4abd      	ldr	r2, [pc, #756]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008152:	f023 0304 	bic.w	r3, r3, #4
 8008156:	6213      	str	r3, [r2, #32]
 8008158:	e020      	b.n	800819c <HAL_RCC_OscConfig+0x9ac>
 800815a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800815e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	2b05      	cmp	r3, #5
 8008168:	d10c      	bne.n	8008184 <HAL_RCC_OscConfig+0x994>
 800816a:	4bb7      	ldr	r3, [pc, #732]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	4ab6      	ldr	r2, [pc, #728]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008170:	f043 0304 	orr.w	r3, r3, #4
 8008174:	6213      	str	r3, [r2, #32]
 8008176:	4bb4      	ldr	r3, [pc, #720]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	4ab3      	ldr	r2, [pc, #716]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 800817c:	f043 0301 	orr.w	r3, r3, #1
 8008180:	6213      	str	r3, [r2, #32]
 8008182:	e00b      	b.n	800819c <HAL_RCC_OscConfig+0x9ac>
 8008184:	4bb0      	ldr	r3, [pc, #704]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	4aaf      	ldr	r2, [pc, #700]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 800818a:	f023 0301 	bic.w	r3, r3, #1
 800818e:	6213      	str	r3, [r2, #32]
 8008190:	4bad      	ldr	r3, [pc, #692]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	4aac      	ldr	r2, [pc, #688]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008196:	f023 0304 	bic.w	r3, r3, #4
 800819a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800819c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8081 	beq.w	80082b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ae:	f7fd fefd 	bl	8005fac <HAL_GetTick>
 80081b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b6:	e00b      	b.n	80081d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081b8:	f7fd fef8 	bl	8005fac <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d901      	bls.n	80081d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e345      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
 80081d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80081d8:	2202      	movs	r2, #2
 80081da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	fa93 f2a3 	rbit	r2, r3
 80081ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80081fc:	2202      	movs	r2, #2
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008204:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	fa93 f2a3 	rbit	r2, r3
 800820e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008212:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008216:	601a      	str	r2, [r3, #0]
  return result;
 8008218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800821c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008220:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008222:	fab3 f383 	clz	r3, r3
 8008226:	b2db      	uxtb	r3, r3
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	b2db      	uxtb	r3, r3
 800822c:	f043 0302 	orr.w	r3, r3, #2
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d102      	bne.n	800823c <HAL_RCC_OscConfig+0xa4c>
 8008236:	4b84      	ldr	r3, [pc, #528]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	e013      	b.n	8008264 <HAL_RCC_OscConfig+0xa74>
 800823c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008240:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008244:	2202      	movs	r2, #2
 8008246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800824c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	fa93 f2a3 	rbit	r2, r3
 8008256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800825a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	4b79      	ldr	r3, [pc, #484]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008264:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008268:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800826c:	2102      	movs	r1, #2
 800826e:	6011      	str	r1, [r2, #0]
 8008270:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008274:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	fa92 f1a2 	rbit	r1, r2
 800827e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008282:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008286:	6011      	str	r1, [r2, #0]
  return result;
 8008288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800828c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	fab2 f282 	clz	r2, r2
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	f002 021f 	and.w	r2, r2, #31
 80082a2:	2101      	movs	r1, #1
 80082a4:	fa01 f202 	lsl.w	r2, r1, r2
 80082a8:	4013      	ands	r3, r2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d084      	beq.n	80081b8 <HAL_RCC_OscConfig+0x9c8>
 80082ae:	e07f      	b.n	80083b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082b0:	f7fd fe7c 	bl	8005fac <HAL_GetTick>
 80082b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b8:	e00b      	b.n	80082d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ba:	f7fd fe77 	bl	8005fac <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e2c4      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
 80082d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80082da:	2202      	movs	r2, #2
 80082dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	fa93 f2a3 	rbit	r2, r3
 80082ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80082fe:	2202      	movs	r2, #2
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008306:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	fa93 f2a3 	rbit	r2, r3
 8008310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008314:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008318:	601a      	str	r2, [r3, #0]
  return result;
 800831a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800831e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008322:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008324:	fab3 f383 	clz	r3, r3
 8008328:	b2db      	uxtb	r3, r3
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f043 0302 	orr.w	r3, r3, #2
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b02      	cmp	r3, #2
 8008336:	d102      	bne.n	800833e <HAL_RCC_OscConfig+0xb4e>
 8008338:	4b43      	ldr	r3, [pc, #268]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	e013      	b.n	8008366 <HAL_RCC_OscConfig+0xb76>
 800833e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008342:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008346:	2202      	movs	r2, #2
 8008348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800834a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800834e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	fa93 f2a3 	rbit	r2, r3
 8008358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800835c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	4b39      	ldr	r3, [pc, #228]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800836a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800836e:	2102      	movs	r1, #2
 8008370:	6011      	str	r1, [r2, #0]
 8008372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008376:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	fa92 f1a2 	rbit	r1, r2
 8008380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008384:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008388:	6011      	str	r1, [r2, #0]
  return result;
 800838a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800838e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	fab2 f282 	clz	r2, r2
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	f002 021f 	and.w	r2, r2, #31
 80083a4:	2101      	movs	r1, #1
 80083a6:	fa01 f202 	lsl.w	r2, r1, r2
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d184      	bne.n	80082ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d105      	bne.n	80083c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083b8:	4b23      	ldr	r3, [pc, #140]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	4a22      	ldr	r2, [pc, #136]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 80083be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8242 	beq.w	800885a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083d6:	4b1c      	ldr	r3, [pc, #112]	; (8008448 <HAL_RCC_OscConfig+0xc58>)
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f003 030c 	and.w	r3, r3, #12
 80083de:	2b08      	cmp	r3, #8
 80083e0:	f000 8213 	beq.w	800880a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	f040 8162 	bne.w	80086ba <HAL_RCC_OscConfig+0xeca>
 80083f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80083fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008408:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	fa93 f2a3 	rbit	r2, r3
 8008412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008416:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800841a:	601a      	str	r2, [r3, #0]
  return result;
 800841c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008420:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008424:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008426:	fab3 f383 	clz	r3, r3
 800842a:	b2db      	uxtb	r3, r3
 800842c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	461a      	mov	r2, r3
 8008438:	2300      	movs	r3, #0
 800843a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800843c:	f7fd fdb6 	bl	8005fac <HAL_GetTick>
 8008440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008444:	e00c      	b.n	8008460 <HAL_RCC_OscConfig+0xc70>
 8008446:	bf00      	nop
 8008448:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844c:	f7fd fdae 	bl	8005fac <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e1fd      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
 8008460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008464:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008468:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800846c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800846e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008472:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	fa93 f2a3 	rbit	r2, r3
 800847c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008480:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008484:	601a      	str	r2, [r3, #0]
  return result;
 8008486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800848a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800848e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008490:	fab3 f383 	clz	r3, r3
 8008494:	b2db      	uxtb	r3, r3
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	b2db      	uxtb	r3, r3
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d102      	bne.n	80084aa <HAL_RCC_OscConfig+0xcba>
 80084a4:	4bb0      	ldr	r3, [pc, #704]	; (8008768 <HAL_RCC_OscConfig+0xf78>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	e027      	b.n	80084fa <HAL_RCC_OscConfig+0xd0a>
 80084aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80084b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	fa93 f2a3 	rbit	r2, r3
 80084c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80084d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	fa93 f2a3 	rbit	r2, r3
 80084ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	4b9c      	ldr	r3, [pc, #624]	; (8008768 <HAL_RCC_OscConfig+0xf78>)
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008502:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008506:	6011      	str	r1, [r2, #0]
 8008508:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800850c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	fa92 f1a2 	rbit	r1, r2
 8008516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800851a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800851e:	6011      	str	r1, [r2, #0]
  return result;
 8008520:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008524:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008528:	6812      	ldr	r2, [r2, #0]
 800852a:	fab2 f282 	clz	r2, r2
 800852e:	b2d2      	uxtb	r2, r2
 8008530:	f042 0220 	orr.w	r2, r2, #32
 8008534:	b2d2      	uxtb	r2, r2
 8008536:	f002 021f 	and.w	r2, r2, #31
 800853a:	2101      	movs	r1, #1
 800853c:	fa01 f202 	lsl.w	r2, r1, r2
 8008540:	4013      	ands	r3, r2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d182      	bne.n	800844c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008546:	4b88      	ldr	r3, [pc, #544]	; (8008768 <HAL_RCC_OscConfig+0xf78>)
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800854e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800855a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800855e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	430b      	orrs	r3, r1
 8008568:	497f      	ldr	r1, [pc, #508]	; (8008768 <HAL_RCC_OscConfig+0xf78>)
 800856a:	4313      	orrs	r3, r2
 800856c:	604b      	str	r3, [r1, #4]
 800856e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008572:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008576:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800857a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800857c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008580:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	fa93 f2a3 	rbit	r2, r3
 800858a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800858e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008592:	601a      	str	r2, [r3, #0]
  return result;
 8008594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008598:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800859c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800859e:	fab3 f383 	clz	r3, r3
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80085a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	461a      	mov	r2, r3
 80085b0:	2301      	movs	r3, #1
 80085b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085b4:	f7fd fcfa 	bl	8005fac <HAL_GetTick>
 80085b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085bc:	e009      	b.n	80085d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085be:	f7fd fcf5 	bl	8005fac <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e144      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
 80085d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80085da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	fa93 f2a3 	rbit	r2, r3
 80085ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80085f6:	601a      	str	r2, [r3, #0]
  return result;
 80085f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008600:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008602:	fab3 f383 	clz	r3, r3
 8008606:	b2db      	uxtb	r3, r3
 8008608:	095b      	lsrs	r3, r3, #5
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	d102      	bne.n	800861c <HAL_RCC_OscConfig+0xe2c>
 8008616:	4b54      	ldr	r3, [pc, #336]	; (8008768 <HAL_RCC_OscConfig+0xf78>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	e027      	b.n	800866c <HAL_RCC_OscConfig+0xe7c>
 800861c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008620:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800862a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800862e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	fa93 f2a3 	rbit	r2, r3
 8008638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800863c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008646:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800864a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008654:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	fa93 f2a3 	rbit	r2, r3
 800865e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008662:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	4b3f      	ldr	r3, [pc, #252]	; (8008768 <HAL_RCC_OscConfig+0xf78>)
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008670:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008678:	6011      	str	r1, [r2, #0]
 800867a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800867e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	fa92 f1a2 	rbit	r1, r2
 8008688:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800868c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008690:	6011      	str	r1, [r2, #0]
  return result;
 8008692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008696:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	fab2 f282 	clz	r2, r2
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	f042 0220 	orr.w	r2, r2, #32
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	f002 021f 	and.w	r2, r2, #31
 80086ac:	2101      	movs	r1, #1
 80086ae:	fa01 f202 	lsl.w	r2, r1, r2
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d082      	beq.n	80085be <HAL_RCC_OscConfig+0xdce>
 80086b8:	e0cf      	b.n	800885a <HAL_RCC_OscConfig+0x106a>
 80086ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80086c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	fa93 f2a3 	rbit	r2, r3
 80086d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80086de:	601a      	str	r2, [r3, #0]
  return result;
 80086e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80086e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ea:	fab3 f383 	clz	r3, r3
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80086f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	461a      	mov	r2, r3
 80086fc:	2300      	movs	r3, #0
 80086fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008700:	f7fd fc54 	bl	8005fac <HAL_GetTick>
 8008704:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008708:	e009      	b.n	800871e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800870a:	f7fd fc4f 	bl	8005fac <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e09e      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
 800871e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008722:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800872a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800872c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008730:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	fa93 f2a3 	rbit	r2, r3
 800873a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800873e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008742:	601a      	str	r2, [r3, #0]
  return result;
 8008744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008748:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800874c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800874e:	fab3 f383 	clz	r3, r3
 8008752:	b2db      	uxtb	r3, r3
 8008754:	095b      	lsrs	r3, r3, #5
 8008756:	b2db      	uxtb	r3, r3
 8008758:	f043 0301 	orr.w	r3, r3, #1
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b01      	cmp	r3, #1
 8008760:	d104      	bne.n	800876c <HAL_RCC_OscConfig+0xf7c>
 8008762:	4b01      	ldr	r3, [pc, #4]	; (8008768 <HAL_RCC_OscConfig+0xf78>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	e029      	b.n	80087bc <HAL_RCC_OscConfig+0xfcc>
 8008768:	40021000 	.word	0x40021000
 800876c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008770:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800877a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800877e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	fa93 f2a3 	rbit	r2, r3
 8008788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800878c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008796:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800879a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	fa93 f2a3 	rbit	r2, r3
 80087ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	4b2b      	ldr	r3, [pc, #172]	; (8008868 <HAL_RCC_OscConfig+0x1078>)
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80087c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80087c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80087c8:	6011      	str	r1, [r2, #0]
 80087ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80087ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	fa92 f1a2 	rbit	r1, r2
 80087d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80087dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80087e0:	6011      	str	r1, [r2, #0]
  return result;
 80087e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80087e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	fab2 f282 	clz	r2, r2
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	f042 0220 	orr.w	r2, r2, #32
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	f002 021f 	and.w	r2, r2, #31
 80087fc:	2101      	movs	r1, #1
 80087fe:	fa01 f202 	lsl.w	r2, r1, r2
 8008802:	4013      	ands	r3, r2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d180      	bne.n	800870a <HAL_RCC_OscConfig+0xf1a>
 8008808:	e027      	b.n	800885a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800880a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800880e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e01e      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800881e:	4b12      	ldr	r3, [pc, #72]	; (8008868 <HAL_RCC_OscConfig+0x1078>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008826:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800882a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800882e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	429a      	cmp	r2, r3
 800883c:	d10b      	bne.n	8008856 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800883e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800884a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008852:	429a      	cmp	r2, r3
 8008854:	d001      	beq.n	800885a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e000      	b.n	800885c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	40021000 	.word	0x40021000

0800886c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b09e      	sub	sp, #120	; 0x78
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e162      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008884:	4b90      	ldr	r3, [pc, #576]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d910      	bls.n	80088b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008892:	4b8d      	ldr	r3, [pc, #564]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f023 0207 	bic.w	r2, r3, #7
 800889a:	498b      	ldr	r1, [pc, #556]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	4313      	orrs	r3, r2
 80088a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088a2:	4b89      	ldr	r3, [pc, #548]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d001      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e14a      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088c0:	4b82      	ldr	r3, [pc, #520]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	497f      	ldr	r1, [pc, #508]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80dc 	beq.w	8008a98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d13c      	bne.n	8008962 <HAL_RCC_ClockConfig+0xf6>
 80088e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088f0:	fa93 f3a3 	rbit	r3, r3
 80088f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80088f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f8:	fab3 f383 	clz	r3, r3
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	095b      	lsrs	r3, r3, #5
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d102      	bne.n	8008912 <HAL_RCC_ClockConfig+0xa6>
 800890c:	4b6f      	ldr	r3, [pc, #444]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	e00f      	b.n	8008932 <HAL_RCC_ClockConfig+0xc6>
 8008912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008916:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800891a:	fa93 f3a3 	rbit	r3, r3
 800891e:	667b      	str	r3, [r7, #100]	; 0x64
 8008920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008924:	663b      	str	r3, [r7, #96]	; 0x60
 8008926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008928:	fa93 f3a3 	rbit	r3, r3
 800892c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800892e:	4b67      	ldr	r3, [pc, #412]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008936:	65ba      	str	r2, [r7, #88]	; 0x58
 8008938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800893a:	fa92 f2a2 	rbit	r2, r2
 800893e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008940:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008942:	fab2 f282 	clz	r2, r2
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	f042 0220 	orr.w	r2, r2, #32
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	f002 021f 	and.w	r2, r2, #31
 8008952:	2101      	movs	r1, #1
 8008954:	fa01 f202 	lsl.w	r2, r1, r2
 8008958:	4013      	ands	r3, r2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d17b      	bne.n	8008a56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e0f3      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d13c      	bne.n	80089e4 <HAL_RCC_ClockConfig+0x178>
 800896a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800896e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008972:	fa93 f3a3 	rbit	r3, r3
 8008976:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897a:	fab3 f383 	clz	r3, r3
 800897e:	b2db      	uxtb	r3, r3
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f043 0301 	orr.w	r3, r3, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b01      	cmp	r3, #1
 800898c:	d102      	bne.n	8008994 <HAL_RCC_ClockConfig+0x128>
 800898e:	4b4f      	ldr	r3, [pc, #316]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	e00f      	b.n	80089b4 <HAL_RCC_ClockConfig+0x148>
 8008994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008998:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800899c:	fa93 f3a3 	rbit	r3, r3
 80089a0:	647b      	str	r3, [r7, #68]	; 0x44
 80089a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
 80089a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089aa:	fa93 f3a3 	rbit	r3, r3
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b0:	4b46      	ldr	r3, [pc, #280]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80089ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089bc:	fa92 f2a2 	rbit	r2, r2
 80089c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80089c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089c4:	fab2 f282 	clz	r2, r2
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	f042 0220 	orr.w	r2, r2, #32
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	f002 021f 	and.w	r2, r2, #31
 80089d4:	2101      	movs	r1, #1
 80089d6:	fa01 f202 	lsl.w	r2, r1, r2
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d13a      	bne.n	8008a56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e0b2      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2de>
 80089e4:	2302      	movs	r3, #2
 80089e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	fa93 f3a3 	rbit	r3, r3
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089f2:	fab3 f383 	clz	r3, r3
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	095b      	lsrs	r3, r3, #5
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f043 0301 	orr.w	r3, r3, #1
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d102      	bne.n	8008a0c <HAL_RCC_ClockConfig+0x1a0>
 8008a06:	4b31      	ldr	r3, [pc, #196]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	e00d      	b.n	8008a28 <HAL_RCC_ClockConfig+0x1bc>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	fa93 f3a3 	rbit	r3, r3
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
 8008a18:	2302      	movs	r3, #2
 8008a1a:	623b      	str	r3, [r7, #32]
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	fa93 f3a3 	rbit	r3, r3
 8008a22:	61fb      	str	r3, [r7, #28]
 8008a24:	4b29      	ldr	r3, [pc, #164]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2202      	movs	r2, #2
 8008a2a:	61ba      	str	r2, [r7, #24]
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	fa92 f2a2 	rbit	r2, r2
 8008a32:	617a      	str	r2, [r7, #20]
  return result;
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	fab2 f282 	clz	r2, r2
 8008a3a:	b2d2      	uxtb	r2, r2
 8008a3c:	f042 0220 	orr.w	r2, r2, #32
 8008a40:	b2d2      	uxtb	r2, r2
 8008a42:	f002 021f 	and.w	r2, r2, #31
 8008a46:	2101      	movs	r1, #1
 8008a48:	fa01 f202 	lsl.w	r2, r1, r2
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e079      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a56:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f023 0203 	bic.w	r2, r3, #3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	491a      	ldr	r1, [pc, #104]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a68:	f7fd faa0 	bl	8005fac <HAL_GetTick>
 8008a6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a6e:	e00a      	b.n	8008a86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a70:	f7fd fa9c 	bl	8005fac <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e061      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <HAL_RCC_ClockConfig+0x260>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 020c 	and.w	r2, r3, #12
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d1eb      	bne.n	8008a70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a98:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d214      	bcs.n	8008ad0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aa6:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f023 0207 	bic.w	r2, r3, #7
 8008aae:	4906      	ldr	r1, [pc, #24]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ab6:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <HAL_RCC_ClockConfig+0x25c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d005      	beq.n	8008ad0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e040      	b.n	8008b4a <HAL_RCC_ClockConfig+0x2de>
 8008ac8:	40022000 	.word	0x40022000
 8008acc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d008      	beq.n	8008aee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008adc:	4b1d      	ldr	r3, [pc, #116]	; (8008b54 <HAL_RCC_ClockConfig+0x2e8>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	491a      	ldr	r1, [pc, #104]	; (8008b54 <HAL_RCC_ClockConfig+0x2e8>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008afa:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <HAL_RCC_ClockConfig+0x2e8>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4912      	ldr	r1, [pc, #72]	; (8008b54 <HAL_RCC_ClockConfig+0x2e8>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008b0e:	f000 f829 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 8008b12:	4601      	mov	r1, r0
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <HAL_RCC_ClockConfig+0x2e8>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b1c:	22f0      	movs	r2, #240	; 0xf0
 8008b1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	fa92 f2a2 	rbit	r2, r2
 8008b26:	60fa      	str	r2, [r7, #12]
  return result;
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	fab2 f282 	clz	r2, r2
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	40d3      	lsrs	r3, r2
 8008b32:	4a09      	ldr	r2, [pc, #36]	; (8008b58 <HAL_RCC_ClockConfig+0x2ec>)
 8008b34:	5cd3      	ldrb	r3, [r2, r3]
 8008b36:	fa21 f303 	lsr.w	r3, r1, r3
 8008b3a:	4a08      	ldr	r2, [pc, #32]	; (8008b5c <HAL_RCC_ClockConfig+0x2f0>)
 8008b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008b3e:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_RCC_ClockConfig+0x2f4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fd f9ee 	bl	8005f24 <HAL_InitTick>
  
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3778      	adds	r7, #120	; 0x78
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40021000 	.word	0x40021000
 8008b58:	0800deb8 	.word	0x0800deb8
 8008b5c:	20000058 	.word	0x20000058
 8008b60:	20000064 	.word	0x20000064

08008b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b08b      	sub	sp, #44	; 0x2c
 8008b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	2300      	movs	r3, #0
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008b7e:	4b29      	ldr	r3, [pc, #164]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f003 030c 	and.w	r3, r3, #12
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d002      	beq.n	8008b94 <HAL_RCC_GetSysClockFreq+0x30>
 8008b8e:	2b08      	cmp	r3, #8
 8008b90:	d003      	beq.n	8008b9a <HAL_RCC_GetSysClockFreq+0x36>
 8008b92:	e03c      	b.n	8008c0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b94:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008b96:	623b      	str	r3, [r7, #32]
      break;
 8008b98:	e03c      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008ba0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008ba4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	fa92 f2a2 	rbit	r2, r2
 8008bac:	607a      	str	r2, [r7, #4]
  return result;
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	fab2 f282 	clz	r2, r2
 8008bb4:	b2d2      	uxtb	r2, r2
 8008bb6:	40d3      	lsrs	r3, r2
 8008bb8:	4a1c      	ldr	r2, [pc, #112]	; (8008c2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8008bba:	5cd3      	ldrb	r3, [r2, r3]
 8008bbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008bbe:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	220f      	movs	r2, #15
 8008bc8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	fa92 f2a2 	rbit	r2, r2
 8008bd0:	60fa      	str	r2, [r7, #12]
  return result;
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	fab2 f282 	clz	r2, r2
 8008bd8:	b2d2      	uxtb	r2, r2
 8008bda:	40d3      	lsrs	r3, r2
 8008bdc:	4a14      	ldr	r2, [pc, #80]	; (8008c30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008bde:	5cd3      	ldrb	r3, [r2, r3]
 8008be0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d008      	beq.n	8008bfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008bec:	4a0e      	ldr	r2, [pc, #56]	; (8008c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	fb02 f303 	mul.w	r3, r2, r3
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008bfc:	e004      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	4a0c      	ldr	r2, [pc, #48]	; (8008c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c02:	fb02 f303 	mul.w	r3, r2, r3
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	623b      	str	r3, [r7, #32]
      break;
 8008c0c:	e002      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c10:	623b      	str	r3, [r7, #32]
      break;
 8008c12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c14:	6a3b      	ldr	r3, [r7, #32]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	372c      	adds	r7, #44	; 0x2c
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40021000 	.word	0x40021000
 8008c28:	007a1200 	.word	0x007a1200
 8008c2c:	0800ded0 	.word	0x0800ded0
 8008c30:	0800dee0 	.word	0x0800dee0
 8008c34:	003d0900 	.word	0x003d0900

08008c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c3c:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20000058 	.word	0x20000058

08008c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008c56:	f7ff ffef 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008c68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	fa92 f2a2 	rbit	r2, r2
 8008c70:	603a      	str	r2, [r7, #0]
  return result;
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	fab2 f282 	clz	r2, r2
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	40d3      	lsrs	r3, r2
 8008c7c:	4a04      	ldr	r2, [pc, #16]	; (8008c90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008c7e:	5cd3      	ldrb	r3, [r2, r3]
 8008c80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	40021000 	.word	0x40021000
 8008c90:	0800dec8 	.word	0x0800dec8

08008c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008c9a:	f7ff ffcd 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008ca8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008cac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	fa92 f2a2 	rbit	r2, r2
 8008cb4:	603a      	str	r2, [r7, #0]
  return result;
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	fab2 f282 	clz	r2, r2
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	40d3      	lsrs	r3, r2
 8008cc0:	4a04      	ldr	r2, [pc, #16]	; (8008cd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008cc2:	5cd3      	ldrb	r3, [r2, r3]
 8008cc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40021000 	.word	0x40021000
 8008cd4:	0800dec8 	.word	0x0800dec8

08008cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b092      	sub	sp, #72	; 0x48
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80d4 	beq.w	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cfc:	4b4e      	ldr	r3, [pc, #312]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10e      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d08:	4b4b      	ldr	r3, [pc, #300]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	4a4a      	ldr	r2, [pc, #296]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d12:	61d3      	str	r3, [r2, #28]
 8008d14:	4b48      	ldr	r3, [pc, #288]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	60bb      	str	r3, [r7, #8]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d26:	4b45      	ldr	r3, [pc, #276]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d118      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d32:	4b42      	ldr	r3, [pc, #264]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a41      	ldr	r2, [pc, #260]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d3e:	f7fd f935 	bl	8005fac <HAL_GetTick>
 8008d42:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d44:	e008      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d46:	f7fd f931 	bl	8005fac <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b64      	cmp	r3, #100	; 0x64
 8008d52:	d901      	bls.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e13c      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d58:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0f0      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d64:	4b34      	ldr	r3, [pc, #208]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8084 	beq.w	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d07c      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d84:	4b2c      	ldr	r3, [pc, #176]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	fa93 f3a3 	rbit	r3, r3
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d9e:	fab3 f383 	clz	r3, r3
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	4b26      	ldr	r3, [pc, #152]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	461a      	mov	r2, r3
 8008dae:	2301      	movs	r3, #1
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008db6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	fa93 f3a3 	rbit	r3, r3
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008dc2:	fab3 f383 	clz	r3, r3
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	461a      	mov	r2, r3
 8008dca:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008dd6:	4a18      	ldr	r2, [pc, #96]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dda:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d04b      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008de6:	f7fd f8e1 	bl	8005fac <HAL_GetTick>
 8008dea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dec:	e00a      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dee:	f7fd f8dd 	bl	8005fac <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d901      	bls.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e0e6      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008e04:	2302      	movs	r3, #2
 8008e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	fa93 f3a3 	rbit	r3, r3
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e10:	2302      	movs	r3, #2
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	fa93 f3a3 	rbit	r3, r3
 8008e1a:	61fb      	str	r3, [r7, #28]
  return result;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e1e:	fab3 f383 	clz	r3, r3
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f043 0302 	orr.w	r3, r3, #2
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d108      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008e32:	4b01      	ldr	r3, [pc, #4]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	e00d      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008e38:	40021000 	.word	0x40021000
 8008e3c:	40007000 	.word	0x40007000
 8008e40:	10908100 	.word	0x10908100
 8008e44:	2302      	movs	r3, #2
 8008e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	fa93 f3a3 	rbit	r3, r3
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	4b62      	ldr	r3, [pc, #392]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2202      	movs	r2, #2
 8008e56:	613a      	str	r2, [r7, #16]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	fa92 f2a2 	rbit	r2, r2
 8008e5e:	60fa      	str	r2, [r7, #12]
  return result;
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	fab2 f282 	clz	r2, r2
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e6c:	b2d2      	uxtb	r2, r2
 8008e6e:	f002 021f 	and.w	r2, r2, #31
 8008e72:	2101      	movs	r1, #1
 8008e74:	fa01 f202 	lsl.w	r2, r1, r2
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0b7      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008e7e:	4b57      	ldr	r3, [pc, #348]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	4954      	ldr	r1, [pc, #336]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d105      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e98:	4b50      	ldr	r3, [pc, #320]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	4a4f      	ldr	r2, [pc, #316]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ea2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d008      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008eb0:	4b4a      	ldr	r3, [pc, #296]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb4:	f023 0203 	bic.w	r2, r3, #3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	4947      	ldr	r1, [pc, #284]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d008      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ece:	4b43      	ldr	r3, [pc, #268]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	f023 0210 	bic.w	r2, r3, #16
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	4940      	ldr	r1, [pc, #256]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008eec:	4b3b      	ldr	r3, [pc, #236]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef0:	f023 0220 	bic.w	r2, r3, #32
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	4938      	ldr	r1, [pc, #224]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d008      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f0a:	4b34      	ldr	r3, [pc, #208]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	4931      	ldr	r1, [pc, #196]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d008      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f28:	4b2c      	ldr	r3, [pc, #176]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4929      	ldr	r1, [pc, #164]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8008f46:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	4922      	ldr	r1, [pc, #136]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d008      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008f64:	4b1d      	ldr	r3, [pc, #116]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	491a      	ldr	r1, [pc, #104]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d008      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008f82:	4b16      	ldr	r3, [pc, #88]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	4913      	ldr	r1, [pc, #76]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008fa0:	4b0e      	ldr	r3, [pc, #56]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	490b      	ldr	r1, [pc, #44]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d008      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008fbe:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fca:	4904      	ldr	r1, [pc, #16]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3748      	adds	r7, #72	; 0x48
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40021000 	.word	0x40021000

08008fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e09d      	b.n	800912e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d108      	bne.n	800900c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009002:	d009      	beq.n	8009018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	61da      	str	r2, [r3, #28]
 800900a:	e005      	b.n	8009018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fb fd94 	bl	8004b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800904e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009058:	d902      	bls.n	8009060 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e002      	b.n	8009066 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009064:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800906e:	d007      	beq.n	8009080 <HAL_SPI_Init+0xa0>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009078:	d002      	beq.n	8009080 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c2:	ea42 0103 	orr.w	r1, r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	0c1b      	lsrs	r3, r3, #16
 80090dc:	f003 0204 	and.w	r2, r3, #4
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	f003 0310 	and.w	r3, r3, #16
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ee:	f003 0308 	and.w	r3, r3, #8
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80090fc:	ea42 0103 	orr.w	r1, r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800911c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b088      	sub	sp, #32
 800913a:	af00      	add	r7, sp, #0
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	603b      	str	r3, [r7, #0]
 8009142:	4613      	mov	r3, r2
 8009144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_SPI_Transmit+0x22>
 8009154:	2302      	movs	r3, #2
 8009156:	e15f      	b.n	8009418 <HAL_SPI_Transmit+0x2e2>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009160:	f7fc ff24 	bl	8005fac <HAL_GetTick>
 8009164:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b01      	cmp	r3, #1
 8009174:	d002      	beq.n	800917c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009176:	2302      	movs	r3, #2
 8009178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800917a:	e148      	b.n	800940e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <HAL_SPI_Transmit+0x52>
 8009182:	88fb      	ldrh	r3, [r7, #6]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d102      	bne.n	800918e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800918c:	e13f      	b.n	800940e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2203      	movs	r2, #3
 8009192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	88fa      	ldrh	r2, [r7, #6]
 80091a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091d8:	d10f      	bne.n	80091fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009204:	2b40      	cmp	r3, #64	; 0x40
 8009206:	d007      	beq.n	8009218 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009220:	d94f      	bls.n	80092c2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <HAL_SPI_Transmit+0xfa>
 800922a:	8afb      	ldrh	r3, [r7, #22]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d142      	bne.n	80092b6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009234:	881a      	ldrh	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009240:	1c9a      	adds	r2, r3, #2
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800924a:	b29b      	uxth	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009254:	e02f      	b.n	80092b6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b02      	cmp	r3, #2
 8009262:	d112      	bne.n	800928a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	881a      	ldrh	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	1c9a      	adds	r2, r3, #2
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009288:	e015      	b.n	80092b6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800928a:	f7fc fe8f 	bl	8005fac <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d803      	bhi.n	80092a2 <HAL_SPI_Transmit+0x16c>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a0:	d102      	bne.n	80092a8 <HAL_SPI_Transmit+0x172>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d106      	bne.n	80092b6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80092b4:	e0ab      	b.n	800940e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1ca      	bne.n	8009256 <HAL_SPI_Transmit+0x120>
 80092c0:	e080      	b.n	80093c4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <HAL_SPI_Transmit+0x19a>
 80092ca:	8afb      	ldrh	r3, [r7, #22]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d174      	bne.n	80093ba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d912      	bls.n	8009300 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	881a      	ldrh	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ea:	1c9a      	adds	r2, r3, #2
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	3b02      	subs	r3, #2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092fe:	e05c      	b.n	80093ba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	330c      	adds	r3, #12
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800931c:	b29b      	uxth	r3, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	b29a      	uxth	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009326:	e048      	b.n	80093ba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b02      	cmp	r3, #2
 8009334:	d12b      	bne.n	800938e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800933a:	b29b      	uxth	r3, r3
 800933c:	2b01      	cmp	r3, #1
 800933e:	d912      	bls.n	8009366 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	1c9a      	adds	r2, r3, #2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935a:	b29b      	uxth	r3, r3
 800935c:	3b02      	subs	r3, #2
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009364:	e029      	b.n	80093ba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	330c      	adds	r3, #12
 8009370:	7812      	ldrb	r2, [r2, #0]
 8009372:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009382:	b29b      	uxth	r3, r3
 8009384:	3b01      	subs	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800938c:	e015      	b.n	80093ba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800938e:	f7fc fe0d 	bl	8005fac <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d803      	bhi.n	80093a6 <HAL_SPI_Transmit+0x270>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d102      	bne.n	80093ac <HAL_SPI_Transmit+0x276>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80093b8:	e029      	b.n	800940e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093be:	b29b      	uxth	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1b1      	bne.n	8009328 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fbd7 	bl	8009b7c <SPI_EndRxTxTransaction>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2220      	movs	r2, #32
 80093d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093e2:	2300      	movs	r3, #0
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	613b      	str	r3, [r7, #16]
 80093f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	77fb      	strb	r3, [r7, #31]
 8009404:	e003      	b.n	800940e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009416:	7ffb      	ldrb	r3, [r7, #31]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_SPI_Transmit_DMA+0x20>
 800943c:	2302      	movs	r3, #2
 800943e:	e0d4      	b.n	80095ea <HAL_SPI_Transmit_DMA+0x1ca>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b01      	cmp	r3, #1
 8009452:	d002      	beq.n	800945a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009454:	2302      	movs	r3, #2
 8009456:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009458:	e0c2      	b.n	80095e0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <HAL_SPI_Transmit_DMA+0x46>
 8009460:	88fb      	ldrh	r3, [r7, #6]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	75fb      	strb	r3, [r7, #23]
    goto error;
 800946a:	e0b9      	b.n	80095e0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2203      	movs	r2, #3
 8009470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	88fa      	ldrh	r2, [r7, #6]
 8009484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	88fa      	ldrh	r2, [r7, #6]
 800948a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094b6:	d10f      	bne.n	80094d8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094dc:	4a45      	ldr	r2, [pc, #276]	; (80095f4 <HAL_SPI_Transmit_DMA+0x1d4>)
 80094de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e4:	4a44      	ldr	r2, [pc, #272]	; (80095f8 <HAL_SPI_Transmit_DMA+0x1d8>)
 80094e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ec:	4a43      	ldr	r2, [pc, #268]	; (80095fc <HAL_SPI_Transmit_DMA+0x1dc>)
 80094ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f4:	2200      	movs	r2, #0
 80094f6:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009506:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009510:	d82d      	bhi.n	800956e <HAL_SPI_Transmit_DMA+0x14e>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800951c:	d127      	bne.n	800956e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009522:	b29b      	uxth	r3, r3
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10f      	bne.n	800954c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800953a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009540:	b29b      	uxth	r3, r3
 8009542:	085b      	lsrs	r3, r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	87da      	strh	r2, [r3, #62]	; 0x3e
 800954a:	e010      	b.n	800956e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800955a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009560:	b29b      	uxth	r3, r3
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	b29b      	uxth	r3, r3
 8009566:	3301      	adds	r3, #1
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	4619      	mov	r1, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	330c      	adds	r3, #12
 800957e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009584:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009586:	f7fc fe99 	bl	80062bc <HAL_DMA_Start_IT>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d008      	beq.n	80095a2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009594:	f043 0210 	orr.w	r2, r3, #16
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	75fb      	strb	r3, [r7, #23]

    goto error;
 80095a0:	e01e      	b.n	80095e0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ac:	2b40      	cmp	r3, #64	; 0x40
 80095ae:	d007      	beq.n	80095c0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095be:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0220 	orr.w	r2, r2, #32
 80095ce:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0202 	orr.w	r2, r2, #2
 80095de:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	080098bb 	.word	0x080098bb
 80095f8:	08009815 	.word	0x08009815
 80095fc:	080098d7 	.word	0x080098d7

08009600 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	099b      	lsrs	r3, r3, #6
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10f      	bne.n	8009644 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	099b      	lsrs	r3, r3, #6
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
    return;
 8009642:	e0d7      	b.n	80097f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <HAL_SPI_IRQHandler+0x66>
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	09db      	lsrs	r3, r3, #7
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
    return;
 8009664:	e0c6      	b.n	80097f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	095b      	lsrs	r3, r3, #5
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10c      	bne.n	800968c <HAL_SPI_IRQHandler+0x8c>
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	099b      	lsrs	r3, r3, #6
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	0a1b      	lsrs	r3, r3, #8
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 80b4 	beq.w	80097f4 <HAL_SPI_IRQHandler+0x1f4>
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80ad 	beq.w	80097f4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	099b      	lsrs	r3, r3, #6
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d023      	beq.n	80096ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d011      	beq.n	80096d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b6:	f043 0204 	orr.w	r2, r3, #4
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	617b      	str	r3, [r7, #20]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	e00b      	b.n	80096ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096d6:	2300      	movs	r3, #0
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	613b      	str	r3, [r7, #16]
 80096ea:	693b      	ldr	r3, [r7, #16]
        return;
 80096ec:	e082      	b.n	80097f4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d014      	beq.n	8009724 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fe:	f043 0201 	orr.w	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	0a1b      	lsrs	r3, r3, #8
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00c      	beq.n	800974a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009734:	f043 0208 	orr.w	r2, r3, #8
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800973c:	2300      	movs	r3, #0
 800973e:	60bb      	str	r3, [r7, #8]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	60bb      	str	r3, [r7, #8]
 8009748:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800974e:	2b00      	cmp	r3, #0
 8009750:	d04f      	beq.n	80097f2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009760:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d104      	bne.n	800977e <HAL_SPI_IRQHandler+0x17e>
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d034      	beq.n	80097e8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0203 	bic.w	r2, r2, #3
 800978c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009792:	2b00      	cmp	r3, #0
 8009794:	d011      	beq.n	80097ba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979a:	4a18      	ldr	r2, [pc, #96]	; (80097fc <HAL_SPI_IRQHandler+0x1fc>)
 800979c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fc fe22 	bl	80063ec <HAL_DMA_Abort_IT>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d005      	beq.n	80097ba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d016      	beq.n	80097f0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	4a0d      	ldr	r2, [pc, #52]	; (80097fc <HAL_SPI_IRQHandler+0x1fc>)
 80097c8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fc fe0c 	bl	80063ec <HAL_DMA_Abort_IT>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80097e6:	e003      	b.n	80097f0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7fb fd93 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80097ee:	e000      	b.n	80097f2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80097f0:	bf00      	nop
    return;
 80097f2:	bf00      	nop
  }
}
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	08009917 	.word	0x08009917

08009800 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009822:	f7fc fbc3 	bl	8005fac <HAL_GetTick>
 8009826:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b20      	cmp	r3, #32
 8009834:	d03b      	beq.n	80098ae <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 0220 	bic.w	r2, r2, #32
 8009844:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0202 	bic.w	r2, r2, #2
 8009854:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	2164      	movs	r1, #100	; 0x64
 800985a:	6978      	ldr	r0, [r7, #20]
 800985c:	f000 f98e 	bl	8009b7c <SPI_EndRxTxTransaction>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800986a:	f043 0220 	orr.w	r2, r3, #32
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2200      	movs	r2, #0
 8009894:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80098a6:	6978      	ldr	r0, [r7, #20]
 80098a8:	f7fb fd34 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80098ac:	e002      	b.n	80098b4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80098ae:	6978      	ldr	r0, [r7, #20]
 80098b0:	f7fb fd46 	bl	8005340 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff ff99 	bl	8009800 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0203 	bic.w	r2, r2, #3
 80098f2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f8:	f043 0210 	orr.w	r2, r3, #16
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7fb fd03 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f7fb fcee 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009938:	bf00      	nop
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b088      	sub	sp, #32
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	4613      	mov	r3, r2
 800994e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009950:	f7fc fb2c 	bl	8005fac <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	4413      	add	r3, r2
 800995e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009960:	f7fc fb24 	bl	8005fac <HAL_GetTick>
 8009964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009966:	4b39      	ldr	r3, [pc, #228]	; (8009a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	015b      	lsls	r3, r3, #5
 800996c:	0d1b      	lsrs	r3, r3, #20
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	fb02 f303 	mul.w	r3, r2, r3
 8009974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009976:	e054      	b.n	8009a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997e:	d050      	beq.n	8009a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009980:	f7fc fb14 	bl	8005fac <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	429a      	cmp	r2, r3
 800998e:	d902      	bls.n	8009996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d13d      	bne.n	8009a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ae:	d111      	bne.n	80099d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b8:	d004      	beq.n	80099c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c2:	d107      	bne.n	80099d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099dc:	d10f      	bne.n	80099fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e017      	b.n	8009a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	bf0c      	ite	eq
 8009a32:	2301      	moveq	r3, #1
 8009a34:	2300      	movne	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d19b      	bne.n	8009978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000058 	.word	0x20000058

08009a50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a62:	f7fc faa3 	bl	8005fac <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	1a9b      	subs	r3, r3, r2
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	4413      	add	r3, r2
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009a72:	f7fc fa9b 	bl	8005fac <HAL_GetTick>
 8009a76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a80:	4b3d      	ldr	r3, [pc, #244]	; (8009b78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	00da      	lsls	r2, r3, #3
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	0d1b      	lsrs	r3, r3, #20
 8009a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a92:	fb02 f303 	mul.w	r3, r2, r3
 8009a96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a98:	e060      	b.n	8009b5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009aa0:	d107      	bne.n	8009ab2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab8:	d050      	beq.n	8009b5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009aba:	f7fc fa77 	bl	8005fac <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d902      	bls.n	8009ad0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d13d      	bne.n	8009b4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ade:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ae8:	d111      	bne.n	8009b0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af2:	d004      	beq.n	8009afe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009afc:	d107      	bne.n	8009b0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b16:	d10f      	bne.n	8009b38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e010      	b.n	8009b6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4013      	ands	r3, r2
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d196      	bne.n	8009a9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3728      	adds	r7, #40	; 0x28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000058 	.word	0x20000058

08009b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff ff5b 	bl	8009a50 <SPI_WaitFifoStateUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d007      	beq.n	8009bb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ba4:	f043 0220 	orr.w	r2, r3, #32
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e027      	b.n	8009c00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2180      	movs	r1, #128	; 0x80
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fec0 	bl	8009940 <SPI_WaitFlagStateUntilTimeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bca:	f043 0220 	orr.w	r2, r3, #32
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e014      	b.n	8009c00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff ff34 	bl	8009a50 <SPI_WaitFifoStateUntilTimeout>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bf2:	f043 0220 	orr.w	r2, r3, #32
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e000      	b.n	8009c00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e040      	b.n	8009c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d106      	bne.n	8009c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7fb f80e 	bl	8004c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2224      	movs	r2, #36	; 0x24
 8009c34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f022 0201 	bic.w	r2, r2, #1
 8009c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fbbc 	bl	800a3c4 <UART_SetConfig>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d101      	bne.n	8009c56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e022      	b.n	8009c9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fce6 	bl	800a630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fd6d 	bl	800a774 <UART_CheckIdleState>
 8009c9a:	4603      	mov	r3, r0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08a      	sub	sp, #40	; 0x28
 8009ca8:	af02      	add	r7, sp, #8
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	603b      	str	r3, [r7, #0]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d178      	bne.n	8009dae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <HAL_UART_Transmit+0x24>
 8009cc2:	88fb      	ldrh	r3, [r7, #6]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e071      	b.n	8009db0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2221      	movs	r2, #33	; 0x21
 8009cd8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cda:	f7fc f967 	bl	8005fac <HAL_GetTick>
 8009cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	88fa      	ldrh	r2, [r7, #6]
 8009ce4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	88fa      	ldrh	r2, [r7, #6]
 8009cec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf8:	d108      	bne.n	8009d0c <HAL_UART_Transmit+0x68>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	61bb      	str	r3, [r7, #24]
 8009d0a:	e003      	b.n	8009d14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d10:	2300      	movs	r3, #0
 8009d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d14:	e030      	b.n	8009d78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fdcf 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e03c      	b.n	8009db0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10b      	bne.n	8009d54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	881a      	ldrh	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d48:	b292      	uxth	r2, r2
 8009d4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	3302      	adds	r3, #2
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	e008      	b.n	8009d66 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	781a      	ldrb	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	b292      	uxth	r2, r2
 8009d5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	3301      	adds	r3, #1
 8009d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1c8      	bne.n	8009d16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2140      	movs	r1, #64	; 0x40
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fd98 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e005      	b.n	8009db0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2220      	movs	r2, #32
 8009da8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e000      	b.n	8009db0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009dae:	2302      	movs	r3, #2
  }
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b0ba      	sub	sp, #232	; 0xe8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009dde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009de2:	f640 030f 	movw	r3, #2063	; 0x80f
 8009de6:	4013      	ands	r3, r2
 8009de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d115      	bne.n	8009e20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df8:	f003 0320 	and.w	r3, r3, #32
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00f      	beq.n	8009e20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e04:	f003 0320 	and.w	r3, r3, #32
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d009      	beq.n	8009e20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 82ab 	beq.w	800a36c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
      }
      return;
 8009e1e:	e2a5      	b.n	800a36c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 8117 	beq.w	800a058 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009e36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e3a:	4b85      	ldr	r3, [pc, #532]	; (800a050 <HAL_UART_IRQHandler+0x298>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 810a 	beq.w	800a058 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d011      	beq.n	8009e74 <HAL_UART_IRQHandler+0xbc>
 8009e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2201      	movs	r2, #1
 8009e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e6a:	f043 0201 	orr.w	r2, r3, #1
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d011      	beq.n	8009ea4 <HAL_UART_IRQHandler+0xec>
 8009e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2202      	movs	r2, #2
 8009e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9a:	f043 0204 	orr.w	r2, r3, #4
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d011      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x11c>
 8009eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2204      	movs	r2, #4
 8009ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eca:	f043 0202 	orr.w	r2, r3, #2
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d017      	beq.n	8009f10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee4:	f003 0320 	and.w	r3, r3, #32
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d105      	bne.n	8009ef8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ef0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2208      	movs	r2, #8
 8009efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f06:	f043 0208 	orr.w	r2, r3, #8
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d012      	beq.n	8009f42 <HAL_UART_IRQHandler+0x18a>
 8009f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00c      	beq.n	8009f42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f38:	f043 0220 	orr.w	r2, r3, #32
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 8211 	beq.w	800a370 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00d      	beq.n	8009f76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b40      	cmp	r3, #64	; 0x40
 8009f8c:	d005      	beq.n	8009f9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d04f      	beq.n	800a03a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fcf9 	bl	800a992 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009faa:	2b40      	cmp	r3, #64	; 0x40
 8009fac:	d141      	bne.n	800a032 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009fea:	e841 2300 	strex	r3, r2, [r1]
 8009fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1d9      	bne.n	8009fae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d013      	beq.n	800a02a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a006:	4a13      	ldr	r2, [pc, #76]	; (800a054 <HAL_UART_IRQHandler+0x29c>)
 800a008:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fc f9ec 	bl	80063ec <HAL_DMA_Abort_IT>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d017      	beq.n	800a04a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a028:	e00f      	b.n	800a04a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f9b4 	bl	800a398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a030:	e00b      	b.n	800a04a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f9b0 	bl	800a398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a038:	e007      	b.n	800a04a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f9ac 	bl	800a398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a048:	e192      	b.n	800a370 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a04a:	bf00      	nop
    return;
 800a04c:	e190      	b.n	800a370 <HAL_UART_IRQHandler+0x5b8>
 800a04e:	bf00      	nop
 800a050:	04000120 	.word	0x04000120
 800a054:	0800aa5b 	.word	0x0800aa5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	f040 814b 	bne.w	800a2f8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a066:	f003 0310 	and.w	r3, r3, #16
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 8144 	beq.w	800a2f8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a074:	f003 0310 	and.w	r3, r3, #16
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 813d 	beq.w	800a2f8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2210      	movs	r2, #16
 800a084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a090:	2b40      	cmp	r3, #64	; 0x40
 800a092:	f040 80b5 	bne.w	800a200 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a0a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 8164 	beq.w	800a374 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	f080 815c 	bcs.w	800a374 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	f000 8086 	beq.w	800a1de <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a100:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a108:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1da      	bne.n	800a0d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3308      	adds	r3, #8
 800a122:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a12c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a12e:	f023 0301 	bic.w	r3, r3, #1
 800a132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3308      	adds	r3, #8
 800a13c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a140:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a144:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a148:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e1      	bne.n	800a11c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3308      	adds	r3, #8
 800a15e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a16a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a17c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a17e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a180:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a182:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a184:	e841 2300 	strex	r3, r2, [r1]
 800a188:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a18a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e3      	bne.n	800a158 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2220      	movs	r2, #32
 800a194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ae:	f023 0310 	bic.w	r3, r3, #16
 800a1b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e4      	bne.n	800a19e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fc f8ce 	bl	800637a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f8d7 	bl	800a3ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1fe:	e0b9      	b.n	800a374 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 80ab 	beq.w	800a378 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800a222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80a6 	beq.w	800a378 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a24e:	647b      	str	r3, [r7, #68]	; 0x44
 800a250:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e4      	bne.n	800a22c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3308      	adds	r3, #8
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	e853 3f00 	ldrex	r3, [r3]
 800a270:	623b      	str	r3, [r7, #32]
   return(result);
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	f023 0301 	bic.w	r3, r3, #1
 800a278:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3308      	adds	r3, #8
 800a282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a286:	633a      	str	r2, [r7, #48]	; 0x30
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e3      	bne.n	800a262 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0310 	bic.w	r3, r3, #16
 800a2c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a2d0:	61fb      	str	r3, [r7, #28]
 800a2d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	69b9      	ldr	r1, [r7, #24]
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e4      	bne.n	800a2ae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f85b 	bl	800a3ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2f6:	e03f      	b.n	800a378 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00e      	beq.n	800a322 <HAL_UART_IRQHandler+0x56a>
 800a304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d008      	beq.n	800a322 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fbdd 	bl	800aada <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a320:	e02d      	b.n	800a37e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00e      	beq.n	800a34c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a32e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a336:	2b00      	cmp	r3, #0
 800a338:	d008      	beq.n	800a34c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d01c      	beq.n	800a37c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	4798      	blx	r3
    }
    return;
 800a34a:	e017      	b.n	800a37c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a354:	2b00      	cmp	r3, #0
 800a356:	d012      	beq.n	800a37e <HAL_UART_IRQHandler+0x5c6>
 800a358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00c      	beq.n	800a37e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fb8e 	bl	800aa86 <UART_EndTransmit_IT>
    return;
 800a36a:	e008      	b.n	800a37e <HAL_UART_IRQHandler+0x5c6>
      return;
 800a36c:	bf00      	nop
 800a36e:	e006      	b.n	800a37e <HAL_UART_IRQHandler+0x5c6>
    return;
 800a370:	bf00      	nop
 800a372:	e004      	b.n	800a37e <HAL_UART_IRQHandler+0x5c6>
      return;
 800a374:	bf00      	nop
 800a376:	e002      	b.n	800a37e <HAL_UART_IRQHandler+0x5c6>
      return;
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <HAL_UART_IRQHandler+0x5c6>
    return;
 800a37c:	bf00      	nop
  }

}
 800a37e:	37e8      	adds	r7, #232	; 0xe8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	431a      	orrs	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	4b8a      	ldr	r3, [pc, #552]	; (800a618 <UART_SetConfig+0x254>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6812      	ldr	r2, [r2, #0]
 800a3f6:	6979      	ldr	r1, [r7, #20]
 800a3f8:	430b      	orrs	r3, r1
 800a3fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	4313      	orrs	r3, r2
 800a420:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	430a      	orrs	r2, r1
 800a434:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a78      	ldr	r2, [pc, #480]	; (800a61c <UART_SetConfig+0x258>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d120      	bne.n	800a482 <UART_SetConfig+0xbe>
 800a440:	4b77      	ldr	r3, [pc, #476]	; (800a620 <UART_SetConfig+0x25c>)
 800a442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d817      	bhi.n	800a47c <UART_SetConfig+0xb8>
 800a44c:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <UART_SetConfig+0x90>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a471 	.word	0x0800a471
 800a45c:	0800a477 	.word	0x0800a477
 800a460:	0800a46b 	.word	0x0800a46b
 800a464:	2300      	movs	r3, #0
 800a466:	77fb      	strb	r3, [r7, #31]
 800a468:	e01d      	b.n	800a4a6 <UART_SetConfig+0xe2>
 800a46a:	2302      	movs	r3, #2
 800a46c:	77fb      	strb	r3, [r7, #31]
 800a46e:	e01a      	b.n	800a4a6 <UART_SetConfig+0xe2>
 800a470:	2304      	movs	r3, #4
 800a472:	77fb      	strb	r3, [r7, #31]
 800a474:	e017      	b.n	800a4a6 <UART_SetConfig+0xe2>
 800a476:	2308      	movs	r3, #8
 800a478:	77fb      	strb	r3, [r7, #31]
 800a47a:	e014      	b.n	800a4a6 <UART_SetConfig+0xe2>
 800a47c:	2310      	movs	r3, #16
 800a47e:	77fb      	strb	r3, [r7, #31]
 800a480:	e011      	b.n	800a4a6 <UART_SetConfig+0xe2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a67      	ldr	r2, [pc, #412]	; (800a624 <UART_SetConfig+0x260>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d102      	bne.n	800a492 <UART_SetConfig+0xce>
 800a48c:	2300      	movs	r3, #0
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e009      	b.n	800a4a6 <UART_SetConfig+0xe2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a64      	ldr	r2, [pc, #400]	; (800a628 <UART_SetConfig+0x264>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d102      	bne.n	800a4a2 <UART_SetConfig+0xde>
 800a49c:	2300      	movs	r3, #0
 800a49e:	77fb      	strb	r3, [r7, #31]
 800a4a0:	e001      	b.n	800a4a6 <UART_SetConfig+0xe2>
 800a4a2:	2310      	movs	r3, #16
 800a4a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4ae:	d15a      	bne.n	800a566 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800a4b0:	7ffb      	ldrb	r3, [r7, #31]
 800a4b2:	2b08      	cmp	r3, #8
 800a4b4:	d827      	bhi.n	800a506 <UART_SetConfig+0x142>
 800a4b6:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <UART_SetConfig+0xf8>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a4e1 	.word	0x0800a4e1
 800a4c0:	0800a4e9 	.word	0x0800a4e9
 800a4c4:	0800a4f1 	.word	0x0800a4f1
 800a4c8:	0800a507 	.word	0x0800a507
 800a4cc:	0800a4f7 	.word	0x0800a4f7
 800a4d0:	0800a507 	.word	0x0800a507
 800a4d4:	0800a507 	.word	0x0800a507
 800a4d8:	0800a507 	.word	0x0800a507
 800a4dc:	0800a4ff 	.word	0x0800a4ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4e0:	f7fe fbb6 	bl	8008c50 <HAL_RCC_GetPCLK1Freq>
 800a4e4:	61b8      	str	r0, [r7, #24]
        break;
 800a4e6:	e013      	b.n	800a510 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4e8:	f7fe fbd4 	bl	8008c94 <HAL_RCC_GetPCLK2Freq>
 800a4ec:	61b8      	str	r0, [r7, #24]
        break;
 800a4ee:	e00f      	b.n	800a510 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4f0:	4b4e      	ldr	r3, [pc, #312]	; (800a62c <UART_SetConfig+0x268>)
 800a4f2:	61bb      	str	r3, [r7, #24]
        break;
 800a4f4:	e00c      	b.n	800a510 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4f6:	f7fe fb35 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 800a4fa:	61b8      	str	r0, [r7, #24]
        break;
 800a4fc:	e008      	b.n	800a510 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a502:	61bb      	str	r3, [r7, #24]
        break;
 800a504:	e004      	b.n	800a510 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800a506:	2300      	movs	r3, #0
 800a508:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	77bb      	strb	r3, [r7, #30]
        break;
 800a50e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d074      	beq.n	800a600 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	005a      	lsls	r2, r3, #1
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	085b      	lsrs	r3, r3, #1
 800a520:	441a      	add	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	fbb2 f3f3 	udiv	r3, r2, r3
 800a52a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2b0f      	cmp	r3, #15
 800a530:	d916      	bls.n	800a560 <UART_SetConfig+0x19c>
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a538:	d212      	bcs.n	800a560 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	f023 030f 	bic.w	r3, r3, #15
 800a542:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	085b      	lsrs	r3, r3, #1
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f003 0307 	and.w	r3, r3, #7
 800a54e:	b29a      	uxth	r2, r3
 800a550:	89fb      	ldrh	r3, [r7, #14]
 800a552:	4313      	orrs	r3, r2
 800a554:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	89fa      	ldrh	r2, [r7, #14]
 800a55c:	60da      	str	r2, [r3, #12]
 800a55e:	e04f      	b.n	800a600 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	77bb      	strb	r3, [r7, #30]
 800a564:	e04c      	b.n	800a600 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a566:	7ffb      	ldrb	r3, [r7, #31]
 800a568:	2b08      	cmp	r3, #8
 800a56a:	d828      	bhi.n	800a5be <UART_SetConfig+0x1fa>
 800a56c:	a201      	add	r2, pc, #4	; (adr r2, 800a574 <UART_SetConfig+0x1b0>)
 800a56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a572:	bf00      	nop
 800a574:	0800a599 	.word	0x0800a599
 800a578:	0800a5a1 	.word	0x0800a5a1
 800a57c:	0800a5a9 	.word	0x0800a5a9
 800a580:	0800a5bf 	.word	0x0800a5bf
 800a584:	0800a5af 	.word	0x0800a5af
 800a588:	0800a5bf 	.word	0x0800a5bf
 800a58c:	0800a5bf 	.word	0x0800a5bf
 800a590:	0800a5bf 	.word	0x0800a5bf
 800a594:	0800a5b7 	.word	0x0800a5b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a598:	f7fe fb5a 	bl	8008c50 <HAL_RCC_GetPCLK1Freq>
 800a59c:	61b8      	str	r0, [r7, #24]
        break;
 800a59e:	e013      	b.n	800a5c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5a0:	f7fe fb78 	bl	8008c94 <HAL_RCC_GetPCLK2Freq>
 800a5a4:	61b8      	str	r0, [r7, #24]
        break;
 800a5a6:	e00f      	b.n	800a5c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5a8:	4b20      	ldr	r3, [pc, #128]	; (800a62c <UART_SetConfig+0x268>)
 800a5aa:	61bb      	str	r3, [r7, #24]
        break;
 800a5ac:	e00c      	b.n	800a5c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ae:	f7fe fad9 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 800a5b2:	61b8      	str	r0, [r7, #24]
        break;
 800a5b4:	e008      	b.n	800a5c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5ba:	61bb      	str	r3, [r7, #24]
        break;
 800a5bc:	e004      	b.n	800a5c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	77bb      	strb	r3, [r7, #30]
        break;
 800a5c6:	bf00      	nop
    }

    if (pclk != 0U)
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d018      	beq.n	800a600 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	085a      	lsrs	r2, r3, #1
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	441a      	add	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2b0f      	cmp	r3, #15
 800a5e6:	d909      	bls.n	800a5fc <UART_SetConfig+0x238>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ee:	d205      	bcs.n	800a5fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60da      	str	r2, [r3, #12]
 800a5fa:	e001      	b.n	800a600 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a60c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	efff69f3 	.word	0xefff69f3
 800a61c:	40013800 	.word	0x40013800
 800a620:	40021000 	.word	0x40021000
 800a624:	40004400 	.word	0x40004400
 800a628:	40004800 	.word	0x40004800
 800a62c:	007a1200 	.word	0x007a1200

0800a630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00a      	beq.n	800a65a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00a      	beq.n	800a67c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	430a      	orrs	r2, r1
 800a67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00a      	beq.n	800a69e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00a      	beq.n	800a6c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	f003 0310 	and.w	r3, r3, #16
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00a      	beq.n	800a6e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	f003 0320 	and.w	r3, r3, #32
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00a      	beq.n	800a704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	430a      	orrs	r2, r1
 800a702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01a      	beq.n	800a746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a72e:	d10a      	bne.n	800a746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	430a      	orrs	r2, r1
 800a744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00a      	beq.n	800a768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	430a      	orrs	r2, r1
 800a766:	605a      	str	r2, [r3, #4]
  }
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b098      	sub	sp, #96	; 0x60
 800a778:	af02      	add	r7, sp, #8
 800a77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a784:	f7fb fc12 	bl	8005fac <HAL_GetTick>
 800a788:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0308 	and.w	r3, r3, #8
 800a794:	2b08      	cmp	r3, #8
 800a796:	d12e      	bne.n	800a7f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f88c 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d021      	beq.n	800a7f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	e853 3f00 	ldrex	r3, [r3]
 800a7be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7c6:	653b      	str	r3, [r7, #80]	; 0x50
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a7d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7d8:	e841 2300 	strex	r3, r2, [r1]
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e6      	bne.n	800a7b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e062      	b.n	800a8bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0304 	and.w	r3, r3, #4
 800a800:	2b04      	cmp	r3, #4
 800a802:	d149      	bne.n	800a898 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a80c:	2200      	movs	r2, #0
 800a80e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f856 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d03c      	beq.n	800a898 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	623b      	str	r3, [r7, #32]
   return(result);
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a832:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a83c:	633b      	str	r3, [r7, #48]	; 0x30
 800a83e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e6      	bne.n	800a81e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3308      	adds	r3, #8
 800a856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	e853 3f00 	ldrex	r3, [r3]
 800a85e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 0301 	bic.w	r3, r3, #1
 800a866:	64bb      	str	r3, [r7, #72]	; 0x48
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a870:	61fa      	str	r2, [r7, #28]
 800a872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	69b9      	ldr	r1, [r7, #24]
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	e841 2300 	strex	r3, r2, [r1]
 800a87c:	617b      	str	r3, [r7, #20]
   return(result);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e5      	bne.n	800a850 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a894:	2303      	movs	r3, #3
 800a896:	e011      	b.n	800a8bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3758      	adds	r7, #88	; 0x58
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	603b      	str	r3, [r7, #0]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8d4:	e049      	b.n	800a96a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8dc:	d045      	beq.n	800a96a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8de:	f7fb fb65 	bl	8005fac <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d302      	bcc.n	800a8f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e048      	b.n	800a98a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0304 	and.w	r3, r3, #4
 800a902:	2b00      	cmp	r3, #0
 800a904:	d031      	beq.n	800a96a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	f003 0308 	and.w	r3, r3, #8
 800a910:	2b08      	cmp	r3, #8
 800a912:	d110      	bne.n	800a936 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2208      	movs	r2, #8
 800a91a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 f838 	bl	800a992 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2208      	movs	r2, #8
 800a926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e029      	b.n	800a98a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a944:	d111      	bne.n	800a96a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a94e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 f81e 	bl	800a992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2220      	movs	r2, #32
 800a95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e00f      	b.n	800a98a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	69da      	ldr	r2, [r3, #28]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	4013      	ands	r3, r2
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	429a      	cmp	r2, r3
 800a978:	bf0c      	ite	eq
 800a97a:	2301      	moveq	r3, #1
 800a97c:	2300      	movne	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	461a      	mov	r2, r3
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	429a      	cmp	r2, r3
 800a986:	d0a6      	beq.n	800a8d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a992:	b480      	push	{r7}
 800a994:	b095      	sub	sp, #84	; 0x54
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a9ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e6      	bne.n	800a99a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	f023 0301 	bic.w	r3, r3, #1
 800a9e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e5      	bne.n	800a9cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d118      	bne.n	800aa3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	e853 3f00 	ldrex	r3, [r3]
 800aa14:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f023 0310 	bic.w	r3, r3, #16
 800aa1c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa26:	61bb      	str	r3, [r7, #24]
 800aa28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2a:	6979      	ldr	r1, [r7, #20]
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	613b      	str	r3, [r7, #16]
   return(result);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e6      	bne.n	800aa08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800aa4e:	bf00      	nop
 800aa50:	3754      	adds	r7, #84	; 0x54
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f7ff fc8d 	bl	800a398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b088      	sub	sp, #32
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaa2:	61fb      	str	r3, [r7, #28]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	61bb      	str	r3, [r7, #24]
 800aaae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab0:	6979      	ldr	r1, [r7, #20]
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	e841 2300 	strex	r3, r2, [r1]
 800aab8:	613b      	str	r3, [r7, #16]
   return(result);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e6      	bne.n	800aa8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2220      	movs	r2, #32
 800aac4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fc59 	bl	800a384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aad2:	bf00      	nop
 800aad4:	3720      	adds	r7, #32
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aae2:	bf00      	nop
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <atoi>:
 800aaee:	220a      	movs	r2, #10
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	f000 ba05 	b.w	800af00 <strtol>
	...

0800aaf8 <__errno>:
 800aaf8:	4b01      	ldr	r3, [pc, #4]	; (800ab00 <__errno+0x8>)
 800aafa:	6818      	ldr	r0, [r3, #0]
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	2000006c 	.word	0x2000006c

0800ab04 <__libc_init_array>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	4d0d      	ldr	r5, [pc, #52]	; (800ab3c <__libc_init_array+0x38>)
 800ab08:	4c0d      	ldr	r4, [pc, #52]	; (800ab40 <__libc_init_array+0x3c>)
 800ab0a:	1b64      	subs	r4, r4, r5
 800ab0c:	10a4      	asrs	r4, r4, #2
 800ab0e:	2600      	movs	r6, #0
 800ab10:	42a6      	cmp	r6, r4
 800ab12:	d109      	bne.n	800ab28 <__libc_init_array+0x24>
 800ab14:	4d0b      	ldr	r5, [pc, #44]	; (800ab44 <__libc_init_array+0x40>)
 800ab16:	4c0c      	ldr	r4, [pc, #48]	; (800ab48 <__libc_init_array+0x44>)
 800ab18:	f001 fbb2 	bl	800c280 <_init>
 800ab1c:	1b64      	subs	r4, r4, r5
 800ab1e:	10a4      	asrs	r4, r4, #2
 800ab20:	2600      	movs	r6, #0
 800ab22:	42a6      	cmp	r6, r4
 800ab24:	d105      	bne.n	800ab32 <__libc_init_array+0x2e>
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab2c:	4798      	blx	r3
 800ab2e:	3601      	adds	r6, #1
 800ab30:	e7ee      	b.n	800ab10 <__libc_init_array+0xc>
 800ab32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab36:	4798      	blx	r3
 800ab38:	3601      	adds	r6, #1
 800ab3a:	e7f2      	b.n	800ab22 <__libc_init_array+0x1e>
 800ab3c:	0800e138 	.word	0x0800e138
 800ab40:	0800e138 	.word	0x0800e138
 800ab44:	0800e138 	.word	0x0800e138
 800ab48:	0800e13c 	.word	0x0800e13c

0800ab4c <memset>:
 800ab4c:	4402      	add	r2, r0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d100      	bne.n	800ab56 <memset+0xa>
 800ab54:	4770      	bx	lr
 800ab56:	f803 1b01 	strb.w	r1, [r3], #1
 800ab5a:	e7f9      	b.n	800ab50 <memset+0x4>

0800ab5c <iprintf>:
 800ab5c:	b40f      	push	{r0, r1, r2, r3}
 800ab5e:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <iprintf+0x2c>)
 800ab60:	b513      	push	{r0, r1, r4, lr}
 800ab62:	681c      	ldr	r4, [r3, #0]
 800ab64:	b124      	cbz	r4, 800ab70 <iprintf+0x14>
 800ab66:	69a3      	ldr	r3, [r4, #24]
 800ab68:	b913      	cbnz	r3, 800ab70 <iprintf+0x14>
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 fbca 	bl	800b304 <__sinit>
 800ab70:	ab05      	add	r3, sp, #20
 800ab72:	9a04      	ldr	r2, [sp, #16]
 800ab74:	68a1      	ldr	r1, [r4, #8]
 800ab76:	9301      	str	r3, [sp, #4]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 ff49 	bl	800ba10 <_vfiprintf_r>
 800ab7e:	b002      	add	sp, #8
 800ab80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab84:	b004      	add	sp, #16
 800ab86:	4770      	bx	lr
 800ab88:	2000006c 	.word	0x2000006c

0800ab8c <_puts_r>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	460e      	mov	r6, r1
 800ab90:	4605      	mov	r5, r0
 800ab92:	b118      	cbz	r0, 800ab9c <_puts_r+0x10>
 800ab94:	6983      	ldr	r3, [r0, #24]
 800ab96:	b90b      	cbnz	r3, 800ab9c <_puts_r+0x10>
 800ab98:	f000 fbb4 	bl	800b304 <__sinit>
 800ab9c:	69ab      	ldr	r3, [r5, #24]
 800ab9e:	68ac      	ldr	r4, [r5, #8]
 800aba0:	b913      	cbnz	r3, 800aba8 <_puts_r+0x1c>
 800aba2:	4628      	mov	r0, r5
 800aba4:	f000 fbae 	bl	800b304 <__sinit>
 800aba8:	4b2c      	ldr	r3, [pc, #176]	; (800ac5c <_puts_r+0xd0>)
 800abaa:	429c      	cmp	r4, r3
 800abac:	d120      	bne.n	800abf0 <_puts_r+0x64>
 800abae:	686c      	ldr	r4, [r5, #4]
 800abb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abb2:	07db      	lsls	r3, r3, #31
 800abb4:	d405      	bmi.n	800abc2 <_puts_r+0x36>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	0598      	lsls	r0, r3, #22
 800abba:	d402      	bmi.n	800abc2 <_puts_r+0x36>
 800abbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abbe:	f000 fc51 	bl	800b464 <__retarget_lock_acquire_recursive>
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	0719      	lsls	r1, r3, #28
 800abc6:	d51d      	bpl.n	800ac04 <_puts_r+0x78>
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	b1db      	cbz	r3, 800ac04 <_puts_r+0x78>
 800abcc:	3e01      	subs	r6, #1
 800abce:	68a3      	ldr	r3, [r4, #8]
 800abd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abd4:	3b01      	subs	r3, #1
 800abd6:	60a3      	str	r3, [r4, #8]
 800abd8:	bb39      	cbnz	r1, 800ac2a <_puts_r+0x9e>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	da38      	bge.n	800ac50 <_puts_r+0xc4>
 800abde:	4622      	mov	r2, r4
 800abe0:	210a      	movs	r1, #10
 800abe2:	4628      	mov	r0, r5
 800abe4:	f000 f996 	bl	800af14 <__swbuf_r>
 800abe8:	3001      	adds	r0, #1
 800abea:	d011      	beq.n	800ac10 <_puts_r+0x84>
 800abec:	250a      	movs	r5, #10
 800abee:	e011      	b.n	800ac14 <_puts_r+0x88>
 800abf0:	4b1b      	ldr	r3, [pc, #108]	; (800ac60 <_puts_r+0xd4>)
 800abf2:	429c      	cmp	r4, r3
 800abf4:	d101      	bne.n	800abfa <_puts_r+0x6e>
 800abf6:	68ac      	ldr	r4, [r5, #8]
 800abf8:	e7da      	b.n	800abb0 <_puts_r+0x24>
 800abfa:	4b1a      	ldr	r3, [pc, #104]	; (800ac64 <_puts_r+0xd8>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	bf08      	it	eq
 800ac00:	68ec      	ldreq	r4, [r5, #12]
 800ac02:	e7d5      	b.n	800abb0 <_puts_r+0x24>
 800ac04:	4621      	mov	r1, r4
 800ac06:	4628      	mov	r0, r5
 800ac08:	f000 f9d6 	bl	800afb8 <__swsetup_r>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d0dd      	beq.n	800abcc <_puts_r+0x40>
 800ac10:	f04f 35ff 	mov.w	r5, #4294967295
 800ac14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac16:	07da      	lsls	r2, r3, #31
 800ac18:	d405      	bmi.n	800ac26 <_puts_r+0x9a>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	059b      	lsls	r3, r3, #22
 800ac1e:	d402      	bmi.n	800ac26 <_puts_r+0x9a>
 800ac20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac22:	f000 fc20 	bl	800b466 <__retarget_lock_release_recursive>
 800ac26:	4628      	mov	r0, r5
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	da04      	bge.n	800ac38 <_puts_r+0xac>
 800ac2e:	69a2      	ldr	r2, [r4, #24]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	dc06      	bgt.n	800ac42 <_puts_r+0xb6>
 800ac34:	290a      	cmp	r1, #10
 800ac36:	d004      	beq.n	800ac42 <_puts_r+0xb6>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	6022      	str	r2, [r4, #0]
 800ac3e:	7019      	strb	r1, [r3, #0]
 800ac40:	e7c5      	b.n	800abce <_puts_r+0x42>
 800ac42:	4622      	mov	r2, r4
 800ac44:	4628      	mov	r0, r5
 800ac46:	f000 f965 	bl	800af14 <__swbuf_r>
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	d1bf      	bne.n	800abce <_puts_r+0x42>
 800ac4e:	e7df      	b.n	800ac10 <_puts_r+0x84>
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	250a      	movs	r5, #10
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	6022      	str	r2, [r4, #0]
 800ac58:	701d      	strb	r5, [r3, #0]
 800ac5a:	e7db      	b.n	800ac14 <_puts_r+0x88>
 800ac5c:	0800e0c4 	.word	0x0800e0c4
 800ac60:	0800e0e4 	.word	0x0800e0e4
 800ac64:	0800e0a4 	.word	0x0800e0a4

0800ac68 <puts>:
 800ac68:	4b02      	ldr	r3, [pc, #8]	; (800ac74 <puts+0xc>)
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	f7ff bf8d 	b.w	800ab8c <_puts_r>
 800ac72:	bf00      	nop
 800ac74:	2000006c 	.word	0x2000006c

0800ac78 <srand>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4b10      	ldr	r3, [pc, #64]	; (800acbc <srand+0x44>)
 800ac7c:	681d      	ldr	r5, [r3, #0]
 800ac7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ac80:	4604      	mov	r4, r0
 800ac82:	b9b3      	cbnz	r3, 800acb2 <srand+0x3a>
 800ac84:	2018      	movs	r0, #24
 800ac86:	f000 fc55 	bl	800b534 <malloc>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	63a8      	str	r0, [r5, #56]	; 0x38
 800ac8e:	b920      	cbnz	r0, 800ac9a <srand+0x22>
 800ac90:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <srand+0x48>)
 800ac92:	480c      	ldr	r0, [pc, #48]	; (800acc4 <srand+0x4c>)
 800ac94:	2142      	movs	r1, #66	; 0x42
 800ac96:	f000 f9fd 	bl	800b094 <__assert_func>
 800ac9a:	490b      	ldr	r1, [pc, #44]	; (800acc8 <srand+0x50>)
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <srand+0x54>)
 800ac9e:	e9c0 1300 	strd	r1, r3, [r0]
 800aca2:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <srand+0x58>)
 800aca4:	6083      	str	r3, [r0, #8]
 800aca6:	230b      	movs	r3, #11
 800aca8:	8183      	strh	r3, [r0, #12]
 800acaa:	2100      	movs	r1, #0
 800acac:	2001      	movs	r0, #1
 800acae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800acb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800acb4:	2200      	movs	r2, #0
 800acb6:	611c      	str	r4, [r3, #16]
 800acb8:	615a      	str	r2, [r3, #20]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	2000006c 	.word	0x2000006c
 800acc0:	0800def4 	.word	0x0800def4
 800acc4:	0800df0b 	.word	0x0800df0b
 800acc8:	abcd330e 	.word	0xabcd330e
 800accc:	e66d1234 	.word	0xe66d1234
 800acd0:	0005deec 	.word	0x0005deec

0800acd4 <rand>:
 800acd4:	4b16      	ldr	r3, [pc, #88]	; (800ad30 <rand+0x5c>)
 800acd6:	b510      	push	{r4, lr}
 800acd8:	681c      	ldr	r4, [r3, #0]
 800acda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800acdc:	b9b3      	cbnz	r3, 800ad0c <rand+0x38>
 800acde:	2018      	movs	r0, #24
 800ace0:	f000 fc28 	bl	800b534 <malloc>
 800ace4:	63a0      	str	r0, [r4, #56]	; 0x38
 800ace6:	b928      	cbnz	r0, 800acf4 <rand+0x20>
 800ace8:	4602      	mov	r2, r0
 800acea:	4b12      	ldr	r3, [pc, #72]	; (800ad34 <rand+0x60>)
 800acec:	4812      	ldr	r0, [pc, #72]	; (800ad38 <rand+0x64>)
 800acee:	214e      	movs	r1, #78	; 0x4e
 800acf0:	f000 f9d0 	bl	800b094 <__assert_func>
 800acf4:	4a11      	ldr	r2, [pc, #68]	; (800ad3c <rand+0x68>)
 800acf6:	4b12      	ldr	r3, [pc, #72]	; (800ad40 <rand+0x6c>)
 800acf8:	e9c0 2300 	strd	r2, r3, [r0]
 800acfc:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <rand+0x70>)
 800acfe:	6083      	str	r3, [r0, #8]
 800ad00:	230b      	movs	r3, #11
 800ad02:	8183      	strh	r3, [r0, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	2300      	movs	r3, #0
 800ad08:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ad0c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ad0e:	4a0e      	ldr	r2, [pc, #56]	; (800ad48 <rand+0x74>)
 800ad10:	6920      	ldr	r0, [r4, #16]
 800ad12:	6963      	ldr	r3, [r4, #20]
 800ad14:	490d      	ldr	r1, [pc, #52]	; (800ad4c <rand+0x78>)
 800ad16:	4342      	muls	r2, r0
 800ad18:	fb01 2203 	mla	r2, r1, r3, r2
 800ad1c:	fba0 0101 	umull	r0, r1, r0, r1
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	eb42 0001 	adc.w	r0, r2, r1
 800ad26:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ad2a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ad2e:	bd10      	pop	{r4, pc}
 800ad30:	2000006c 	.word	0x2000006c
 800ad34:	0800def4 	.word	0x0800def4
 800ad38:	0800df0b 	.word	0x0800df0b
 800ad3c:	abcd330e 	.word	0xabcd330e
 800ad40:	e66d1234 	.word	0xe66d1234
 800ad44:	0005deec 	.word	0x0005deec
 800ad48:	5851f42d 	.word	0x5851f42d
 800ad4c:	4c957f2d 	.word	0x4c957f2d

0800ad50 <sniprintf>:
 800ad50:	b40c      	push	{r2, r3}
 800ad52:	b530      	push	{r4, r5, lr}
 800ad54:	4b17      	ldr	r3, [pc, #92]	; (800adb4 <sniprintf+0x64>)
 800ad56:	1e0c      	subs	r4, r1, #0
 800ad58:	681d      	ldr	r5, [r3, #0]
 800ad5a:	b09d      	sub	sp, #116	; 0x74
 800ad5c:	da08      	bge.n	800ad70 <sniprintf+0x20>
 800ad5e:	238b      	movs	r3, #139	; 0x8b
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	f04f 30ff 	mov.w	r0, #4294967295
 800ad66:	b01d      	add	sp, #116	; 0x74
 800ad68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad6c:	b002      	add	sp, #8
 800ad6e:	4770      	bx	lr
 800ad70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad78:	bf14      	ite	ne
 800ad7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad7e:	4623      	moveq	r3, r4
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	9307      	str	r3, [sp, #28]
 800ad84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad88:	9002      	str	r0, [sp, #8]
 800ad8a:	9006      	str	r0, [sp, #24]
 800ad8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad92:	ab21      	add	r3, sp, #132	; 0x84
 800ad94:	a902      	add	r1, sp, #8
 800ad96:	4628      	mov	r0, r5
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	f000 fd0f 	bl	800b7bc <_svfiprintf_r>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	bfbc      	itt	lt
 800ada2:	238b      	movlt	r3, #139	; 0x8b
 800ada4:	602b      	strlt	r3, [r5, #0]
 800ada6:	2c00      	cmp	r4, #0
 800ada8:	d0dd      	beq.n	800ad66 <sniprintf+0x16>
 800adaa:	9b02      	ldr	r3, [sp, #8]
 800adac:	2200      	movs	r2, #0
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	e7d9      	b.n	800ad66 <sniprintf+0x16>
 800adb2:	bf00      	nop
 800adb4:	2000006c 	.word	0x2000006c

0800adb8 <strcat>:
 800adb8:	b510      	push	{r4, lr}
 800adba:	4602      	mov	r2, r0
 800adbc:	7814      	ldrb	r4, [r2, #0]
 800adbe:	4613      	mov	r3, r2
 800adc0:	3201      	adds	r2, #1
 800adc2:	2c00      	cmp	r4, #0
 800adc4:	d1fa      	bne.n	800adbc <strcat+0x4>
 800adc6:	3b01      	subs	r3, #1
 800adc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800add0:	2a00      	cmp	r2, #0
 800add2:	d1f9      	bne.n	800adc8 <strcat+0x10>
 800add4:	bd10      	pop	{r4, pc}

0800add6 <strncpy>:
 800add6:	b510      	push	{r4, lr}
 800add8:	3901      	subs	r1, #1
 800adda:	4603      	mov	r3, r0
 800addc:	b132      	cbz	r2, 800adec <strncpy+0x16>
 800adde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ade2:	f803 4b01 	strb.w	r4, [r3], #1
 800ade6:	3a01      	subs	r2, #1
 800ade8:	2c00      	cmp	r4, #0
 800adea:	d1f7      	bne.n	800addc <strncpy+0x6>
 800adec:	441a      	add	r2, r3
 800adee:	2100      	movs	r1, #0
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d100      	bne.n	800adf6 <strncpy+0x20>
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	f803 1b01 	strb.w	r1, [r3], #1
 800adfa:	e7f9      	b.n	800adf0 <strncpy+0x1a>

0800adfc <_strtol_l.constprop.0>:
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae02:	d001      	beq.n	800ae08 <_strtol_l.constprop.0+0xc>
 800ae04:	2b24      	cmp	r3, #36	; 0x24
 800ae06:	d906      	bls.n	800ae16 <_strtol_l.constprop.0+0x1a>
 800ae08:	f7ff fe76 	bl	800aaf8 <__errno>
 800ae0c:	2316      	movs	r3, #22
 800ae0e:	6003      	str	r3, [r0, #0]
 800ae10:	2000      	movs	r0, #0
 800ae12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aefc <_strtol_l.constprop.0+0x100>
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	462e      	mov	r6, r5
 800ae1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae22:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ae26:	f017 0708 	ands.w	r7, r7, #8
 800ae2a:	d1f7      	bne.n	800ae1c <_strtol_l.constprop.0+0x20>
 800ae2c:	2c2d      	cmp	r4, #45	; 0x2d
 800ae2e:	d132      	bne.n	800ae96 <_strtol_l.constprop.0+0x9a>
 800ae30:	782c      	ldrb	r4, [r5, #0]
 800ae32:	2701      	movs	r7, #1
 800ae34:	1cb5      	adds	r5, r6, #2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d05b      	beq.n	800aef2 <_strtol_l.constprop.0+0xf6>
 800ae3a:	2b10      	cmp	r3, #16
 800ae3c:	d109      	bne.n	800ae52 <_strtol_l.constprop.0+0x56>
 800ae3e:	2c30      	cmp	r4, #48	; 0x30
 800ae40:	d107      	bne.n	800ae52 <_strtol_l.constprop.0+0x56>
 800ae42:	782c      	ldrb	r4, [r5, #0]
 800ae44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae48:	2c58      	cmp	r4, #88	; 0x58
 800ae4a:	d14d      	bne.n	800aee8 <_strtol_l.constprop.0+0xec>
 800ae4c:	786c      	ldrb	r4, [r5, #1]
 800ae4e:	2310      	movs	r3, #16
 800ae50:	3502      	adds	r5, #2
 800ae52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ae56:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae5a:	f04f 0c00 	mov.w	ip, #0
 800ae5e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ae62:	4666      	mov	r6, ip
 800ae64:	fb03 8a19 	mls	sl, r3, r9, r8
 800ae68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ae6c:	f1be 0f09 	cmp.w	lr, #9
 800ae70:	d816      	bhi.n	800aea0 <_strtol_l.constprop.0+0xa4>
 800ae72:	4674      	mov	r4, lr
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	dd24      	ble.n	800aec2 <_strtol_l.constprop.0+0xc6>
 800ae78:	f1bc 0f00 	cmp.w	ip, #0
 800ae7c:	db1e      	blt.n	800aebc <_strtol_l.constprop.0+0xc0>
 800ae7e:	45b1      	cmp	r9, r6
 800ae80:	d31c      	bcc.n	800aebc <_strtol_l.constprop.0+0xc0>
 800ae82:	d101      	bne.n	800ae88 <_strtol_l.constprop.0+0x8c>
 800ae84:	45a2      	cmp	sl, r4
 800ae86:	db19      	blt.n	800aebc <_strtol_l.constprop.0+0xc0>
 800ae88:	fb06 4603 	mla	r6, r6, r3, r4
 800ae8c:	f04f 0c01 	mov.w	ip, #1
 800ae90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae94:	e7e8      	b.n	800ae68 <_strtol_l.constprop.0+0x6c>
 800ae96:	2c2b      	cmp	r4, #43	; 0x2b
 800ae98:	bf04      	itt	eq
 800ae9a:	782c      	ldrbeq	r4, [r5, #0]
 800ae9c:	1cb5      	addeq	r5, r6, #2
 800ae9e:	e7ca      	b.n	800ae36 <_strtol_l.constprop.0+0x3a>
 800aea0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aea4:	f1be 0f19 	cmp.w	lr, #25
 800aea8:	d801      	bhi.n	800aeae <_strtol_l.constprop.0+0xb2>
 800aeaa:	3c37      	subs	r4, #55	; 0x37
 800aeac:	e7e2      	b.n	800ae74 <_strtol_l.constprop.0+0x78>
 800aeae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aeb2:	f1be 0f19 	cmp.w	lr, #25
 800aeb6:	d804      	bhi.n	800aec2 <_strtol_l.constprop.0+0xc6>
 800aeb8:	3c57      	subs	r4, #87	; 0x57
 800aeba:	e7db      	b.n	800ae74 <_strtol_l.constprop.0+0x78>
 800aebc:	f04f 3cff 	mov.w	ip, #4294967295
 800aec0:	e7e6      	b.n	800ae90 <_strtol_l.constprop.0+0x94>
 800aec2:	f1bc 0f00 	cmp.w	ip, #0
 800aec6:	da05      	bge.n	800aed4 <_strtol_l.constprop.0+0xd8>
 800aec8:	2322      	movs	r3, #34	; 0x22
 800aeca:	6003      	str	r3, [r0, #0]
 800aecc:	4646      	mov	r6, r8
 800aece:	b942      	cbnz	r2, 800aee2 <_strtol_l.constprop.0+0xe6>
 800aed0:	4630      	mov	r0, r6
 800aed2:	e79e      	b.n	800ae12 <_strtol_l.constprop.0+0x16>
 800aed4:	b107      	cbz	r7, 800aed8 <_strtol_l.constprop.0+0xdc>
 800aed6:	4276      	negs	r6, r6
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d0f9      	beq.n	800aed0 <_strtol_l.constprop.0+0xd4>
 800aedc:	f1bc 0f00 	cmp.w	ip, #0
 800aee0:	d000      	beq.n	800aee4 <_strtol_l.constprop.0+0xe8>
 800aee2:	1e69      	subs	r1, r5, #1
 800aee4:	6011      	str	r1, [r2, #0]
 800aee6:	e7f3      	b.n	800aed0 <_strtol_l.constprop.0+0xd4>
 800aee8:	2430      	movs	r4, #48	; 0x30
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1b1      	bne.n	800ae52 <_strtol_l.constprop.0+0x56>
 800aeee:	2308      	movs	r3, #8
 800aef0:	e7af      	b.n	800ae52 <_strtol_l.constprop.0+0x56>
 800aef2:	2c30      	cmp	r4, #48	; 0x30
 800aef4:	d0a5      	beq.n	800ae42 <_strtol_l.constprop.0+0x46>
 800aef6:	230a      	movs	r3, #10
 800aef8:	e7ab      	b.n	800ae52 <_strtol_l.constprop.0+0x56>
 800aefa:	bf00      	nop
 800aefc:	0800dfa3 	.word	0x0800dfa3

0800af00 <strtol>:
 800af00:	4613      	mov	r3, r2
 800af02:	460a      	mov	r2, r1
 800af04:	4601      	mov	r1, r0
 800af06:	4802      	ldr	r0, [pc, #8]	; (800af10 <strtol+0x10>)
 800af08:	6800      	ldr	r0, [r0, #0]
 800af0a:	f7ff bf77 	b.w	800adfc <_strtol_l.constprop.0>
 800af0e:	bf00      	nop
 800af10:	2000006c 	.word	0x2000006c

0800af14 <__swbuf_r>:
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af16:	460e      	mov	r6, r1
 800af18:	4614      	mov	r4, r2
 800af1a:	4605      	mov	r5, r0
 800af1c:	b118      	cbz	r0, 800af26 <__swbuf_r+0x12>
 800af1e:	6983      	ldr	r3, [r0, #24]
 800af20:	b90b      	cbnz	r3, 800af26 <__swbuf_r+0x12>
 800af22:	f000 f9ef 	bl	800b304 <__sinit>
 800af26:	4b21      	ldr	r3, [pc, #132]	; (800afac <__swbuf_r+0x98>)
 800af28:	429c      	cmp	r4, r3
 800af2a:	d12b      	bne.n	800af84 <__swbuf_r+0x70>
 800af2c:	686c      	ldr	r4, [r5, #4]
 800af2e:	69a3      	ldr	r3, [r4, #24]
 800af30:	60a3      	str	r3, [r4, #8]
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	071a      	lsls	r2, r3, #28
 800af36:	d52f      	bpl.n	800af98 <__swbuf_r+0x84>
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	b36b      	cbz	r3, 800af98 <__swbuf_r+0x84>
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	6820      	ldr	r0, [r4, #0]
 800af40:	1ac0      	subs	r0, r0, r3
 800af42:	6963      	ldr	r3, [r4, #20]
 800af44:	b2f6      	uxtb	r6, r6
 800af46:	4283      	cmp	r3, r0
 800af48:	4637      	mov	r7, r6
 800af4a:	dc04      	bgt.n	800af56 <__swbuf_r+0x42>
 800af4c:	4621      	mov	r1, r4
 800af4e:	4628      	mov	r0, r5
 800af50:	f000 f944 	bl	800b1dc <_fflush_r>
 800af54:	bb30      	cbnz	r0, 800afa4 <__swbuf_r+0x90>
 800af56:	68a3      	ldr	r3, [r4, #8]
 800af58:	3b01      	subs	r3, #1
 800af5a:	60a3      	str	r3, [r4, #8]
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	1c5a      	adds	r2, r3, #1
 800af60:	6022      	str	r2, [r4, #0]
 800af62:	701e      	strb	r6, [r3, #0]
 800af64:	6963      	ldr	r3, [r4, #20]
 800af66:	3001      	adds	r0, #1
 800af68:	4283      	cmp	r3, r0
 800af6a:	d004      	beq.n	800af76 <__swbuf_r+0x62>
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	07db      	lsls	r3, r3, #31
 800af70:	d506      	bpl.n	800af80 <__swbuf_r+0x6c>
 800af72:	2e0a      	cmp	r6, #10
 800af74:	d104      	bne.n	800af80 <__swbuf_r+0x6c>
 800af76:	4621      	mov	r1, r4
 800af78:	4628      	mov	r0, r5
 800af7a:	f000 f92f 	bl	800b1dc <_fflush_r>
 800af7e:	b988      	cbnz	r0, 800afa4 <__swbuf_r+0x90>
 800af80:	4638      	mov	r0, r7
 800af82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af84:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <__swbuf_r+0x9c>)
 800af86:	429c      	cmp	r4, r3
 800af88:	d101      	bne.n	800af8e <__swbuf_r+0x7a>
 800af8a:	68ac      	ldr	r4, [r5, #8]
 800af8c:	e7cf      	b.n	800af2e <__swbuf_r+0x1a>
 800af8e:	4b09      	ldr	r3, [pc, #36]	; (800afb4 <__swbuf_r+0xa0>)
 800af90:	429c      	cmp	r4, r3
 800af92:	bf08      	it	eq
 800af94:	68ec      	ldreq	r4, [r5, #12]
 800af96:	e7ca      	b.n	800af2e <__swbuf_r+0x1a>
 800af98:	4621      	mov	r1, r4
 800af9a:	4628      	mov	r0, r5
 800af9c:	f000 f80c 	bl	800afb8 <__swsetup_r>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d0cb      	beq.n	800af3c <__swbuf_r+0x28>
 800afa4:	f04f 37ff 	mov.w	r7, #4294967295
 800afa8:	e7ea      	b.n	800af80 <__swbuf_r+0x6c>
 800afaa:	bf00      	nop
 800afac:	0800e0c4 	.word	0x0800e0c4
 800afb0:	0800e0e4 	.word	0x0800e0e4
 800afb4:	0800e0a4 	.word	0x0800e0a4

0800afb8 <__swsetup_r>:
 800afb8:	4b32      	ldr	r3, [pc, #200]	; (800b084 <__swsetup_r+0xcc>)
 800afba:	b570      	push	{r4, r5, r6, lr}
 800afbc:	681d      	ldr	r5, [r3, #0]
 800afbe:	4606      	mov	r6, r0
 800afc0:	460c      	mov	r4, r1
 800afc2:	b125      	cbz	r5, 800afce <__swsetup_r+0x16>
 800afc4:	69ab      	ldr	r3, [r5, #24]
 800afc6:	b913      	cbnz	r3, 800afce <__swsetup_r+0x16>
 800afc8:	4628      	mov	r0, r5
 800afca:	f000 f99b 	bl	800b304 <__sinit>
 800afce:	4b2e      	ldr	r3, [pc, #184]	; (800b088 <__swsetup_r+0xd0>)
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d10f      	bne.n	800aff4 <__swsetup_r+0x3c>
 800afd4:	686c      	ldr	r4, [r5, #4]
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afdc:	0719      	lsls	r1, r3, #28
 800afde:	d42c      	bmi.n	800b03a <__swsetup_r+0x82>
 800afe0:	06dd      	lsls	r5, r3, #27
 800afe2:	d411      	bmi.n	800b008 <__swsetup_r+0x50>
 800afe4:	2309      	movs	r3, #9
 800afe6:	6033      	str	r3, [r6, #0]
 800afe8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afec:	81a3      	strh	r3, [r4, #12]
 800afee:	f04f 30ff 	mov.w	r0, #4294967295
 800aff2:	e03e      	b.n	800b072 <__swsetup_r+0xba>
 800aff4:	4b25      	ldr	r3, [pc, #148]	; (800b08c <__swsetup_r+0xd4>)
 800aff6:	429c      	cmp	r4, r3
 800aff8:	d101      	bne.n	800affe <__swsetup_r+0x46>
 800affa:	68ac      	ldr	r4, [r5, #8]
 800affc:	e7eb      	b.n	800afd6 <__swsetup_r+0x1e>
 800affe:	4b24      	ldr	r3, [pc, #144]	; (800b090 <__swsetup_r+0xd8>)
 800b000:	429c      	cmp	r4, r3
 800b002:	bf08      	it	eq
 800b004:	68ec      	ldreq	r4, [r5, #12]
 800b006:	e7e6      	b.n	800afd6 <__swsetup_r+0x1e>
 800b008:	0758      	lsls	r0, r3, #29
 800b00a:	d512      	bpl.n	800b032 <__swsetup_r+0x7a>
 800b00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b00e:	b141      	cbz	r1, 800b022 <__swsetup_r+0x6a>
 800b010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b014:	4299      	cmp	r1, r3
 800b016:	d002      	beq.n	800b01e <__swsetup_r+0x66>
 800b018:	4630      	mov	r0, r6
 800b01a:	f000 fa93 	bl	800b544 <_free_r>
 800b01e:	2300      	movs	r3, #0
 800b020:	6363      	str	r3, [r4, #52]	; 0x34
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b028:	81a3      	strh	r3, [r4, #12]
 800b02a:	2300      	movs	r3, #0
 800b02c:	6063      	str	r3, [r4, #4]
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	f043 0308 	orr.w	r3, r3, #8
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	6923      	ldr	r3, [r4, #16]
 800b03c:	b94b      	cbnz	r3, 800b052 <__swsetup_r+0x9a>
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b048:	d003      	beq.n	800b052 <__swsetup_r+0x9a>
 800b04a:	4621      	mov	r1, r4
 800b04c:	4630      	mov	r0, r6
 800b04e:	f000 fa31 	bl	800b4b4 <__smakebuf_r>
 800b052:	89a0      	ldrh	r0, [r4, #12]
 800b054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b058:	f010 0301 	ands.w	r3, r0, #1
 800b05c:	d00a      	beq.n	800b074 <__swsetup_r+0xbc>
 800b05e:	2300      	movs	r3, #0
 800b060:	60a3      	str	r3, [r4, #8]
 800b062:	6963      	ldr	r3, [r4, #20]
 800b064:	425b      	negs	r3, r3
 800b066:	61a3      	str	r3, [r4, #24]
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	b943      	cbnz	r3, 800b07e <__swsetup_r+0xc6>
 800b06c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b070:	d1ba      	bne.n	800afe8 <__swsetup_r+0x30>
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	0781      	lsls	r1, r0, #30
 800b076:	bf58      	it	pl
 800b078:	6963      	ldrpl	r3, [r4, #20]
 800b07a:	60a3      	str	r3, [r4, #8]
 800b07c:	e7f4      	b.n	800b068 <__swsetup_r+0xb0>
 800b07e:	2000      	movs	r0, #0
 800b080:	e7f7      	b.n	800b072 <__swsetup_r+0xba>
 800b082:	bf00      	nop
 800b084:	2000006c 	.word	0x2000006c
 800b088:	0800e0c4 	.word	0x0800e0c4
 800b08c:	0800e0e4 	.word	0x0800e0e4
 800b090:	0800e0a4 	.word	0x0800e0a4

0800b094 <__assert_func>:
 800b094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b096:	4614      	mov	r4, r2
 800b098:	461a      	mov	r2, r3
 800b09a:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <__assert_func+0x2c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4605      	mov	r5, r0
 800b0a0:	68d8      	ldr	r0, [r3, #12]
 800b0a2:	b14c      	cbz	r4, 800b0b8 <__assert_func+0x24>
 800b0a4:	4b07      	ldr	r3, [pc, #28]	; (800b0c4 <__assert_func+0x30>)
 800b0a6:	9100      	str	r1, [sp, #0]
 800b0a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0ac:	4906      	ldr	r1, [pc, #24]	; (800b0c8 <__assert_func+0x34>)
 800b0ae:	462b      	mov	r3, r5
 800b0b0:	f000 f9a6 	bl	800b400 <fiprintf>
 800b0b4:	f000 ffd6 	bl	800c064 <abort>
 800b0b8:	4b04      	ldr	r3, [pc, #16]	; (800b0cc <__assert_func+0x38>)
 800b0ba:	461c      	mov	r4, r3
 800b0bc:	e7f3      	b.n	800b0a6 <__assert_func+0x12>
 800b0be:	bf00      	nop
 800b0c0:	2000006c 	.word	0x2000006c
 800b0c4:	0800df66 	.word	0x0800df66
 800b0c8:	0800df73 	.word	0x0800df73
 800b0cc:	0800dfa1 	.word	0x0800dfa1

0800b0d0 <__sflush_r>:
 800b0d0:	898a      	ldrh	r2, [r1, #12]
 800b0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	0710      	lsls	r0, r2, #28
 800b0da:	460c      	mov	r4, r1
 800b0dc:	d458      	bmi.n	800b190 <__sflush_r+0xc0>
 800b0de:	684b      	ldr	r3, [r1, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dc05      	bgt.n	800b0f0 <__sflush_r+0x20>
 800b0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dc02      	bgt.n	800b0f0 <__sflush_r+0x20>
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	d0f9      	beq.n	800b0ea <__sflush_r+0x1a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0fc:	682f      	ldr	r7, [r5, #0]
 800b0fe:	602b      	str	r3, [r5, #0]
 800b100:	d032      	beq.n	800b168 <__sflush_r+0x98>
 800b102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	075a      	lsls	r2, r3, #29
 800b108:	d505      	bpl.n	800b116 <__sflush_r+0x46>
 800b10a:	6863      	ldr	r3, [r4, #4]
 800b10c:	1ac0      	subs	r0, r0, r3
 800b10e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b110:	b10b      	cbz	r3, 800b116 <__sflush_r+0x46>
 800b112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b114:	1ac0      	subs	r0, r0, r3
 800b116:	2300      	movs	r3, #0
 800b118:	4602      	mov	r2, r0
 800b11a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b11c:	6a21      	ldr	r1, [r4, #32]
 800b11e:	4628      	mov	r0, r5
 800b120:	47b0      	blx	r6
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	d106      	bne.n	800b136 <__sflush_r+0x66>
 800b128:	6829      	ldr	r1, [r5, #0]
 800b12a:	291d      	cmp	r1, #29
 800b12c:	d82c      	bhi.n	800b188 <__sflush_r+0xb8>
 800b12e:	4a2a      	ldr	r2, [pc, #168]	; (800b1d8 <__sflush_r+0x108>)
 800b130:	40ca      	lsrs	r2, r1
 800b132:	07d6      	lsls	r6, r2, #31
 800b134:	d528      	bpl.n	800b188 <__sflush_r+0xb8>
 800b136:	2200      	movs	r2, #0
 800b138:	6062      	str	r2, [r4, #4]
 800b13a:	04d9      	lsls	r1, r3, #19
 800b13c:	6922      	ldr	r2, [r4, #16]
 800b13e:	6022      	str	r2, [r4, #0]
 800b140:	d504      	bpl.n	800b14c <__sflush_r+0x7c>
 800b142:	1c42      	adds	r2, r0, #1
 800b144:	d101      	bne.n	800b14a <__sflush_r+0x7a>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	b903      	cbnz	r3, 800b14c <__sflush_r+0x7c>
 800b14a:	6560      	str	r0, [r4, #84]	; 0x54
 800b14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b14e:	602f      	str	r7, [r5, #0]
 800b150:	2900      	cmp	r1, #0
 800b152:	d0ca      	beq.n	800b0ea <__sflush_r+0x1a>
 800b154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b158:	4299      	cmp	r1, r3
 800b15a:	d002      	beq.n	800b162 <__sflush_r+0x92>
 800b15c:	4628      	mov	r0, r5
 800b15e:	f000 f9f1 	bl	800b544 <_free_r>
 800b162:	2000      	movs	r0, #0
 800b164:	6360      	str	r0, [r4, #52]	; 0x34
 800b166:	e7c1      	b.n	800b0ec <__sflush_r+0x1c>
 800b168:	6a21      	ldr	r1, [r4, #32]
 800b16a:	2301      	movs	r3, #1
 800b16c:	4628      	mov	r0, r5
 800b16e:	47b0      	blx	r6
 800b170:	1c41      	adds	r1, r0, #1
 800b172:	d1c7      	bne.n	800b104 <__sflush_r+0x34>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0c4      	beq.n	800b104 <__sflush_r+0x34>
 800b17a:	2b1d      	cmp	r3, #29
 800b17c:	d001      	beq.n	800b182 <__sflush_r+0xb2>
 800b17e:	2b16      	cmp	r3, #22
 800b180:	d101      	bne.n	800b186 <__sflush_r+0xb6>
 800b182:	602f      	str	r7, [r5, #0]
 800b184:	e7b1      	b.n	800b0ea <__sflush_r+0x1a>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	e7ad      	b.n	800b0ec <__sflush_r+0x1c>
 800b190:	690f      	ldr	r7, [r1, #16]
 800b192:	2f00      	cmp	r7, #0
 800b194:	d0a9      	beq.n	800b0ea <__sflush_r+0x1a>
 800b196:	0793      	lsls	r3, r2, #30
 800b198:	680e      	ldr	r6, [r1, #0]
 800b19a:	bf08      	it	eq
 800b19c:	694b      	ldreq	r3, [r1, #20]
 800b19e:	600f      	str	r7, [r1, #0]
 800b1a0:	bf18      	it	ne
 800b1a2:	2300      	movne	r3, #0
 800b1a4:	eba6 0807 	sub.w	r8, r6, r7
 800b1a8:	608b      	str	r3, [r1, #8]
 800b1aa:	f1b8 0f00 	cmp.w	r8, #0
 800b1ae:	dd9c      	ble.n	800b0ea <__sflush_r+0x1a>
 800b1b0:	6a21      	ldr	r1, [r4, #32]
 800b1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1b4:	4643      	mov	r3, r8
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b0      	blx	r6
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	dc06      	bgt.n	800b1ce <__sflush_r+0xfe>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c6:	81a3      	strh	r3, [r4, #12]
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	e78e      	b.n	800b0ec <__sflush_r+0x1c>
 800b1ce:	4407      	add	r7, r0
 800b1d0:	eba8 0800 	sub.w	r8, r8, r0
 800b1d4:	e7e9      	b.n	800b1aa <__sflush_r+0xda>
 800b1d6:	bf00      	nop
 800b1d8:	20400001 	.word	0x20400001

0800b1dc <_fflush_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	690b      	ldr	r3, [r1, #16]
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	b913      	cbnz	r3, 800b1ec <_fflush_r+0x10>
 800b1e6:	2500      	movs	r5, #0
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
 800b1ec:	b118      	cbz	r0, 800b1f6 <_fflush_r+0x1a>
 800b1ee:	6983      	ldr	r3, [r0, #24]
 800b1f0:	b90b      	cbnz	r3, 800b1f6 <_fflush_r+0x1a>
 800b1f2:	f000 f887 	bl	800b304 <__sinit>
 800b1f6:	4b14      	ldr	r3, [pc, #80]	; (800b248 <_fflush_r+0x6c>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	d11b      	bne.n	800b234 <_fflush_r+0x58>
 800b1fc:	686c      	ldr	r4, [r5, #4]
 800b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0ef      	beq.n	800b1e6 <_fflush_r+0xa>
 800b206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b208:	07d0      	lsls	r0, r2, #31
 800b20a:	d404      	bmi.n	800b216 <_fflush_r+0x3a>
 800b20c:	0599      	lsls	r1, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_fflush_r+0x3a>
 800b210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b212:	f000 f927 	bl	800b464 <__retarget_lock_acquire_recursive>
 800b216:	4628      	mov	r0, r5
 800b218:	4621      	mov	r1, r4
 800b21a:	f7ff ff59 	bl	800b0d0 <__sflush_r>
 800b21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b220:	07da      	lsls	r2, r3, #31
 800b222:	4605      	mov	r5, r0
 800b224:	d4e0      	bmi.n	800b1e8 <_fflush_r+0xc>
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	059b      	lsls	r3, r3, #22
 800b22a:	d4dd      	bmi.n	800b1e8 <_fflush_r+0xc>
 800b22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b22e:	f000 f91a 	bl	800b466 <__retarget_lock_release_recursive>
 800b232:	e7d9      	b.n	800b1e8 <_fflush_r+0xc>
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <_fflush_r+0x70>)
 800b236:	429c      	cmp	r4, r3
 800b238:	d101      	bne.n	800b23e <_fflush_r+0x62>
 800b23a:	68ac      	ldr	r4, [r5, #8]
 800b23c:	e7df      	b.n	800b1fe <_fflush_r+0x22>
 800b23e:	4b04      	ldr	r3, [pc, #16]	; (800b250 <_fflush_r+0x74>)
 800b240:	429c      	cmp	r4, r3
 800b242:	bf08      	it	eq
 800b244:	68ec      	ldreq	r4, [r5, #12]
 800b246:	e7da      	b.n	800b1fe <_fflush_r+0x22>
 800b248:	0800e0c4 	.word	0x0800e0c4
 800b24c:	0800e0e4 	.word	0x0800e0e4
 800b250:	0800e0a4 	.word	0x0800e0a4

0800b254 <std>:
 800b254:	2300      	movs	r3, #0
 800b256:	b510      	push	{r4, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	e9c0 3300 	strd	r3, r3, [r0]
 800b25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b262:	6083      	str	r3, [r0, #8]
 800b264:	8181      	strh	r1, [r0, #12]
 800b266:	6643      	str	r3, [r0, #100]	; 0x64
 800b268:	81c2      	strh	r2, [r0, #14]
 800b26a:	6183      	str	r3, [r0, #24]
 800b26c:	4619      	mov	r1, r3
 800b26e:	2208      	movs	r2, #8
 800b270:	305c      	adds	r0, #92	; 0x5c
 800b272:	f7ff fc6b 	bl	800ab4c <memset>
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <std+0x38>)
 800b278:	6263      	str	r3, [r4, #36]	; 0x24
 800b27a:	4b05      	ldr	r3, [pc, #20]	; (800b290 <std+0x3c>)
 800b27c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b27e:	4b05      	ldr	r3, [pc, #20]	; (800b294 <std+0x40>)
 800b280:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <std+0x44>)
 800b284:	6224      	str	r4, [r4, #32]
 800b286:	6323      	str	r3, [r4, #48]	; 0x30
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	bf00      	nop
 800b28c:	0800bfb9 	.word	0x0800bfb9
 800b290:	0800bfdb 	.word	0x0800bfdb
 800b294:	0800c013 	.word	0x0800c013
 800b298:	0800c037 	.word	0x0800c037

0800b29c <_cleanup_r>:
 800b29c:	4901      	ldr	r1, [pc, #4]	; (800b2a4 <_cleanup_r+0x8>)
 800b29e:	f000 b8c1 	b.w	800b424 <_fwalk_reent>
 800b2a2:	bf00      	nop
 800b2a4:	0800b1dd 	.word	0x0800b1dd

0800b2a8 <__sfmoreglue>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	2268      	movs	r2, #104	; 0x68
 800b2ac:	1e4d      	subs	r5, r1, #1
 800b2ae:	4355      	muls	r5, r2
 800b2b0:	460e      	mov	r6, r1
 800b2b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2b6:	f000 f9b1 	bl	800b61c <_malloc_r>
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	b140      	cbz	r0, 800b2d0 <__sfmoreglue+0x28>
 800b2be:	2100      	movs	r1, #0
 800b2c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b2c4:	300c      	adds	r0, #12
 800b2c6:	60a0      	str	r0, [r4, #8]
 800b2c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2cc:	f7ff fc3e 	bl	800ab4c <memset>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}

0800b2d4 <__sfp_lock_acquire>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__sfp_lock_acquire+0x8>)
 800b2d6:	f000 b8c5 	b.w	800b464 <__retarget_lock_acquire_recursive>
 800b2da:	bf00      	nop
 800b2dc:	200029fd 	.word	0x200029fd

0800b2e0 <__sfp_lock_release>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__sfp_lock_release+0x8>)
 800b2e2:	f000 b8c0 	b.w	800b466 <__retarget_lock_release_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	200029fd 	.word	0x200029fd

0800b2ec <__sinit_lock_acquire>:
 800b2ec:	4801      	ldr	r0, [pc, #4]	; (800b2f4 <__sinit_lock_acquire+0x8>)
 800b2ee:	f000 b8b9 	b.w	800b464 <__retarget_lock_acquire_recursive>
 800b2f2:	bf00      	nop
 800b2f4:	200029fe 	.word	0x200029fe

0800b2f8 <__sinit_lock_release>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__sinit_lock_release+0x8>)
 800b2fa:	f000 b8b4 	b.w	800b466 <__retarget_lock_release_recursive>
 800b2fe:	bf00      	nop
 800b300:	200029fe 	.word	0x200029fe

0800b304 <__sinit>:
 800b304:	b510      	push	{r4, lr}
 800b306:	4604      	mov	r4, r0
 800b308:	f7ff fff0 	bl	800b2ec <__sinit_lock_acquire>
 800b30c:	69a3      	ldr	r3, [r4, #24]
 800b30e:	b11b      	cbz	r3, 800b318 <__sinit+0x14>
 800b310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b314:	f7ff bff0 	b.w	800b2f8 <__sinit_lock_release>
 800b318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b31c:	6523      	str	r3, [r4, #80]	; 0x50
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <__sinit+0x68>)
 800b320:	4a13      	ldr	r2, [pc, #76]	; (800b370 <__sinit+0x6c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	62a2      	str	r2, [r4, #40]	; 0x28
 800b326:	42a3      	cmp	r3, r4
 800b328:	bf04      	itt	eq
 800b32a:	2301      	moveq	r3, #1
 800b32c:	61a3      	streq	r3, [r4, #24]
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 f820 	bl	800b374 <__sfp>
 800b334:	6060      	str	r0, [r4, #4]
 800b336:	4620      	mov	r0, r4
 800b338:	f000 f81c 	bl	800b374 <__sfp>
 800b33c:	60a0      	str	r0, [r4, #8]
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 f818 	bl	800b374 <__sfp>
 800b344:	2200      	movs	r2, #0
 800b346:	60e0      	str	r0, [r4, #12]
 800b348:	2104      	movs	r1, #4
 800b34a:	6860      	ldr	r0, [r4, #4]
 800b34c:	f7ff ff82 	bl	800b254 <std>
 800b350:	68a0      	ldr	r0, [r4, #8]
 800b352:	2201      	movs	r2, #1
 800b354:	2109      	movs	r1, #9
 800b356:	f7ff ff7d 	bl	800b254 <std>
 800b35a:	68e0      	ldr	r0, [r4, #12]
 800b35c:	2202      	movs	r2, #2
 800b35e:	2112      	movs	r1, #18
 800b360:	f7ff ff78 	bl	800b254 <std>
 800b364:	2301      	movs	r3, #1
 800b366:	61a3      	str	r3, [r4, #24]
 800b368:	e7d2      	b.n	800b310 <__sinit+0xc>
 800b36a:	bf00      	nop
 800b36c:	0800def0 	.word	0x0800def0
 800b370:	0800b29d 	.word	0x0800b29d

0800b374 <__sfp>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	4607      	mov	r7, r0
 800b378:	f7ff ffac 	bl	800b2d4 <__sfp_lock_acquire>
 800b37c:	4b1e      	ldr	r3, [pc, #120]	; (800b3f8 <__sfp+0x84>)
 800b37e:	681e      	ldr	r6, [r3, #0]
 800b380:	69b3      	ldr	r3, [r6, #24]
 800b382:	b913      	cbnz	r3, 800b38a <__sfp+0x16>
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ffbd 	bl	800b304 <__sinit>
 800b38a:	3648      	adds	r6, #72	; 0x48
 800b38c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b390:	3b01      	subs	r3, #1
 800b392:	d503      	bpl.n	800b39c <__sfp+0x28>
 800b394:	6833      	ldr	r3, [r6, #0]
 800b396:	b30b      	cbz	r3, 800b3dc <__sfp+0x68>
 800b398:	6836      	ldr	r6, [r6, #0]
 800b39a:	e7f7      	b.n	800b38c <__sfp+0x18>
 800b39c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3a0:	b9d5      	cbnz	r5, 800b3d8 <__sfp+0x64>
 800b3a2:	4b16      	ldr	r3, [pc, #88]	; (800b3fc <__sfp+0x88>)
 800b3a4:	60e3      	str	r3, [r4, #12]
 800b3a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b3ac:	f000 f859 	bl	800b462 <__retarget_lock_init_recursive>
 800b3b0:	f7ff ff96 	bl	800b2e0 <__sfp_lock_release>
 800b3b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3bc:	6025      	str	r5, [r4, #0]
 800b3be:	61a5      	str	r5, [r4, #24]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3c8:	f7ff fbc0 	bl	800ab4c <memset>
 800b3cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d8:	3468      	adds	r4, #104	; 0x68
 800b3da:	e7d9      	b.n	800b390 <__sfp+0x1c>
 800b3dc:	2104      	movs	r1, #4
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f7ff ff62 	bl	800b2a8 <__sfmoreglue>
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	6030      	str	r0, [r6, #0]
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d1d5      	bne.n	800b398 <__sfp+0x24>
 800b3ec:	f7ff ff78 	bl	800b2e0 <__sfp_lock_release>
 800b3f0:	230c      	movs	r3, #12
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	e7ee      	b.n	800b3d4 <__sfp+0x60>
 800b3f6:	bf00      	nop
 800b3f8:	0800def0 	.word	0x0800def0
 800b3fc:	ffff0001 	.word	0xffff0001

0800b400 <fiprintf>:
 800b400:	b40e      	push	{r1, r2, r3}
 800b402:	b503      	push	{r0, r1, lr}
 800b404:	4601      	mov	r1, r0
 800b406:	ab03      	add	r3, sp, #12
 800b408:	4805      	ldr	r0, [pc, #20]	; (800b420 <fiprintf+0x20>)
 800b40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40e:	6800      	ldr	r0, [r0, #0]
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	f000 fafd 	bl	800ba10 <_vfiprintf_r>
 800b416:	b002      	add	sp, #8
 800b418:	f85d eb04 	ldr.w	lr, [sp], #4
 800b41c:	b003      	add	sp, #12
 800b41e:	4770      	bx	lr
 800b420:	2000006c 	.word	0x2000006c

0800b424 <_fwalk_reent>:
 800b424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b428:	4606      	mov	r6, r0
 800b42a:	4688      	mov	r8, r1
 800b42c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b430:	2700      	movs	r7, #0
 800b432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b436:	f1b9 0901 	subs.w	r9, r9, #1
 800b43a:	d505      	bpl.n	800b448 <_fwalk_reent+0x24>
 800b43c:	6824      	ldr	r4, [r4, #0]
 800b43e:	2c00      	cmp	r4, #0
 800b440:	d1f7      	bne.n	800b432 <_fwalk_reent+0xe>
 800b442:	4638      	mov	r0, r7
 800b444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b448:	89ab      	ldrh	r3, [r5, #12]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d907      	bls.n	800b45e <_fwalk_reent+0x3a>
 800b44e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b452:	3301      	adds	r3, #1
 800b454:	d003      	beq.n	800b45e <_fwalk_reent+0x3a>
 800b456:	4629      	mov	r1, r5
 800b458:	4630      	mov	r0, r6
 800b45a:	47c0      	blx	r8
 800b45c:	4307      	orrs	r7, r0
 800b45e:	3568      	adds	r5, #104	; 0x68
 800b460:	e7e9      	b.n	800b436 <_fwalk_reent+0x12>

0800b462 <__retarget_lock_init_recursive>:
 800b462:	4770      	bx	lr

0800b464 <__retarget_lock_acquire_recursive>:
 800b464:	4770      	bx	lr

0800b466 <__retarget_lock_release_recursive>:
 800b466:	4770      	bx	lr

0800b468 <__swhatbuf_r>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	460e      	mov	r6, r1
 800b46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b470:	2900      	cmp	r1, #0
 800b472:	b096      	sub	sp, #88	; 0x58
 800b474:	4614      	mov	r4, r2
 800b476:	461d      	mov	r5, r3
 800b478:	da08      	bge.n	800b48c <__swhatbuf_r+0x24>
 800b47a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	602a      	str	r2, [r5, #0]
 800b482:	061a      	lsls	r2, r3, #24
 800b484:	d410      	bmi.n	800b4a8 <__swhatbuf_r+0x40>
 800b486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b48a:	e00e      	b.n	800b4aa <__swhatbuf_r+0x42>
 800b48c:	466a      	mov	r2, sp
 800b48e:	f000 fe01 	bl	800c094 <_fstat_r>
 800b492:	2800      	cmp	r0, #0
 800b494:	dbf1      	blt.n	800b47a <__swhatbuf_r+0x12>
 800b496:	9a01      	ldr	r2, [sp, #4]
 800b498:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b49c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4a0:	425a      	negs	r2, r3
 800b4a2:	415a      	adcs	r2, r3
 800b4a4:	602a      	str	r2, [r5, #0]
 800b4a6:	e7ee      	b.n	800b486 <__swhatbuf_r+0x1e>
 800b4a8:	2340      	movs	r3, #64	; 0x40
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	b016      	add	sp, #88	; 0x58
 800b4b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b4b4 <__smakebuf_r>:
 800b4b4:	898b      	ldrh	r3, [r1, #12]
 800b4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4b8:	079d      	lsls	r5, r3, #30
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460c      	mov	r4, r1
 800b4be:	d507      	bpl.n	800b4d0 <__smakebuf_r+0x1c>
 800b4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	6163      	str	r3, [r4, #20]
 800b4cc:	b002      	add	sp, #8
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}
 800b4d0:	ab01      	add	r3, sp, #4
 800b4d2:	466a      	mov	r2, sp
 800b4d4:	f7ff ffc8 	bl	800b468 <__swhatbuf_r>
 800b4d8:	9900      	ldr	r1, [sp, #0]
 800b4da:	4605      	mov	r5, r0
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f000 f89d 	bl	800b61c <_malloc_r>
 800b4e2:	b948      	cbnz	r0, 800b4f8 <__smakebuf_r+0x44>
 800b4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e8:	059a      	lsls	r2, r3, #22
 800b4ea:	d4ef      	bmi.n	800b4cc <__smakebuf_r+0x18>
 800b4ec:	f023 0303 	bic.w	r3, r3, #3
 800b4f0:	f043 0302 	orr.w	r3, r3, #2
 800b4f4:	81a3      	strh	r3, [r4, #12]
 800b4f6:	e7e3      	b.n	800b4c0 <__smakebuf_r+0xc>
 800b4f8:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <__smakebuf_r+0x7c>)
 800b4fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	6020      	str	r0, [r4, #0]
 800b500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	9b00      	ldr	r3, [sp, #0]
 800b508:	6163      	str	r3, [r4, #20]
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	6120      	str	r0, [r4, #16]
 800b50e:	b15b      	cbz	r3, 800b528 <__smakebuf_r+0x74>
 800b510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b514:	4630      	mov	r0, r6
 800b516:	f000 fdcf 	bl	800c0b8 <_isatty_r>
 800b51a:	b128      	cbz	r0, 800b528 <__smakebuf_r+0x74>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f023 0303 	bic.w	r3, r3, #3
 800b522:	f043 0301 	orr.w	r3, r3, #1
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	89a0      	ldrh	r0, [r4, #12]
 800b52a:	4305      	orrs	r5, r0
 800b52c:	81a5      	strh	r5, [r4, #12]
 800b52e:	e7cd      	b.n	800b4cc <__smakebuf_r+0x18>
 800b530:	0800b29d 	.word	0x0800b29d

0800b534 <malloc>:
 800b534:	4b02      	ldr	r3, [pc, #8]	; (800b540 <malloc+0xc>)
 800b536:	4601      	mov	r1, r0
 800b538:	6818      	ldr	r0, [r3, #0]
 800b53a:	f000 b86f 	b.w	800b61c <_malloc_r>
 800b53e:	bf00      	nop
 800b540:	2000006c 	.word	0x2000006c

0800b544 <_free_r>:
 800b544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b546:	2900      	cmp	r1, #0
 800b548:	d044      	beq.n	800b5d4 <_free_r+0x90>
 800b54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b54e:	9001      	str	r0, [sp, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	f1a1 0404 	sub.w	r4, r1, #4
 800b556:	bfb8      	it	lt
 800b558:	18e4      	addlt	r4, r4, r3
 800b55a:	f000 fdf7 	bl	800c14c <__malloc_lock>
 800b55e:	4a1e      	ldr	r2, [pc, #120]	; (800b5d8 <_free_r+0x94>)
 800b560:	9801      	ldr	r0, [sp, #4]
 800b562:	6813      	ldr	r3, [r2, #0]
 800b564:	b933      	cbnz	r3, 800b574 <_free_r+0x30>
 800b566:	6063      	str	r3, [r4, #4]
 800b568:	6014      	str	r4, [r2, #0]
 800b56a:	b003      	add	sp, #12
 800b56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b570:	f000 bdf2 	b.w	800c158 <__malloc_unlock>
 800b574:	42a3      	cmp	r3, r4
 800b576:	d908      	bls.n	800b58a <_free_r+0x46>
 800b578:	6825      	ldr	r5, [r4, #0]
 800b57a:	1961      	adds	r1, r4, r5
 800b57c:	428b      	cmp	r3, r1
 800b57e:	bf01      	itttt	eq
 800b580:	6819      	ldreq	r1, [r3, #0]
 800b582:	685b      	ldreq	r3, [r3, #4]
 800b584:	1949      	addeq	r1, r1, r5
 800b586:	6021      	streq	r1, [r4, #0]
 800b588:	e7ed      	b.n	800b566 <_free_r+0x22>
 800b58a:	461a      	mov	r2, r3
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	b10b      	cbz	r3, 800b594 <_free_r+0x50>
 800b590:	42a3      	cmp	r3, r4
 800b592:	d9fa      	bls.n	800b58a <_free_r+0x46>
 800b594:	6811      	ldr	r1, [r2, #0]
 800b596:	1855      	adds	r5, r2, r1
 800b598:	42a5      	cmp	r5, r4
 800b59a:	d10b      	bne.n	800b5b4 <_free_r+0x70>
 800b59c:	6824      	ldr	r4, [r4, #0]
 800b59e:	4421      	add	r1, r4
 800b5a0:	1854      	adds	r4, r2, r1
 800b5a2:	42a3      	cmp	r3, r4
 800b5a4:	6011      	str	r1, [r2, #0]
 800b5a6:	d1e0      	bne.n	800b56a <_free_r+0x26>
 800b5a8:	681c      	ldr	r4, [r3, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	6053      	str	r3, [r2, #4]
 800b5ae:	4421      	add	r1, r4
 800b5b0:	6011      	str	r1, [r2, #0]
 800b5b2:	e7da      	b.n	800b56a <_free_r+0x26>
 800b5b4:	d902      	bls.n	800b5bc <_free_r+0x78>
 800b5b6:	230c      	movs	r3, #12
 800b5b8:	6003      	str	r3, [r0, #0]
 800b5ba:	e7d6      	b.n	800b56a <_free_r+0x26>
 800b5bc:	6825      	ldr	r5, [r4, #0]
 800b5be:	1961      	adds	r1, r4, r5
 800b5c0:	428b      	cmp	r3, r1
 800b5c2:	bf04      	itt	eq
 800b5c4:	6819      	ldreq	r1, [r3, #0]
 800b5c6:	685b      	ldreq	r3, [r3, #4]
 800b5c8:	6063      	str	r3, [r4, #4]
 800b5ca:	bf04      	itt	eq
 800b5cc:	1949      	addeq	r1, r1, r5
 800b5ce:	6021      	streq	r1, [r4, #0]
 800b5d0:	6054      	str	r4, [r2, #4]
 800b5d2:	e7ca      	b.n	800b56a <_free_r+0x26>
 800b5d4:	b003      	add	sp, #12
 800b5d6:	bd30      	pop	{r4, r5, pc}
 800b5d8:	20002a00 	.word	0x20002a00

0800b5dc <sbrk_aligned>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	4e0e      	ldr	r6, [pc, #56]	; (800b618 <sbrk_aligned+0x3c>)
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	6831      	ldr	r1, [r6, #0]
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	b911      	cbnz	r1, 800b5ee <sbrk_aligned+0x12>
 800b5e8:	f000 fcd6 	bl	800bf98 <_sbrk_r>
 800b5ec:	6030      	str	r0, [r6, #0]
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f000 fcd1 	bl	800bf98 <_sbrk_r>
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	d00a      	beq.n	800b610 <sbrk_aligned+0x34>
 800b5fa:	1cc4      	adds	r4, r0, #3
 800b5fc:	f024 0403 	bic.w	r4, r4, #3
 800b600:	42a0      	cmp	r0, r4
 800b602:	d007      	beq.n	800b614 <sbrk_aligned+0x38>
 800b604:	1a21      	subs	r1, r4, r0
 800b606:	4628      	mov	r0, r5
 800b608:	f000 fcc6 	bl	800bf98 <_sbrk_r>
 800b60c:	3001      	adds	r0, #1
 800b60e:	d101      	bne.n	800b614 <sbrk_aligned+0x38>
 800b610:	f04f 34ff 	mov.w	r4, #4294967295
 800b614:	4620      	mov	r0, r4
 800b616:	bd70      	pop	{r4, r5, r6, pc}
 800b618:	20002a04 	.word	0x20002a04

0800b61c <_malloc_r>:
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	1ccd      	adds	r5, r1, #3
 800b622:	f025 0503 	bic.w	r5, r5, #3
 800b626:	3508      	adds	r5, #8
 800b628:	2d0c      	cmp	r5, #12
 800b62a:	bf38      	it	cc
 800b62c:	250c      	movcc	r5, #12
 800b62e:	2d00      	cmp	r5, #0
 800b630:	4607      	mov	r7, r0
 800b632:	db01      	blt.n	800b638 <_malloc_r+0x1c>
 800b634:	42a9      	cmp	r1, r5
 800b636:	d905      	bls.n	800b644 <_malloc_r+0x28>
 800b638:	230c      	movs	r3, #12
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	2600      	movs	r6, #0
 800b63e:	4630      	mov	r0, r6
 800b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b644:	4e2e      	ldr	r6, [pc, #184]	; (800b700 <_malloc_r+0xe4>)
 800b646:	f000 fd81 	bl	800c14c <__malloc_lock>
 800b64a:	6833      	ldr	r3, [r6, #0]
 800b64c:	461c      	mov	r4, r3
 800b64e:	bb34      	cbnz	r4, 800b69e <_malloc_r+0x82>
 800b650:	4629      	mov	r1, r5
 800b652:	4638      	mov	r0, r7
 800b654:	f7ff ffc2 	bl	800b5dc <sbrk_aligned>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	4604      	mov	r4, r0
 800b65c:	d14d      	bne.n	800b6fa <_malloc_r+0xde>
 800b65e:	6834      	ldr	r4, [r6, #0]
 800b660:	4626      	mov	r6, r4
 800b662:	2e00      	cmp	r6, #0
 800b664:	d140      	bne.n	800b6e8 <_malloc_r+0xcc>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	4631      	mov	r1, r6
 800b66a:	4638      	mov	r0, r7
 800b66c:	eb04 0803 	add.w	r8, r4, r3
 800b670:	f000 fc92 	bl	800bf98 <_sbrk_r>
 800b674:	4580      	cmp	r8, r0
 800b676:	d13a      	bne.n	800b6ee <_malloc_r+0xd2>
 800b678:	6821      	ldr	r1, [r4, #0]
 800b67a:	3503      	adds	r5, #3
 800b67c:	1a6d      	subs	r5, r5, r1
 800b67e:	f025 0503 	bic.w	r5, r5, #3
 800b682:	3508      	adds	r5, #8
 800b684:	2d0c      	cmp	r5, #12
 800b686:	bf38      	it	cc
 800b688:	250c      	movcc	r5, #12
 800b68a:	4629      	mov	r1, r5
 800b68c:	4638      	mov	r0, r7
 800b68e:	f7ff ffa5 	bl	800b5dc <sbrk_aligned>
 800b692:	3001      	adds	r0, #1
 800b694:	d02b      	beq.n	800b6ee <_malloc_r+0xd2>
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	442b      	add	r3, r5
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	e00e      	b.n	800b6bc <_malloc_r+0xa0>
 800b69e:	6822      	ldr	r2, [r4, #0]
 800b6a0:	1b52      	subs	r2, r2, r5
 800b6a2:	d41e      	bmi.n	800b6e2 <_malloc_r+0xc6>
 800b6a4:	2a0b      	cmp	r2, #11
 800b6a6:	d916      	bls.n	800b6d6 <_malloc_r+0xba>
 800b6a8:	1961      	adds	r1, r4, r5
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	6025      	str	r5, [r4, #0]
 800b6ae:	bf18      	it	ne
 800b6b0:	6059      	strne	r1, [r3, #4]
 800b6b2:	6863      	ldr	r3, [r4, #4]
 800b6b4:	bf08      	it	eq
 800b6b6:	6031      	streq	r1, [r6, #0]
 800b6b8:	5162      	str	r2, [r4, r5]
 800b6ba:	604b      	str	r3, [r1, #4]
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f104 060b 	add.w	r6, r4, #11
 800b6c2:	f000 fd49 	bl	800c158 <__malloc_unlock>
 800b6c6:	f026 0607 	bic.w	r6, r6, #7
 800b6ca:	1d23      	adds	r3, r4, #4
 800b6cc:	1af2      	subs	r2, r6, r3
 800b6ce:	d0b6      	beq.n	800b63e <_malloc_r+0x22>
 800b6d0:	1b9b      	subs	r3, r3, r6
 800b6d2:	50a3      	str	r3, [r4, r2]
 800b6d4:	e7b3      	b.n	800b63e <_malloc_r+0x22>
 800b6d6:	6862      	ldr	r2, [r4, #4]
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	bf0c      	ite	eq
 800b6dc:	6032      	streq	r2, [r6, #0]
 800b6de:	605a      	strne	r2, [r3, #4]
 800b6e0:	e7ec      	b.n	800b6bc <_malloc_r+0xa0>
 800b6e2:	4623      	mov	r3, r4
 800b6e4:	6864      	ldr	r4, [r4, #4]
 800b6e6:	e7b2      	b.n	800b64e <_malloc_r+0x32>
 800b6e8:	4634      	mov	r4, r6
 800b6ea:	6876      	ldr	r6, [r6, #4]
 800b6ec:	e7b9      	b.n	800b662 <_malloc_r+0x46>
 800b6ee:	230c      	movs	r3, #12
 800b6f0:	603b      	str	r3, [r7, #0]
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	f000 fd30 	bl	800c158 <__malloc_unlock>
 800b6f8:	e7a1      	b.n	800b63e <_malloc_r+0x22>
 800b6fa:	6025      	str	r5, [r4, #0]
 800b6fc:	e7de      	b.n	800b6bc <_malloc_r+0xa0>
 800b6fe:	bf00      	nop
 800b700:	20002a00 	.word	0x20002a00

0800b704 <__ssputs_r>:
 800b704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b708:	688e      	ldr	r6, [r1, #8]
 800b70a:	429e      	cmp	r6, r3
 800b70c:	4682      	mov	sl, r0
 800b70e:	460c      	mov	r4, r1
 800b710:	4690      	mov	r8, r2
 800b712:	461f      	mov	r7, r3
 800b714:	d838      	bhi.n	800b788 <__ssputs_r+0x84>
 800b716:	898a      	ldrh	r2, [r1, #12]
 800b718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b71c:	d032      	beq.n	800b784 <__ssputs_r+0x80>
 800b71e:	6825      	ldr	r5, [r4, #0]
 800b720:	6909      	ldr	r1, [r1, #16]
 800b722:	eba5 0901 	sub.w	r9, r5, r1
 800b726:	6965      	ldr	r5, [r4, #20]
 800b728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b72c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b730:	3301      	adds	r3, #1
 800b732:	444b      	add	r3, r9
 800b734:	106d      	asrs	r5, r5, #1
 800b736:	429d      	cmp	r5, r3
 800b738:	bf38      	it	cc
 800b73a:	461d      	movcc	r5, r3
 800b73c:	0553      	lsls	r3, r2, #21
 800b73e:	d531      	bpl.n	800b7a4 <__ssputs_r+0xa0>
 800b740:	4629      	mov	r1, r5
 800b742:	f7ff ff6b 	bl	800b61c <_malloc_r>
 800b746:	4606      	mov	r6, r0
 800b748:	b950      	cbnz	r0, 800b760 <__ssputs_r+0x5c>
 800b74a:	230c      	movs	r3, #12
 800b74c:	f8ca 3000 	str.w	r3, [sl]
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	f04f 30ff 	mov.w	r0, #4294967295
 800b75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b760:	6921      	ldr	r1, [r4, #16]
 800b762:	464a      	mov	r2, r9
 800b764:	f000 fcca 	bl	800c0fc <memcpy>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	6126      	str	r6, [r4, #16]
 800b776:	6165      	str	r5, [r4, #20]
 800b778:	444e      	add	r6, r9
 800b77a:	eba5 0509 	sub.w	r5, r5, r9
 800b77e:	6026      	str	r6, [r4, #0]
 800b780:	60a5      	str	r5, [r4, #8]
 800b782:	463e      	mov	r6, r7
 800b784:	42be      	cmp	r6, r7
 800b786:	d900      	bls.n	800b78a <__ssputs_r+0x86>
 800b788:	463e      	mov	r6, r7
 800b78a:	6820      	ldr	r0, [r4, #0]
 800b78c:	4632      	mov	r2, r6
 800b78e:	4641      	mov	r1, r8
 800b790:	f000 fcc2 	bl	800c118 <memmove>
 800b794:	68a3      	ldr	r3, [r4, #8]
 800b796:	1b9b      	subs	r3, r3, r6
 800b798:	60a3      	str	r3, [r4, #8]
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	4433      	add	r3, r6
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e7db      	b.n	800b75c <__ssputs_r+0x58>
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	f000 fcdd 	bl	800c164 <_realloc_r>
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d1e1      	bne.n	800b774 <__ssputs_r+0x70>
 800b7b0:	6921      	ldr	r1, [r4, #16]
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	f7ff fec6 	bl	800b544 <_free_r>
 800b7b8:	e7c7      	b.n	800b74a <__ssputs_r+0x46>
	...

0800b7bc <_svfiprintf_r>:
 800b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	4698      	mov	r8, r3
 800b7c2:	898b      	ldrh	r3, [r1, #12]
 800b7c4:	061b      	lsls	r3, r3, #24
 800b7c6:	b09d      	sub	sp, #116	; 0x74
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	4614      	mov	r4, r2
 800b7ce:	d50e      	bpl.n	800b7ee <_svfiprintf_r+0x32>
 800b7d0:	690b      	ldr	r3, [r1, #16]
 800b7d2:	b963      	cbnz	r3, 800b7ee <_svfiprintf_r+0x32>
 800b7d4:	2140      	movs	r1, #64	; 0x40
 800b7d6:	f7ff ff21 	bl	800b61c <_malloc_r>
 800b7da:	6028      	str	r0, [r5, #0]
 800b7dc:	6128      	str	r0, [r5, #16]
 800b7de:	b920      	cbnz	r0, 800b7ea <_svfiprintf_r+0x2e>
 800b7e0:	230c      	movs	r3, #12
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	e0d1      	b.n	800b98e <_svfiprintf_r+0x1d2>
 800b7ea:	2340      	movs	r3, #64	; 0x40
 800b7ec:	616b      	str	r3, [r5, #20]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f2:	2320      	movs	r3, #32
 800b7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7fc:	2330      	movs	r3, #48	; 0x30
 800b7fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9a8 <_svfiprintf_r+0x1ec>
 800b802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b806:	f04f 0901 	mov.w	r9, #1
 800b80a:	4623      	mov	r3, r4
 800b80c:	469a      	mov	sl, r3
 800b80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b812:	b10a      	cbz	r2, 800b818 <_svfiprintf_r+0x5c>
 800b814:	2a25      	cmp	r2, #37	; 0x25
 800b816:	d1f9      	bne.n	800b80c <_svfiprintf_r+0x50>
 800b818:	ebba 0b04 	subs.w	fp, sl, r4
 800b81c:	d00b      	beq.n	800b836 <_svfiprintf_r+0x7a>
 800b81e:	465b      	mov	r3, fp
 800b820:	4622      	mov	r2, r4
 800b822:	4629      	mov	r1, r5
 800b824:	4638      	mov	r0, r7
 800b826:	f7ff ff6d 	bl	800b704 <__ssputs_r>
 800b82a:	3001      	adds	r0, #1
 800b82c:	f000 80aa 	beq.w	800b984 <_svfiprintf_r+0x1c8>
 800b830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b832:	445a      	add	r2, fp
 800b834:	9209      	str	r2, [sp, #36]	; 0x24
 800b836:	f89a 3000 	ldrb.w	r3, [sl]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 80a2 	beq.w	800b984 <_svfiprintf_r+0x1c8>
 800b840:	2300      	movs	r3, #0
 800b842:	f04f 32ff 	mov.w	r2, #4294967295
 800b846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b84a:	f10a 0a01 	add.w	sl, sl, #1
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	9307      	str	r3, [sp, #28]
 800b852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b856:	931a      	str	r3, [sp, #104]	; 0x68
 800b858:	4654      	mov	r4, sl
 800b85a:	2205      	movs	r2, #5
 800b85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b860:	4851      	ldr	r0, [pc, #324]	; (800b9a8 <_svfiprintf_r+0x1ec>)
 800b862:	f7f4 fcbd 	bl	80001e0 <memchr>
 800b866:	9a04      	ldr	r2, [sp, #16]
 800b868:	b9d8      	cbnz	r0, 800b8a2 <_svfiprintf_r+0xe6>
 800b86a:	06d0      	lsls	r0, r2, #27
 800b86c:	bf44      	itt	mi
 800b86e:	2320      	movmi	r3, #32
 800b870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b874:	0711      	lsls	r1, r2, #28
 800b876:	bf44      	itt	mi
 800b878:	232b      	movmi	r3, #43	; 0x2b
 800b87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b87e:	f89a 3000 	ldrb.w	r3, [sl]
 800b882:	2b2a      	cmp	r3, #42	; 0x2a
 800b884:	d015      	beq.n	800b8b2 <_svfiprintf_r+0xf6>
 800b886:	9a07      	ldr	r2, [sp, #28]
 800b888:	4654      	mov	r4, sl
 800b88a:	2000      	movs	r0, #0
 800b88c:	f04f 0c0a 	mov.w	ip, #10
 800b890:	4621      	mov	r1, r4
 800b892:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b896:	3b30      	subs	r3, #48	; 0x30
 800b898:	2b09      	cmp	r3, #9
 800b89a:	d94e      	bls.n	800b93a <_svfiprintf_r+0x17e>
 800b89c:	b1b0      	cbz	r0, 800b8cc <_svfiprintf_r+0x110>
 800b89e:	9207      	str	r2, [sp, #28]
 800b8a0:	e014      	b.n	800b8cc <_svfiprintf_r+0x110>
 800b8a2:	eba0 0308 	sub.w	r3, r0, r8
 800b8a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	46a2      	mov	sl, r4
 800b8b0:	e7d2      	b.n	800b858 <_svfiprintf_r+0x9c>
 800b8b2:	9b03      	ldr	r3, [sp, #12]
 800b8b4:	1d19      	adds	r1, r3, #4
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	9103      	str	r1, [sp, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bfbb      	ittet	lt
 800b8be:	425b      	neglt	r3, r3
 800b8c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b8c4:	9307      	strge	r3, [sp, #28]
 800b8c6:	9307      	strlt	r3, [sp, #28]
 800b8c8:	bfb8      	it	lt
 800b8ca:	9204      	strlt	r2, [sp, #16]
 800b8cc:	7823      	ldrb	r3, [r4, #0]
 800b8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b8d0:	d10c      	bne.n	800b8ec <_svfiprintf_r+0x130>
 800b8d2:	7863      	ldrb	r3, [r4, #1]
 800b8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8d6:	d135      	bne.n	800b944 <_svfiprintf_r+0x188>
 800b8d8:	9b03      	ldr	r3, [sp, #12]
 800b8da:	1d1a      	adds	r2, r3, #4
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	9203      	str	r2, [sp, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	bfb8      	it	lt
 800b8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8e8:	3402      	adds	r4, #2
 800b8ea:	9305      	str	r3, [sp, #20]
 800b8ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9b8 <_svfiprintf_r+0x1fc>
 800b8f0:	7821      	ldrb	r1, [r4, #0]
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	f7f4 fc73 	bl	80001e0 <memchr>
 800b8fa:	b140      	cbz	r0, 800b90e <_svfiprintf_r+0x152>
 800b8fc:	2340      	movs	r3, #64	; 0x40
 800b8fe:	eba0 000a 	sub.w	r0, r0, sl
 800b902:	fa03 f000 	lsl.w	r0, r3, r0
 800b906:	9b04      	ldr	r3, [sp, #16]
 800b908:	4303      	orrs	r3, r0
 800b90a:	3401      	adds	r4, #1
 800b90c:	9304      	str	r3, [sp, #16]
 800b90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b912:	4826      	ldr	r0, [pc, #152]	; (800b9ac <_svfiprintf_r+0x1f0>)
 800b914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b918:	2206      	movs	r2, #6
 800b91a:	f7f4 fc61 	bl	80001e0 <memchr>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d038      	beq.n	800b994 <_svfiprintf_r+0x1d8>
 800b922:	4b23      	ldr	r3, [pc, #140]	; (800b9b0 <_svfiprintf_r+0x1f4>)
 800b924:	bb1b      	cbnz	r3, 800b96e <_svfiprintf_r+0x1b2>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	3307      	adds	r3, #7
 800b92a:	f023 0307 	bic.w	r3, r3, #7
 800b92e:	3308      	adds	r3, #8
 800b930:	9303      	str	r3, [sp, #12]
 800b932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b934:	4433      	add	r3, r6
 800b936:	9309      	str	r3, [sp, #36]	; 0x24
 800b938:	e767      	b.n	800b80a <_svfiprintf_r+0x4e>
 800b93a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b93e:	460c      	mov	r4, r1
 800b940:	2001      	movs	r0, #1
 800b942:	e7a5      	b.n	800b890 <_svfiprintf_r+0xd4>
 800b944:	2300      	movs	r3, #0
 800b946:	3401      	adds	r4, #1
 800b948:	9305      	str	r3, [sp, #20]
 800b94a:	4619      	mov	r1, r3
 800b94c:	f04f 0c0a 	mov.w	ip, #10
 800b950:	4620      	mov	r0, r4
 800b952:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b956:	3a30      	subs	r2, #48	; 0x30
 800b958:	2a09      	cmp	r2, #9
 800b95a:	d903      	bls.n	800b964 <_svfiprintf_r+0x1a8>
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0c5      	beq.n	800b8ec <_svfiprintf_r+0x130>
 800b960:	9105      	str	r1, [sp, #20]
 800b962:	e7c3      	b.n	800b8ec <_svfiprintf_r+0x130>
 800b964:	fb0c 2101 	mla	r1, ip, r1, r2
 800b968:	4604      	mov	r4, r0
 800b96a:	2301      	movs	r3, #1
 800b96c:	e7f0      	b.n	800b950 <_svfiprintf_r+0x194>
 800b96e:	ab03      	add	r3, sp, #12
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	462a      	mov	r2, r5
 800b974:	4b0f      	ldr	r3, [pc, #60]	; (800b9b4 <_svfiprintf_r+0x1f8>)
 800b976:	a904      	add	r1, sp, #16
 800b978:	4638      	mov	r0, r7
 800b97a:	f3af 8000 	nop.w
 800b97e:	1c42      	adds	r2, r0, #1
 800b980:	4606      	mov	r6, r0
 800b982:	d1d6      	bne.n	800b932 <_svfiprintf_r+0x176>
 800b984:	89ab      	ldrh	r3, [r5, #12]
 800b986:	065b      	lsls	r3, r3, #25
 800b988:	f53f af2c 	bmi.w	800b7e4 <_svfiprintf_r+0x28>
 800b98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b98e:	b01d      	add	sp, #116	; 0x74
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b994:	ab03      	add	r3, sp, #12
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	462a      	mov	r2, r5
 800b99a:	4b06      	ldr	r3, [pc, #24]	; (800b9b4 <_svfiprintf_r+0x1f8>)
 800b99c:	a904      	add	r1, sp, #16
 800b99e:	4638      	mov	r0, r7
 800b9a0:	f000 f9d4 	bl	800bd4c <_printf_i>
 800b9a4:	e7eb      	b.n	800b97e <_svfiprintf_r+0x1c2>
 800b9a6:	bf00      	nop
 800b9a8:	0800e104 	.word	0x0800e104
 800b9ac:	0800e10e 	.word	0x0800e10e
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	0800b705 	.word	0x0800b705
 800b9b8:	0800e10a 	.word	0x0800e10a

0800b9bc <__sfputc_r>:
 800b9bc:	6893      	ldr	r3, [r2, #8]
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	b410      	push	{r4}
 800b9c4:	6093      	str	r3, [r2, #8]
 800b9c6:	da08      	bge.n	800b9da <__sfputc_r+0x1e>
 800b9c8:	6994      	ldr	r4, [r2, #24]
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	db01      	blt.n	800b9d2 <__sfputc_r+0x16>
 800b9ce:	290a      	cmp	r1, #10
 800b9d0:	d103      	bne.n	800b9da <__sfputc_r+0x1e>
 800b9d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d6:	f7ff ba9d 	b.w	800af14 <__swbuf_r>
 800b9da:	6813      	ldr	r3, [r2, #0]
 800b9dc:	1c58      	adds	r0, r3, #1
 800b9de:	6010      	str	r0, [r2, #0]
 800b9e0:	7019      	strb	r1, [r3, #0]
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <__sfputs_r>:
 800b9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	460f      	mov	r7, r1
 800b9f0:	4614      	mov	r4, r2
 800b9f2:	18d5      	adds	r5, r2, r3
 800b9f4:	42ac      	cmp	r4, r5
 800b9f6:	d101      	bne.n	800b9fc <__sfputs_r+0x12>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e007      	b.n	800ba0c <__sfputs_r+0x22>
 800b9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba00:	463a      	mov	r2, r7
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7ff ffda 	bl	800b9bc <__sfputc_r>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d1f3      	bne.n	800b9f4 <__sfputs_r+0xa>
 800ba0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba10 <_vfiprintf_r>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	460d      	mov	r5, r1
 800ba16:	b09d      	sub	sp, #116	; 0x74
 800ba18:	4614      	mov	r4, r2
 800ba1a:	4698      	mov	r8, r3
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	b118      	cbz	r0, 800ba28 <_vfiprintf_r+0x18>
 800ba20:	6983      	ldr	r3, [r0, #24]
 800ba22:	b90b      	cbnz	r3, 800ba28 <_vfiprintf_r+0x18>
 800ba24:	f7ff fc6e 	bl	800b304 <__sinit>
 800ba28:	4b89      	ldr	r3, [pc, #548]	; (800bc50 <_vfiprintf_r+0x240>)
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	d11b      	bne.n	800ba66 <_vfiprintf_r+0x56>
 800ba2e:	6875      	ldr	r5, [r6, #4]
 800ba30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3e:	f7ff fd11 	bl	800b464 <__retarget_lock_acquire_recursive>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	071b      	lsls	r3, r3, #28
 800ba46:	d501      	bpl.n	800ba4c <_vfiprintf_r+0x3c>
 800ba48:	692b      	ldr	r3, [r5, #16]
 800ba4a:	b9eb      	cbnz	r3, 800ba88 <_vfiprintf_r+0x78>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff fab2 	bl	800afb8 <__swsetup_r>
 800ba54:	b1c0      	cbz	r0, 800ba88 <_vfiprintf_r+0x78>
 800ba56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba58:	07dc      	lsls	r4, r3, #31
 800ba5a:	d50e      	bpl.n	800ba7a <_vfiprintf_r+0x6a>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b01d      	add	sp, #116	; 0x74
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	4b7b      	ldr	r3, [pc, #492]	; (800bc54 <_vfiprintf_r+0x244>)
 800ba68:	429d      	cmp	r5, r3
 800ba6a:	d101      	bne.n	800ba70 <_vfiprintf_r+0x60>
 800ba6c:	68b5      	ldr	r5, [r6, #8]
 800ba6e:	e7df      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba70:	4b79      	ldr	r3, [pc, #484]	; (800bc58 <_vfiprintf_r+0x248>)
 800ba72:	429d      	cmp	r5, r3
 800ba74:	bf08      	it	eq
 800ba76:	68f5      	ldreq	r5, [r6, #12]
 800ba78:	e7da      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	0598      	lsls	r0, r3, #22
 800ba7e:	d4ed      	bmi.n	800ba5c <_vfiprintf_r+0x4c>
 800ba80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba82:	f7ff fcf0 	bl	800b466 <__retarget_lock_release_recursive>
 800ba86:	e7e9      	b.n	800ba5c <_vfiprintf_r+0x4c>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8c:	2320      	movs	r3, #32
 800ba8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba96:	2330      	movs	r3, #48	; 0x30
 800ba98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc5c <_vfiprintf_r+0x24c>
 800ba9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	4623      	mov	r3, r4
 800baa6:	469a      	mov	sl, r3
 800baa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baac:	b10a      	cbz	r2, 800bab2 <_vfiprintf_r+0xa2>
 800baae:	2a25      	cmp	r2, #37	; 0x25
 800bab0:	d1f9      	bne.n	800baa6 <_vfiprintf_r+0x96>
 800bab2:	ebba 0b04 	subs.w	fp, sl, r4
 800bab6:	d00b      	beq.n	800bad0 <_vfiprintf_r+0xc0>
 800bab8:	465b      	mov	r3, fp
 800baba:	4622      	mov	r2, r4
 800babc:	4629      	mov	r1, r5
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ff93 	bl	800b9ea <__sfputs_r>
 800bac4:	3001      	adds	r0, #1
 800bac6:	f000 80aa 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800baca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bacc:	445a      	add	r2, fp
 800bace:	9209      	str	r2, [sp, #36]	; 0x24
 800bad0:	f89a 3000 	ldrb.w	r3, [sl]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 80a2 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800bada:	2300      	movs	r3, #0
 800badc:	f04f 32ff 	mov.w	r2, #4294967295
 800bae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae4:	f10a 0a01 	add.w	sl, sl, #1
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9307      	str	r3, [sp, #28]
 800baec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf0:	931a      	str	r3, [sp, #104]	; 0x68
 800baf2:	4654      	mov	r4, sl
 800baf4:	2205      	movs	r2, #5
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4858      	ldr	r0, [pc, #352]	; (800bc5c <_vfiprintf_r+0x24c>)
 800bafc:	f7f4 fb70 	bl	80001e0 <memchr>
 800bb00:	9a04      	ldr	r2, [sp, #16]
 800bb02:	b9d8      	cbnz	r0, 800bb3c <_vfiprintf_r+0x12c>
 800bb04:	06d1      	lsls	r1, r2, #27
 800bb06:	bf44      	itt	mi
 800bb08:	2320      	movmi	r3, #32
 800bb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb0e:	0713      	lsls	r3, r2, #28
 800bb10:	bf44      	itt	mi
 800bb12:	232b      	movmi	r3, #43	; 0x2b
 800bb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb18:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1e:	d015      	beq.n	800bb4c <_vfiprintf_r+0x13c>
 800bb20:	9a07      	ldr	r2, [sp, #28]
 800bb22:	4654      	mov	r4, sl
 800bb24:	2000      	movs	r0, #0
 800bb26:	f04f 0c0a 	mov.w	ip, #10
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb30:	3b30      	subs	r3, #48	; 0x30
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	d94e      	bls.n	800bbd4 <_vfiprintf_r+0x1c4>
 800bb36:	b1b0      	cbz	r0, 800bb66 <_vfiprintf_r+0x156>
 800bb38:	9207      	str	r2, [sp, #28]
 800bb3a:	e014      	b.n	800bb66 <_vfiprintf_r+0x156>
 800bb3c:	eba0 0308 	sub.w	r3, r0, r8
 800bb40:	fa09 f303 	lsl.w	r3, r9, r3
 800bb44:	4313      	orrs	r3, r2
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	46a2      	mov	sl, r4
 800bb4a:	e7d2      	b.n	800baf2 <_vfiprintf_r+0xe2>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	1d19      	adds	r1, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	9103      	str	r1, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	bfbb      	ittet	lt
 800bb58:	425b      	neglt	r3, r3
 800bb5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb5e:	9307      	strge	r3, [sp, #28]
 800bb60:	9307      	strlt	r3, [sp, #28]
 800bb62:	bfb8      	it	lt
 800bb64:	9204      	strlt	r2, [sp, #16]
 800bb66:	7823      	ldrb	r3, [r4, #0]
 800bb68:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6a:	d10c      	bne.n	800bb86 <_vfiprintf_r+0x176>
 800bb6c:	7863      	ldrb	r3, [r4, #1]
 800bb6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb70:	d135      	bne.n	800bbde <_vfiprintf_r+0x1ce>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	1d1a      	adds	r2, r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9203      	str	r2, [sp, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfb8      	it	lt
 800bb7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb82:	3402      	adds	r4, #2
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc6c <_vfiprintf_r+0x25c>
 800bb8a:	7821      	ldrb	r1, [r4, #0]
 800bb8c:	2203      	movs	r2, #3
 800bb8e:	4650      	mov	r0, sl
 800bb90:	f7f4 fb26 	bl	80001e0 <memchr>
 800bb94:	b140      	cbz	r0, 800bba8 <_vfiprintf_r+0x198>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	eba0 000a 	sub.w	r0, r0, sl
 800bb9c:	fa03 f000 	lsl.w	r0, r3, r0
 800bba0:	9b04      	ldr	r3, [sp, #16]
 800bba2:	4303      	orrs	r3, r0
 800bba4:	3401      	adds	r4, #1
 800bba6:	9304      	str	r3, [sp, #16]
 800bba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbac:	482c      	ldr	r0, [pc, #176]	; (800bc60 <_vfiprintf_r+0x250>)
 800bbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb2:	2206      	movs	r2, #6
 800bbb4:	f7f4 fb14 	bl	80001e0 <memchr>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d03f      	beq.n	800bc3c <_vfiprintf_r+0x22c>
 800bbbc:	4b29      	ldr	r3, [pc, #164]	; (800bc64 <_vfiprintf_r+0x254>)
 800bbbe:	bb1b      	cbnz	r3, 800bc08 <_vfiprintf_r+0x1f8>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	3307      	adds	r3, #7
 800bbc4:	f023 0307 	bic.w	r3, r3, #7
 800bbc8:	3308      	adds	r3, #8
 800bbca:	9303      	str	r3, [sp, #12]
 800bbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbce:	443b      	add	r3, r7
 800bbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd2:	e767      	b.n	800baa4 <_vfiprintf_r+0x94>
 800bbd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd8:	460c      	mov	r4, r1
 800bbda:	2001      	movs	r0, #1
 800bbdc:	e7a5      	b.n	800bb2a <_vfiprintf_r+0x11a>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	3401      	adds	r4, #1
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f04f 0c0a 	mov.w	ip, #10
 800bbea:	4620      	mov	r0, r4
 800bbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf0:	3a30      	subs	r2, #48	; 0x30
 800bbf2:	2a09      	cmp	r2, #9
 800bbf4:	d903      	bls.n	800bbfe <_vfiprintf_r+0x1ee>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0c5      	beq.n	800bb86 <_vfiprintf_r+0x176>
 800bbfa:	9105      	str	r1, [sp, #20]
 800bbfc:	e7c3      	b.n	800bb86 <_vfiprintf_r+0x176>
 800bbfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc02:	4604      	mov	r4, r0
 800bc04:	2301      	movs	r3, #1
 800bc06:	e7f0      	b.n	800bbea <_vfiprintf_r+0x1da>
 800bc08:	ab03      	add	r3, sp, #12
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	462a      	mov	r2, r5
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc10:	a904      	add	r1, sp, #16
 800bc12:	4630      	mov	r0, r6
 800bc14:	f3af 8000 	nop.w
 800bc18:	4607      	mov	r7, r0
 800bc1a:	1c78      	adds	r0, r7, #1
 800bc1c:	d1d6      	bne.n	800bbcc <_vfiprintf_r+0x1bc>
 800bc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc20:	07d9      	lsls	r1, r3, #31
 800bc22:	d405      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc24:	89ab      	ldrh	r3, [r5, #12]
 800bc26:	059a      	lsls	r2, r3, #22
 800bc28:	d402      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc2c:	f7ff fc1b 	bl	800b466 <__retarget_lock_release_recursive>
 800bc30:	89ab      	ldrh	r3, [r5, #12]
 800bc32:	065b      	lsls	r3, r3, #25
 800bc34:	f53f af12 	bmi.w	800ba5c <_vfiprintf_r+0x4c>
 800bc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc3a:	e711      	b.n	800ba60 <_vfiprintf_r+0x50>
 800bc3c:	ab03      	add	r3, sp, #12
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	462a      	mov	r2, r5
 800bc42:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc44:	a904      	add	r1, sp, #16
 800bc46:	4630      	mov	r0, r6
 800bc48:	f000 f880 	bl	800bd4c <_printf_i>
 800bc4c:	e7e4      	b.n	800bc18 <_vfiprintf_r+0x208>
 800bc4e:	bf00      	nop
 800bc50:	0800e0c4 	.word	0x0800e0c4
 800bc54:	0800e0e4 	.word	0x0800e0e4
 800bc58:	0800e0a4 	.word	0x0800e0a4
 800bc5c:	0800e104 	.word	0x0800e104
 800bc60:	0800e10e 	.word	0x0800e10e
 800bc64:	00000000 	.word	0x00000000
 800bc68:	0800b9eb 	.word	0x0800b9eb
 800bc6c:	0800e10a 	.word	0x0800e10a

0800bc70 <_printf_common>:
 800bc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc74:	4616      	mov	r6, r2
 800bc76:	4699      	mov	r9, r3
 800bc78:	688a      	ldr	r2, [r1, #8]
 800bc7a:	690b      	ldr	r3, [r1, #16]
 800bc7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc80:	4293      	cmp	r3, r2
 800bc82:	bfb8      	it	lt
 800bc84:	4613      	movlt	r3, r2
 800bc86:	6033      	str	r3, [r6, #0]
 800bc88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	b10a      	cbz	r2, 800bc96 <_printf_common+0x26>
 800bc92:	3301      	adds	r3, #1
 800bc94:	6033      	str	r3, [r6, #0]
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	0699      	lsls	r1, r3, #26
 800bc9a:	bf42      	ittt	mi
 800bc9c:	6833      	ldrmi	r3, [r6, #0]
 800bc9e:	3302      	addmi	r3, #2
 800bca0:	6033      	strmi	r3, [r6, #0]
 800bca2:	6825      	ldr	r5, [r4, #0]
 800bca4:	f015 0506 	ands.w	r5, r5, #6
 800bca8:	d106      	bne.n	800bcb8 <_printf_common+0x48>
 800bcaa:	f104 0a19 	add.w	sl, r4, #25
 800bcae:	68e3      	ldr	r3, [r4, #12]
 800bcb0:	6832      	ldr	r2, [r6, #0]
 800bcb2:	1a9b      	subs	r3, r3, r2
 800bcb4:	42ab      	cmp	r3, r5
 800bcb6:	dc26      	bgt.n	800bd06 <_printf_common+0x96>
 800bcb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcbc:	1e13      	subs	r3, r2, #0
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	bf18      	it	ne
 800bcc2:	2301      	movne	r3, #1
 800bcc4:	0692      	lsls	r2, r2, #26
 800bcc6:	d42b      	bmi.n	800bd20 <_printf_common+0xb0>
 800bcc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bccc:	4649      	mov	r1, r9
 800bcce:	4638      	mov	r0, r7
 800bcd0:	47c0      	blx	r8
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d01e      	beq.n	800bd14 <_printf_common+0xa4>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	68e5      	ldr	r5, [r4, #12]
 800bcda:	6832      	ldr	r2, [r6, #0]
 800bcdc:	f003 0306 	and.w	r3, r3, #6
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	bf08      	it	eq
 800bce4:	1aad      	subeq	r5, r5, r2
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	bf0c      	ite	eq
 800bcec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcf0:	2500      	movne	r5, #0
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	bfc4      	itt	gt
 800bcf6:	1a9b      	subgt	r3, r3, r2
 800bcf8:	18ed      	addgt	r5, r5, r3
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	341a      	adds	r4, #26
 800bcfe:	42b5      	cmp	r5, r6
 800bd00:	d11a      	bne.n	800bd38 <_printf_common+0xc8>
 800bd02:	2000      	movs	r0, #0
 800bd04:	e008      	b.n	800bd18 <_printf_common+0xa8>
 800bd06:	2301      	movs	r3, #1
 800bd08:	4652      	mov	r2, sl
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	47c0      	blx	r8
 800bd10:	3001      	adds	r0, #1
 800bd12:	d103      	bne.n	800bd1c <_printf_common+0xac>
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	e7c6      	b.n	800bcae <_printf_common+0x3e>
 800bd20:	18e1      	adds	r1, r4, r3
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	2030      	movs	r0, #48	; 0x30
 800bd26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd2a:	4422      	add	r2, r4
 800bd2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd34:	3302      	adds	r3, #2
 800bd36:	e7c7      	b.n	800bcc8 <_printf_common+0x58>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	4638      	mov	r0, r7
 800bd40:	47c0      	blx	r8
 800bd42:	3001      	adds	r0, #1
 800bd44:	d0e6      	beq.n	800bd14 <_printf_common+0xa4>
 800bd46:	3601      	adds	r6, #1
 800bd48:	e7d9      	b.n	800bcfe <_printf_common+0x8e>
	...

0800bd4c <_printf_i>:
 800bd4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd50:	7e0f      	ldrb	r7, [r1, #24]
 800bd52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd54:	2f78      	cmp	r7, #120	; 0x78
 800bd56:	4691      	mov	r9, r2
 800bd58:	4680      	mov	r8, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	469a      	mov	sl, r3
 800bd5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd62:	d807      	bhi.n	800bd74 <_printf_i+0x28>
 800bd64:	2f62      	cmp	r7, #98	; 0x62
 800bd66:	d80a      	bhi.n	800bd7e <_printf_i+0x32>
 800bd68:	2f00      	cmp	r7, #0
 800bd6a:	f000 80d8 	beq.w	800bf1e <_printf_i+0x1d2>
 800bd6e:	2f58      	cmp	r7, #88	; 0x58
 800bd70:	f000 80a3 	beq.w	800beba <_printf_i+0x16e>
 800bd74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd7c:	e03a      	b.n	800bdf4 <_printf_i+0xa8>
 800bd7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd82:	2b15      	cmp	r3, #21
 800bd84:	d8f6      	bhi.n	800bd74 <_printf_i+0x28>
 800bd86:	a101      	add	r1, pc, #4	; (adr r1, 800bd8c <_printf_i+0x40>)
 800bd88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd8c:	0800bde5 	.word	0x0800bde5
 800bd90:	0800bdf9 	.word	0x0800bdf9
 800bd94:	0800bd75 	.word	0x0800bd75
 800bd98:	0800bd75 	.word	0x0800bd75
 800bd9c:	0800bd75 	.word	0x0800bd75
 800bda0:	0800bd75 	.word	0x0800bd75
 800bda4:	0800bdf9 	.word	0x0800bdf9
 800bda8:	0800bd75 	.word	0x0800bd75
 800bdac:	0800bd75 	.word	0x0800bd75
 800bdb0:	0800bd75 	.word	0x0800bd75
 800bdb4:	0800bd75 	.word	0x0800bd75
 800bdb8:	0800bf05 	.word	0x0800bf05
 800bdbc:	0800be29 	.word	0x0800be29
 800bdc0:	0800bee7 	.word	0x0800bee7
 800bdc4:	0800bd75 	.word	0x0800bd75
 800bdc8:	0800bd75 	.word	0x0800bd75
 800bdcc:	0800bf27 	.word	0x0800bf27
 800bdd0:	0800bd75 	.word	0x0800bd75
 800bdd4:	0800be29 	.word	0x0800be29
 800bdd8:	0800bd75 	.word	0x0800bd75
 800bddc:	0800bd75 	.word	0x0800bd75
 800bde0:	0800beef 	.word	0x0800beef
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	1d1a      	adds	r2, r3, #4
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	602a      	str	r2, [r5, #0]
 800bdec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e0a3      	b.n	800bf40 <_printf_i+0x1f4>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	6829      	ldr	r1, [r5, #0]
 800bdfc:	0606      	lsls	r6, r0, #24
 800bdfe:	f101 0304 	add.w	r3, r1, #4
 800be02:	d50a      	bpl.n	800be1a <_printf_i+0xce>
 800be04:	680e      	ldr	r6, [r1, #0]
 800be06:	602b      	str	r3, [r5, #0]
 800be08:	2e00      	cmp	r6, #0
 800be0a:	da03      	bge.n	800be14 <_printf_i+0xc8>
 800be0c:	232d      	movs	r3, #45	; 0x2d
 800be0e:	4276      	negs	r6, r6
 800be10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be14:	485e      	ldr	r0, [pc, #376]	; (800bf90 <_printf_i+0x244>)
 800be16:	230a      	movs	r3, #10
 800be18:	e019      	b.n	800be4e <_printf_i+0x102>
 800be1a:	680e      	ldr	r6, [r1, #0]
 800be1c:	602b      	str	r3, [r5, #0]
 800be1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be22:	bf18      	it	ne
 800be24:	b236      	sxthne	r6, r6
 800be26:	e7ef      	b.n	800be08 <_printf_i+0xbc>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	6820      	ldr	r0, [r4, #0]
 800be2c:	1d19      	adds	r1, r3, #4
 800be2e:	6029      	str	r1, [r5, #0]
 800be30:	0601      	lsls	r1, r0, #24
 800be32:	d501      	bpl.n	800be38 <_printf_i+0xec>
 800be34:	681e      	ldr	r6, [r3, #0]
 800be36:	e002      	b.n	800be3e <_printf_i+0xf2>
 800be38:	0646      	lsls	r6, r0, #25
 800be3a:	d5fb      	bpl.n	800be34 <_printf_i+0xe8>
 800be3c:	881e      	ldrh	r6, [r3, #0]
 800be3e:	4854      	ldr	r0, [pc, #336]	; (800bf90 <_printf_i+0x244>)
 800be40:	2f6f      	cmp	r7, #111	; 0x6f
 800be42:	bf0c      	ite	eq
 800be44:	2308      	moveq	r3, #8
 800be46:	230a      	movne	r3, #10
 800be48:	2100      	movs	r1, #0
 800be4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be4e:	6865      	ldr	r5, [r4, #4]
 800be50:	60a5      	str	r5, [r4, #8]
 800be52:	2d00      	cmp	r5, #0
 800be54:	bfa2      	ittt	ge
 800be56:	6821      	ldrge	r1, [r4, #0]
 800be58:	f021 0104 	bicge.w	r1, r1, #4
 800be5c:	6021      	strge	r1, [r4, #0]
 800be5e:	b90e      	cbnz	r6, 800be64 <_printf_i+0x118>
 800be60:	2d00      	cmp	r5, #0
 800be62:	d04d      	beq.n	800bf00 <_printf_i+0x1b4>
 800be64:	4615      	mov	r5, r2
 800be66:	fbb6 f1f3 	udiv	r1, r6, r3
 800be6a:	fb03 6711 	mls	r7, r3, r1, r6
 800be6e:	5dc7      	ldrb	r7, [r0, r7]
 800be70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be74:	4637      	mov	r7, r6
 800be76:	42bb      	cmp	r3, r7
 800be78:	460e      	mov	r6, r1
 800be7a:	d9f4      	bls.n	800be66 <_printf_i+0x11a>
 800be7c:	2b08      	cmp	r3, #8
 800be7e:	d10b      	bne.n	800be98 <_printf_i+0x14c>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	07de      	lsls	r6, r3, #31
 800be84:	d508      	bpl.n	800be98 <_printf_i+0x14c>
 800be86:	6923      	ldr	r3, [r4, #16]
 800be88:	6861      	ldr	r1, [r4, #4]
 800be8a:	4299      	cmp	r1, r3
 800be8c:	bfde      	ittt	le
 800be8e:	2330      	movle	r3, #48	; 0x30
 800be90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be98:	1b52      	subs	r2, r2, r5
 800be9a:	6122      	str	r2, [r4, #16]
 800be9c:	f8cd a000 	str.w	sl, [sp]
 800bea0:	464b      	mov	r3, r9
 800bea2:	aa03      	add	r2, sp, #12
 800bea4:	4621      	mov	r1, r4
 800bea6:	4640      	mov	r0, r8
 800bea8:	f7ff fee2 	bl	800bc70 <_printf_common>
 800beac:	3001      	adds	r0, #1
 800beae:	d14c      	bne.n	800bf4a <_printf_i+0x1fe>
 800beb0:	f04f 30ff 	mov.w	r0, #4294967295
 800beb4:	b004      	add	sp, #16
 800beb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beba:	4835      	ldr	r0, [pc, #212]	; (800bf90 <_printf_i+0x244>)
 800bebc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bec0:	6829      	ldr	r1, [r5, #0]
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bec8:	6029      	str	r1, [r5, #0]
 800beca:	061d      	lsls	r5, r3, #24
 800becc:	d514      	bpl.n	800bef8 <_printf_i+0x1ac>
 800bece:	07df      	lsls	r7, r3, #31
 800bed0:	bf44      	itt	mi
 800bed2:	f043 0320 	orrmi.w	r3, r3, #32
 800bed6:	6023      	strmi	r3, [r4, #0]
 800bed8:	b91e      	cbnz	r6, 800bee2 <_printf_i+0x196>
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	f023 0320 	bic.w	r3, r3, #32
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	2310      	movs	r3, #16
 800bee4:	e7b0      	b.n	800be48 <_printf_i+0xfc>
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	f043 0320 	orr.w	r3, r3, #32
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	2378      	movs	r3, #120	; 0x78
 800bef0:	4828      	ldr	r0, [pc, #160]	; (800bf94 <_printf_i+0x248>)
 800bef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bef6:	e7e3      	b.n	800bec0 <_printf_i+0x174>
 800bef8:	0659      	lsls	r1, r3, #25
 800befa:	bf48      	it	mi
 800befc:	b2b6      	uxthmi	r6, r6
 800befe:	e7e6      	b.n	800bece <_printf_i+0x182>
 800bf00:	4615      	mov	r5, r2
 800bf02:	e7bb      	b.n	800be7c <_printf_i+0x130>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	6826      	ldr	r6, [r4, #0]
 800bf08:	6961      	ldr	r1, [r4, #20]
 800bf0a:	1d18      	adds	r0, r3, #4
 800bf0c:	6028      	str	r0, [r5, #0]
 800bf0e:	0635      	lsls	r5, r6, #24
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	d501      	bpl.n	800bf18 <_printf_i+0x1cc>
 800bf14:	6019      	str	r1, [r3, #0]
 800bf16:	e002      	b.n	800bf1e <_printf_i+0x1d2>
 800bf18:	0670      	lsls	r0, r6, #25
 800bf1a:	d5fb      	bpl.n	800bf14 <_printf_i+0x1c8>
 800bf1c:	8019      	strh	r1, [r3, #0]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	4615      	mov	r5, r2
 800bf24:	e7ba      	b.n	800be9c <_printf_i+0x150>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	1d1a      	adds	r2, r3, #4
 800bf2a:	602a      	str	r2, [r5, #0]
 800bf2c:	681d      	ldr	r5, [r3, #0]
 800bf2e:	6862      	ldr	r2, [r4, #4]
 800bf30:	2100      	movs	r1, #0
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7f4 f954 	bl	80001e0 <memchr>
 800bf38:	b108      	cbz	r0, 800bf3e <_printf_i+0x1f2>
 800bf3a:	1b40      	subs	r0, r0, r5
 800bf3c:	6060      	str	r0, [r4, #4]
 800bf3e:	6863      	ldr	r3, [r4, #4]
 800bf40:	6123      	str	r3, [r4, #16]
 800bf42:	2300      	movs	r3, #0
 800bf44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf48:	e7a8      	b.n	800be9c <_printf_i+0x150>
 800bf4a:	6923      	ldr	r3, [r4, #16]
 800bf4c:	462a      	mov	r2, r5
 800bf4e:	4649      	mov	r1, r9
 800bf50:	4640      	mov	r0, r8
 800bf52:	47d0      	blx	sl
 800bf54:	3001      	adds	r0, #1
 800bf56:	d0ab      	beq.n	800beb0 <_printf_i+0x164>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	079b      	lsls	r3, r3, #30
 800bf5c:	d413      	bmi.n	800bf86 <_printf_i+0x23a>
 800bf5e:	68e0      	ldr	r0, [r4, #12]
 800bf60:	9b03      	ldr	r3, [sp, #12]
 800bf62:	4298      	cmp	r0, r3
 800bf64:	bfb8      	it	lt
 800bf66:	4618      	movlt	r0, r3
 800bf68:	e7a4      	b.n	800beb4 <_printf_i+0x168>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	4649      	mov	r1, r9
 800bf70:	4640      	mov	r0, r8
 800bf72:	47d0      	blx	sl
 800bf74:	3001      	adds	r0, #1
 800bf76:	d09b      	beq.n	800beb0 <_printf_i+0x164>
 800bf78:	3501      	adds	r5, #1
 800bf7a:	68e3      	ldr	r3, [r4, #12]
 800bf7c:	9903      	ldr	r1, [sp, #12]
 800bf7e:	1a5b      	subs	r3, r3, r1
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	dcf2      	bgt.n	800bf6a <_printf_i+0x21e>
 800bf84:	e7eb      	b.n	800bf5e <_printf_i+0x212>
 800bf86:	2500      	movs	r5, #0
 800bf88:	f104 0619 	add.w	r6, r4, #25
 800bf8c:	e7f5      	b.n	800bf7a <_printf_i+0x22e>
 800bf8e:	bf00      	nop
 800bf90:	0800e115 	.word	0x0800e115
 800bf94:	0800e126 	.word	0x0800e126

0800bf98 <_sbrk_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d06      	ldr	r5, [pc, #24]	; (800bfb4 <_sbrk_r+0x1c>)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7f8 ffc4 	bl	8004f30 <_sbrk>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_sbrk_r+0x1a>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_sbrk_r+0x1a>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	20002a08 	.word	0x20002a08

0800bfb8 <__sread>:
 800bfb8:	b510      	push	{r4, lr}
 800bfba:	460c      	mov	r4, r1
 800bfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc0:	f000 f900 	bl	800c1c4 <_read_r>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	bfab      	itete	ge
 800bfc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfca:	89a3      	ldrhlt	r3, [r4, #12]
 800bfcc:	181b      	addge	r3, r3, r0
 800bfce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfd2:	bfac      	ite	ge
 800bfd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfd6:	81a3      	strhlt	r3, [r4, #12]
 800bfd8:	bd10      	pop	{r4, pc}

0800bfda <__swrite>:
 800bfda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfde:	461f      	mov	r7, r3
 800bfe0:	898b      	ldrh	r3, [r1, #12]
 800bfe2:	05db      	lsls	r3, r3, #23
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	4616      	mov	r6, r2
 800bfea:	d505      	bpl.n	800bff8 <__swrite+0x1e>
 800bfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff0:	2302      	movs	r3, #2
 800bff2:	2200      	movs	r2, #0
 800bff4:	f000 f870 	bl	800c0d8 <_lseek_r>
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	4632      	mov	r2, r6
 800c006:	463b      	mov	r3, r7
 800c008:	4628      	mov	r0, r5
 800c00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c00e:	f000 b817 	b.w	800c040 <_write_r>

0800c012 <__sseek>:
 800c012:	b510      	push	{r4, lr}
 800c014:	460c      	mov	r4, r1
 800c016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01a:	f000 f85d 	bl	800c0d8 <_lseek_r>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	bf15      	itete	ne
 800c024:	6560      	strne	r0, [r4, #84]	; 0x54
 800c026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c02a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c02e:	81a3      	strheq	r3, [r4, #12]
 800c030:	bf18      	it	ne
 800c032:	81a3      	strhne	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__sclose>:
 800c036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c03a:	f000 b81b 	b.w	800c074 <_close_r>
	...

0800c040 <_write_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4d07      	ldr	r5, [pc, #28]	; (800c060 <_write_r+0x20>)
 800c044:	4604      	mov	r4, r0
 800c046:	4608      	mov	r0, r1
 800c048:	4611      	mov	r1, r2
 800c04a:	2200      	movs	r2, #0
 800c04c:	602a      	str	r2, [r5, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	f7f6 f9f0 	bl	8002434 <_write>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_write_r+0x1e>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_write_r+0x1e>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	20002a08 	.word	0x20002a08

0800c064 <abort>:
 800c064:	b508      	push	{r3, lr}
 800c066:	2006      	movs	r0, #6
 800c068:	f000 f8e6 	bl	800c238 <raise>
 800c06c:	2001      	movs	r0, #1
 800c06e:	f7f8 ff03 	bl	8004e78 <_exit>
	...

0800c074 <_close_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d06      	ldr	r5, [pc, #24]	; (800c090 <_close_r+0x1c>)
 800c078:	2300      	movs	r3, #0
 800c07a:	4604      	mov	r4, r0
 800c07c:	4608      	mov	r0, r1
 800c07e:	602b      	str	r3, [r5, #0]
 800c080:	f7f8 ff21 	bl	8004ec6 <_close>
 800c084:	1c43      	adds	r3, r0, #1
 800c086:	d102      	bne.n	800c08e <_close_r+0x1a>
 800c088:	682b      	ldr	r3, [r5, #0]
 800c08a:	b103      	cbz	r3, 800c08e <_close_r+0x1a>
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	bd38      	pop	{r3, r4, r5, pc}
 800c090:	20002a08 	.word	0x20002a08

0800c094 <_fstat_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d07      	ldr	r5, [pc, #28]	; (800c0b4 <_fstat_r+0x20>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	4611      	mov	r1, r2
 800c0a0:	602b      	str	r3, [r5, #0]
 800c0a2:	f7f8 ff1c 	bl	8004ede <_fstat>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d102      	bne.n	800c0b0 <_fstat_r+0x1c>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	b103      	cbz	r3, 800c0b0 <_fstat_r+0x1c>
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	bd38      	pop	{r3, r4, r5, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20002a08 	.word	0x20002a08

0800c0b8 <_isatty_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d06      	ldr	r5, [pc, #24]	; (800c0d4 <_isatty_r+0x1c>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f8 ff1b 	bl	8004efe <_isatty>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_isatty_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_isatty_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20002a08 	.word	0x20002a08

0800c0d8 <_lseek_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	; (800c0f8 <_lseek_r+0x20>)
 800c0dc:	4604      	mov	r4, r0
 800c0de:	4608      	mov	r0, r1
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	602a      	str	r2, [r5, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f7f8 ff14 	bl	8004f14 <_lseek>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_lseek_r+0x1e>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_lseek_r+0x1e>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20002a08 	.word	0x20002a08

0800c0fc <memcpy>:
 800c0fc:	440a      	add	r2, r1
 800c0fe:	4291      	cmp	r1, r2
 800c100:	f100 33ff 	add.w	r3, r0, #4294967295
 800c104:	d100      	bne.n	800c108 <memcpy+0xc>
 800c106:	4770      	bx	lr
 800c108:	b510      	push	{r4, lr}
 800c10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c112:	4291      	cmp	r1, r2
 800c114:	d1f9      	bne.n	800c10a <memcpy+0xe>
 800c116:	bd10      	pop	{r4, pc}

0800c118 <memmove>:
 800c118:	4288      	cmp	r0, r1
 800c11a:	b510      	push	{r4, lr}
 800c11c:	eb01 0402 	add.w	r4, r1, r2
 800c120:	d902      	bls.n	800c128 <memmove+0x10>
 800c122:	4284      	cmp	r4, r0
 800c124:	4623      	mov	r3, r4
 800c126:	d807      	bhi.n	800c138 <memmove+0x20>
 800c128:	1e43      	subs	r3, r0, #1
 800c12a:	42a1      	cmp	r1, r4
 800c12c:	d008      	beq.n	800c140 <memmove+0x28>
 800c12e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c132:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c136:	e7f8      	b.n	800c12a <memmove+0x12>
 800c138:	4402      	add	r2, r0
 800c13a:	4601      	mov	r1, r0
 800c13c:	428a      	cmp	r2, r1
 800c13e:	d100      	bne.n	800c142 <memmove+0x2a>
 800c140:	bd10      	pop	{r4, pc}
 800c142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c14a:	e7f7      	b.n	800c13c <memmove+0x24>

0800c14c <__malloc_lock>:
 800c14c:	4801      	ldr	r0, [pc, #4]	; (800c154 <__malloc_lock+0x8>)
 800c14e:	f7ff b989 	b.w	800b464 <__retarget_lock_acquire_recursive>
 800c152:	bf00      	nop
 800c154:	200029fc 	.word	0x200029fc

0800c158 <__malloc_unlock>:
 800c158:	4801      	ldr	r0, [pc, #4]	; (800c160 <__malloc_unlock+0x8>)
 800c15a:	f7ff b984 	b.w	800b466 <__retarget_lock_release_recursive>
 800c15e:	bf00      	nop
 800c160:	200029fc 	.word	0x200029fc

0800c164 <_realloc_r>:
 800c164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c168:	4680      	mov	r8, r0
 800c16a:	4614      	mov	r4, r2
 800c16c:	460e      	mov	r6, r1
 800c16e:	b921      	cbnz	r1, 800c17a <_realloc_r+0x16>
 800c170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c174:	4611      	mov	r1, r2
 800c176:	f7ff ba51 	b.w	800b61c <_malloc_r>
 800c17a:	b92a      	cbnz	r2, 800c188 <_realloc_r+0x24>
 800c17c:	f7ff f9e2 	bl	800b544 <_free_r>
 800c180:	4625      	mov	r5, r4
 800c182:	4628      	mov	r0, r5
 800c184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c188:	f000 f872 	bl	800c270 <_malloc_usable_size_r>
 800c18c:	4284      	cmp	r4, r0
 800c18e:	4607      	mov	r7, r0
 800c190:	d802      	bhi.n	800c198 <_realloc_r+0x34>
 800c192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c196:	d812      	bhi.n	800c1be <_realloc_r+0x5a>
 800c198:	4621      	mov	r1, r4
 800c19a:	4640      	mov	r0, r8
 800c19c:	f7ff fa3e 	bl	800b61c <_malloc_r>
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d0ed      	beq.n	800c182 <_realloc_r+0x1e>
 800c1a6:	42bc      	cmp	r4, r7
 800c1a8:	4622      	mov	r2, r4
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	bf28      	it	cs
 800c1ae:	463a      	movcs	r2, r7
 800c1b0:	f7ff ffa4 	bl	800c0fc <memcpy>
 800c1b4:	4631      	mov	r1, r6
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	f7ff f9c4 	bl	800b544 <_free_r>
 800c1bc:	e7e1      	b.n	800c182 <_realloc_r+0x1e>
 800c1be:	4635      	mov	r5, r6
 800c1c0:	e7df      	b.n	800c182 <_realloc_r+0x1e>
	...

0800c1c4 <_read_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	; (800c1e4 <_read_r+0x20>)
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4608      	mov	r0, r1
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	602a      	str	r2, [r5, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f7f8 fe5a 	bl	8004e8c <_read>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_read_r+0x1e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_read_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20002a08 	.word	0x20002a08

0800c1e8 <_raise_r>:
 800c1e8:	291f      	cmp	r1, #31
 800c1ea:	b538      	push	{r3, r4, r5, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	d904      	bls.n	800c1fc <_raise_r+0x14>
 800c1f2:	2316      	movs	r3, #22
 800c1f4:	6003      	str	r3, [r0, #0]
 800c1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1fe:	b112      	cbz	r2, 800c206 <_raise_r+0x1e>
 800c200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c204:	b94b      	cbnz	r3, 800c21a <_raise_r+0x32>
 800c206:	4620      	mov	r0, r4
 800c208:	f000 f830 	bl	800c26c <_getpid_r>
 800c20c:	462a      	mov	r2, r5
 800c20e:	4601      	mov	r1, r0
 800c210:	4620      	mov	r0, r4
 800c212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c216:	f000 b817 	b.w	800c248 <_kill_r>
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d00a      	beq.n	800c234 <_raise_r+0x4c>
 800c21e:	1c59      	adds	r1, r3, #1
 800c220:	d103      	bne.n	800c22a <_raise_r+0x42>
 800c222:	2316      	movs	r3, #22
 800c224:	6003      	str	r3, [r0, #0]
 800c226:	2001      	movs	r0, #1
 800c228:	e7e7      	b.n	800c1fa <_raise_r+0x12>
 800c22a:	2400      	movs	r4, #0
 800c22c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c230:	4628      	mov	r0, r5
 800c232:	4798      	blx	r3
 800c234:	2000      	movs	r0, #0
 800c236:	e7e0      	b.n	800c1fa <_raise_r+0x12>

0800c238 <raise>:
 800c238:	4b02      	ldr	r3, [pc, #8]	; (800c244 <raise+0xc>)
 800c23a:	4601      	mov	r1, r0
 800c23c:	6818      	ldr	r0, [r3, #0]
 800c23e:	f7ff bfd3 	b.w	800c1e8 <_raise_r>
 800c242:	bf00      	nop
 800c244:	2000006c 	.word	0x2000006c

0800c248 <_kill_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4d07      	ldr	r5, [pc, #28]	; (800c268 <_kill_r+0x20>)
 800c24c:	2300      	movs	r3, #0
 800c24e:	4604      	mov	r4, r0
 800c250:	4608      	mov	r0, r1
 800c252:	4611      	mov	r1, r2
 800c254:	602b      	str	r3, [r5, #0]
 800c256:	f7f8 fdff 	bl	8004e58 <_kill>
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	d102      	bne.n	800c264 <_kill_r+0x1c>
 800c25e:	682b      	ldr	r3, [r5, #0]
 800c260:	b103      	cbz	r3, 800c264 <_kill_r+0x1c>
 800c262:	6023      	str	r3, [r4, #0]
 800c264:	bd38      	pop	{r3, r4, r5, pc}
 800c266:	bf00      	nop
 800c268:	20002a08 	.word	0x20002a08

0800c26c <_getpid_r>:
 800c26c:	f7f8 bdec 	b.w	8004e48 <_getpid>

0800c270 <_malloc_usable_size_r>:
 800c270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c274:	1f18      	subs	r0, r3, #4
 800c276:	2b00      	cmp	r3, #0
 800c278:	bfbc      	itt	lt
 800c27a:	580b      	ldrlt	r3, [r1, r0]
 800c27c:	18c0      	addlt	r0, r0, r3
 800c27e:	4770      	bx	lr

0800c280 <_init>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr

0800c28c <_fini>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	bf00      	nop
 800c290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c292:	bc08      	pop	{r3}
 800c294:	469e      	mov	lr, r3
 800c296:	4770      	bx	lr
