
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c02c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e88  0800c1bc  0800c1bc  0001c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e044  0800e044  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e044  0800e044  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e044  0800e044  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e044  0800e044  0001e044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e048  0800e048  0001e048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800e04c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002940  200000cc  0800e118  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a0c  0800e118  00022a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d78  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ee  00000000  00000000  00035e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00039568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  0003a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f97  00000000  00000000  0003b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018df9  00000000  00000000  0005463f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008655d  00000000  00000000  0006d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d4  00000000  00000000  000f39e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1a4 	.word	0x0800c1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800c1a4 	.word	0x0800c1a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initBrickbreaker>:
 *      -sets score to 0
 *      -sets the first lines of bricks to visible
 *      -draws the bricks
 *
 */
void initBrickbreaker() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000286:	4b49      	ldr	r3, [pc, #292]	; (80003ac <initBrickbreaker+0x12c>)
 8000288:	2228      	movs	r2, #40	; 0x28
 800028a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800028c:	4b47      	ldr	r3, [pc, #284]	; (80003ac <initBrickbreaker+0x12c>)
 800028e:	2237      	movs	r2, #55	; 0x37
 8000290:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000292:	4b47      	ldr	r3, [pc, #284]	; (80003b0 <initBrickbreaker+0x130>)
 8000294:	2228      	movs	r2, #40	; 0x28
 8000296:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000298:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <initBrickbreaker+0x130>)
 800029a:	2236      	movs	r2, #54	; 0x36
 800029c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800029e:	4b44      	ldr	r3, [pc, #272]	; (80003b0 <initBrickbreaker+0x130>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e041      	b.n	800032e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	e038      	b.n	8000322 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	00d9      	lsls	r1, r3, #3
 80002b4:	483f      	ldr	r0, [pc, #252]	; (80003b4 <initBrickbreaker+0x134>)
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4403      	add	r3, r0
 80002c8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	f103 0108 	add.w	r1, r3, #8
 80002d0:	4838      	ldr	r0, [pc, #224]	; (80003b4 <initBrickbreaker+0x134>)
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4403      	add	r3, r0
 80002e4:	3304      	adds	r3, #4
 80002e6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002e8:	4932      	ldr	r1, [pc, #200]	; (80003b4 <initBrickbreaker+0x134>)
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	4413      	add	r3, r2
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	440b      	add	r3, r1
 80002fc:	3308      	adds	r3, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 8000302:	492c      	ldr	r1, [pc, #176]	; (80003b4 <initBrickbreaker+0x134>)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	4413      	add	r3, r2
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	440b      	add	r3, r1
 8000316:	330c      	adds	r3, #12
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b09      	cmp	r3, #9
 8000326:	ddc3      	ble.n	80002b0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b2f      	cmp	r3, #47	; 0x2f
 8000332:	ddba      	ble.n	80002aa <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e027      	b.n	800038a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800033a:	2300      	movs	r3, #0
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	e01e      	b.n	800037e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000340:	491c      	ldr	r1, [pc, #112]	; (80003b4 <initBrickbreaker+0x134>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	4413      	add	r3, r2
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	440b      	add	r3, r1
 8000354:	3308      	adds	r3, #8
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800035a:	f001 ff21 	bl	80021a0 <setBrickToughness>
 800035e:	4601      	mov	r1, r0
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <initBrickbreaker+0x134>)
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4613      	mov	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	4413      	add	r3, r2
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	4403      	add	r3, r0
 8000374:	330c      	adds	r3, #12
 8000376:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b09      	cmp	r3, #9
 8000382:	dddd      	ble.n	8000340 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b09      	cmp	r3, #9
 800038e:	ddd4      	ble.n	800033a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <initBrickbreaker+0x138>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000396:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800039a:	f005 f92d 	bl	80055f8 <Displ_CLS>
    drawBricks();
 800039e:	f001 ff33 	bl	8002208 <drawBricks>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000034 	.word	0x20000034
 80003b4:	200000e8 	.word	0x200000e8
 80003b8:	20001ee8 	.word	0x20001ee8

080003bc <playBall>:
 * @fn void playBall()
 * @brief handles the movement of the ball, changes its direction when needed
 * also checks if the ball hit a brick or the user bar
 *
 */
void playBall() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003c0:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <playBall+0xfc>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <playBall+0x12>
        changeDirection(N);
 80003c8:	2000      	movs	r0, #0
 80003ca:	f000 f8ef 	bl	80005ac <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003ce:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <playBall+0xfc>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	2b36      	cmp	r3, #54	; 0x36
 80003d4:	d14d      	bne.n	8000472 <playBall+0xb6>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <playBall+0xfc>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <playBall+0x100>)
 80003dc:	f993 3000 	ldrsb.w	r3, [r3]
 80003e0:	3b19      	subs	r3, #25
 80003e2:	429a      	cmp	r2, r3
 80003e4:	db0b      	blt.n	80003fe <playBall+0x42>
 80003e6:	4b34      	ldr	r3, [pc, #208]	; (80004b8 <playBall+0xfc>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	4b34      	ldr	r3, [pc, #208]	; (80004bc <playBall+0x100>)
 80003ec:	f993 3000 	ldrsb.w	r3, [r3]
 80003f0:	3319      	adds	r3, #25
 80003f2:	429a      	cmp	r2, r3
 80003f4:	dc03      	bgt.n	80003fe <playBall+0x42>
            changeDirection(S);
 80003f6:	2004      	movs	r0, #4
 80003f8:	f000 f8d8 	bl	80005ac <changeDirection>
 80003fc:	e039      	b.n	8000472 <playBall+0xb6>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003fe:	4b2e      	ldr	r3, [pc, #184]	; (80004b8 <playBall+0xfc>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <playBall+0x100>)
 8000404:	f993 3000 	ldrsb.w	r3, [r3]
 8000408:	3b1a      	subs	r3, #26
 800040a:	429a      	cmp	r2, r3
 800040c:	d110      	bne.n	8000430 <playBall+0x74>
                if (ball.dir == SE) {
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <playBall+0xfc>)
 8000410:	7a1b      	ldrb	r3, [r3, #8]
 8000412:	2b03      	cmp	r3, #3
 8000414:	d103      	bne.n	800041e <playBall+0x62>
                    ball.dir = NW;
 8000416:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <playBall+0xfc>)
 8000418:	2207      	movs	r2, #7
 800041a:	721a      	strb	r2, [r3, #8]
 800041c:	e029      	b.n	8000472 <playBall+0xb6>
                } else {
                    lives1--;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <playBall+0x104>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	3b01      	subs	r3, #1
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <playBall+0x104>)
 8000428:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800042a:	f000 f961 	bl	80006f0 <gameEnd>
 800042e:	e020      	b.n	8000472 <playBall+0xb6>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 8000430:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <playBall+0xfc>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <playBall+0x100>)
 8000436:	f993 3000 	ldrsb.w	r3, [r3]
 800043a:	331a      	adds	r3, #26
 800043c:	429a      	cmp	r2, r3
 800043e:	d110      	bne.n	8000462 <playBall+0xa6>
                    if (ball.dir == SW) {
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <playBall+0xfc>)
 8000442:	7a1b      	ldrb	r3, [r3, #8]
 8000444:	2b05      	cmp	r3, #5
 8000446:	d103      	bne.n	8000450 <playBall+0x94>
                        ball.dir = NE;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <playBall+0xfc>)
 800044a:	2201      	movs	r2, #1
 800044c:	721a      	strb	r2, [r3, #8]
 800044e:	e010      	b.n	8000472 <playBall+0xb6>
                    } else {
                        lives1--;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <playBall+0x104>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	3b01      	subs	r3, #1
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <playBall+0x104>)
 800045a:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 800045c:	f000 f948 	bl	80006f0 <gameEnd>
 8000460:	e007      	b.n	8000472 <playBall+0xb6>
                    }
                } else {
                    lives1--;
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <playBall+0x104>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	3b01      	subs	r3, #1
 8000468:	b2da      	uxtb	r2, r3
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <playBall+0x104>)
 800046c:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800046e:	f000 f93f 	bl	80006f0 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <playBall+0xfc>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d102      	bne.n	8000480 <playBall+0xc4>
        changeDirection(W);
 800047a:	2006      	movs	r0, #6
 800047c:	f000 f896 	bl	80005ac <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000480:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <playBall+0xfc>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b4f      	cmp	r3, #79	; 0x4f
 8000486:	d102      	bne.n	800048e <playBall+0xd2>
        changeDirection(E);
 8000488:	2002      	movs	r0, #2
 800048a:	f000 f88f 	bl	80005ac <changeDirection>
    }

    if (guardian == 1) {
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <playBall+0x108>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d10a      	bne.n	80004ac <playBall+0xf0>
        if (ball.y == person.y - 2) {
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <playBall+0xfc>)
 8000498:	685a      	ldr	r2, [r3, #4]
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <playBall+0x100>)
 800049c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80004a0:	3b02      	subs	r3, #2
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d102      	bne.n	80004ac <playBall+0xf0>
            changeDirection(S);
 80004a6:	2004      	movs	r0, #4
 80004a8:	f000 f880 	bl	80005ac <changeDirection>
        }
    }

    checkBrickHit();
 80004ac:	f000 fa14 	bl	80008d8 <checkBrickHit>
    moveBall();
 80004b0:	f000 f80a 	bl	80004c8 <moveBall>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000034 	.word	0x20000034
 80004bc:	20000030 	.word	0x20000030
 80004c0:	20000002 	.word	0x20000002
 80004c4:	20001eea 	.word	0x20001eea

080004c8 <moveBall>:
/**
 * @fn void moveBall()
 * @brief moves the ball along it's direction
 *
 */
void moveBall() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004ce:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <moveBall+0xdc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	b298      	uxth	r0, r3
 80004d8:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <moveBall+0xdc>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	b299      	uxth	r1, r3
 80004e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2304      	movs	r3, #4
 80004ea:	2204      	movs	r2, #4
 80004ec:	f004 fed0 	bl	8005290 <Displ_FillArea>
    switch (ball.dir) {
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <moveBall+0xdc>)
 80004f2:	7a1b      	ldrb	r3, [r3, #8]
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d84d      	bhi.n	8000594 <moveBall+0xcc>
 80004f8:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <moveBall+0x38>)
 80004fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fe:	bf00      	nop
 8000500:	08000525 	.word	0x08000525
 8000504:	0800053d 	.word	0x0800053d
 8000508:	08000595 	.word	0x08000595
 800050c:	08000569 	.word	0x08000569
 8000510:	08000531 	.word	0x08000531
 8000514:	0800057f 	.word	0x0800057f
 8000518:	08000595 	.word	0x08000595
 800051c:	08000553 	.word	0x08000553
 8000520:	0800059d 	.word	0x0800059d
    case N:
        ball.y -= 1;
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <moveBall+0xdc>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a1e      	ldr	r2, [pc, #120]	; (80005a4 <moveBall+0xdc>)
 800052c:	6053      	str	r3, [r2, #4]
        break;
 800052e:	e036      	b.n	800059e <moveBall+0xd6>
    case S:
        ball.y += 1;
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <moveBall+0xdc>)
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	3301      	adds	r3, #1
 8000536:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <moveBall+0xdc>)
 8000538:	6053      	str	r3, [r2, #4]
        break;
 800053a:	e030      	b.n	800059e <moveBall+0xd6>
    case NE:
        ball.y -= 1;
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <moveBall+0xdc>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <moveBall+0xdc>)
 8000544:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <moveBall+0xdc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <moveBall+0xdc>)
 800054e:	6013      	str	r3, [r2, #0]
        break;
 8000550:	e025      	b.n	800059e <moveBall+0xd6>
    case NW:
        ball.y -= 1;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <moveBall+0xdc>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <moveBall+0xdc>)
 800055a:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <moveBall+0xdc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <moveBall+0xdc>)
 8000564:	6013      	str	r3, [r2, #0]
        break;
 8000566:	e01a      	b.n	800059e <moveBall+0xd6>
    case SE:
        ball.y += 1;
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <moveBall+0xdc>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <moveBall+0xdc>)
 8000570:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <moveBall+0xdc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <moveBall+0xdc>)
 800057a:	6013      	str	r3, [r2, #0]
        break;
 800057c:	e00f      	b.n	800059e <moveBall+0xd6>
    case SW:
        ball.y += 1;
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <moveBall+0xdc>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <moveBall+0xdc>)
 8000586:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <moveBall+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <moveBall+0xdc>)
 8000590:	6013      	str	r3, [r2, #0]
        break;
 8000592:	e004      	b.n	800059e <moveBall+0xd6>
    case still:
        break;
    default:
        printf("You shouldn't be here\r\n");
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <moveBall+0xe0>)
 8000596:	f00a faf9 	bl	800ab8c <puts>
    }

}
 800059a:	e000      	b.n	800059e <moveBall+0xd6>
        break;
 800059c:	bf00      	nop
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000034 	.word	0x20000034
 80005a8:	0800c1bc 	.word	0x0800c1bc

080005ac <changeDirection>:
 * @fn void changeDirection(directions)
 * @brief changes the direction of the ball based on the direction of the obstacle the ball hit
 *
 * @param dirHit the direction where the ball hit an obstacle
 */
void changeDirection(directions dirHit) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
    if (dirHit == N) {
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d129      	bne.n	8000610 <changeDirection+0x64>
        switch (ball.dir) {
 80005bc:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <changeDirection+0x13c>)
 80005be:	7a1b      	ldrb	r3, [r3, #8]
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d821      	bhi.n	8000608 <changeDirection+0x5c>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <changeDirection+0x20>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005f1 	.word	0x080005f1
 80005d0:	08000601 	.word	0x08000601
 80005d4:	08000609 	.word	0x08000609
 80005d8:	08000609 	.word	0x08000609
 80005dc:	08000609 	.word	0x08000609
 80005e0:	08000609 	.word	0x08000609
 80005e4:	08000609 	.word	0x08000609
 80005e8:	080005f9 	.word	0x080005f9
 80005ec:	08000615 	.word	0x08000615
        case N:
            ball.dir = S;
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <changeDirection+0x13c>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	721a      	strb	r2, [r3, #8]
            break;
 80005f6:	e00e      	b.n	8000616 <changeDirection+0x6a>
        case NW:
            ball.dir = SW;
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <changeDirection+0x13c>)
 80005fa:	2205      	movs	r2, #5
 80005fc:	721a      	strb	r2, [r3, #8]
            break;
 80005fe:	e00a      	b.n	8000616 <changeDirection+0x6a>
        case NE:
            ball.dir = SE;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <changeDirection+0x13c>)
 8000602:	2203      	movs	r2, #3
 8000604:	721a      	strb	r2, [r3, #8]
            break;
 8000606:	e006      	b.n	8000616 <changeDirection+0x6a>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000608:	4838      	ldr	r0, [pc, #224]	; (80006ec <changeDirection+0x140>)
 800060a:	f00a fabf 	bl	800ab8c <puts>
 800060e:	e002      	b.n	8000616 <changeDirection+0x6a>
        }
    }
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <changeDirection+0x6a>
            break;
 8000614:	bf00      	nop

    if (dirHit == E) {
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d116      	bne.n	800064a <changeDirection+0x9e>
        switch (ball.dir) {
 800061c:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <changeDirection+0x13c>)
 800061e:	7a1b      	ldrb	r3, [r3, #8]
 8000620:	2b08      	cmp	r3, #8
 8000622:	d014      	beq.n	800064e <changeDirection+0xa2>
 8000624:	2b08      	cmp	r3, #8
 8000626:	dc0c      	bgt.n	8000642 <changeDirection+0x96>
 8000628:	2b01      	cmp	r3, #1
 800062a:	d002      	beq.n	8000632 <changeDirection+0x86>
 800062c:	2b03      	cmp	r3, #3
 800062e:	d004      	beq.n	800063a <changeDirection+0x8e>
 8000630:	e007      	b.n	8000642 <changeDirection+0x96>
        case NE:
            ball.dir = NW;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <changeDirection+0x13c>)
 8000634:	2207      	movs	r2, #7
 8000636:	721a      	strb	r2, [r3, #8]
            break;
 8000638:	e00a      	b.n	8000650 <changeDirection+0xa4>
        case SE:
            ball.dir = SW;
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <changeDirection+0x13c>)
 800063c:	2205      	movs	r2, #5
 800063e:	721a      	strb	r2, [r3, #8]
            break;
 8000640:	e006      	b.n	8000650 <changeDirection+0xa4>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000642:	482a      	ldr	r0, [pc, #168]	; (80006ec <changeDirection+0x140>)
 8000644:	f00a faa2 	bl	800ab8c <puts>
 8000648:	e002      	b.n	8000650 <changeDirection+0xa4>
        }
    }
 800064a:	bf00      	nop
 800064c:	e000      	b.n	8000650 <changeDirection+0xa4>
            break;
 800064e:	bf00      	nop

    if (dirHit == S) {
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b04      	cmp	r3, #4
 8000654:	d124      	bne.n	80006a0 <changeDirection+0xf4>
        switch (ball.dir) {
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <changeDirection+0x13c>)
 8000658:	7a1b      	ldrb	r3, [r3, #8]
 800065a:	3b03      	subs	r3, #3
 800065c:	2b05      	cmp	r3, #5
 800065e:	d81b      	bhi.n	8000698 <changeDirection+0xec>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <changeDirection+0xbc>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000689 	.word	0x08000689
 800066c:	08000681 	.word	0x08000681
 8000670:	08000691 	.word	0x08000691
 8000674:	08000699 	.word	0x08000699
 8000678:	08000699 	.word	0x08000699
 800067c:	080006a5 	.word	0x080006a5
        case S:
            ball.dir = N;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <changeDirection+0x13c>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
            break;
 8000686:	e00e      	b.n	80006a6 <changeDirection+0xfa>
        case SE:
            ball.dir = NE;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <changeDirection+0x13c>)
 800068a:	2201      	movs	r2, #1
 800068c:	721a      	strb	r2, [r3, #8]
            break;
 800068e:	e00a      	b.n	80006a6 <changeDirection+0xfa>
        case SW:
            ball.dir = NW;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <changeDirection+0x13c>)
 8000692:	2207      	movs	r2, #7
 8000694:	721a      	strb	r2, [r3, #8]
            break;
 8000696:	e006      	b.n	80006a6 <changeDirection+0xfa>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <changeDirection+0x140>)
 800069a:	f00a fa77 	bl	800ab8c <puts>
 800069e:	e002      	b.n	80006a6 <changeDirection+0xfa>
        }
    }
 80006a0:	bf00      	nop
 80006a2:	e000      	b.n	80006a6 <changeDirection+0xfa>
            break;
 80006a4:	bf00      	nop

    if (dirHit == W) {
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d115      	bne.n	80006d8 <changeDirection+0x12c>
        switch (ball.dir) {
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <changeDirection+0x13c>)
 80006ae:	7a1b      	ldrb	r3, [r3, #8]
 80006b0:	2b08      	cmp	r3, #8
 80006b2:	d013      	beq.n	80006dc <changeDirection+0x130>
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	dc0b      	bgt.n	80006d0 <changeDirection+0x124>
 80006b8:	2b05      	cmp	r3, #5
 80006ba:	d005      	beq.n	80006c8 <changeDirection+0x11c>
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d107      	bne.n	80006d0 <changeDirection+0x124>
        case NW:
            ball.dir = NE;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <changeDirection+0x13c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	721a      	strb	r2, [r3, #8]
            break;
 80006c6:	e00a      	b.n	80006de <changeDirection+0x132>
        case SW:
            ball.dir = SE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <changeDirection+0x13c>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	721a      	strb	r2, [r3, #8]
            break;
 80006ce:	e006      	b.n	80006de <changeDirection+0x132>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <changeDirection+0x140>)
 80006d2:	f00a fa5b 	bl	800ab8c <puts>
        }
    }
}
 80006d6:	e002      	b.n	80006de <changeDirection+0x132>
    }
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <changeDirection+0x132>
            break;
 80006dc:	bf00      	nop
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000034 	.word	0x20000034
 80006ec:	0800c1bc 	.word	0x0800c1bc

080006f0 <gameEnd>:
 * @fn void gameEnd()
 * @brief called when the player has lost a life, resets the player bar and ball to the initial position
 * if the player has lost all his lives, also resets score
 *
 */
void gameEnd() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <gameEnd+0x90>)
 80006f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	b29b      	uxth	r3, r3
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b299      	uxth	r1, r3
 8000704:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	230a      	movs	r3, #10
 800070c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000710:	2000      	movs	r0, #0
 8000712:	f004 fdbd 	bl	8005290 <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <gameEnd+0x90>)
 8000718:	2228      	movs	r2, #40	; 0x28
 800071a:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <gameEnd+0x90>)
 800071e:	f993 3000 	ldrsb.w	r3, [r3]
 8000722:	461a      	mov	r2, r3
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <gameEnd+0x94>)
 8000726:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <gameEnd+0x94>)
 800072a:	2236      	movs	r2, #54	; 0x36
 800072c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <gameEnd+0x94>)
 8000730:	2208      	movs	r2, #8
 8000732:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <gameEnd+0x98>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11e      	bne.n	800077a <gameEnd+0x8a>
        if (points > highScore) {
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <gameEnd+0x9c>)
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <gameEnd+0xa0>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d903      	bls.n	8000750 <gameEnd+0x60>
            highScore = points;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <gameEnd+0x9c>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <gameEnd+0xa0>)
 800074e:	701a      	strb	r2, [r3, #0]
        }

        start = 0;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <gameEnd+0xa4>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
        points = 0;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <gameEnd+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <gameEnd+0x98>)
 800075e:	2203      	movs	r2, #3
 8000760:	701a      	strb	r2, [r3, #0]
        initBrickbreaker();
 8000762:	f7ff fd8d 	bl	8000280 <initBrickbreaker>
        HAL_UART_Transmit(&huart2, (uint8_t *)"L", strlen("L"), 300);
 8000766:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800076a:	2201      	movs	r2, #1
 800076c:	490a      	ldr	r1, [pc, #40]	; (8000798 <gameEnd+0xa8>)
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <gameEnd+0xac>)
 8000770:	f009 fa2a 	bl	8009bc8 <HAL_UART_Transmit>
        setGameState(loss);
 8000774:	2002      	movs	r0, #2
 8000776:	f003 f849 	bl	800380c <setGameState>
    }
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000030 	.word	0x20000030
 8000784:	20000034 	.word	0x20000034
 8000788:	20000002 	.word	0x20000002
 800078c:	20001ee8 	.word	0x20001ee8
 8000790:	20001ee9 	.word	0x20001ee9
 8000794:	20001eef 	.word	0x20001eef
 8000798:	0800c1d4 	.word	0x0800c1d4
 800079c:	20001fec 	.word	0x20001fec

080007a0 <lowerBricks>:
/**
 * @fn void lowerBricks()
 * @brief lowers the bricks to the next level
 *
 */
void lowerBricks() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007a6:	232e      	movs	r3, #46	; 0x2e
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e03d      	b.n	8000828 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e034      	b.n	800081c <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	482d      	ldr	r0, [pc, #180]	; (800086c <lowerBricks+0xcc>)
 80007b8:	68f9      	ldr	r1, [r7, #12]
 80007ba:	460b      	mov	r3, r1
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	440b      	add	r3, r1
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	4403      	add	r3, r0
 80007ca:	3308      	adds	r3, #8
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	4827      	ldr	r0, [pc, #156]	; (800086c <lowerBricks+0xcc>)
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	4403      	add	r3, r0
 80007e0:	3308      	adds	r3, #8
 80007e2:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	4820      	ldr	r0, [pc, #128]	; (800086c <lowerBricks+0xcc>)
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	460b      	mov	r3, r1
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	440b      	add	r3, r1
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	440b      	add	r3, r1
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4403      	add	r3, r0
 80007fc:	330c      	adds	r3, #12
 80007fe:	6819      	ldr	r1, [r3, #0]
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <lowerBricks+0xcc>)
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	4413      	add	r3, r2
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	4403      	add	r3, r0
 8000812:	330c      	adds	r3, #12
 8000814:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	3301      	adds	r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b09      	cmp	r3, #9
 8000820:	ddc7      	ble.n	80007b2 <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3b01      	subs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b00      	cmp	r3, #0
 800082c:	dabe      	bge.n	80007ac <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e012      	b.n	800085a <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <lowerBricks+0xcc>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4413      	add	r3, r2
 800083c:	3308      	adds	r3, #8
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 8000842:	f001 fcad 	bl	80021a0 <setBrickToughness>
 8000846:	4602      	mov	r2, r0
 8000848:	4908      	ldr	r1, [pc, #32]	; (800086c <lowerBricks+0xcc>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	440b      	add	r3, r1
 8000850:	330c      	adds	r3, #12
 8000852:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3301      	adds	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b09      	cmp	r3, #9
 800085e:	dde9      	ble.n	8000834 <lowerBricks+0x94>
    }

    drawBricks();
 8000860:	f001 fcd2 	bl	8002208 <drawBricks>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000e8 	.word	0x200000e8

08000870 <checkGameOver>:
/**
 * @fn void checkGameOver()
 * @brief checks if the final line of active bricks has reaches the player bar
 *
 */
void checkGameOver() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	e01d      	b.n	80008b8 <checkGameOver+0x48>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <checkGameOver+0x58>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	4413      	add	r3, r2
 8000884:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000888:	3308      	adds	r3, #8
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d110      	bne.n	80008b2 <checkGameOver+0x42>

            lives1 = 0;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <checkGameOver+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <checkGameOver+0x60>)
 8000898:	f993 3000 	ldrsb.w	r3, [r3]
 800089c:	461a      	mov	r2, r3
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <checkGameOver+0x64>)
 80008a0:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <checkGameOver+0x64>)
 80008a4:	2236      	movs	r2, #54	; 0x36
 80008a6:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <checkGameOver+0x64>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	721a      	strb	r2, [r3, #8]
            gameEnd();
 80008ae:	f7ff ff1f 	bl	80006f0 <gameEnd>
    for (int j = 0; j < 10; j++) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b09      	cmp	r3, #9
 80008bc:	ddde      	ble.n	800087c <checkGameOver+0xc>
        }
    }
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000e8 	.word	0x200000e8
 80008cc:	20000002 	.word	0x20000002
 80008d0:	20000030 	.word	0x20000030
 80008d4:	20000034 	.word	0x20000034

080008d8 <checkBrickHit>:
/**
 * @fn void checkBrickHit()
 * @brief checks if the ball hit one or more bricks
 *
 */
void checkBrickHit() {
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <checkBrickHit+0x3c>)
 80008e4:	7a1b      	ldrb	r3, [r3, #8]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	2b07      	cmp	r3, #7
 80008ea:	f201 829d 	bhi.w	8001e28 <checkBrickHit+0x1550>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <checkBrickHit+0x1c>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000e71 	.word	0x08000e71
 80008f8:	08001e29 	.word	0x08001e29
 80008fc:	080013c9 	.word	0x080013c9
 8000900:	08001e29 	.word	0x08001e29
 8000904:	08001901 	.word	0x08001901
 8000908:	08001e29 	.word	0x08001e29
 800090c:	08000919 	.word	0x08000919
 8000910:	08001e33 	.word	0x08001e33
 8000914:	20000034 	.word	0x20000034
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000918:	4bb7      	ldr	r3, [pc, #732]	; (8000bf8 <checkBrickHit+0x320>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f1a3 0209 	sub.w	r2, r3, #9
 8000920:	4bb5      	ldr	r3, [pc, #724]	; (8000bf8 <checkBrickHit+0x320>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	da00      	bge.n	800092a <checkBrickHit+0x52>
 8000928:	3307      	adds	r3, #7
 800092a:	10db      	asrs	r3, r3, #3
 800092c:	4618      	mov	r0, r3
 800092e:	49b3      	ldr	r1, [pc, #716]	; (8000bfc <checkBrickHit+0x324>)
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4403      	add	r3, r0
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	3308      	adds	r3, #8
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	f040 80bc 	bne.w	8000ac0 <checkBrickHit+0x1e8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000948:	4bab      	ldr	r3, [pc, #684]	; (8000bf8 <checkBrickHit+0x320>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f1a3 0209 	sub.w	r2, r3, #9
 8000950:	4ba9      	ldr	r3, [pc, #676]	; (8000bf8 <checkBrickHit+0x320>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	da00      	bge.n	800095a <checkBrickHit+0x82>
 8000958:	3307      	adds	r3, #7
 800095a:	10db      	asrs	r3, r3, #3
 800095c:	4619      	mov	r1, r3
 800095e:	48a7      	ldr	r0, [pc, #668]	; (8000bfc <checkBrickHit+0x324>)
 8000960:	4613      	mov	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	4403      	add	r3, r0
 800096e:	330c      	adds	r3, #12
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1e58      	subs	r0, r3, #1
 8000974:	4ca1      	ldr	r4, [pc, #644]	; (8000bfc <checkBrickHit+0x324>)
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	440b      	add	r3, r1
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	4423      	add	r3, r4
 8000984:	330c      	adds	r3, #12
 8000986:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000988:	4b9b      	ldr	r3, [pc, #620]	; (8000bf8 <checkBrickHit+0x320>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f1a3 0209 	sub.w	r2, r3, #9
 8000990:	4b99      	ldr	r3, [pc, #612]	; (8000bf8 <checkBrickHit+0x320>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	da00      	bge.n	800099a <checkBrickHit+0xc2>
 8000998:	3307      	adds	r3, #7
 800099a:	10db      	asrs	r3, r3, #3
 800099c:	4618      	mov	r0, r3
 800099e:	4997      	ldr	r1, [pc, #604]	; (8000bfc <checkBrickHit+0x324>)
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4403      	add	r3, r0
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	440b      	add	r3, r1
 80009ae:	330c      	adds	r3, #12
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dc31      	bgt.n	8000a1a <checkBrickHit+0x142>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 80009b6:	4b90      	ldr	r3, [pc, #576]	; (8000bf8 <checkBrickHit+0x320>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f1a3 0209 	sub.w	r2, r3, #9
 80009be:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <checkBrickHit+0x320>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da00      	bge.n	80009c8 <checkBrickHit+0xf0>
 80009c6:	3307      	adds	r3, #7
 80009c8:	10db      	asrs	r3, r3, #3
 80009ca:	4618      	mov	r0, r3
 80009cc:	498b      	ldr	r1, [pc, #556]	; (8000bfc <checkBrickHit+0x324>)
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4403      	add	r3, r0
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	440b      	add	r3, r1
 80009dc:	3308      	adds	r3, #8
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
                points++;
 80009e2:	4b87      	ldr	r3, [pc, #540]	; (8000c00 <checkBrickHit+0x328>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b85      	ldr	r3, [pc, #532]	; (8000c00 <checkBrickHit+0x328>)
 80009ec:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009ee:	4b82      	ldr	r3, [pc, #520]	; (8000bf8 <checkBrickHit+0x320>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da00      	bge.n	80009f8 <checkBrickHit+0x120>
 80009f6:	3307      	adds	r3, #7
 80009f8:	10db      	asrs	r3, r3, #3
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b7e      	ldr	r3, [pc, #504]	; (8000bf8 <checkBrickHit+0x320>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	3b09      	subs	r3, #9
 8000a02:	4619      	mov	r1, r3
 8000a04:	4610      	mov	r0, r2
 8000a06:	f001 fa29 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 8000a0a:	4b7b      	ldr	r3, [pc, #492]	; (8000bf8 <checkBrickHit+0x320>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	3b09      	subs	r3, #9
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fcb9 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000a1a:	4b77      	ldr	r3, [pc, #476]	; (8000bf8 <checkBrickHit+0x320>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f1a3 0209 	sub.w	r2, r3, #9
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <checkBrickHit+0x320>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da00      	bge.n	8000a2c <checkBrickHit+0x154>
 8000a2a:	3307      	adds	r3, #7
 8000a2c:	10db      	asrs	r3, r3, #3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	4972      	ldr	r1, [pc, #456]	; (8000bfc <checkBrickHit+0x324>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4403      	add	r3, r0
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	440b      	add	r3, r1
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	b298      	uxth	r0, r3
 8000a48:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <checkBrickHit+0x320>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f1a3 0209 	sub.w	r2, r3, #9
 8000a50:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <checkBrickHit+0x320>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da00      	bge.n	8000a5a <checkBrickHit+0x182>
 8000a58:	3307      	adds	r3, #7
 8000a5a:	10db      	asrs	r3, r3, #3
 8000a5c:	461c      	mov	r4, r3
 8000a5e:	4967      	ldr	r1, [pc, #412]	; (8000bfc <checkBrickHit+0x324>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4423      	add	r3, r4
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3304      	adds	r3, #4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	b299      	uxth	r1, r3
 8000a78:	4b5f      	ldr	r3, [pc, #380]	; (8000bf8 <checkBrickHit+0x320>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f1a3 0209 	sub.w	r2, r3, #9
 8000a80:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <checkBrickHit+0x320>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	da00      	bge.n	8000a8a <checkBrickHit+0x1b2>
 8000a88:	3307      	adds	r3, #7
 8000a8a:	10db      	asrs	r3, r3, #3
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	4c5b      	ldr	r4, [pc, #364]	; (8000bfc <checkBrickHit+0x324>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	442b      	add	r3, r5
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	4423      	add	r3, r4
 8000a9e:	330c      	adds	r3, #12
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a58      	ldr	r2, [pc, #352]	; (8000c04 <checkBrickHit+0x32c>)
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2304      	movs	r3, #4
 8000aae:	2220      	movs	r2, #32
 8000ab0:	f004 fbee 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000aba:	4b4f      	ldr	r3, [pc, #316]	; (8000bf8 <checkBrickHit+0x320>)
 8000abc:	2205      	movs	r2, #5
 8000abe:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <checkBrickHit+0x320>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f1a3 0208 	sub.w	r2, r3, #8
 8000ac8:	4b4b      	ldr	r3, [pc, #300]	; (8000bf8 <checkBrickHit+0x320>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	da00      	bge.n	8000ad4 <checkBrickHit+0x1fc>
 8000ad2:	3307      	adds	r3, #7
 8000ad4:	10db      	asrs	r3, r3, #3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	4948      	ldr	r1, [pc, #288]	; (8000bfc <checkBrickHit+0x324>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4403      	add	r3, r0
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	f040 80d8 	bne.w	8000ca2 <checkBrickHit+0x3ca>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <checkBrickHit+0x320>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f1a3 0208 	sub.w	r2, r3, #8
 8000afa:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <checkBrickHit+0x320>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	da00      	bge.n	8000b06 <checkBrickHit+0x22e>
 8000b04:	3307      	adds	r3, #7
 8000b06:	10db      	asrs	r3, r3, #3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	483c      	ldr	r0, [pc, #240]	; (8000bfc <checkBrickHit+0x324>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	440b      	add	r3, r1
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	4403      	add	r3, r0
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1e58      	subs	r0, r3, #1
 8000b20:	4c36      	ldr	r4, [pc, #216]	; (8000bfc <checkBrickHit+0x324>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	440b      	add	r3, r1
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	4423      	add	r3, r4
 8000b30:	330c      	adds	r3, #12
 8000b32:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <checkBrickHit+0x320>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f1a3 0208 	sub.w	r2, r3, #8
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <checkBrickHit+0x320>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da00      	bge.n	8000b48 <checkBrickHit+0x270>
 8000b46:	3307      	adds	r3, #7
 8000b48:	10db      	asrs	r3, r3, #3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	492b      	ldr	r1, [pc, #172]	; (8000bfc <checkBrickHit+0x324>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4403      	add	r3, r0
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	440b      	add	r3, r1
 8000b5c:	330c      	adds	r3, #12
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dc33      	bgt.n	8000bcc <checkBrickHit+0x2f4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <checkBrickHit+0x320>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f1a3 0208 	sub.w	r2, r3, #8
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <checkBrickHit+0x320>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da00      	bge.n	8000b78 <checkBrickHit+0x2a0>
 8000b76:	3307      	adds	r3, #7
 8000b78:	10db      	asrs	r3, r3, #3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	491f      	ldr	r1, [pc, #124]	; (8000bfc <checkBrickHit+0x324>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4403      	add	r3, r0
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3308      	adds	r3, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
                points++;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <checkBrickHit+0x328>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <checkBrickHit+0x328>)
 8000b9c:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <checkBrickHit+0x320>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da00      	bge.n	8000baa <checkBrickHit+0x2d2>
 8000ba8:	3307      	adds	r3, #7
 8000baa:	10db      	asrs	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <checkBrickHit+0x320>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	3b08      	subs	r3, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	f001 f950 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <checkBrickHit+0x320>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3b08      	subs	r3, #8
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fbe0 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <checkBrickHit+0x320>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f1a3 0208 	sub.w	r2, r3, #8
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <checkBrickHit+0x320>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da00      	bge.n	8000be0 <checkBrickHit+0x308>
 8000bde:	3307      	adds	r3, #7
 8000be0:	10db      	asrs	r3, r3, #3
 8000be2:	4618      	mov	r0, r3
 8000be4:	4905      	ldr	r1, [pc, #20]	; (8000bfc <checkBrickHit+0x324>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4403      	add	r3, r0
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	440b      	add	r3, r1
 8000bf4:	e008      	b.n	8000c08 <checkBrickHit+0x330>
 8000bf6:	bf00      	nop
 8000bf8:	20000034 	.word	0x20000034
 8000bfc:	200000e8 	.word	0x200000e8
 8000c00:	20001ee8 	.word	0x20001ee8
 8000c04:	20000004 	.word	0x20000004
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	b298      	uxth	r0, r3
 8000c10:	4b93      	ldr	r3, [pc, #588]	; (8000e60 <checkBrickHit+0x588>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f1a3 0208 	sub.w	r2, r3, #8
 8000c18:	4b91      	ldr	r3, [pc, #580]	; (8000e60 <checkBrickHit+0x588>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da00      	bge.n	8000c24 <checkBrickHit+0x34c>
 8000c22:	3307      	adds	r3, #7
 8000c24:	10db      	asrs	r3, r3, #3
 8000c26:	461c      	mov	r4, r3
 8000c28:	498e      	ldr	r1, [pc, #568]	; (8000e64 <checkBrickHit+0x58c>)
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4423      	add	r3, r4
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	440b      	add	r3, r1
 8000c38:	3304      	adds	r3, #4
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	b299      	uxth	r1, r3
 8000c42:	4b87      	ldr	r3, [pc, #540]	; (8000e60 <checkBrickHit+0x588>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f1a3 0208 	sub.w	r2, r3, #8
 8000c4a:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <checkBrickHit+0x588>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da00      	bge.n	8000c56 <checkBrickHit+0x37e>
 8000c54:	3307      	adds	r3, #7
 8000c56:	10db      	asrs	r3, r3, #3
 8000c58:	461d      	mov	r5, r3
 8000c5a:	4c82      	ldr	r4, [pc, #520]	; (8000e64 <checkBrickHit+0x58c>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	442b      	add	r3, r5
 8000c66:	011b      	lsls	r3, r3, #4
 8000c68:	4423      	add	r3, r4
 8000c6a:	330c      	adds	r3, #12
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a7e      	ldr	r2, [pc, #504]	; (8000e68 <checkBrickHit+0x590>)
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2304      	movs	r3, #4
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	f004 fb08 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	3301      	adds	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c86:	4b76      	ldr	r3, [pc, #472]	; (8000e60 <checkBrickHit+0x588>)
 8000c88:	7a1b      	ldrb	r3, [r3, #8]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d102      	bne.n	8000c94 <checkBrickHit+0x3bc>
                ball.dir = NE;
 8000c8e:	4b74      	ldr	r3, [pc, #464]	; (8000e60 <checkBrickHit+0x588>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c94:	4b72      	ldr	r3, [pc, #456]	; (8000e60 <checkBrickHit+0x588>)
 8000c96:	7a1b      	ldrb	r3, [r3, #8]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d102      	bne.n	8000ca2 <checkBrickHit+0x3ca>
                ball.dir = SE;
 8000c9c:	4b70      	ldr	r3, [pc, #448]	; (8000e60 <checkBrickHit+0x588>)
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f041 80c6 	bne.w	8001e36 <checkBrickHit+0x155e>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000caa:	4b6d      	ldr	r3, [pc, #436]	; (8000e60 <checkBrickHit+0x588>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f1a3 0209 	sub.w	r2, r3, #9
 8000cb2:	4b6b      	ldr	r3, [pc, #428]	; (8000e60 <checkBrickHit+0x588>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da00      	bge.n	8000cbe <checkBrickHit+0x3e6>
 8000cbc:	3307      	adds	r3, #7
 8000cbe:	10db      	asrs	r3, r3, #3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	4968      	ldr	r1, [pc, #416]	; (8000e64 <checkBrickHit+0x58c>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4403      	add	r3, r0
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	f041 80ad 	bne.w	8001e36 <checkBrickHit+0x155e>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000cdc:	4b60      	ldr	r3, [pc, #384]	; (8000e60 <checkBrickHit+0x588>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f1a3 0209 	sub.w	r2, r3, #9
 8000ce4:	4b5e      	ldr	r3, [pc, #376]	; (8000e60 <checkBrickHit+0x588>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da00      	bge.n	8000cf0 <checkBrickHit+0x418>
 8000cee:	3307      	adds	r3, #7
 8000cf0:	10db      	asrs	r3, r3, #3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	485b      	ldr	r0, [pc, #364]	; (8000e64 <checkBrickHit+0x58c>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	440b      	add	r3, r1
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	4403      	add	r3, r0
 8000d04:	330c      	adds	r3, #12
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1e58      	subs	r0, r3, #1
 8000d0a:	4c56      	ldr	r4, [pc, #344]	; (8000e64 <checkBrickHit+0x58c>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	440b      	add	r3, r1
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4423      	add	r3, r4
 8000d1a:	330c      	adds	r3, #12
 8000d1c:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000d1e:	4b50      	ldr	r3, [pc, #320]	; (8000e60 <checkBrickHit+0x588>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f1a3 0209 	sub.w	r2, r3, #9
 8000d26:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <checkBrickHit+0x588>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da00      	bge.n	8000d32 <checkBrickHit+0x45a>
 8000d30:	3307      	adds	r3, #7
 8000d32:	10db      	asrs	r3, r3, #3
 8000d34:	4618      	mov	r0, r3
 8000d36:	494b      	ldr	r1, [pc, #300]	; (8000e64 <checkBrickHit+0x58c>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4403      	add	r3, r0
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	440b      	add	r3, r1
 8000d46:	330c      	adds	r3, #12
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dc33      	bgt.n	8000db6 <checkBrickHit+0x4de>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <checkBrickHit+0x588>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f1a3 0209 	sub.w	r2, r3, #9
 8000d56:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <checkBrickHit+0x588>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da00      	bge.n	8000d62 <checkBrickHit+0x48a>
 8000d60:	3307      	adds	r3, #7
 8000d62:	10db      	asrs	r3, r3, #3
 8000d64:	4618      	mov	r0, r3
 8000d66:	493f      	ldr	r1, [pc, #252]	; (8000e64 <checkBrickHit+0x58c>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4403      	add	r3, r0
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	440b      	add	r3, r1
 8000d76:	3308      	adds	r3, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
                    points++;
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <checkBrickHit+0x594>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <checkBrickHit+0x594>)
 8000d86:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <checkBrickHit+0x588>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da00      	bge.n	8000d94 <checkBrickHit+0x4bc>
 8000d92:	3307      	adds	r3, #7
 8000d94:	10db      	asrs	r3, r3, #3
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <checkBrickHit+0x588>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	3b09      	subs	r3, #9
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4610      	mov	r0, r2
 8000da2:	f001 f85b 	bl	8001e5c <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <checkBrickHit+0x588>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	3b09      	subs	r3, #9
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 faeb 	bl	800238c <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <checkBrickHit+0x588>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f1a3 0209 	sub.w	r2, r3, #9
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <checkBrickHit+0x588>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <checkBrickHit+0x4f2>
 8000dc8:	3307      	adds	r3, #7
 8000dca:	10db      	asrs	r3, r3, #3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	4925      	ldr	r1, [pc, #148]	; (8000e64 <checkBrickHit+0x58c>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4403      	add	r3, r0
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	440b      	add	r3, r1
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	b298      	uxth	r0, r3
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <checkBrickHit+0x588>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f1a3 0209 	sub.w	r2, r3, #9
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <checkBrickHit+0x588>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da00      	bge.n	8000dfa <checkBrickHit+0x522>
 8000df8:	3307      	adds	r3, #7
 8000dfa:	10db      	asrs	r3, r3, #3
 8000dfc:	461c      	mov	r4, r3
 8000dfe:	4919      	ldr	r1, [pc, #100]	; (8000e64 <checkBrickHit+0x58c>)
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4423      	add	r3, r4
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3304      	adds	r3, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	b299      	uxth	r1, r3
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <checkBrickHit+0x588>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <checkBrickHit+0x588>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da00      	bge.n	8000e2c <checkBrickHit+0x554>
 8000e2a:	3307      	adds	r3, #7
 8000e2c:	10db      	asrs	r3, r3, #3
 8000e2e:	461d      	mov	r5, r3
 8000e30:	4c0c      	ldr	r4, [pc, #48]	; (8000e64 <checkBrickHit+0x58c>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	442b      	add	r3, r5
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	4423      	add	r3, r4
 8000e40:	330c      	adds	r3, #12
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <checkBrickHit+0x590>)
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2304      	movs	r3, #4
 8000e50:	2220      	movs	r2, #32
 8000e52:	f004 fa1d 	bl	8005290 <Displ_FillArea>
                ball.dir = SE;
 8000e56:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <checkBrickHit+0x588>)
 8000e58:	2203      	movs	r2, #3
 8000e5a:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e5c:	f000 bfeb 	b.w	8001e36 <checkBrickHit+0x155e>
 8000e60:	20000034 	.word	0x20000034
 8000e64:	200000e8 	.word	0x200000e8
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20001ee8 	.word	0x20001ee8
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e70:	4bb7      	ldr	r3, [pc, #732]	; (8001150 <checkBrickHit+0x878>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f1a3 0209 	sub.w	r2, r3, #9
 8000e78:	4bb5      	ldr	r3, [pc, #724]	; (8001150 <checkBrickHit+0x878>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da00      	bge.n	8000e82 <checkBrickHit+0x5aa>
 8000e80:	3307      	adds	r3, #7
 8000e82:	10db      	asrs	r3, r3, #3
 8000e84:	4618      	mov	r0, r3
 8000e86:	49b3      	ldr	r1, [pc, #716]	; (8001154 <checkBrickHit+0x87c>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4403      	add	r3, r0
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	440b      	add	r3, r1
 8000e96:	3308      	adds	r3, #8
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	f040 80bc 	bne.w	8001018 <checkBrickHit+0x740>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000ea0:	4bab      	ldr	r3, [pc, #684]	; (8001150 <checkBrickHit+0x878>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f1a3 0209 	sub.w	r2, r3, #9
 8000ea8:	4ba9      	ldr	r3, [pc, #676]	; (8001150 <checkBrickHit+0x878>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da00      	bge.n	8000eb2 <checkBrickHit+0x5da>
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	10db      	asrs	r3, r3, #3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	48a7      	ldr	r0, [pc, #668]	; (8001154 <checkBrickHit+0x87c>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	440b      	add	r3, r1
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4403      	add	r3, r0
 8000ec6:	330c      	adds	r3, #12
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	1e58      	subs	r0, r3, #1
 8000ecc:	4ca1      	ldr	r4, [pc, #644]	; (8001154 <checkBrickHit+0x87c>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	440b      	add	r3, r1
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	4423      	add	r3, r4
 8000edc:	330c      	adds	r3, #12
 8000ede:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000ee0:	4b9b      	ldr	r3, [pc, #620]	; (8001150 <checkBrickHit+0x878>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f1a3 0209 	sub.w	r2, r3, #9
 8000ee8:	4b99      	ldr	r3, [pc, #612]	; (8001150 <checkBrickHit+0x878>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da00      	bge.n	8000ef2 <checkBrickHit+0x61a>
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	10db      	asrs	r3, r3, #3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	4997      	ldr	r1, [pc, #604]	; (8001154 <checkBrickHit+0x87c>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4403      	add	r3, r0
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	330c      	adds	r3, #12
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	dc31      	bgt.n	8000f72 <checkBrickHit+0x69a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000f0e:	4b90      	ldr	r3, [pc, #576]	; (8001150 <checkBrickHit+0x878>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f1a3 0209 	sub.w	r2, r3, #9
 8000f16:	4b8e      	ldr	r3, [pc, #568]	; (8001150 <checkBrickHit+0x878>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da00      	bge.n	8000f20 <checkBrickHit+0x648>
 8000f1e:	3307      	adds	r3, #7
 8000f20:	10db      	asrs	r3, r3, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	498b      	ldr	r1, [pc, #556]	; (8001154 <checkBrickHit+0x87c>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4403      	add	r3, r0
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
                points++;
 8000f3a:	4b87      	ldr	r3, [pc, #540]	; (8001158 <checkBrickHit+0x880>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b85      	ldr	r3, [pc, #532]	; (8001158 <checkBrickHit+0x880>)
 8000f44:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000f46:	4b82      	ldr	r3, [pc, #520]	; (8001150 <checkBrickHit+0x878>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	da00      	bge.n	8000f50 <checkBrickHit+0x678>
 8000f4e:	3307      	adds	r3, #7
 8000f50:	10db      	asrs	r3, r3, #3
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b7e      	ldr	r3, [pc, #504]	; (8001150 <checkBrickHit+0x878>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	3b09      	subs	r3, #9
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f000 ff7d 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 8000f62:	4b7b      	ldr	r3, [pc, #492]	; (8001150 <checkBrickHit+0x878>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3b09      	subs	r3, #9
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fa0d 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f72:	4b77      	ldr	r3, [pc, #476]	; (8001150 <checkBrickHit+0x878>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f1a3 0209 	sub.w	r2, r3, #9
 8000f7a:	4b75      	ldr	r3, [pc, #468]	; (8001150 <checkBrickHit+0x878>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da00      	bge.n	8000f84 <checkBrickHit+0x6ac>
 8000f82:	3307      	adds	r3, #7
 8000f84:	10db      	asrs	r3, r3, #3
 8000f86:	4618      	mov	r0, r3
 8000f88:	4972      	ldr	r1, [pc, #456]	; (8001154 <checkBrickHit+0x87c>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4403      	add	r3, r0
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	b298      	uxth	r0, r3
 8000fa0:	4b6b      	ldr	r3, [pc, #428]	; (8001150 <checkBrickHit+0x878>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f1a3 0209 	sub.w	r2, r3, #9
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <checkBrickHit+0x878>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da00      	bge.n	8000fb2 <checkBrickHit+0x6da>
 8000fb0:	3307      	adds	r3, #7
 8000fb2:	10db      	asrs	r3, r3, #3
 8000fb4:	461c      	mov	r4, r3
 8000fb6:	4967      	ldr	r1, [pc, #412]	; (8001154 <checkBrickHit+0x87c>)
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4423      	add	r3, r4
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	4b5f      	ldr	r3, [pc, #380]	; (8001150 <checkBrickHit+0x878>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f1a3 0209 	sub.w	r2, r3, #9
 8000fd8:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <checkBrickHit+0x878>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	da00      	bge.n	8000fe2 <checkBrickHit+0x70a>
 8000fe0:	3307      	adds	r3, #7
 8000fe2:	10db      	asrs	r3, r3, #3
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	4c5b      	ldr	r4, [pc, #364]	; (8001154 <checkBrickHit+0x87c>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	442b      	add	r3, r5
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4423      	add	r3, r4
 8000ff6:	330c      	adds	r3, #12
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <checkBrickHit+0x884>)
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	b29b      	uxth	r3, r3
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2304      	movs	r3, #4
 8001006:	2220      	movs	r2, #32
 8001008:	f004 f942 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3301      	adds	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8001012:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <checkBrickHit+0x878>)
 8001014:	2203      	movs	r2, #3
 8001016:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8001018:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <checkBrickHit+0x878>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f1a3 0208 	sub.w	r2, r3, #8
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <checkBrickHit+0x878>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	da00      	bge.n	800102c <checkBrickHit+0x754>
 800102a:	3307      	adds	r3, #7
 800102c:	10db      	asrs	r3, r3, #3
 800102e:	4618      	mov	r0, r3
 8001030:	4948      	ldr	r1, [pc, #288]	; (8001154 <checkBrickHit+0x87c>)
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4403      	add	r3, r0
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	440b      	add	r3, r1
 8001040:	3308      	adds	r3, #8
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	f040 80d8 	bne.w	80011fa <checkBrickHit+0x922>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <checkBrickHit+0x878>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f1a3 0208 	sub.w	r2, r3, #8
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <checkBrickHit+0x878>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	da00      	bge.n	800105e <checkBrickHit+0x786>
 800105c:	3307      	adds	r3, #7
 800105e:	10db      	asrs	r3, r3, #3
 8001060:	4619      	mov	r1, r3
 8001062:	483c      	ldr	r0, [pc, #240]	; (8001154 <checkBrickHit+0x87c>)
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4403      	add	r3, r0
 8001072:	330c      	adds	r3, #12
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1e58      	subs	r0, r3, #1
 8001078:	4c36      	ldr	r4, [pc, #216]	; (8001154 <checkBrickHit+0x87c>)
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	440b      	add	r3, r1
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4423      	add	r3, r4
 8001088:	330c      	adds	r3, #12
 800108a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <checkBrickHit+0x878>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f1a3 0208 	sub.w	r2, r3, #8
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <checkBrickHit+0x878>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	da00      	bge.n	80010a0 <checkBrickHit+0x7c8>
 800109e:	3307      	adds	r3, #7
 80010a0:	10db      	asrs	r3, r3, #3
 80010a2:	4618      	mov	r0, r3
 80010a4:	492b      	ldr	r1, [pc, #172]	; (8001154 <checkBrickHit+0x87c>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4403      	add	r3, r0
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	440b      	add	r3, r1
 80010b4:	330c      	adds	r3, #12
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dc33      	bgt.n	8001124 <checkBrickHit+0x84c>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <checkBrickHit+0x878>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f1a3 0208 	sub.w	r2, r3, #8
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <checkBrickHit+0x878>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da00      	bge.n	80010d0 <checkBrickHit+0x7f8>
 80010ce:	3307      	adds	r3, #7
 80010d0:	10db      	asrs	r3, r3, #3
 80010d2:	4618      	mov	r0, r3
 80010d4:	491f      	ldr	r1, [pc, #124]	; (8001154 <checkBrickHit+0x87c>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
                points++;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <checkBrickHit+0x880>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <checkBrickHit+0x880>)
 80010f4:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <checkBrickHit+0x878>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da00      	bge.n	8001102 <checkBrickHit+0x82a>
 8001100:	3307      	adds	r3, #7
 8001102:	10db      	asrs	r3, r3, #3
 8001104:	461a      	mov	r2, r3
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <checkBrickHit+0x878>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	3b08      	subs	r3, #8
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f000 fea4 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <checkBrickHit+0x878>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	3b08      	subs	r3, #8
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f934 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <checkBrickHit+0x878>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f1a3 0208 	sub.w	r2, r3, #8
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <checkBrickHit+0x878>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	da00      	bge.n	8001138 <checkBrickHit+0x860>
 8001136:	3307      	adds	r3, #7
 8001138:	10db      	asrs	r3, r3, #3
 800113a:	4618      	mov	r0, r3
 800113c:	4905      	ldr	r1, [pc, #20]	; (8001154 <checkBrickHit+0x87c>)
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4403      	add	r3, r0
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	440b      	add	r3, r1
 800114c:	e008      	b.n	8001160 <checkBrickHit+0x888>
 800114e:	bf00      	nop
 8001150:	20000034 	.word	0x20000034
 8001154:	200000e8 	.word	0x200000e8
 8001158:	20001ee8 	.word	0x20001ee8
 800115c:	20000004 	.word	0x20000004
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	b298      	uxth	r0, r3
 8001168:	4b93      	ldr	r3, [pc, #588]	; (80013b8 <checkBrickHit+0xae0>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f1a3 0208 	sub.w	r2, r3, #8
 8001170:	4b91      	ldr	r3, [pc, #580]	; (80013b8 <checkBrickHit+0xae0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	da00      	bge.n	800117c <checkBrickHit+0x8a4>
 800117a:	3307      	adds	r3, #7
 800117c:	10db      	asrs	r3, r3, #3
 800117e:	461c      	mov	r4, r3
 8001180:	498e      	ldr	r1, [pc, #568]	; (80013bc <checkBrickHit+0xae4>)
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4423      	add	r3, r4
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	b299      	uxth	r1, r3
 800119a:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <checkBrickHit+0xae0>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f1a3 0208 	sub.w	r2, r3, #8
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <checkBrickHit+0xae0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da00      	bge.n	80011ae <checkBrickHit+0x8d6>
 80011ac:	3307      	adds	r3, #7
 80011ae:	10db      	asrs	r3, r3, #3
 80011b0:	461d      	mov	r5, r3
 80011b2:	4c82      	ldr	r4, [pc, #520]	; (80013bc <checkBrickHit+0xae4>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	442b      	add	r3, r5
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4423      	add	r3, r4
 80011c2:	330c      	adds	r3, #12
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a7e      	ldr	r2, [pc, #504]	; (80013c0 <checkBrickHit+0xae8>)
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2304      	movs	r3, #4
 80011d2:	2220      	movs	r2, #32
 80011d4:	f004 f85c 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	3301      	adds	r3, #1
 80011dc:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 80011de:	4b76      	ldr	r3, [pc, #472]	; (80013b8 <checkBrickHit+0xae0>)
 80011e0:	7a1b      	ldrb	r3, [r3, #8]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d102      	bne.n	80011ec <checkBrickHit+0x914>
                ball.dir = NW;
 80011e6:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <checkBrickHit+0xae0>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 80011ec:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <checkBrickHit+0xae0>)
 80011ee:	7a1b      	ldrb	r3, [r3, #8]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d102      	bne.n	80011fa <checkBrickHit+0x922>
                ball.dir = SW;
 80011f4:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <checkBrickHit+0xae0>)
 80011f6:	2205      	movs	r2, #5
 80011f8:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 861c 	bne.w	8001e3a <checkBrickHit+0x1562>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 8001202:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <checkBrickHit+0xae0>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f1a3 0209 	sub.w	r2, r3, #9
 800120a:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <checkBrickHit+0xae0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	da00      	bge.n	8001216 <checkBrickHit+0x93e>
 8001214:	3307      	adds	r3, #7
 8001216:	10db      	asrs	r3, r3, #3
 8001218:	4618      	mov	r0, r3
 800121a:	4968      	ldr	r1, [pc, #416]	; (80013bc <checkBrickHit+0xae4>)
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4403      	add	r3, r0
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	3308      	adds	r3, #8
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f040 8603 	bne.w	8001e3a <checkBrickHit+0x1562>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <checkBrickHit+0xae0>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f1a3 0209 	sub.w	r2, r3, #9
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <checkBrickHit+0xae0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	da00      	bge.n	8001248 <checkBrickHit+0x970>
 8001246:	3307      	adds	r3, #7
 8001248:	10db      	asrs	r3, r3, #3
 800124a:	4619      	mov	r1, r3
 800124c:	485b      	ldr	r0, [pc, #364]	; (80013bc <checkBrickHit+0xae4>)
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	440b      	add	r3, r1
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4403      	add	r3, r0
 800125c:	330c      	adds	r3, #12
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	1e58      	subs	r0, r3, #1
 8001262:	4c56      	ldr	r4, [pc, #344]	; (80013bc <checkBrickHit+0xae4>)
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	440b      	add	r3, r1
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	4423      	add	r3, r4
 8001272:	330c      	adds	r3, #12
 8001274:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <checkBrickHit+0xae0>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f1a3 0209 	sub.w	r2, r3, #9
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <checkBrickHit+0xae0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	da00      	bge.n	800128a <checkBrickHit+0x9b2>
 8001288:	3307      	adds	r3, #7
 800128a:	10db      	asrs	r3, r3, #3
 800128c:	4618      	mov	r0, r3
 800128e:	494b      	ldr	r1, [pc, #300]	; (80013bc <checkBrickHit+0xae4>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4403      	add	r3, r0
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	440b      	add	r3, r1
 800129e:	330c      	adds	r3, #12
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dc33      	bgt.n	800130e <checkBrickHit+0xa36>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <checkBrickHit+0xae0>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f1a3 0209 	sub.w	r2, r3, #9
 80012ae:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <checkBrickHit+0xae0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da00      	bge.n	80012ba <checkBrickHit+0x9e2>
 80012b8:	3307      	adds	r3, #7
 80012ba:	10db      	asrs	r3, r3, #3
 80012bc:	4618      	mov	r0, r3
 80012be:	493f      	ldr	r1, [pc, #252]	; (80013bc <checkBrickHit+0xae4>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4403      	add	r3, r0
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	440b      	add	r3, r1
 80012ce:	3308      	adds	r3, #8
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
                    points++;
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <checkBrickHit+0xaec>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <checkBrickHit+0xaec>)
 80012de:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <checkBrickHit+0xae0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da00      	bge.n	80012ec <checkBrickHit+0xa14>
 80012ea:	3307      	adds	r3, #7
 80012ec:	10db      	asrs	r3, r3, #3
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <checkBrickHit+0xae0>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	3b09      	subs	r3, #9
 80012f6:	4619      	mov	r1, r3
 80012f8:	4610      	mov	r0, r2
 80012fa:	f000 fdaf 	bl	8001e5c <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <checkBrickHit+0xae0>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	3b09      	subs	r3, #9
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f001 f83f 	bl	800238c <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <checkBrickHit+0xae0>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f1a3 0209 	sub.w	r2, r3, #9
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <checkBrickHit+0xae0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	da00      	bge.n	8001322 <checkBrickHit+0xa4a>
 8001320:	3307      	adds	r3, #7
 8001322:	10db      	asrs	r3, r3, #3
 8001324:	4618      	mov	r0, r3
 8001326:	4925      	ldr	r1, [pc, #148]	; (80013bc <checkBrickHit+0xae4>)
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4403      	add	r3, r0
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	440b      	add	r3, r1
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	b298      	uxth	r0, r3
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <checkBrickHit+0xae0>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f1a3 0209 	sub.w	r2, r3, #9
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <checkBrickHit+0xae0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	da00      	bge.n	8001352 <checkBrickHit+0xa7a>
 8001350:	3307      	adds	r3, #7
 8001352:	10db      	asrs	r3, r3, #3
 8001354:	461c      	mov	r4, r3
 8001356:	4919      	ldr	r1, [pc, #100]	; (80013bc <checkBrickHit+0xae4>)
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4423      	add	r3, r4
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	440b      	add	r3, r1
 8001366:	3304      	adds	r3, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	b299      	uxth	r1, r3
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <checkBrickHit+0xae0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f1a3 0209 	sub.w	r2, r3, #9
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <checkBrickHit+0xae0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	da00      	bge.n	8001384 <checkBrickHit+0xaac>
 8001382:	3307      	adds	r3, #7
 8001384:	10db      	asrs	r3, r3, #3
 8001386:	461d      	mov	r5, r3
 8001388:	4c0c      	ldr	r4, [pc, #48]	; (80013bc <checkBrickHit+0xae4>)
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	442b      	add	r3, r5
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4423      	add	r3, r4
 8001398:	330c      	adds	r3, #12
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <checkBrickHit+0xae8>)
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2304      	movs	r3, #4
 80013a8:	2220      	movs	r2, #32
 80013aa:	f003 ff71 	bl	8005290 <Displ_FillArea>
                ball.dir = SW;
 80013ae:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <checkBrickHit+0xae0>)
 80013b0:	2205      	movs	r2, #5
 80013b2:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80013b4:	f000 bd41 	b.w	8001e3a <checkBrickHit+0x1562>
 80013b8:	20000034 	.word	0x20000034
 80013bc:	200000e8 	.word	0x200000e8
 80013c0:	20000004 	.word	0x20000004
 80013c4:	20001ee8 	.word	0x20001ee8
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 80013c8:	4bb5      	ldr	r3, [pc, #724]	; (80016a0 <checkBrickHit+0xdc8>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	1fda      	subs	r2, r3, #7
 80013ce:	4bb4      	ldr	r3, [pc, #720]	; (80016a0 <checkBrickHit+0xdc8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	da00      	bge.n	80013d8 <checkBrickHit+0xb00>
 80013d6:	3307      	adds	r3, #7
 80013d8:	10db      	asrs	r3, r3, #3
 80013da:	4618      	mov	r0, r3
 80013dc:	49b1      	ldr	r1, [pc, #708]	; (80016a4 <checkBrickHit+0xdcc>)
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4403      	add	r3, r0
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	440b      	add	r3, r1
 80013ec:	3308      	adds	r3, #8
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 80b6 	bne.w	8001562 <checkBrickHit+0xc8a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 80013f6:	4baa      	ldr	r3, [pc, #680]	; (80016a0 <checkBrickHit+0xdc8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	1fda      	subs	r2, r3, #7
 80013fc:	4ba8      	ldr	r3, [pc, #672]	; (80016a0 <checkBrickHit+0xdc8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	da00      	bge.n	8001406 <checkBrickHit+0xb2e>
 8001404:	3307      	adds	r3, #7
 8001406:	10db      	asrs	r3, r3, #3
 8001408:	4619      	mov	r1, r3
 800140a:	48a6      	ldr	r0, [pc, #664]	; (80016a4 <checkBrickHit+0xdcc>)
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4403      	add	r3, r0
 800141a:	330c      	adds	r3, #12
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1e58      	subs	r0, r3, #1
 8001420:	4ca0      	ldr	r4, [pc, #640]	; (80016a4 <checkBrickHit+0xdcc>)
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4423      	add	r3, r4
 8001430:	330c      	adds	r3, #12
 8001432:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 8001434:	4b9a      	ldr	r3, [pc, #616]	; (80016a0 <checkBrickHit+0xdc8>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	1fda      	subs	r2, r3, #7
 800143a:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <checkBrickHit+0xdc8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da00      	bge.n	8001444 <checkBrickHit+0xb6c>
 8001442:	3307      	adds	r3, #7
 8001444:	10db      	asrs	r3, r3, #3
 8001446:	4618      	mov	r0, r3
 8001448:	4996      	ldr	r1, [pc, #600]	; (80016a4 <checkBrickHit+0xdcc>)
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4403      	add	r3, r0
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	440b      	add	r3, r1
 8001458:	330c      	adds	r3, #12
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dc30      	bgt.n	80014c2 <checkBrickHit+0xbea>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 8001460:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <checkBrickHit+0xdc8>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	1fda      	subs	r2, r3, #7
 8001466:	4b8e      	ldr	r3, [pc, #568]	; (80016a0 <checkBrickHit+0xdc8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da00      	bge.n	8001470 <checkBrickHit+0xb98>
 800146e:	3307      	adds	r3, #7
 8001470:	10db      	asrs	r3, r3, #3
 8001472:	4618      	mov	r0, r3
 8001474:	498b      	ldr	r1, [pc, #556]	; (80016a4 <checkBrickHit+0xdcc>)
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4403      	add	r3, r0
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	440b      	add	r3, r1
 8001484:	3308      	adds	r3, #8
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
                points++;
 800148a:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <checkBrickHit+0xdd0>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <checkBrickHit+0xdd0>)
 8001494:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <checkBrickHit+0xdc8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da00      	bge.n	80014a0 <checkBrickHit+0xbc8>
 800149e:	3307      	adds	r3, #7
 80014a0:	10db      	asrs	r3, r3, #3
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <checkBrickHit+0xdc8>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	3b07      	subs	r3, #7
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f000 fcd5 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <checkBrickHit+0xdc8>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3b07      	subs	r3, #7
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 ff65 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 80014c2:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <checkBrickHit+0xdc8>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	1fda      	subs	r2, r3, #7
 80014c8:	4b75      	ldr	r3, [pc, #468]	; (80016a0 <checkBrickHit+0xdc8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da00      	bge.n	80014d2 <checkBrickHit+0xbfa>
 80014d0:	3307      	adds	r3, #7
 80014d2:	10db      	asrs	r3, r3, #3
 80014d4:	4618      	mov	r0, r3
 80014d6:	4973      	ldr	r1, [pc, #460]	; (80016a4 <checkBrickHit+0xdcc>)
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4403      	add	r3, r0
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	440b      	add	r3, r1
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	b298      	uxth	r0, r3
 80014ee:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <checkBrickHit+0xdc8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	1fda      	subs	r2, r3, #7
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <checkBrickHit+0xdc8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <checkBrickHit+0xc26>
 80014fc:	3307      	adds	r3, #7
 80014fe:	10db      	asrs	r3, r3, #3
 8001500:	461c      	mov	r4, r3
 8001502:	4968      	ldr	r1, [pc, #416]	; (80016a4 <checkBrickHit+0xdcc>)
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4423      	add	r3, r4
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	440b      	add	r3, r1
 8001512:	3304      	adds	r3, #4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	b299      	uxth	r1, r3
 800151c:	4b60      	ldr	r3, [pc, #384]	; (80016a0 <checkBrickHit+0xdc8>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	1fda      	subs	r2, r3, #7
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <checkBrickHit+0xdc8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da00      	bge.n	800152c <checkBrickHit+0xc54>
 800152a:	3307      	adds	r3, #7
 800152c:	10db      	asrs	r3, r3, #3
 800152e:	461d      	mov	r5, r3
 8001530:	4c5c      	ldr	r4, [pc, #368]	; (80016a4 <checkBrickHit+0xdcc>)
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	442b      	add	r3, r5
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4423      	add	r3, r4
 8001540:	330c      	adds	r3, #12
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a59      	ldr	r2, [pc, #356]	; (80016ac <checkBrickHit+0xdd4>)
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	b29b      	uxth	r3, r3
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2304      	movs	r3, #4
 8001550:	2220      	movs	r2, #32
 8001552:	f003 fe9d 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3301      	adds	r3, #1
 800155a:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <checkBrickHit+0xdc8>)
 800155e:	2201      	movs	r2, #1
 8001560:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8001562:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <checkBrickHit+0xdc8>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f1a3 0208 	sub.w	r2, r3, #8
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <checkBrickHit+0xdc8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	da00      	bge.n	8001576 <checkBrickHit+0xc9e>
 8001574:	3307      	adds	r3, #7
 8001576:	10db      	asrs	r3, r3, #3
 8001578:	4618      	mov	r0, r3
 800157a:	494a      	ldr	r1, [pc, #296]	; (80016a4 <checkBrickHit+0xdcc>)
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	440b      	add	r3, r1
 800158a:	3308      	adds	r3, #8
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	f040 80d7 	bne.w	8001742 <checkBrickHit+0xe6a>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8001594:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <checkBrickHit+0xdc8>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f1a3 0208 	sub.w	r2, r3, #8
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <checkBrickHit+0xdc8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da00      	bge.n	80015a8 <checkBrickHit+0xcd0>
 80015a6:	3307      	adds	r3, #7
 80015a8:	10db      	asrs	r3, r3, #3
 80015aa:	4619      	mov	r1, r3
 80015ac:	483d      	ldr	r0, [pc, #244]	; (80016a4 <checkBrickHit+0xdcc>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	440b      	add	r3, r1
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4403      	add	r3, r0
 80015bc:	330c      	adds	r3, #12
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	1e58      	subs	r0, r3, #1
 80015c2:	4c38      	ldr	r4, [pc, #224]	; (80016a4 <checkBrickHit+0xdcc>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	440b      	add	r3, r1
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4423      	add	r3, r4
 80015d2:	330c      	adds	r3, #12
 80015d4:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 80015d6:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <checkBrickHit+0xdc8>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f1a3 0208 	sub.w	r2, r3, #8
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <checkBrickHit+0xdc8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da00      	bge.n	80015ea <checkBrickHit+0xd12>
 80015e8:	3307      	adds	r3, #7
 80015ea:	10db      	asrs	r3, r3, #3
 80015ec:	4618      	mov	r0, r3
 80015ee:	492d      	ldr	r1, [pc, #180]	; (80016a4 <checkBrickHit+0xdcc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4403      	add	r3, r0
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	440b      	add	r3, r1
 80015fe:	330c      	adds	r3, #12
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dc33      	bgt.n	800166e <checkBrickHit+0xd96>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <checkBrickHit+0xdc8>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f1a3 0208 	sub.w	r2, r3, #8
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <checkBrickHit+0xdc8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	da00      	bge.n	800161a <checkBrickHit+0xd42>
 8001618:	3307      	adds	r3, #7
 800161a:	10db      	asrs	r3, r3, #3
 800161c:	4618      	mov	r0, r3
 800161e:	4921      	ldr	r1, [pc, #132]	; (80016a4 <checkBrickHit+0xdcc>)
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4403      	add	r3, r0
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	440b      	add	r3, r1
 800162e:	3308      	adds	r3, #8
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
                points++;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <checkBrickHit+0xdd0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	b2da      	uxtb	r2, r3
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <checkBrickHit+0xdd0>)
 800163e:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <checkBrickHit+0xdc8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	da00      	bge.n	800164c <checkBrickHit+0xd74>
 800164a:	3307      	adds	r3, #7
 800164c:	10db      	asrs	r3, r3, #3
 800164e:	461a      	mov	r2, r3
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <checkBrickHit+0xdc8>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	3b08      	subs	r3, #8
 8001656:	4619      	mov	r1, r3
 8001658:	4610      	mov	r0, r2
 800165a:	f000 fbff 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <checkBrickHit+0xdc8>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	3b08      	subs	r3, #8
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fe8f 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <checkBrickHit+0xdc8>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f1a3 0208 	sub.w	r2, r3, #8
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <checkBrickHit+0xdc8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	da00      	bge.n	8001682 <checkBrickHit+0xdaa>
 8001680:	3307      	adds	r3, #7
 8001682:	10db      	asrs	r3, r3, #3
 8001684:	4618      	mov	r0, r3
 8001686:	4907      	ldr	r1, [pc, #28]	; (80016a4 <checkBrickHit+0xdcc>)
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4403      	add	r3, r0
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	440b      	add	r3, r1
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	b298      	uxth	r0, r3
 800169e:	e007      	b.n	80016b0 <checkBrickHit+0xdd8>
 80016a0:	20000034 	.word	0x20000034
 80016a4:	200000e8 	.word	0x200000e8
 80016a8:	20001ee8 	.word	0x20001ee8
 80016ac:	20000004 	.word	0x20000004
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <checkBrickHit+0x1018>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f1a3 0208 	sub.w	r2, r3, #8
 80016b8:	4b8d      	ldr	r3, [pc, #564]	; (80018f0 <checkBrickHit+0x1018>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da00      	bge.n	80016c4 <checkBrickHit+0xdec>
 80016c2:	3307      	adds	r3, #7
 80016c4:	10db      	asrs	r3, r3, #3
 80016c6:	461c      	mov	r4, r3
 80016c8:	498a      	ldr	r1, [pc, #552]	; (80018f4 <checkBrickHit+0x101c>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4423      	add	r3, r4
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	440b      	add	r3, r1
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	b299      	uxth	r1, r3
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <checkBrickHit+0x1018>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f1a3 0208 	sub.w	r2, r3, #8
 80016ea:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <checkBrickHit+0x1018>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da00      	bge.n	80016f6 <checkBrickHit+0xe1e>
 80016f4:	3307      	adds	r3, #7
 80016f6:	10db      	asrs	r3, r3, #3
 80016f8:	461d      	mov	r5, r3
 80016fa:	4c7e      	ldr	r4, [pc, #504]	; (80018f4 <checkBrickHit+0x101c>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	442b      	add	r3, r5
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4423      	add	r3, r4
 800170a:	330c      	adds	r3, #12
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7a      	ldr	r2, [pc, #488]	; (80018f8 <checkBrickHit+0x1020>)
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	b29b      	uxth	r3, r3
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2304      	movs	r3, #4
 800171a:	2220      	movs	r2, #32
 800171c:	f003 fdb8 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	3301      	adds	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <checkBrickHit+0x1018>)
 8001728:	7a1b      	ldrb	r3, [r3, #8]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d102      	bne.n	8001734 <checkBrickHit+0xe5c>
                ball.dir = SW;
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <checkBrickHit+0x1018>)
 8001730:	2205      	movs	r2, #5
 8001732:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 8001734:	4b6e      	ldr	r3, [pc, #440]	; (80018f0 <checkBrickHit+0x1018>)
 8001736:	7a1b      	ldrb	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <checkBrickHit+0xe6a>
                ball.dir = NW;
 800173c:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <checkBrickHit+0x1018>)
 800173e:	2207      	movs	r2, #7
 8001740:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f040 837a 	bne.w	8001e3e <checkBrickHit+0x1566>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 800174a:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <checkBrickHit+0x1018>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	1fda      	subs	r2, r3, #7
 8001750:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <checkBrickHit+0x1018>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	da00      	bge.n	800175c <checkBrickHit+0xe84>
 800175a:	3307      	adds	r3, #7
 800175c:	10db      	asrs	r3, r3, #3
 800175e:	4618      	mov	r0, r3
 8001760:	4964      	ldr	r1, [pc, #400]	; (80018f4 <checkBrickHit+0x101c>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4403      	add	r3, r0
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	440b      	add	r3, r1
 8001770:	3308      	adds	r3, #8
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	f040 8362 	bne.w	8001e3e <checkBrickHit+0x1566>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <checkBrickHit+0x1018>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	1fda      	subs	r2, r3, #7
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <checkBrickHit+0x1018>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	da00      	bge.n	800178c <checkBrickHit+0xeb4>
 800178a:	3307      	adds	r3, #7
 800178c:	10db      	asrs	r3, r3, #3
 800178e:	4619      	mov	r1, r3
 8001790:	4858      	ldr	r0, [pc, #352]	; (80018f4 <checkBrickHit+0x101c>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4403      	add	r3, r0
 80017a0:	330c      	adds	r3, #12
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	1e58      	subs	r0, r3, #1
 80017a6:	4c53      	ldr	r4, [pc, #332]	; (80018f4 <checkBrickHit+0x101c>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4423      	add	r3, r4
 80017b6:	330c      	adds	r3, #12
 80017b8:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 80017ba:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <checkBrickHit+0x1018>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	1fda      	subs	r2, r3, #7
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <checkBrickHit+0x1018>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da00      	bge.n	80017cc <checkBrickHit+0xef4>
 80017ca:	3307      	adds	r3, #7
 80017cc:	10db      	asrs	r3, r3, #3
 80017ce:	4618      	mov	r0, r3
 80017d0:	4948      	ldr	r1, [pc, #288]	; (80018f4 <checkBrickHit+0x101c>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4403      	add	r3, r0
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	440b      	add	r3, r1
 80017e0:	330c      	adds	r3, #12
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dc32      	bgt.n	800184e <checkBrickHit+0xf76>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <checkBrickHit+0x1018>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	1fda      	subs	r2, r3, #7
 80017ee:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <checkBrickHit+0x1018>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da00      	bge.n	80017fa <checkBrickHit+0xf22>
 80017f8:	3307      	adds	r3, #7
 80017fa:	10db      	asrs	r3, r3, #3
 80017fc:	4618      	mov	r0, r3
 80017fe:	493d      	ldr	r1, [pc, #244]	; (80018f4 <checkBrickHit+0x101c>)
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4403      	add	r3, r0
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	440b      	add	r3, r1
 800180e:	3308      	adds	r3, #8
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
                    points++;
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <checkBrickHit+0x1024>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b37      	ldr	r3, [pc, #220]	; (80018fc <checkBrickHit+0x1024>)
 800181e:	701a      	strb	r2, [r3, #0]

                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 8001820:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <checkBrickHit+0x1018>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	da00      	bge.n	800182c <checkBrickHit+0xf54>
 800182a:	3307      	adds	r3, #7
 800182c:	10db      	asrs	r3, r3, #3
 800182e:	461a      	mov	r2, r3
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <checkBrickHit+0x1018>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	3b07      	subs	r3, #7
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f000 fb0f 	bl	8001e5c <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <checkBrickHit+0x1018>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3b07      	subs	r3, #7
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fd9f 	bl	800238c <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <checkBrickHit+0x1018>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	1fda      	subs	r2, r3, #7
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <checkBrickHit+0x1018>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	da00      	bge.n	8001860 <checkBrickHit+0xf88>
 800185e:	3307      	adds	r3, #7
 8001860:	10db      	asrs	r3, r3, #3
 8001862:	4618      	mov	r0, r3
 8001864:	4923      	ldr	r1, [pc, #140]	; (80018f4 <checkBrickHit+0x101c>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4403      	add	r3, r0
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	b298      	uxth	r0, r3
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <checkBrickHit+0x1018>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	1fda      	subs	r2, r3, #7
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <checkBrickHit+0x1018>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	da00      	bge.n	800188e <checkBrickHit+0xfb6>
 800188c:	3307      	adds	r3, #7
 800188e:	10db      	asrs	r3, r3, #3
 8001890:	461c      	mov	r4, r3
 8001892:	4918      	ldr	r1, [pc, #96]	; (80018f4 <checkBrickHit+0x101c>)
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4423      	add	r3, r4
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	440b      	add	r3, r1
 80018a2:	3304      	adds	r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	b299      	uxth	r1, r3
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <checkBrickHit+0x1018>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	1fda      	subs	r2, r3, #7
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <checkBrickHit+0x1018>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da00      	bge.n	80018be <checkBrickHit+0xfe6>
 80018bc:	3307      	adds	r3, #7
 80018be:	10db      	asrs	r3, r3, #3
 80018c0:	461d      	mov	r5, r3
 80018c2:	4c0c      	ldr	r4, [pc, #48]	; (80018f4 <checkBrickHit+0x101c>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	442b      	add	r3, r5
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4423      	add	r3, r4
 80018d2:	330c      	adds	r3, #12
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <checkBrickHit+0x1020>)
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2304      	movs	r3, #4
 80018e2:	2220      	movs	r2, #32
 80018e4:	f003 fcd4 	bl	8005290 <Displ_FillArea>
                ball.dir = NW;
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <checkBrickHit+0x1018>)
 80018ea:	2207      	movs	r2, #7
 80018ec:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80018ee:	e2a6      	b.n	8001e3e <checkBrickHit+0x1566>
 80018f0:	20000034 	.word	0x20000034
 80018f4:	200000e8 	.word	0x200000e8
 80018f8:	20000004 	.word	0x20000004
 80018fc:	20001ee8 	.word	0x20001ee8
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001900:	4bb5      	ldr	r3, [pc, #724]	; (8001bd8 <checkBrickHit+0x1300>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	1fda      	subs	r2, r3, #7
 8001906:	4bb4      	ldr	r3, [pc, #720]	; (8001bd8 <checkBrickHit+0x1300>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	da00      	bge.n	8001910 <checkBrickHit+0x1038>
 800190e:	3307      	adds	r3, #7
 8001910:	10db      	asrs	r3, r3, #3
 8001912:	4618      	mov	r0, r3
 8001914:	49b1      	ldr	r1, [pc, #708]	; (8001bdc <checkBrickHit+0x1304>)
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4403      	add	r3, r0
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	440b      	add	r3, r1
 8001924:	3308      	adds	r3, #8
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	f040 80b6 	bne.w	8001a9a <checkBrickHit+0x11c2>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800192e:	4baa      	ldr	r3, [pc, #680]	; (8001bd8 <checkBrickHit+0x1300>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	1fda      	subs	r2, r3, #7
 8001934:	4ba8      	ldr	r3, [pc, #672]	; (8001bd8 <checkBrickHit+0x1300>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	da00      	bge.n	800193e <checkBrickHit+0x1066>
 800193c:	3307      	adds	r3, #7
 800193e:	10db      	asrs	r3, r3, #3
 8001940:	4619      	mov	r1, r3
 8001942:	48a6      	ldr	r0, [pc, #664]	; (8001bdc <checkBrickHit+0x1304>)
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	440b      	add	r3, r1
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4403      	add	r3, r0
 8001952:	330c      	adds	r3, #12
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	1e58      	subs	r0, r3, #1
 8001958:	4ca0      	ldr	r4, [pc, #640]	; (8001bdc <checkBrickHit+0x1304>)
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	440b      	add	r3, r1
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4423      	add	r3, r4
 8001968:	330c      	adds	r3, #12
 800196a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 800196c:	4b9a      	ldr	r3, [pc, #616]	; (8001bd8 <checkBrickHit+0x1300>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	1fda      	subs	r2, r3, #7
 8001972:	4b99      	ldr	r3, [pc, #612]	; (8001bd8 <checkBrickHit+0x1300>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da00      	bge.n	800197c <checkBrickHit+0x10a4>
 800197a:	3307      	adds	r3, #7
 800197c:	10db      	asrs	r3, r3, #3
 800197e:	4618      	mov	r0, r3
 8001980:	4996      	ldr	r1, [pc, #600]	; (8001bdc <checkBrickHit+0x1304>)
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4403      	add	r3, r0
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	440b      	add	r3, r1
 8001990:	330c      	adds	r3, #12
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dc30      	bgt.n	80019fa <checkBrickHit+0x1122>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 8001998:	4b8f      	ldr	r3, [pc, #572]	; (8001bd8 <checkBrickHit+0x1300>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	1fda      	subs	r2, r3, #7
 800199e:	4b8e      	ldr	r3, [pc, #568]	; (8001bd8 <checkBrickHit+0x1300>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da00      	bge.n	80019a8 <checkBrickHit+0x10d0>
 80019a6:	3307      	adds	r3, #7
 80019a8:	10db      	asrs	r3, r3, #3
 80019aa:	4618      	mov	r0, r3
 80019ac:	498b      	ldr	r1, [pc, #556]	; (8001bdc <checkBrickHit+0x1304>)
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4403      	add	r3, r0
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	440b      	add	r3, r1
 80019bc:	3308      	adds	r3, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
                points++;
 80019c2:	4b87      	ldr	r3, [pc, #540]	; (8001be0 <checkBrickHit+0x1308>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <checkBrickHit+0x1308>)
 80019cc:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 80019ce:	4b82      	ldr	r3, [pc, #520]	; (8001bd8 <checkBrickHit+0x1300>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <checkBrickHit+0x1100>
 80019d6:	3307      	adds	r3, #7
 80019d8:	10db      	asrs	r3, r3, #3
 80019da:	461a      	mov	r2, r3
 80019dc:	4b7e      	ldr	r3, [pc, #504]	; (8001bd8 <checkBrickHit+0x1300>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	3b07      	subs	r3, #7
 80019e2:	4619      	mov	r1, r3
 80019e4:	4610      	mov	r0, r2
 80019e6:	f000 fa39 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80019ea:	4b7b      	ldr	r3, [pc, #492]	; (8001bd8 <checkBrickHit+0x1300>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3b07      	subs	r3, #7
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fcc9 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 80019fa:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <checkBrickHit+0x1300>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	1fda      	subs	r2, r3, #7
 8001a00:	4b75      	ldr	r3, [pc, #468]	; (8001bd8 <checkBrickHit+0x1300>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da00      	bge.n	8001a0a <checkBrickHit+0x1132>
 8001a08:	3307      	adds	r3, #7
 8001a0a:	10db      	asrs	r3, r3, #3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4973      	ldr	r1, [pc, #460]	; (8001bdc <checkBrickHit+0x1304>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4403      	add	r3, r0
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	440b      	add	r3, r1
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	b298      	uxth	r0, r3
 8001a26:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <checkBrickHit+0x1300>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	1fda      	subs	r2, r3, #7
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <checkBrickHit+0x1300>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da00      	bge.n	8001a36 <checkBrickHit+0x115e>
 8001a34:	3307      	adds	r3, #7
 8001a36:	10db      	asrs	r3, r3, #3
 8001a38:	461c      	mov	r4, r3
 8001a3a:	4968      	ldr	r1, [pc, #416]	; (8001bdc <checkBrickHit+0x1304>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4423      	add	r3, r4
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	440b      	add	r3, r1
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	b299      	uxth	r1, r3
 8001a54:	4b60      	ldr	r3, [pc, #384]	; (8001bd8 <checkBrickHit+0x1300>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	1fda      	subs	r2, r3, #7
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <checkBrickHit+0x1300>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da00      	bge.n	8001a64 <checkBrickHit+0x118c>
 8001a62:	3307      	adds	r3, #7
 8001a64:	10db      	asrs	r3, r3, #3
 8001a66:	461d      	mov	r5, r3
 8001a68:	4c5c      	ldr	r4, [pc, #368]	; (8001bdc <checkBrickHit+0x1304>)
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	442b      	add	r3, r5
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4423      	add	r3, r4
 8001a78:	330c      	adds	r3, #12
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a59      	ldr	r2, [pc, #356]	; (8001be4 <checkBrickHit+0x130c>)
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2304      	movs	r3, #4
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f003 fc01 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	3301      	adds	r3, #1
 8001a92:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <checkBrickHit+0x1300>)
 8001a96:	2207      	movs	r2, #7
 8001a98:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8001a9a:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <checkBrickHit+0x1300>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f1a3 0208 	sub.w	r2, r3, #8
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <checkBrickHit+0x1300>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da00      	bge.n	8001aae <checkBrickHit+0x11d6>
 8001aac:	3307      	adds	r3, #7
 8001aae:	10db      	asrs	r3, r3, #3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	494a      	ldr	r1, [pc, #296]	; (8001bdc <checkBrickHit+0x1304>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4403      	add	r3, r0
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	f040 80d7 	bne.w	8001c7a <checkBrickHit+0x13a2>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <checkBrickHit+0x1300>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f1a3 0208 	sub.w	r2, r3, #8
 8001ad4:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <checkBrickHit+0x1300>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da00      	bge.n	8001ae0 <checkBrickHit+0x1208>
 8001ade:	3307      	adds	r3, #7
 8001ae0:	10db      	asrs	r3, r3, #3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	483d      	ldr	r0, [pc, #244]	; (8001bdc <checkBrickHit+0x1304>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	440b      	add	r3, r1
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4403      	add	r3, r0
 8001af4:	330c      	adds	r3, #12
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1e58      	subs	r0, r3, #1
 8001afa:	4c38      	ldr	r4, [pc, #224]	; (8001bdc <checkBrickHit+0x1304>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	4423      	add	r3, r4
 8001b0a:	330c      	adds	r3, #12
 8001b0c:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <checkBrickHit+0x1300>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f1a3 0208 	sub.w	r2, r3, #8
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <checkBrickHit+0x1300>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da00      	bge.n	8001b22 <checkBrickHit+0x124a>
 8001b20:	3307      	adds	r3, #7
 8001b22:	10db      	asrs	r3, r3, #3
 8001b24:	4618      	mov	r0, r3
 8001b26:	492d      	ldr	r1, [pc, #180]	; (8001bdc <checkBrickHit+0x1304>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4403      	add	r3, r0
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	440b      	add	r3, r1
 8001b36:	330c      	adds	r3, #12
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	dc33      	bgt.n	8001ba6 <checkBrickHit+0x12ce>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <checkBrickHit+0x1300>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f1a3 0208 	sub.w	r2, r3, #8
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <checkBrickHit+0x1300>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da00      	bge.n	8001b52 <checkBrickHit+0x127a>
 8001b50:	3307      	adds	r3, #7
 8001b52:	10db      	asrs	r3, r3, #3
 8001b54:	4618      	mov	r0, r3
 8001b56:	4921      	ldr	r1, [pc, #132]	; (8001bdc <checkBrickHit+0x1304>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4403      	add	r3, r0
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	3308      	adds	r3, #8
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
                points++;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <checkBrickHit+0x1308>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <checkBrickHit+0x1308>)
 8001b76:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <checkBrickHit+0x1300>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da00      	bge.n	8001b84 <checkBrickHit+0x12ac>
 8001b82:	3307      	adds	r3, #7
 8001b84:	10db      	asrs	r3, r3, #3
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <checkBrickHit+0x1300>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	3b08      	subs	r3, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f000 f963 	bl	8001e5c <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <checkBrickHit+0x1300>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b08      	subs	r3, #8
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fbf3 	bl	800238c <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <checkBrickHit+0x1300>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f1a3 0208 	sub.w	r2, r3, #8
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <checkBrickHit+0x1300>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da00      	bge.n	8001bba <checkBrickHit+0x12e2>
 8001bb8:	3307      	adds	r3, #7
 8001bba:	10db      	asrs	r3, r3, #3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	4907      	ldr	r1, [pc, #28]	; (8001bdc <checkBrickHit+0x1304>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4403      	add	r3, r0
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	440b      	add	r3, r1
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	b298      	uxth	r0, r3
 8001bd6:	e007      	b.n	8001be8 <checkBrickHit+0x1310>
 8001bd8:	20000034 	.word	0x20000034
 8001bdc:	200000e8 	.word	0x200000e8
 8001be0:	20001ee8 	.word	0x20001ee8
 8001be4:	20000004 	.word	0x20000004
 8001be8:	4b98      	ldr	r3, [pc, #608]	; (8001e4c <checkBrickHit+0x1574>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f1a3 0208 	sub.w	r2, r3, #8
 8001bf0:	4b96      	ldr	r3, [pc, #600]	; (8001e4c <checkBrickHit+0x1574>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da00      	bge.n	8001bfc <checkBrickHit+0x1324>
 8001bfa:	3307      	adds	r3, #7
 8001bfc:	10db      	asrs	r3, r3, #3
 8001bfe:	461c      	mov	r4, r3
 8001c00:	4993      	ldr	r1, [pc, #588]	; (8001e50 <checkBrickHit+0x1578>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4423      	add	r3, r4
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	440b      	add	r3, r1
 8001c10:	3304      	adds	r3, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <checkBrickHit+0x1574>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f1a3 0208 	sub.w	r2, r3, #8
 8001c22:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <checkBrickHit+0x1574>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da00      	bge.n	8001c2e <checkBrickHit+0x1356>
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	10db      	asrs	r3, r3, #3
 8001c30:	461d      	mov	r5, r3
 8001c32:	4c87      	ldr	r4, [pc, #540]	; (8001e50 <checkBrickHit+0x1578>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	442b      	add	r3, r5
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4423      	add	r3, r4
 8001c42:	330c      	adds	r3, #12
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a83      	ldr	r2, [pc, #524]	; (8001e54 <checkBrickHit+0x157c>)
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2304      	movs	r3, #4
 8001c52:	2220      	movs	r2, #32
 8001c54:	f003 fb1c 	bl	8005290 <Displ_FillArea>
            bricksHit++;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <checkBrickHit+0x1574>)
 8001c60:	7a1b      	ldrb	r3, [r3, #8]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d102      	bne.n	8001c6c <checkBrickHit+0x1394>
                ball.dir = SE;
 8001c66:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <checkBrickHit+0x1574>)
 8001c68:	2203      	movs	r2, #3
 8001c6a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001c6c:	4b77      	ldr	r3, [pc, #476]	; (8001e4c <checkBrickHit+0x1574>)
 8001c6e:	7a1b      	ldrb	r3, [r3, #8]
 8001c70:	2b07      	cmp	r3, #7
 8001c72:	d102      	bne.n	8001c7a <checkBrickHit+0x13a2>
                ball.dir = NE;
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <checkBrickHit+0x1574>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 80e0 	bne.w	8001e42 <checkBrickHit+0x156a>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <checkBrickHit+0x1574>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	1fda      	subs	r2, r3, #7
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <checkBrickHit+0x1574>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da00      	bge.n	8001c94 <checkBrickHit+0x13bc>
 8001c92:	3307      	adds	r3, #7
 8001c94:	10db      	asrs	r3, r3, #3
 8001c96:	4618      	mov	r0, r3
 8001c98:	496d      	ldr	r1, [pc, #436]	; (8001e50 <checkBrickHit+0x1578>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4403      	add	r3, r0
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3308      	adds	r3, #8
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 80c8 	bne.w	8001e42 <checkBrickHit+0x156a>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001cb2:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <checkBrickHit+0x1574>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	1fda      	subs	r2, r3, #7
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <checkBrickHit+0x1574>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da00      	bge.n	8001cc4 <checkBrickHit+0x13ec>
 8001cc2:	3307      	adds	r3, #7
 8001cc4:	10db      	asrs	r3, r3, #3
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4861      	ldr	r0, [pc, #388]	; (8001e50 <checkBrickHit+0x1578>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4403      	add	r3, r0
 8001cd8:	330c      	adds	r3, #12
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	1e58      	subs	r0, r3, #1
 8001cde:	4c5c      	ldr	r4, [pc, #368]	; (8001e50 <checkBrickHit+0x1578>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	440b      	add	r3, r1
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4423      	add	r3, r4
 8001cee:	330c      	adds	r3, #12
 8001cf0:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <checkBrickHit+0x1574>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	1fda      	subs	r2, r3, #7
 8001cf8:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <checkBrickHit+0x1574>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da00      	bge.n	8001d04 <checkBrickHit+0x142c>
 8001d02:	3307      	adds	r3, #7
 8001d04:	10db      	asrs	r3, r3, #3
 8001d06:	4618      	mov	r0, r3
 8001d08:	4951      	ldr	r1, [pc, #324]	; (8001e50 <checkBrickHit+0x1578>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4403      	add	r3, r0
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	440b      	add	r3, r1
 8001d18:	330c      	adds	r3, #12
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dc32      	bgt.n	8001d86 <checkBrickHit+0x14ae>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001d20:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <checkBrickHit+0x1574>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	1fda      	subs	r2, r3, #7
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <checkBrickHit+0x1574>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da00      	bge.n	8001d32 <checkBrickHit+0x145a>
 8001d30:	3307      	adds	r3, #7
 8001d32:	10db      	asrs	r3, r3, #3
 8001d34:	4618      	mov	r0, r3
 8001d36:	4946      	ldr	r1, [pc, #280]	; (8001e50 <checkBrickHit+0x1578>)
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4403      	add	r3, r0
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	440b      	add	r3, r1
 8001d46:	3308      	adds	r3, #8
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
                    points++;
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <checkBrickHit+0x1580>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <checkBrickHit+0x1580>)
 8001d56:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001d58:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <checkBrickHit+0x1574>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da00      	bge.n	8001d64 <checkBrickHit+0x148c>
 8001d62:	3307      	adds	r3, #7
 8001d64:	10db      	asrs	r3, r3, #3
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <checkBrickHit+0x1574>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	3b07      	subs	r3, #7
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f000 f873 	bl	8001e5c <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 8001d76:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <checkBrickHit+0x1574>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3b07      	subs	r3, #7
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fb03 	bl	800238c <checkEmptyRow>
                }
                ball.dir = NE;
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <checkBrickHit+0x1574>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <checkBrickHit+0x1574>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	1fda      	subs	r2, r3, #7
 8001d92:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <checkBrickHit+0x1574>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da00      	bge.n	8001d9e <checkBrickHit+0x14c6>
 8001d9c:	3307      	adds	r3, #7
 8001d9e:	10db      	asrs	r3, r3, #3
 8001da0:	4618      	mov	r0, r3
 8001da2:	492b      	ldr	r1, [pc, #172]	; (8001e50 <checkBrickHit+0x1578>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4403      	add	r3, r0
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	440b      	add	r3, r1
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	b298      	uxth	r0, r3
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <checkBrickHit+0x1574>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	1fda      	subs	r2, r3, #7
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <checkBrickHit+0x1574>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da00      	bge.n	8001dcc <checkBrickHit+0x14f4>
 8001dca:	3307      	adds	r3, #7
 8001dcc:	10db      	asrs	r3, r3, #3
 8001dce:	461c      	mov	r4, r3
 8001dd0:	491f      	ldr	r1, [pc, #124]	; (8001e50 <checkBrickHit+0x1578>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4423      	add	r3, r4
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	440b      	add	r3, r1
 8001de0:	3304      	adds	r3, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	b299      	uxth	r1, r3
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <checkBrickHit+0x1574>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	1fda      	subs	r2, r3, #7
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <checkBrickHit+0x1574>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da00      	bge.n	8001dfc <checkBrickHit+0x1524>
 8001dfa:	3307      	adds	r3, #7
 8001dfc:	10db      	asrs	r3, r3, #3
 8001dfe:	461d      	mov	r5, r3
 8001e00:	4c13      	ldr	r4, [pc, #76]	; (8001e50 <checkBrickHit+0x1578>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	442b      	add	r3, r5
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4423      	add	r3, r4
 8001e10:	330c      	adds	r3, #12
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <checkBrickHit+0x157c>)
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	2220      	movs	r2, #32
 8001e22:	f003 fa35 	bl	8005290 <Displ_FillArea>
            }
        }
        break;
 8001e26:	e00c      	b.n	8001e42 <checkBrickHit+0x156a>
    case still:
        break;
    default:
        ball.dir = ball.dir;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <checkBrickHit+0x1574>)
 8001e2a:	7a1a      	ldrb	r2, [r3, #8]
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <checkBrickHit+0x1574>)
 8001e2e:	721a      	strb	r2, [r3, #8]
    }
}
 8001e30:	e008      	b.n	8001e44 <checkBrickHit+0x156c>
        break;
 8001e32:	bf00      	nop
 8001e34:	e006      	b.n	8001e44 <checkBrickHit+0x156c>
        break;
 8001e36:	bf00      	nop
 8001e38:	e004      	b.n	8001e44 <checkBrickHit+0x156c>
        break;
 8001e3a:	bf00      	nop
 8001e3c:	e002      	b.n	8001e44 <checkBrickHit+0x156c>
        break;
 8001e3e:	bf00      	nop
 8001e40:	e000      	b.n	8001e44 <checkBrickHit+0x156c>
        break;
 8001e42:	bf00      	nop
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4c:	20000034 	.word	0x20000034
 8001e50:	200000e8 	.word	0x200000e8
 8001e54:	20000004 	.word	0x20000004
 8001e58:	20001ee8 	.word	0x20001ee8

08001e5c <dropPowerUp>:
 * @brief drops a potential powerup when a brick has been destroyed
 *
 * @param x x-coordinate of the destroyed brick
 * @param y y-coordinate of the destroyed brick
 */
void dropPowerUp(int x, int y) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <dropPowerUp+0x70>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d114      	bne.n	8001e9c <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001e72:	f004 f82d 	bl	8005ed0 <HAL_GetTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f008 fe8f 	bl	800ab9c <srand>
        dropChance = RANDOM(0, 100);
 8001e7e:	f008 febb 	bl	800abf8 <rand>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <dropPowerUp+0x74>)
 8001e86:	fb82 1203 	smull	r1, r2, r2, r3
 8001e8a:	1111      	asrs	r1, r2, #4
 8001e8c:	17da      	asrs	r2, r3, #31
 8001e8e:	1a8a      	subs	r2, r1, r2
 8001e90:	2165      	movs	r1, #101	; 0x65
 8001e92:	fb01 f202 	mul.w	r2, r1, r2
 8001e96:	1a9a      	subs	r2, r3, r2
 8001e98:	4613      	mov	r3, r2
 8001e9a:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b0a      	cmp	r3, #10
 8001ea0:	d805      	bhi.n	8001eae <dropPowerUp+0x52>
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <dropPowerUp+0x52>
        guardian = 1;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <dropPowerUp+0x70>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d806      	bhi.n	8001ec2 <dropPowerUp+0x66>
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d903      	bls.n	8001ec2 <dropPowerUp+0x66>
        explodeBricks(x, y);
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8d5 	bl	800206c <explodeBricks>
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20001eea 	.word	0x20001eea
 8001ed0:	288df0cb 	.word	0x288df0cb

08001ed4 <printScreen>:
/**
 * @fn void printScreen()
 * @brief prints the game screen
 *
 */
void printScreen() {
 8001ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed6:	b08b      	sub	sp, #44	; 0x2c
 8001ed8:	af06      	add	r7, sp, #24
    Displ_FillArea(SCREEN_WIDTH*4 - 8 - (3*8), 4, 30, 4, D_GREEN);
 8001eda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	221e      	movs	r2, #30
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001eea:	f003 f9d1 	bl	8005290 <Displ_FillArea>

    for (int i = 0; i < lives1; i++) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e00f      	b.n	8001f14 <printScreen+0x40>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	b298      	uxth	r0, r3
 8001f00:	2318      	movs	r3, #24
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2304      	movs	r3, #4
 8001f06:	2204      	movs	r2, #4
 8001f08:	2104      	movs	r1, #4
 8001f0a:	f003 f9c1 	bl	8005290 <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <printScreen+0x114>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	dbe9      	blt.n	8001ef4 <printScreen+0x20>
    }

    if (guardian == 1) {
 8001f20:	4b32      	ldr	r3, [pc, #200]	; (8001fec <printScreen+0x118>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10f      	bne.n	8001f48 <printScreen+0x74>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <printScreen+0x11c>)
 8001f2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	b299      	uxth	r1, r3
 8001f36:	f249 6396 	movw	r3, #38550	; 0x9696
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f42:	2000      	movs	r0, #0
 8001f44:	f003 f9a4 	bl	8005290 <Displ_FillArea>
    }

    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <printScreen+0x11c>)
 8001f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4e:	3b19      	subs	r3, #25
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	b298      	uxth	r0, r3
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <printScreen+0x11c>)
 8001f58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	b299      	uxth	r1, r3
 8001f62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2304      	movs	r3, #4
 8001f6a:	22c8      	movs	r2, #200	; 0xc8
 8001f6c:	f003 f990 	bl	8005290 <Displ_FillArea>

    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001f70:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <printScreen+0x120>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	b298      	uxth	r0, r3
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <printScreen+0x120>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	b299      	uxth	r1, r3
 8001f84:	2318      	movs	r3, #24
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2304      	movs	r3, #4
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	f003 f980 	bl	8005290 <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <printScreen+0x124>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4638      	mov	r0, r7
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <printScreen+0x128>)
 8001f98:	210c      	movs	r1, #12
 8001f9a:	f008 fe6b 	bl	800ac74 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <printScreen+0x12c>)
 8001fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	b29c      	uxth	r4, r3
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <printScreen+0x12c>)
 8001fac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fb0:	b29d      	uxth	r5, r3
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <printScreen+0x130>)
 8001fb4:	463e      	mov	r6, r7
 8001fb6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fba:	9204      	str	r2, [sp, #16]
 8001fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc0:	9203      	str	r2, [sp, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	9202      	str	r2, [sp, #8]
 8001fc6:	46ec      	mov	ip, sp
 8001fc8:	1d1a      	adds	r2, r3, #4
 8001fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fce:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4632      	mov	r2, r6
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f003 feb5 	bl	8005d48 <Displ_WString>
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000002 	.word	0x20000002
 8001fec:	20001eea 	.word	0x20001eea
 8001ff0:	20000030 	.word	0x20000030
 8001ff4:	20000034 	.word	0x20000034
 8001ff8:	20001ee8 	.word	0x20001ee8
 8001ffc:	0800c1d8 	.word	0x0800c1d8
 8002000:	20000000 	.word	0x20000000
 8002004:	20000014 	.word	0x20000014

08002008 <checkGuardianTimer>:
/**
 * @fn void checkGuardianTimer()
 * @brief checks the timer for the guardian power up
 *
 */
void checkGuardianTimer() {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <checkGuardianTimer+0x58>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d120      	bne.n	8002058 <checkGuardianTimer+0x50>
        if (guardianTimer <= 0) {
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <checkGuardianTimer+0x5c>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <checkGuardianTimer+0x44>
            guardian = 0;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <checkGuardianTimer+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <checkGuardianTimer+0x5c>)
 8002026:	2264      	movs	r2, #100	; 0x64
 8002028:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <checkGuardianTimer+0x60>)
 800202c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002030:	3b01      	subs	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	b299      	uxth	r1, r3
 8002038:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2304      	movs	r3, #4
 8002040:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002044:	2000      	movs	r0, #0
 8002046:	f003 f923 	bl	8005290 <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 800204a:	e005      	b.n	8002058 <checkGuardianTimer+0x50>
            guardianTimer--;
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <checkGuardianTimer+0x5c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	3b01      	subs	r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <checkGuardianTimer+0x5c>)
 8002056:	701a      	strb	r2, [r3, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20001eea 	.word	0x20001eea
 8002064:	20000003 	.word	0x20000003
 8002068:	20000030 	.word	0x20000030

0800206c <explodeBricks>:
 * @brief explodes bricks in a radius of 1 (power up)
 *
 * @param x x-coordinate of the central brick of the explosion
 * @param y y-coordinate of the central brick of the explosion
 */
void explodeBricks(int x, int y) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3301      	adds	r3, #1
 800208c:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <explodeBricks+0x2c>
        ymin = y;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b30      	cmp	r3, #48	; 0x30
 800209c:	d101      	bne.n	80020a2 <explodeBricks+0x36>
        ymax = y;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <explodeBricks+0x40>
        xmin = x;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b0a      	cmp	r3, #10
 80020b0:	d101      	bne.n	80020b6 <explodeBricks+0x4a>
        xmax = x;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e063      	b.n	8002184 <explodeBricks+0x118>
        for(int j = xmin; j <= xmax; j++) {
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	e059      	b.n	8002176 <explodeBricks+0x10a>
            if(bricks[i][j].visible == 1) {
 80020c2:	4935      	ldr	r1, [pc, #212]	; (8002198 <explodeBricks+0x12c>)
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	440b      	add	r3, r1
 80020d6:	3308      	adds	r3, #8
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d148      	bne.n	8002170 <explodeBricks+0x104>
                bricks[i][j].toughness = 0;
 80020de:	492e      	ldr	r1, [pc, #184]	; (8002198 <explodeBricks+0x12c>)
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	440b      	add	r3, r1
 80020f2:	330c      	adds	r3, #12
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 80020f8:	4927      	ldr	r1, [pc, #156]	; (8002198 <explodeBricks+0x12c>)
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	4413      	add	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	3308      	adds	r3, #8
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
                points++;
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <explodeBricks+0x130>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <explodeBricks+0x130>)
 800211c:	701a      	strb	r2, [r3, #0]

                Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, D_GREEN);
 800211e:	491e      	ldr	r1, [pc, #120]	; (8002198 <explodeBricks+0x12c>)
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4413      	add	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	440b      	add	r3, r1
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	b298      	uxth	r0, r3
 800213a:	4917      	ldr	r1, [pc, #92]	; (8002198 <explodeBricks+0x12c>)
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	440b      	add	r3, r1
 800214e:	3304      	adds	r3, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	b299      	uxth	r1, r3
 8002158:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2304      	movs	r3, #4
 8002160:	2220      	movs	r2, #32
 8002162:	f003 f895 	bl	8005290 <Displ_FillArea>
                checkEmptyRow(i);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f90e 	bl	800238c <checkEmptyRow>
        for(int j = xmin; j <= xmax; j++) {
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3301      	adds	r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	429a      	cmp	r2, r3
 800217c:	dda1      	ble.n	80020c2 <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	dd97      	ble.n	80020bc <explodeBricks+0x50>
            }
        }
    }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200000e8 	.word	0x200000e8
 800219c:	20001ee8 	.word	0x20001ee8

080021a0 <setBrickToughness>:
 * @fn int setBrickToughness(void)
 * @brief generates a random toughness level for a brick
 *
 * @return a toughness level for a brick or the amount of times a brick needs to be hit before being destroyed
 */
int setBrickToughness(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]

    toughnessPercent = RANDOM(0, 100);
 80021aa:	f008 fd25 	bl	800abf8 <rand>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <setBrickToughness+0x64>)
 80021b2:	fb82 1203 	smull	r1, r2, r2, r3
 80021b6:	1111      	asrs	r1, r2, #4
 80021b8:	17da      	asrs	r2, r3, #31
 80021ba:	1a8a      	subs	r2, r1, r2
 80021bc:	2165      	movs	r1, #101	; 0x65
 80021be:	fb01 f202 	mul.w	r2, r1, r2
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	dd05      	ble.n	80021d8 <setBrickToughness+0x38>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b3c      	cmp	r3, #60	; 0x3c
 80021d0:	dc02      	bgt.n	80021d8 <setBrickToughness+0x38>
        toughness = 1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	e010      	b.n	80021fa <setBrickToughness+0x5a>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b3c      	cmp	r3, #60	; 0x3c
 80021dc:	dd05      	ble.n	80021ea <setBrickToughness+0x4a>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b59      	cmp	r3, #89	; 0x59
 80021e2:	dc02      	bgt.n	80021ea <setBrickToughness+0x4a>
        toughness = 2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	e007      	b.n	80021fa <setBrickToughness+0x5a>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b5a      	cmp	r3, #90	; 0x5a
 80021ee:	dd04      	ble.n	80021fa <setBrickToughness+0x5a>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b63      	cmp	r3, #99	; 0x63
 80021f4:	dc01      	bgt.n	80021fa <setBrickToughness+0x5a>
        toughness = 3;
 80021f6:	2303      	movs	r3, #3
 80021f8:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	288df0cb 	.word	0x288df0cb

08002208 <drawBricks>:
/**
 * @fn void drawBricks()
 * @brief draws the visible bricks in their respective color based on their toughness
 *
 */
void drawBricks() {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	e0b0      	b.n	8002376 <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 8002214:	2300      	movs	r3, #0
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	e0a6      	b.n	8002368 <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 800221a:	495b      	ldr	r1, [pc, #364]	; (8002388 <drawBricks+0x180>)
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	440b      	add	r3, r1
 800222e:	3308      	adds	r3, #8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	f040 8095 	bne.w	8002362 <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 8002238:	4953      	ldr	r1, [pc, #332]	; (8002388 <drawBricks+0x180>)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4413      	add	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	440b      	add	r3, r1
 800224c:	330c      	adds	r3, #12
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d122      	bne.n	800229a <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8002254:	494c      	ldr	r1, [pc, #304]	; (8002388 <drawBricks+0x180>)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	4413      	add	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	440b      	add	r3, r1
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	b298      	uxth	r0, r3
 8002270:	4945      	ldr	r1, [pc, #276]	; (8002388 <drawBricks+0x180>)
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4413      	add	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	440b      	add	r3, r1
 8002284:	3304      	adds	r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	b299      	uxth	r1, r3
 800228e:	2300      	movs	r3, #0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2304      	movs	r3, #4
 8002294:	2220      	movs	r2, #32
 8002296:	f002 fffb 	bl	8005290 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 800229a:	493b      	ldr	r1, [pc, #236]	; (8002388 <drawBricks+0x180>)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	440b      	add	r3, r1
 80022ae:	330c      	adds	r3, #12
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 80022b6:	4934      	ldr	r1, [pc, #208]	; (8002388 <drawBricks+0x180>)
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	440b      	add	r3, r1
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	b298      	uxth	r0, r3
 80022d2:	492d      	ldr	r1, [pc, #180]	; (8002388 <drawBricks+0x180>)
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	440b      	add	r3, r1
 80022e6:	3304      	adds	r3, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	b299      	uxth	r1, r3
 80022f0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2304      	movs	r3, #4
 80022f8:	2220      	movs	r2, #32
 80022fa:	f002 ffc9 	bl	8005290 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 80022fe:	4922      	ldr	r1, [pc, #136]	; (8002388 <drawBricks+0x180>)
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4413      	add	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	440b      	add	r3, r1
 8002312:	330c      	adds	r3, #12
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d123      	bne.n	8002362 <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 800231a:	491b      	ldr	r1, [pc, #108]	; (8002388 <drawBricks+0x180>)
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4413      	add	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	440b      	add	r3, r1
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	b298      	uxth	r0, r3
 8002336:	4914      	ldr	r1, [pc, #80]	; (8002388 <drawBricks+0x180>)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	440b      	add	r3, r1
 800234a:	3304      	adds	r3, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	b299      	uxth	r1, r3
 8002354:	f249 6396 	movw	r3, #38550	; 0x9696
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2304      	movs	r3, #4
 800235c:	2220      	movs	r2, #32
 800235e:	f002 ff97 	bl	8005290 <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b09      	cmp	r3, #9
 800236c:	f77f af55 	ble.w	800221a <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3301      	adds	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b2f      	cmp	r3, #47	; 0x2f
 800237a:	f77f af4b 	ble.w	8002214 <drawBricks+0xc>
                }
            }
        }
    }
}
 800237e:	bf00      	nop
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000e8 	.word	0x200000e8

0800238c <checkEmptyRow>:
 * @fn void checkEmptyRow(uint8_t)
 * @brief checks if a row is empty
 *
 * @param row index for the row needed to be checked
 */
void checkEmptyRow(uint8_t row) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
    uint8_t empty = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]

    for(int i = 0; i < 10; i++) {
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	e012      	b.n	80023c6 <checkEmptyRow+0x3a>
        if(bricks[row][i].visible > 0) {
 80023a0:	79fa      	ldrb	r2, [r7, #7]
 80023a2:	4911      	ldr	r1, [pc, #68]	; (80023e8 <checkEmptyRow+0x5c>)
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	4413      	add	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	440b      	add	r3, r1
 80023b4:	3308      	adds	r3, #8
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	dd01      	ble.n	80023c0 <checkEmptyRow+0x34>
            empty = 1;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < 10; i++) {
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	dde9      	ble.n	80023a0 <checkEmptyRow+0x14>
        }
    }
    if(empty == 0) {
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <checkEmptyRow+0x54>
        HAL_UART_Transmit(&huart2, (uint8_t *)"O", strlen("O"), 300);
 80023d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80023d6:	2201      	movs	r2, #1
 80023d8:	4904      	ldr	r1, [pc, #16]	; (80023ec <checkEmptyRow+0x60>)
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <checkEmptyRow+0x64>)
 80023dc:	f007 fbf4 	bl	8009bc8 <HAL_UART_Transmit>
    }

}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200000e8 	.word	0x200000e8
 80023ec:	0800c1dc 	.word	0x0800c1dc
 80023f0:	20001fec 	.word	0x20001fec

080023f4 <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8002404:	2b01      	cmp	r3, #1
 8002406:	d814      	bhi.n	8002432 <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	b29a      	uxth	r2, r3
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	480f      	ldr	r0, [pc, #60]	; (8002450 <_write+0x5c>)
 8002414:	f007 fbd8 	bl	8009bc8 <HAL_UART_Transmit>
 8002418:	4603      	mov	r3, r0
 800241a:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00f      	beq.n	8002442 <_write+0x4e>
            errno = EIO;
 8002422:	f008 fafb 	bl	800aa1c <__errno>
 8002426:	4603      	mov	r3, r0
 8002428:	2205      	movs	r2, #5
 800242a:	601a      	str	r2, [r3, #0]
            return -1;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	e009      	b.n	8002446 <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 8002432:	f008 faf3 	bl	800aa1c <__errno>
 8002436:	4603      	mov	r3, r0
 8002438:	2209      	movs	r2, #9
 800243a:	601a      	str	r2, [r3, #0]
        return -1;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	e001      	b.n	8002446 <_write+0x52>
        break;
 8002442:	bf00      	nop
    }
    return len;
 8002444:	687b      	ldr	r3, [r7, #4]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20002074 	.word	0x20002074

08002454 <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
    choice = 0;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <init+0x28>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <init+0x2c>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d102      	bne.n	800246c <init+0x18>
        initSpaceInvaders();
 8002466:	f001 f9e1 	bl	800382c <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 800246a:	e005      	b.n	8002478 <init+0x24>
    }else if(gamechoice == 2){
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <init+0x2c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d101      	bne.n	8002478 <init+0x24>
        initBrickbreaker();
 8002474:	f7fd ff04 	bl	8000280 <initBrickbreaker>
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20001eec 	.word	0x20001eec
 8002480:	20001eed 	.word	0x20001eed

08002484 <loop>:

int loop (int key) {
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b085      	sub	sp, #20
 8002488:	af02      	add	r7, sp, #8
 800248a:	6078      	str	r0, [r7, #4]
    updateScreen();
 800248c:	f000 fade 	bl	8002a4c <updateScreen>
    if (play == menu){
 8002490:	4ba1      	ldr	r3, [pc, #644]	; (8002718 <loop+0x294>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d104      	bne.n	80024a2 <loop+0x1e>
        max_choice = total_games;
 8002498:	4ba0      	ldr	r3, [pc, #640]	; (800271c <loop+0x298>)
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	4ba0      	ldr	r3, [pc, #640]	; (8002720 <loop+0x29c>)
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e002      	b.n	80024a8 <loop+0x24>
    }else{
        max_choice = 1;
 80024a2:	4b9f      	ldr	r3, [pc, #636]	; (8002720 <loop+0x29c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d15f      	bne.n	800256e <loop+0xea>
        if(play < paused){
 80024ae:	4b9a      	ldr	r3, [pc, #616]	; (8002718 <loop+0x294>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d84f      	bhi.n	8002556 <loop+0xd2>
        	if(gamechoice == 1){
 80024b6:	4b9b      	ldr	r3, [pc, #620]	; (8002724 <loop+0x2a0>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d104      	bne.n	80024c8 <loop+0x44>
        		moveSpaceship(-1);
 80024be:	f04f 30ff 	mov.w	r0, #4294967295
 80024c2:	f001 fddf 	bl	8004084 <moveSpaceship>
 80024c6:	e046      	b.n	8002556 <loop+0xd2>
        	}else if(gamechoice == 2) {
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <loop+0x2a0>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d142      	bne.n	8002556 <loop+0xd2>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80024d0:	4b95      	ldr	r3, [pc, #596]	; (8002728 <loop+0x2a4>)
 80024d2:	f993 3000 	ldrsb.w	r3, [r3]
 80024d6:	3b19      	subs	r3, #25
 80024d8:	b29b      	uxth	r3, r3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	b298      	uxth	r0, r3
 80024de:	4b92      	ldr	r3, [pc, #584]	; (8002728 <loop+0x2a4>)
 80024e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	b299      	uxth	r1, r3
 80024ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2304      	movs	r3, #4
 80024f2:	22c8      	movs	r2, #200	; 0xc8
 80024f4:	f002 fecc 	bl	8005290 <Displ_FillArea>
                person.x--;
 80024f8:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <loop+0x2a4>)
 80024fa:	f993 3000 	ldrsb.w	r3, [r3]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	b25a      	sxtb	r2, r3
 8002506:	4b88      	ldr	r3, [pc, #544]	; (8002728 <loop+0x2a4>)
 8002508:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 800250a:	4b87      	ldr	r3, [pc, #540]	; (8002728 <loop+0x2a4>)
 800250c:	f993 3000 	ldrsb.w	r3, [r3]
 8002510:	2b18      	cmp	r3, #24
 8002512:	dc03      	bgt.n	800251c <loop+0x98>
                    person.x = (BAR_SIZE/2);
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <loop+0x2a4>)
 8002516:	2219      	movs	r2, #25
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e01c      	b.n	8002556 <loop+0xd2>
                } else {
                    if (ball.dir == still) {
 800251c:	4b83      	ldr	r3, [pc, #524]	; (800272c <loop+0x2a8>)
 800251e:	7a1b      	ldrb	r3, [r3, #8]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d118      	bne.n	8002556 <loop+0xd2>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <loop+0x2a8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	b298      	uxth	r0, r3
 800252e:	4b7f      	ldr	r3, [pc, #508]	; (800272c <loop+0x2a8>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	b29b      	uxth	r3, r3
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	b299      	uxth	r1, r3
 8002538:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2304      	movs	r3, #4
 8002540:	2204      	movs	r2, #4
 8002542:	f002 fea5 	bl	8005290 <Displ_FillArea>
                        ball.x--;
 8002546:	4b79      	ldr	r3, [pc, #484]	; (800272c <loop+0x2a8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a77      	ldr	r2, [pc, #476]	; (800272c <loop+0x2a8>)
 800254e:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 8002550:	4b77      	ldr	r3, [pc, #476]	; (8002730 <loop+0x2ac>)
 8002552:	2207      	movs	r2, #7
 8002554:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 8002556:	4b77      	ldr	r3, [pc, #476]	; (8002734 <loop+0x2b0>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <loop+0xe6>
        	choice--;
 800255e:	4b75      	ldr	r3, [pc, #468]	; (8002734 <loop+0x2b0>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	3b01      	subs	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <loop+0x2b0>)
 8002568:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d15f      	bne.n	8002634 <loop+0x1b0>
    	if(play < paused){
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <loop+0x294>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d84d      	bhi.n	8002618 <loop+0x194>
    		if(gamechoice == 1){
 800257c:	4b69      	ldr	r3, [pc, #420]	; (8002724 <loop+0x2a0>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d103      	bne.n	800258c <loop+0x108>
    			moveSpaceship(1);
 8002584:	2001      	movs	r0, #1
 8002586:	f001 fd7d 	bl	8004084 <moveSpaceship>
 800258a:	e045      	b.n	8002618 <loop+0x194>
    		}else if (gamechoice == 2) {
 800258c:	4b65      	ldr	r3, [pc, #404]	; (8002724 <loop+0x2a0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d141      	bne.n	8002618 <loop+0x194>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8002594:	4b64      	ldr	r3, [pc, #400]	; (8002728 <loop+0x2a4>)
 8002596:	f993 3000 	ldrsb.w	r3, [r3]
 800259a:	3b19      	subs	r3, #25
 800259c:	b29b      	uxth	r3, r3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	b298      	uxth	r0, r3
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <loop+0x2a4>)
 80025a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	b299      	uxth	r1, r3
 80025ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2304      	movs	r3, #4
 80025b6:	22c8      	movs	r2, #200	; 0xc8
 80025b8:	f002 fe6a 	bl	8005290 <Displ_FillArea>
    			person.x++;
 80025bc:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <loop+0x2a4>)
 80025be:	f993 3000 	ldrsb.w	r3, [r3]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	b25a      	sxtb	r2, r3
 80025ca:	4b57      	ldr	r3, [pc, #348]	; (8002728 <loop+0x2a4>)
 80025cc:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 80025ce:	4b56      	ldr	r3, [pc, #344]	; (8002728 <loop+0x2a4>)
 80025d0:	f993 3000 	ldrsb.w	r3, [r3]
 80025d4:	2b36      	cmp	r3, #54	; 0x36
 80025d6:	dd02      	ble.n	80025de <loop+0x15a>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <loop+0x2a4>)
 80025da:	2236      	movs	r2, #54	; 0x36
 80025dc:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 80025de:	4b53      	ldr	r3, [pc, #332]	; (800272c <loop+0x2a8>)
 80025e0:	7a1b      	ldrb	r3, [r3, #8]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d118      	bne.n	8002618 <loop+0x194>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <loop+0x2a8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	b298      	uxth	r0, r3
 80025f0:	4b4e      	ldr	r3, [pc, #312]	; (800272c <loop+0x2a8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	b299      	uxth	r1, r3
 80025fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2304      	movs	r3, #4
 8002602:	2204      	movs	r2, #4
 8002604:	f002 fe44 	bl	8005290 <Displ_FillArea>
    				ball.x++;
 8002608:	4b48      	ldr	r3, [pc, #288]	; (800272c <loop+0x2a8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	4a47      	ldr	r2, [pc, #284]	; (800272c <loop+0x2a8>)
 8002610:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <loop+0x2ac>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <loop+0x2b0>)
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	4b40      	ldr	r3, [pc, #256]	; (8002720 <loop+0x29c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d005      	beq.n	8002630 <loop+0x1ac>
    		choice++;
 8002624:	4b43      	ldr	r3, [pc, #268]	; (8002734 <loop+0x2b0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <loop+0x2b0>)
 800262e:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b04      	cmp	r3, #4
 8002638:	f040 80f2 	bne.w	8002820 <loop+0x39c>
        if (play == notPlay){
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <loop+0x294>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <loop+0x1f4>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 8002644:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2314      	movs	r3, #20
 800264c:	228c      	movs	r2, #140	; 0x8c
 800264e:	2178      	movs	r1, #120	; 0x78
 8002650:	205a      	movs	r0, #90	; 0x5a
 8002652:	f002 fe1d 	bl	8005290 <Displ_FillArea>
            play = inPlay;
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <loop+0x294>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
            if(getConnection() == 1) {
 800265c:	f001 f862 	bl	8003724 <getConnection>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	f040 80da 	bne.w	800281c <loop+0x398>
                HAL_UART_Transmit(&huart2, (uint8_t *)"S", strlen("S"), 300);
 8002668:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800266c:	2201      	movs	r2, #1
 800266e:	4932      	ldr	r1, [pc, #200]	; (8002738 <loop+0x2b4>)
 8002670:	4832      	ldr	r0, [pc, #200]	; (800273c <loop+0x2b8>)
 8002672:	f007 faa9 	bl	8009bc8 <HAL_UART_Transmit>
 8002676:	e0d1      	b.n	800281c <loop+0x398>
            }
        }else if(play == inPlay) {
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <loop+0x294>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d115      	bne.n	80026ac <loop+0x228>
            if (ball.dir == still) {
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <loop+0x2a8>)
 8002682:	7a1b      	ldrb	r3, [r3, #8]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d108      	bne.n	800269a <loop+0x216>
                ball.dir = ballDirection;
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <loop+0x2ac>)
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <loop+0x2a8>)
 800268e:	721a      	strb	r2, [r3, #8]
                start = 1;
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <loop+0x2bc>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
                playBall();
 8002696:	f7fd fe91 	bl	80003bc <playBall>
            }
            if(!hit){
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <loop+0x2c0>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 80bc 	bne.w	800281c <loop+0x398>
                spawnBullet(0);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f001 fa0b 	bl	8003ac0 <spawnBullet>
 80026aa:	e0b7      	b.n	800281c <loop+0x398>
            }
        }else if(play == paused){
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <loop+0x294>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d153      	bne.n	800275c <loop+0x2d8>
            if(choice == 0){
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <loop+0x2b0>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d114      	bne.n	80026e6 <loop+0x262>
                if(getConnection() == 1) {
 80026bc:	f001 f832 	bl	8003724 <getConnection>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d106      	bne.n	80026d4 <loop+0x250>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"M", strlen("M"), 300);
 80026c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026ca:	2201      	movs	r2, #1
 80026cc:	491e      	ldr	r1, [pc, #120]	; (8002748 <loop+0x2c4>)
 80026ce:	481b      	ldr	r0, [pc, #108]	; (800273c <loop+0x2b8>)
 80026d0:	f007 fa7a 	bl	8009bc8 <HAL_UART_Transmit>
                }
                play = menu;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <loop+0x294>)
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
                gamechoice = 0;
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <loop+0x2a0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
                init();
 80026e0:	f7ff feb8 	bl	8002454 <init>
 80026e4:	e09a      	b.n	800281c <loop+0x398>
            }
            else if(choice == 1){
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <loop+0x2b0>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d132      	bne.n	8002754 <loop+0x2d0>
            	displayPauseMenu(1);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f000 fd58 	bl	80031a4 <displayPauseMenu>
                play = last_state;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <loop+0x2c8>)
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <loop+0x294>)
 80026fa:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 80026fc:	f001 f812 	bl	8003724 <getConnection>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	f040 808a 	bne.w	800281c <loop+0x398>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"C", strlen("C"), 300);
 8002708:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800270c:	2201      	movs	r2, #1
 800270e:	4910      	ldr	r1, [pc, #64]	; (8002750 <loop+0x2cc>)
 8002710:	480a      	ldr	r0, [pc, #40]	; (800273c <loop+0x2b8>)
 8002712:	f007 fa59 	bl	8009bc8 <HAL_UART_Transmit>
 8002716:	e081      	b.n	800281c <loop+0x398>
 8002718:	2000004a 	.word	0x2000004a
 800271c:	20000044 	.word	0x20000044
 8002720:	2000002d 	.word	0x2000002d
 8002724:	20001eed 	.word	0x20001eed
 8002728:	20000030 	.word	0x20000030
 800272c:	20000034 	.word	0x20000034
 8002730:	20000041 	.word	0x20000041
 8002734:	20001eec 	.word	0x20001eec
 8002738:	0800c1e0 	.word	0x0800c1e0
 800273c:	20001fec 	.word	0x20001fec
 8002740:	20001eef 	.word	0x20001eef
 8002744:	20001eeb 	.word	0x20001eeb
 8002748:	0800c1e4 	.word	0x0800c1e4
 800274c:	20001eee 	.word	0x20001eee
 8002750:	0800c1e8 	.word	0x0800c1e8
                }
            }else{
                displayPauseMenu(0);
 8002754:	2000      	movs	r0, #0
 8002756:	f000 fd25 	bl	80031a4 <displayPauseMenu>
 800275a:	e05f      	b.n	800281c <loop+0x398>
            }

        }else if(play == menu){
 800275c:	4bab      	ldr	r3, [pc, #684]	; (8002a0c <loop+0x588>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d154      	bne.n	800280e <loop+0x38a>
            if(choice == 0){
 8002764:	4baa      	ldr	r3, [pc, #680]	; (8002a10 <loop+0x58c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11b      	bne.n	80027a4 <loop+0x320>
                if(getConnection() == 0) {
 800276c:	f000 ffda 	bl	8003724 <getConnection>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <loop+0x302>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"?", strlen("?"), 300);
 8002776:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800277a:	2201      	movs	r2, #1
 800277c:	49a5      	ldr	r1, [pc, #660]	; (8002a14 <loop+0x590>)
 800277e:	48a6      	ldr	r0, [pc, #664]	; (8002a18 <loop+0x594>)
 8002780:	f007 fa22 	bl	8009bc8 <HAL_UART_Transmit>
 8002784:	e04a      	b.n	800281c <loop+0x398>
                } else if(getConnection() == 1) {
 8002786:	f000 ffcd 	bl	8003724 <getConnection>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d145      	bne.n	800281c <loop+0x398>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"X", strlen("X"), 300);
 8002790:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002794:	2201      	movs	r2, #1
 8002796:	49a1      	ldr	r1, [pc, #644]	; (8002a1c <loop+0x598>)
 8002798:	489f      	ldr	r0, [pc, #636]	; (8002a18 <loop+0x594>)
 800279a:	f007 fa15 	bl	8009bc8 <HAL_UART_Transmit>
                    closeConnection();
 800279e:	f001 f817 	bl	80037d0 <closeConnection>
 80027a2:	e03b      	b.n	800281c <loop+0x398>
                }

            }else if(choice == 1){
 80027a4:	4b9a      	ldr	r3, [pc, #616]	; (8002a10 <loop+0x58c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d114      	bne.n	80027d6 <loop+0x352>
                gamechoice = 2;
 80027ac:	4b9c      	ldr	r3, [pc, #624]	; (8002a20 <loop+0x59c>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80027b2:	4b96      	ldr	r3, [pc, #600]	; (8002a0c <loop+0x588>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 80027b8:	f000 ffb4 	bl	8003724 <getConnection>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d106      	bne.n	80027d0 <loop+0x34c>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"2G", strlen("2G"), 300);
 80027c2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027c6:	2202      	movs	r2, #2
 80027c8:	4996      	ldr	r1, [pc, #600]	; (8002a24 <loop+0x5a0>)
 80027ca:	4893      	ldr	r0, [pc, #588]	; (8002a18 <loop+0x594>)
 80027cc:	f007 f9fc 	bl	8009bc8 <HAL_UART_Transmit>
                }
                init();
 80027d0:	f7ff fe40 	bl	8002454 <init>
 80027d4:	e022      	b.n	800281c <loop+0x398>
            }
            else if(choice == 2){
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <loop+0x58c>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d114      	bne.n	8002808 <loop+0x384>
                gamechoice = 1;
 80027de:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <loop+0x59c>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80027e4:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <loop+0x588>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 80027ea:	f000 ff9b 	bl	8003724 <getConnection>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <loop+0x37e>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"1G", strlen("1G"), 300);
 80027f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027f8:	2202      	movs	r2, #2
 80027fa:	498b      	ldr	r1, [pc, #556]	; (8002a28 <loop+0x5a4>)
 80027fc:	4886      	ldr	r0, [pc, #536]	; (8002a18 <loop+0x594>)
 80027fe:	f007 f9e3 	bl	8009bc8 <HAL_UART_Transmit>
                }
                init();
 8002802:	f7ff fe27 	bl	8002454 <init>
 8002806:	e009      	b.n	800281c <loop+0x398>
            }else{
                displayMenu();
 8002808:	f000 fd2e 	bl	8003268 <displayMenu>
 800280c:	e006      	b.n	800281c <loop+0x398>
            }

        }
        else if(!hit){
 800280e:	4b87      	ldr	r3, [pc, #540]	; (8002a2c <loop+0x5a8>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <loop+0x398>
            spawnBullet(0);
 8002816:	2000      	movs	r0, #0
 8002818:	f001 f952 	bl	8003ac0 <spawnBullet>
        }
        key = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11e      	bne.n	8002864 <loop+0x3e0>
 8002826:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <loop+0x588>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d81a      	bhi.n	8002864 <loop+0x3e0>
    	last_state = play;
 800282e:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <loop+0x588>)
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	4b7f      	ldr	r3, [pc, #508]	; (8002a30 <loop+0x5ac>)
 8002834:	701a      	strb	r2, [r3, #0]
        play = paused;
 8002836:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <loop+0x588>)
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
        choice = 1;
 800283c:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <loop+0x58c>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 8002842:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <loop+0x5b0>)
 8002844:	2228      	movs	r2, #40	; 0x28
 8002846:	701a      	strb	r2, [r3, #0]
        key = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	607b      	str	r3, [r7, #4]
        if(getConnection() == 1) {
 800284c:	f000 ff6a 	bl	8003724 <getConnection>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d106      	bne.n	8002864 <loop+0x3e0>
            HAL_UART_Transmit(&huart2, (uint8_t *)"P", strlen("P"), 300);
 8002856:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800285a:	2201      	movs	r2, #1
 800285c:	4976      	ldr	r1, [pc, #472]	; (8002a38 <loop+0x5b4>)
 800285e:	486e      	ldr	r0, [pc, #440]	; (8002a18 <loop+0x594>)
 8002860:	f007 f9b2 	bl	8009bc8 <HAL_UART_Transmit>
        }
    }

    if(play == inPlay){
 8002864:	4b69      	ldr	r3, [pc, #420]	; (8002a0c <loop+0x588>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d132      	bne.n	80028d2 <loop+0x44e>
    	if(gamechoice == 1){
 800286c:	4b6c      	ldr	r3, [pc, #432]	; (8002a20 <loop+0x59c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d10a      	bne.n	800288a <loop+0x406>
    		spawnComet();
 8002874:	f001 f89e 	bl	80039b4 <spawnComet>
    		delayBullet();
 8002878:	f001 fe20 	bl	80044bc <delayBullet>
    		moveComets();
 800287c:	f001 fa88 	bl	8003d90 <moveComets>
    		moveBullets();
 8002880:	f001 f9ca 	bl	8003c18 <moveBullets>
    		moveEnemyBullets();
 8002884:	f001 fe2e 	bl	80044e4 <moveEnemyBullets>
 8002888:	e021      	b.n	80028ce <loop+0x44a>
    	}else if(gamechoice == 2) {
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <loop+0x59c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d11d      	bne.n	80028ce <loop+0x44a>
            if (start == 1 && ball.dir != still) {
 8002892:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <loop+0x5b8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d115      	bne.n	80028c6 <loop+0x442>
 800289a:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <loop+0x5bc>)
 800289c:	7a1b      	ldrb	r3, [r3, #8]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d011      	beq.n	80028c6 <loop+0x442>
                if (delay <= 0) {
 80028a2:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <loop+0x5c0>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <loop+0x432>
                    lowerBricks();
 80028aa:	f7fd ff79 	bl	80007a0 <lowerBricks>
                    delay = BRICK_SPEED;
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <loop+0x5c0>)
 80028b0:	228c      	movs	r2, #140	; 0x8c
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e005      	b.n	80028c2 <loop+0x43e>
                } else {
                    delay--;
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <loop+0x5c0>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <loop+0x5c0>)
 80028c0:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 80028c2:	f7fd ffd5 	bl	8000870 <checkGameOver>
            }
            checkGuardianTimer();
 80028c6:	f7ff fb9f 	bl	8002008 <checkGuardianTimer>
            playBall();
 80028ca:	f7fd fd77 	bl	80003bc <playBall>
        }

    	updateScreen();
 80028ce:	f000 f8bd 	bl	8002a4c <updateScreen>
    }if(play < paused){
 80028d2:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <loop+0x588>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d807      	bhi.n	80028ea <loop+0x466>
    	if(gamechoice == 1){
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <loop+0x59c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d103      	bne.n	80028ea <loop+0x466>
    		spawnStar();
 80028e2:	f001 f941 	bl	8003b68 <spawnStar>
    		moveStars();
 80028e6:	f001 fb6b 	bl	8003fc0 <moveStars>
    	}

    }


    if (getConnection() == 1 && getSignal() == 1) {
 80028ea:	f000 ff1b 	bl	8003724 <getConnection>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f040 8085 	bne.w	8002a00 <loop+0x57c>
 80028f6:	f000 fefd 	bl	80036f4 <getSignal>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d17f      	bne.n	8002a00 <loop+0x57c>
        if(gamechoice == 0) {
 8002900:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <loop+0x59c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d111      	bne.n	800292c <loop+0x4a8>
            gamechoice = getMPGameChoice();
 8002908:	f000 ff2e 	bl	8003768 <getMPGameChoice>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <loop+0x59c>)
 8002912:	701a      	strb	r2, [r3, #0]
            printArray();
 8002914:	f000 fed6 	bl	80036c4 <printArray>
            clearArray();
 8002918:	f000 fee0 	bl	80036dc <clearArray>
            turnOffSignal();
 800291c:	f000 fef6 	bl	800370c <turnOffSignal>
            play = notPlay;
 8002920:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <loop+0x588>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
            init();
 8002926:	f7ff fd95 	bl	8002454 <init>
 800292a:	e069      	b.n	8002a00 <loop+0x57c>
        }else if(play == notPlay && getMPMenuState() == inPlay){
 800292c:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <loop+0x588>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <loop+0x4c6>
 8002934:	f000 ff5e 	bl	80037f4 <getMPMenuState>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <loop+0x4c6>
        	play = inPlay;
 800293e:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <loop+0x588>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
        	turnOffSignal();
 8002944:	f000 fee2 	bl	800370c <turnOffSignal>
 8002948:	e05a      	b.n	8002a00 <loop+0x57c>
        }else if (play < 2 && getMPMenuState() == paused) {
 800294a:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <loop+0x588>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d814      	bhi.n	800297c <loop+0x4f8>
 8002952:	f000 ff4f 	bl	80037f4 <getMPMenuState>
 8002956:	4603      	mov	r3, r0
 8002958:	2b02      	cmp	r3, #2
 800295a:	d10f      	bne.n	800297c <loop+0x4f8>
            last_state = play;
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <loop+0x588>)
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <loop+0x5ac>)
 8002962:	701a      	strb	r2, [r3, #0]
            play = paused;
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <loop+0x588>)
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
            choice = 1;
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <loop+0x58c>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
            last_choice_pause = 40;
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <loop+0x5b0>)
 8002972:	2228      	movs	r2, #40	; 0x28
 8002974:	701a      	strb	r2, [r3, #0]
            turnOffSignal();
 8002976:	f000 fec9 	bl	800370c <turnOffSignal>
 800297a:	e041      	b.n	8002a00 <loop+0x57c>
        }else if (play == paused && getMPMenuState() == inPlay) {
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <loop+0x588>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d119      	bne.n	80029b8 <loop+0x534>
 8002984:	f000 ff36 	bl	80037f4 <getMPMenuState>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d114      	bne.n	80029b8 <loop+0x534>
            printf("play = %d, mpMenu = %d\r\n", play, getMPMenuState());
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <loop+0x588>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461c      	mov	r4, r3
 8002994:	f000 ff2e 	bl	80037f4 <getMPMenuState>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	4621      	mov	r1, r4
 800299e:	482a      	ldr	r0, [pc, #168]	; (8002a48 <loop+0x5c4>)
 80029a0:	f008 f86e 	bl	800aa80 <iprintf>
            turnOffSignal();
 80029a4:	f000 feb2 	bl	800370c <turnOffSignal>
            displayPauseMenu(1);
 80029a8:	2001      	movs	r0, #1
 80029aa:	f000 fbfb 	bl	80031a4 <displayPauseMenu>
            play = last_state;
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <loop+0x5ac>)
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <loop+0x588>)
 80029b4:	701a      	strb	r2, [r3, #0]
        }else if (play == paused && getMPMenuState() == inPlay) {
 80029b6:	e023      	b.n	8002a00 <loop+0x57c>
        }else if (play == paused && getMPMenuState() == menu) {
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <loop+0x588>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d10f      	bne.n	80029e0 <loop+0x55c>
 80029c0:	f000 ff18 	bl	80037f4 <getMPMenuState>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d10a      	bne.n	80029e0 <loop+0x55c>
            turnOffSignal();
 80029ca:	f000 fe9f 	bl	800370c <turnOffSignal>
            play = menu;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <loop+0x588>)
 80029d0:	2203      	movs	r2, #3
 80029d2:	701a      	strb	r2, [r3, #0]
            gamechoice = 0;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <loop+0x59c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
            init();
 80029da:	f7ff fd3b 	bl	8002454 <init>
 80029de:	e00f      	b.n	8002a00 <loop+0x57c>
        }else if(gamechoice == 1) {
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <loop+0x59c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d00b      	beq.n	8002a00 <loop+0x57c>
            //your code
        }else if (gamechoice == 2) {
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <loop+0x59c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d107      	bne.n	8002a00 <loop+0x57c>
            lowerBricks();
 80029f0:	f7fd fed6 	bl	80007a0 <lowerBricks>
            printArray();
 80029f4:	f000 fe66 	bl	80036c4 <printArray>
            clearArray();
 80029f8:	f000 fe70 	bl	80036dc <clearArray>
            turnOffSignal();
 80029fc:	f000 fe86 	bl	800370c <turnOffSignal>
        }
    }

    return key;
 8002a00:	687b      	ldr	r3, [r7, #4]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd90      	pop	{r4, r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000004a 	.word	0x2000004a
 8002a10:	20001eec 	.word	0x20001eec
 8002a14:	0800c1ec 	.word	0x0800c1ec
 8002a18:	20001fec 	.word	0x20001fec
 8002a1c:	0800c1f0 	.word	0x0800c1f0
 8002a20:	20001eed 	.word	0x20001eed
 8002a24:	0800c1f4 	.word	0x0800c1f4
 8002a28:	0800c1f8 	.word	0x0800c1f8
 8002a2c:	20001eeb 	.word	0x20001eeb
 8002a30:	20001eee 	.word	0x20001eee
 8002a34:	2000002c 	.word	0x2000002c
 8002a38:	0800c1fc 	.word	0x0800c1fc
 8002a3c:	20001eef 	.word	0x20001eef
 8002a40:	20000034 	.word	0x20000034
 8002a44:	20000040 	.word	0x20000040
 8002a48:	0800c200 	.word	0x0800c200

08002a4c <updateScreen>:


void updateScreen()
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af06      	add	r7, sp, #24
    if (play == menu){
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <updateScreen+0x8c>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d102      	bne.n	8002a60 <updateScreen+0x14>
    	displayMenu();
 8002a5a:	f000 fc05 	bl	8003268 <displayMenu>
        return;
 8002a5e:	e037      	b.n	8002ad0 <updateScreen+0x84>
    }

    if (gamechoice == 1){
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <updateScreen+0x90>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10c      	bne.n	8002a82 <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <updateScreen+0x94>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002a70:	f001 fcda 	bl	8004428 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 8002a74:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002a78:	f001 fc4a 	bl	8004310 <displaySpaceShip>

        //lives
        displayLives();
 8002a7c:	f001 fc8a 	bl	8004394 <displayLives>
 8002a80:	e005      	b.n	8002a8e <updateScreen+0x42>
    }else if(gamechoice == 2) {
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <updateScreen+0x90>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d101      	bne.n	8002a8e <updateScreen+0x42>
        printScreen();
 8002a8a:	f7ff fa23 	bl	8001ed4 <printScreen>
    }

    //start
    if(!play){
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <updateScreen+0x8c>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <updateScreen+0x98>)
 8002a98:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002a9c:	9204      	str	r2, [sp, #16]
 8002a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa2:	9203      	str	r2, [sp, #12]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	9202      	str	r2, [sp, #8]
 8002aa8:	466c      	mov	r4, sp
 8002aaa:	1d1a      	adds	r2, r3, #4
 8002aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ab0:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <updateScreen+0x9c>)
 8002ab8:	2178      	movs	r1, #120	; 0x78
 8002aba:	205a      	movs	r0, #90	; 0x5a
 8002abc:	f003 f944 	bl	8005d48 <Displ_WString>
 8002ac0:	e006      	b.n	8002ad0 <updateScreen+0x84>
    }
    else if(play == paused){
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <updateScreen+0x8c>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d102      	bne.n	8002ad0 <updateScreen+0x84>
    	displayPauseMenu(0);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 fb6a 	bl	80031a4 <displayPauseMenu>
    }
}
 8002ad0:	3704      	adds	r7, #4
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000004a 	.word	0x2000004a
 8002adc:	20001eed 	.word	0x20001eed
 8002ae0:	20001eeb 	.word	0x20001eeb
 8002ae4:	20000020 	.word	0x20000020
 8002ae8:	0800c21c 	.word	0x0800c21c

08002aec <read_MPU_mem>:
//        return -1;
//    }
//    return len;
//}

uint8_t read_MPU_mem(uint8_t reg_addr){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af04      	add	r7, sp, #16
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	2364      	movs	r3, #100	; 0x64
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	2301      	movs	r3, #1
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	f107 030f 	add.w	r3, r7, #15
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	21d0      	movs	r1, #208	; 0xd0
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <read_MPU_mem+0x40>)
 8002b0e:	f004 f88d 	bl	8006c2c <HAL_I2C_Mem_Read>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <read_MPU_mem+0x30>
		return data;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	e003      	b.n	8002b24 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8002b1c:	4804      	ldr	r0, [pc, #16]	; (8002b30 <read_MPU_mem+0x44>)
 8002b1e:	f008 f835 	bl	800ab8c <puts>
		return 0;
 8002b22:	2300      	movs	r3, #0
	}
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20001ef0 	.word	0x20001ef0
 8002b30:	0800c224 	.word	0x0800c224

08002b34 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	4613      	mov	r3, r2
 8002b42:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2364      	movs	r3, #100	; 0x64
 8002b4a:	9302      	str	r3, [sp, #8]
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	1dbb      	adds	r3, r7, #6
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2301      	movs	r3, #1
 8002b56:	21d1      	movs	r1, #209	; 0xd1
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <write_MPU_mem+0x40>)
 8002b5a:	f003 ff53 	bl	8006a04 <HAL_I2C_Mem_Write>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8002b64:	4804      	ldr	r0, [pc, #16]	; (8002b78 <write_MPU_mem+0x44>)
 8002b66:	f008 f811 	bl	800ab8c <puts>
    }
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20001ef0 	.word	0x20001ef0
 8002b78:	0800c234 	.word	0x0800c234

08002b7c <read_y_accel>:

void read_y_accel(){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8002b82:	203e      	movs	r0, #62	; 0x3e
 8002b84:	f7ff ffb2 	bl	8002aec <read_MPU_mem>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8002b8c:	203d      	movs	r0, #61	; 0x3d
 8002b8e:	f7ff ffad 	bl	8002aec <read_MPU_mem>
 8002b92:	4603      	mov	r3, r0
 8002b94:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8002b96:	79bb      	ldrb	r3, [r7, #6]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <read_y_accel+0x34>)
 8002ba6:	801a      	strh	r2, [r3, #0]

}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200020fc 	.word	0x200020fc

08002bb4 <init_MPU>:

void init_MPU(){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	206b      	movs	r0, #107	; 0x6b
 8002bbc:	f7ff ffba 	bl	8002b34 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8002bc0:	2107      	movs	r1, #7
 8002bc2:	2019      	movs	r0, #25
 8002bc4:	f7ff ffb6 	bl	8002b34 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	201b      	movs	r0, #27
 8002bcc:	f7ff ffb2 	bl	8002b34 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	201c      	movs	r0, #28
 8002bd4:	f7ff ffae 	bl	8002b34 <write_MPU_mem>
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002be2:	f003 f91b 	bl	8005e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002be6:	f000 f86d 	bl	8002cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bea:	f000 f9c3 	bl	8002f74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bee:	f000 f9a3 	bl	8002f38 <MX_DMA_Init>
  MX_I2C2_Init();
 8002bf2:	f000 f8bd 	bl	8002d70 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002bf6:	f000 f8fb 	bl	8002df0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002bfa:	f000 f937 	bl	8002e6c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002bfe:	f000 f96b 	bl	8002ed8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002c02:	2064      	movs	r0, #100	; 0x64
 8002c04:	f003 f970 	bl	8005ee8 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002c08:	2364      	movs	r3, #100	; 0x64
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	21d0      	movs	r1, #208	; 0xd0
 8002c0e:	4826      	ldr	r0, [pc, #152]	; (8002ca8 <main+0xcc>)
 8002c10:	f004 f926 	bl	8006e60 <HAL_I2C_IsDeviceReady>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <main+0x4a>
	  printf("succesfully communicated\r\n");
 8002c1a:	4824      	ldr	r0, [pc, #144]	; (8002cac <main+0xd0>)
 8002c1c:	f007 ffb6 	bl	800ab8c <puts>
	  init_MPU();
 8002c20:	f7ff ffc8 	bl	8002bb4 <init_MPU>
 8002c24:	e002      	b.n	8002c2c <main+0x50>
  }
  else{
	  printf("i2C not found\r\n");
 8002c26:	4822      	ldr	r0, [pc, #136]	; (8002cb0 <main+0xd4>)
 8002c28:	f007 ffb0 	bl	800ab8c <puts>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f002 fa8d 	bl	800514c <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8002c32:	2000      	movs	r0, #0
 8002c34:	f002 fce0 	bl	80055f8 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8002c38:	2064      	movs	r0, #100	; 0x64
 8002c3a:	f003 f955 	bl	8005ee8 <HAL_Delay>

      read_y_accel();
 8002c3e:	f7ff ff9d 	bl	8002b7c <read_y_accel>
      if (ay > 2000){
 8002c42:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <main+0xd8>)
 8002c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c4c:	dd07      	ble.n	8002c5e <main+0x82>
          if(x < 320 - 88){
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <main+0xdc>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	2be7      	cmp	r3, #231	; 0xe7
 8002c54:	d810      	bhi.n	8002c78 <main+0x9c>
        	  key = right;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <main+0xe0>)
 8002c58:	2203      	movs	r2, #3
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e00c      	b.n	8002c78 <main+0x9c>
          }
      }
      else if (ay < -2000){
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <main+0xd8>)
 8002c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c64:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002c68:	da06      	bge.n	8002c78 <main+0x9c>
          if(x > 0){
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <main+0xdc>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <main+0x9c>
        	  key = left;
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <main+0xe0>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 8002c78:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <main+0xe0>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fc01 	bl	8002484 <loop>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <main+0xe0>)
 8002c88:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	e002      	b.n	8002c96 <main+0xba>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <main+0xe4>)
 8002c98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	dbf5      	blt.n	8002c90 <main+0xb4>
      HAL_Delay(100);
 8002ca4:	e7c8      	b.n	8002c38 <main+0x5c>
 8002ca6:	bf00      	nop
 8002ca8:	20001ef0 	.word	0x20001ef0
 8002cac:	0800c248 	.word	0x0800c248
 8002cb0:	0800c264 	.word	0x0800c264
 8002cb4:	200020fc 	.word	0x200020fc
 8002cb8:	20000042 	.word	0x20000042
 8002cbc:	20002104 	.word	0x20002104
 8002cc0:	20002174 	.word	0x20002174

08002cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b09c      	sub	sp, #112	; 0x70
 8002cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cce:	2228      	movs	r2, #40	; 0x28
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f007 fecc 	bl	800aa70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2230      	movs	r2, #48	; 0x30
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f007 febe 	bl	800aa70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d00:	2302      	movs	r3, #2
 8002d02:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d04:	2300      	movs	r3, #0
 8002d06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002d08:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 fcfe 	bl	8007714 <HAL_RCC_OscConfig>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002d1e:	f000 fa3b 	bl	8003198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d22:	230f      	movs	r3, #15
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d26:	2302      	movs	r3, #2
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d34:	2300      	movs	r3, #0
 8002d36:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f005 fd26 	bl	8008790 <HAL_RCC_ClockConfig>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002d4a:	f000 fa25 	bl	8003198 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d4e:	2340      	movs	r3, #64	; 0x40
 8002d50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f005 ff4f 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002d64:	f000 fa18 	bl	8003198 <Error_Handler>
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3770      	adds	r7, #112	; 0x70
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <MX_I2C2_Init+0x78>)
 8002d78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <MX_I2C2_Init+0x7c>)
 8002d7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002daa:	480e      	ldr	r0, [pc, #56]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002dac:	f003 fd9a 	bl	80068e4 <HAL_I2C_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002db6:	f000 f9ef 	bl	8003198 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4809      	ldr	r0, [pc, #36]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002dbe:	f004 fc11 	bl	80075e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002dc8:	f000 f9e6 	bl	8003198 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_I2C2_Init+0x74>)
 8002dd0:	f004 fc53 	bl	800767a <HAL_I2CEx_ConfigDigitalFilter>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002dda:	f000 f9dd 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20001ef0 	.word	0x20001ef0
 8002de8:	40005800 	.word	0x40005800
 8002dec:	2000090e 	.word	0x2000090e

08002df0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002df6:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <MX_SPI2_Init+0x78>)
 8002df8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e0e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e3e:	2207      	movs	r2, #7
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_SPI2_Init+0x74>)
 8002e50:	f006 f858 	bl	8008f04 <HAL_SPI_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e5a:	f000 f99d 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20001f44 	.word	0x20001f44
 8002e68:	40003800 	.word	0x40003800

08002e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e72:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <MX_USART2_UART_Init+0x68>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eae:	4808      	ldr	r0, [pc, #32]	; (8002ed0 <MX_USART2_UART_Init+0x64>)
 8002eb0:	f006 fe3c 	bl	8009b2c <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002eba:	f000 f96d 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <MX_USART2_UART_Init+0x68>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <MX_USART2_UART_Init+0x68>)
 8002ec4:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002ec8:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20001fec 	.word	0x20001fec
 8002ed4:	40004400 	.word	0x40004400

08002ed8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <MX_USART3_UART_Init+0x5c>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002ee4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002ee8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <MX_USART3_UART_Init+0x58>)
 8002f1c:	f006 fe06 	bl	8009b2c <HAL_UART_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f26:	f000 f937 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20002074 	.word	0x20002074
 8002f34:	40004800 	.word	0x40004800

08002f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <MX_DMA_Init+0x38>)
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <MX_DMA_Init+0x38>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6153      	str	r3, [r2, #20]
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <MX_DMA_Init+0x38>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	200f      	movs	r0, #15
 8002f5c:	f003 f8c3 	bl	80060e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f60:	200f      	movs	r0, #15
 8002f62:	f003 f8dc 	bl	800611e <HAL_NVIC_EnableIRQ>

}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8a:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4a45      	ldr	r2, [pc, #276]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f94:	6153      	str	r3, [r2, #20]
 8002f96:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fa2:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fac:	6153      	str	r3, [r2, #20]
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	6153      	str	r3, [r2, #20]
 8002fc6:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	6153      	str	r3, [r2, #20]
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <MX_GPIO_Init+0x130>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ff0:	482d      	ldr	r0, [pc, #180]	; (80030a8 <MX_GPIO_Init+0x134>)
 8002ff2:	f003 fc47 	bl	8006884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003000:	f003 fc40 	bl	8006884 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8003004:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800300a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800300e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003010:	2301      	movs	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4619      	mov	r1, r3
 800301a:	4824      	ldr	r0, [pc, #144]	; (80030ac <MX_GPIO_Init+0x138>)
 800301c:	f003 faa8 	bl	8006570 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8003020:	2301      	movs	r3, #1
 8003022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003024:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800302a:	2301      	movs	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003038:	f003 fa9a 	bl	8006570 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800303c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003042:	2301      	movs	r3, #1
 8003044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	4814      	ldr	r0, [pc, #80]	; (80030a8 <MX_GPIO_Init+0x134>)
 8003056:	f003 fa8b 	bl	8006570 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 800305a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800305e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003060:	2301      	movs	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003076:	f003 fa7b 	bl	8006570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	2006      	movs	r0, #6
 8003080:	f003 f831 	bl	80060e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003084:	2006      	movs	r0, #6
 8003086:	f003 f84a 	bl	800611e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	2028      	movs	r0, #40	; 0x28
 8003090:	f003 f829 	bl	80060e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003094:	2028      	movs	r0, #40	; 0x28
 8003096:	f003 f842 	bl	800611e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	; 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	48000400 	.word	0x48000400
 80030ac:	48000800 	.word	0x48000800

080030b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 80030ba:	f002 ff09 	bl	8005ed0 <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_GPIO_EXTI_Callback+0xc8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b1e      	cmp	r3, #30
 80030ca:	d951      	bls.n	8003170 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <HAL_GPIO_EXTI_Callback+0xc8>)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 80030d2:	482a      	ldr	r0, [pc, #168]	; (800317c <HAL_GPIO_EXTI_Callback+0xcc>)
 80030d4:	f007 fd5a 	bl	800ab8c <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030de:	d10e      	bne.n	80030fe <HAL_GPIO_EXTI_Callback+0x4e>
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	4619      	mov	r1, r3
 80030e4:	4826      	ldr	r0, [pc, #152]	; (8003180 <HAL_GPIO_EXTI_Callback+0xd0>)
 80030e6:	f003 fbb5 	bl	8006854 <HAL_GPIO_ReadPin>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_GPIO_EXTI_Callback+0xd4>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 80030f6:	4824      	ldr	r0, [pc, #144]	; (8003188 <HAL_GPIO_EXTI_Callback+0xd8>)
 80030f8:	f007 fd48 	bl	800ab8c <puts>
 80030fc:	e038      	b.n	8003170 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d10e      	bne.n	8003124 <HAL_GPIO_EXTI_Callback+0x74>
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	4619      	mov	r1, r3
 800310a:	481d      	ldr	r0, [pc, #116]	; (8003180 <HAL_GPIO_EXTI_Callback+0xd0>)
 800310c:	f003 fba2 	bl	8006854 <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003118:	2202      	movs	r2, #2
 800311a:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 800311c:	481b      	ldr	r0, [pc, #108]	; (800318c <HAL_GPIO_EXTI_Callback+0xdc>)
 800311e:	f007 fd35 	bl	800ab8c <puts>
 8003122:	e025      	b.n	8003170 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312a:	d10e      	bne.n	800314a <HAL_GPIO_EXTI_Callback+0x9a>
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	4619      	mov	r1, r3
 8003130:	4813      	ldr	r0, [pc, #76]	; (8003180 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003132:	f003 fb8f 	bl	8006854 <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_GPIO_EXTI_Callback+0xd4>)
 800313e:	2203      	movs	r2, #3
 8003140:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8003142:	4813      	ldr	r0, [pc, #76]	; (8003190 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003144:	f007 fd22 	bl	800ab8c <puts>
 8003148:	e012      	b.n	8003170 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10f      	bne.n	8003170 <HAL_GPIO_EXTI_Callback+0xc0>
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	4619      	mov	r1, r3
 8003154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003158:	f003 fb7c 	bl	8006854 <HAL_GPIO_ReadPin>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003164:	2204      	movs	r2, #4
 8003166:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8003168:	480a      	ldr	r0, [pc, #40]	; (8003194 <HAL_GPIO_EXTI_Callback+0xe4>)
 800316a:	f007 fd0f 	bl	800ab8c <puts>
        }
    }
}
 800316e:	e7ff      	b.n	8003170 <HAL_GPIO_EXTI_Callback+0xc0>
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20002100 	.word	0x20002100
 800317c:	0800c274 	.word	0x0800c274
 8003180:	48000800 	.word	0x48000800
 8003184:	20002104 	.word	0x20002104
 8003188:	0800c280 	.word	0x0800c280
 800318c:	0800c290 	.word	0x0800c290
 8003190:	0800c29c 	.word	0x0800c29c
 8003194:	0800c2ac 	.word	0x0800c2ac

08003198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800319c:	b672      	cpsid	i
}
 800319e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031a0:	e7fe      	b.n	80031a0 <Error_Handler+0x8>
	...

080031a4 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 80031ae:	f249 6396 	movw	r3, #38550	; 0x9696
 80031b2:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 80031b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b8:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 80031ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031be:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <displayPauseMenu+0xbc>)
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <displayPauseMenu+0xc0>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d102      	bne.n	80031d2 <displayPauseMenu+0x2e>
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d042      	beq.n	8003258 <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 80031d2:	4b23      	ldr	r3, [pc, #140]	; (8003260 <displayPauseMenu+0xbc>)
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <displayPauseMenu+0xc0>)
 80031d8:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <displayPauseMenu+0xbc>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <displayPauseMenu+0x4c>
			back_color = RED;
 80031e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031e6:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 80031e8:	f249 6396 	movw	r3, #38550	; 0x9696
 80031ec:	81bb      	strh	r3, [r7, #12]
 80031ee:	e00b      	b.n	8003208 <displayPauseMenu+0x64>
		}
		else if(clear){
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 80031f6:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80031fa:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 80031fc:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8003200:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8003202:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8003206:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	2158      	movs	r1, #88	; 0x58
 8003212:	2054      	movs	r0, #84	; 0x54
 8003214:	f002 f83c 	bl	8005290 <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8003218:	89bb      	ldrh	r3, [r7, #12]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2340      	movs	r3, #64	; 0x40
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	2158      	movs	r1, #88	; 0x58
 8003222:	20ac      	movs	r0, #172	; 0xac
 8003224:	f002 f834 	bl	8005290 <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	9302      	str	r3, [sp, #8]
 800322c:	2378      	movs	r3, #120	; 0x78
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	23e4      	movs	r3, #228	; 0xe4
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2390      	movs	r3, #144	; 0x90
 8003236:	22b4      	movs	r2, #180	; 0xb4
 8003238:	2160      	movs	r1, #96	; 0x60
 800323a:	20b4      	movs	r0, #180	; 0xb4
 800323c:	f002 fb29 	bl	8005892 <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8003240:	897b      	ldrh	r3, [r7, #10]
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	2378      	movs	r3, #120	; 0x78
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	235c      	movs	r3, #92	; 0x5c
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2390      	movs	r3, #144	; 0x90
 800324e:	228c      	movs	r2, #140	; 0x8c
 8003250:	2160      	movs	r1, #96	; 0x60
 8003252:	208c      	movs	r0, #140	; 0x8c
 8003254:	f002 fb1d 	bl	8005892 <Displ_fillTriangle>
	}

}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20001eec 	.word	0x20001eec
 8003264:	2000002c 	.word	0x2000002c

08003268 <displayMenu>:

void displayMenu(){
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b08b      	sub	sp, #44	; 0x2c
 800326c:	af06      	add	r7, sp, #24
	int y_offset = 12;
 800326e:	230c      	movs	r3, #12
 8003270:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8003272:	230c      	movs	r3, #12
 8003274:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8003276:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <displayMenu+0x140>)
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <displayMenu+0x144>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d03d      	beq.n	80032fe <displayMenu+0x96>
		last_choice_menu =  choice;
 8003282:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <displayMenu+0x140>)
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	4b49      	ldr	r3, [pc, #292]	; (80033ac <displayMenu+0x144>)
 8003288:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	e02e      	b.n	80032ee <displayMenu+0x86>
			if(i == choice){
 8003290:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <displayMenu+0x140>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4293      	cmp	r3, r2
 800329a:	d10b      	bne.n	80032b4 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	b298      	uxth	r0, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	b299      	uxth	r1, r3
 80032a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	f001 ffef 	bl	8005290 <Displ_FillArea>
 80032b2:	e00a      	b.n	80032ca <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	b298      	uxth	r0, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	b299      	uxth	r1, r3
 80032bc:	f249 6396 	movw	r3, #38550	; 0x9696
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	f001 ffe3 	bl	8005290 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3301      	adds	r3, #1
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <displayMenu+0x7a>
				x_offset = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	334c      	adds	r3, #76	; 0x4c
 80032de:	60fb      	str	r3, [r7, #12]
				continue;
 80032e0:	e002      	b.n	80032e8 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	334c      	adds	r3, #76	; 0x4c
 80032e6:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3301      	adds	r3, #1
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <displayMenu+0x148>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dc02      	bgt.n	80032fe <displayMenu+0x96>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b07      	cmp	r3, #7
 80032fc:	ddc8      	ble.n	8003290 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 80032fe:	f000 f861 	bl	80033c4 <displayMenuIcons>

    // text
    switch (choice) {
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <displayMenu+0x140>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d032      	beq.n	8003370 <displayMenu+0x108>
 800330a:	2b02      	cmp	r3, #2
 800330c:	dc46      	bgt.n	800339c <displayMenu+0x134>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <displayMenu+0xb0>
 8003312:	2b01      	cmp	r3, #1
 8003314:	d016      	beq.n	8003344 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 8003316:	e041      	b.n	800339c <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 8003318:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <displayMenu+0x14c>)
 800331a:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800331e:	9204      	str	r2, [sp, #16]
 8003320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003324:	9203      	str	r2, [sp, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	9202      	str	r2, [sp, #8]
 800332a:	466c      	mov	r4, sp
 800332c:	1d1a      	adds	r2, r3, #4
 800332e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003332:	e884 0003 	stmia.w	r4, {r0, r1}
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <displayMenu+0x150>)
 800333a:	21c8      	movs	r1, #200	; 0xc8
 800333c:	2008      	movs	r0, #8
 800333e:	f002 fd03 	bl	8005d48 <Displ_WString>
        break;
 8003342:	e02c      	b.n	800339e <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <displayMenu+0x14c>)
 8003346:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800334a:	9204      	str	r2, [sp, #16]
 800334c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003350:	9203      	str	r2, [sp, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	9202      	str	r2, [sp, #8]
 8003356:	466c      	mov	r4, sp
 8003358:	1d1a      	adds	r2, r3, #4
 800335a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800335e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a15      	ldr	r2, [pc, #84]	; (80033bc <displayMenu+0x154>)
 8003366:	21c8      	movs	r1, #200	; 0xc8
 8003368:	2008      	movs	r0, #8
 800336a:	f002 fced 	bl	8005d48 <Displ_WString>
        break;
 800336e:	e016      	b.n	800339e <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <displayMenu+0x14c>)
 8003372:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003376:	9204      	str	r2, [sp, #16]
 8003378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800337c:	9203      	str	r2, [sp, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	466c      	mov	r4, sp
 8003384:	1d1a      	adds	r2, r3, #4
 8003386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800338a:	e884 0003 	stmia.w	r4, {r0, r1}
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <displayMenu+0x158>)
 8003392:	21c8      	movs	r1, #200	; 0xc8
 8003394:	2008      	movs	r0, #8
 8003396:	f002 fcd7 	bl	8005d48 <Displ_WString>
        break;
 800339a:	e000      	b.n	800339e <displayMenu+0x136>
        break;
 800339c:	bf00      	nop
    }
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd90      	pop	{r4, r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20001eec 	.word	0x20001eec
 80033ac:	20000048 	.word	0x20000048
 80033b0:	20000044 	.word	0x20000044
 80033b4:	20000020 	.word	0x20000020
 80033b8:	0800c2bc 	.word	0x0800c2bc
 80033bc:	0800c2cc 	.word	0x0800c2cc
 80033c0:	0800c2dc 	.word	0x0800c2dc

080033c4 <displayMenuIcons>:

void displayMenuIcons(){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 80033c8:	f000 f806 	bl	80033d8 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 80033cc:	f000 f868 	bl	80034a0 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 80033d0:	f000 f890 	bl	80034f4 <displaySpaceIcon>
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af02      	add	r7, sp, #8
	if(connected){
 80033de:	4b2f      	ldr	r3, [pc, #188]	; (800349c <displayMultiplayerIcon+0xc4>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d023      	beq.n	800342e <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80033e6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2304      	movs	r3, #4
 80033ee:	2230      	movs	r2, #48	; 0x30
 80033f0:	2114      	movs	r1, #20
 80033f2:	2014      	movs	r0, #20
 80033f4:	f001 ff4c 	bl	8005290 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 80033f8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2308      	movs	r3, #8
 8003400:	2204      	movs	r2, #4
 8003402:	210c      	movs	r1, #12
 8003404:	2014      	movs	r0, #20
 8003406:	f001 ff43 	bl	8005290 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 800340a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2308      	movs	r3, #8
 8003412:	2204      	movs	r2, #4
 8003414:	210c      	movs	r1, #12
 8003416:	2040      	movs	r0, #64	; 0x40
 8003418:	f001 ff3a 	bl	8005290 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 800341c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2328      	movs	r3, #40	; 0x28
 8003424:	2208      	movs	r2, #8
 8003426:	2118      	movs	r1, #24
 8003428:	2028      	movs	r0, #40	; 0x28
 800342a:	f001 ff31 	bl	8005290 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 800342e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2304      	movs	r3, #4
 8003436:	2230      	movs	r2, #48	; 0x30
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	2014      	movs	r0, #20
 800343c:	f001 ff28 	bl	8005290 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003440:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2308      	movs	r3, #8
 8003448:	2204      	movs	r2, #4
 800344a:	2144      	movs	r1, #68	; 0x44
 800344c:	2014      	movs	r0, #20
 800344e:	f001 ff1f 	bl	8005290 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003452:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2308      	movs	r3, #8
 800345a:	2204      	movs	r2, #4
 800345c:	2144      	movs	r1, #68	; 0x44
 800345e:	2040      	movs	r0, #64	; 0x40
 8003460:	f001 ff16 	bl	8005290 <Displ_FillArea>
	if(!connected){
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <displayMultiplayerIcon+0xc4>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d112      	bne.n	8003492 <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 800346c:	2318      	movs	r3, #24
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e00c      	b.n	800348c <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	b299      	uxth	r1, r3
 8003476:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2304      	movs	r3, #4
 800347e:	2208      	movs	r2, #8
 8003480:	2028      	movs	r0, #40	; 0x28
 8003482:	f001 ff05 	bl	8005290 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3308      	adds	r3, #8
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b3f      	cmp	r3, #63	; 0x3f
 8003490:	ddef      	ble.n	8003472 <displayMultiplayerIcon+0x9a>
		}
	}
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20002105 	.word	0x20002105

080034a0 <displayBricksIcon>:

void displayBricksIcon(){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 80034a6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2304      	movs	r3, #4
 80034ae:	2214      	movs	r2, #20
 80034b0:	2140      	movs	r1, #64	; 0x40
 80034b2:	2068      	movs	r0, #104	; 0x68
 80034b4:	f001 feec 	bl	8005290 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 80034b8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2340      	movs	r3, #64	; 0x40
 80034c0:	2204      	movs	r2, #4
 80034c2:	210c      	movs	r1, #12
 80034c4:	205c      	movs	r0, #92	; 0x5c
 80034c6:	f001 fee3 	bl	8005290 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 80034ca:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2340      	movs	r3, #64	; 0x40
 80034d2:	2204      	movs	r2, #4
 80034d4:	210c      	movs	r1, #12
 80034d6:	2090      	movs	r0, #144	; 0x90
 80034d8:	f001 feda 	bl	8005290 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 80034dc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2304      	movs	r3, #4
 80034e4:	2204      	movs	r2, #4
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	2068      	movs	r0, #104	; 0x68
 80034ea:	f001 fed1 	bl	8005290 <Displ_FillArea>
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <displaySpaceIcon>:

void displaySpaceIcon(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80034fa:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2310      	movs	r3, #16
 8003502:	2204      	movs	r2, #4
 8003504:	2134      	movs	r1, #52	; 0x34
 8003506:	20b4      	movs	r0, #180	; 0xb4
 8003508:	f001 fec2 	bl	8005290 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 800350c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2310      	movs	r3, #16
 8003514:	2204      	movs	r2, #4
 8003516:	2134      	movs	r1, #52	; 0x34
 8003518:	20c4      	movs	r0, #196	; 0xc4
 800351a:	f001 feb9 	bl	8005290 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 800351e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2304      	movs	r3, #4
 8003526:	220c      	movs	r2, #12
 8003528:	2138      	movs	r1, #56	; 0x38
 800352a:	20b8      	movs	r0, #184	; 0xb8
 800352c:	f001 feb0 	bl	8005290 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 8003530:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2310      	movs	r3, #16
 8003538:	2204      	movs	r2, #4
 800353a:	2130      	movs	r1, #48	; 0x30
 800353c:	20bc      	movs	r0, #188	; 0xbc
 800353e:	f001 fea7 	bl	8005290 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8003542:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	230c      	movs	r3, #12
 800354a:	220c      	movs	r2, #12
 800354c:	2118      	movs	r1, #24
 800354e:	20c0      	movs	r0, #192	; 0xc0
 8003550:	f001 fe9e 	bl	8005290 <Displ_FillArea>
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <addCharacterToArray>:
 * @fn void addCharacterToArray(char)
 * @brief adds the incoming character to the input buffer array and checks if it is a command character
 *
 * @param c incoming character
 */
void addCharacterToArray(char c) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 800356a:	2300      	movs	r3, #0
 800356c:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	4619      	mov	r1, r3
 8003574:	484b      	ldr	r0, [pc, #300]	; (80036a4 <addCharacterToArray+0x148>)
 8003576:	f007 fbb1 	bl	800acdc <strcat>
    //printf("%c\r\n", c);

    if(c == 'O' && mp == enabled) {
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b4f      	cmp	r3, #79	; 0x4f
 800357e:	d10b      	bne.n	8003598 <addCharacterToArray+0x3c>
 8003580:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <addCharacterToArray+0x14c>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d107      	bne.n	8003598 <addCharacterToArray+0x3c>
        inSignal = 1;
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <addCharacterToArray+0x150>)
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
        printArray();
 800358e:	f000 f899 	bl	80036c4 <printArray>
        clearArray();
 8003592:	f000 f8a3 	bl	80036dc <clearArray>
        printArray();
        clearArray();
    }else if(c == 'L') {
        mpGameState = win;
    }
}
 8003596:	e081      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == '?') {
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	2b3f      	cmp	r3, #63	; 0x3f
 800359c:	d111      	bne.n	80035c2 <addCharacterToArray+0x66>
        HAL_UART_Transmit(&huart2, (uint8_t *)"!", strlen("!"), 300);
 800359e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80035a2:	2201      	movs	r2, #1
 80035a4:	4942      	ldr	r1, [pc, #264]	; (80036b0 <addCharacterToArray+0x154>)
 80035a6:	4843      	ldr	r0, [pc, #268]	; (80036b4 <addCharacterToArray+0x158>)
 80035a8:	f006 fb0e 	bl	8009bc8 <HAL_UART_Transmit>
        printArray();
 80035ac:	f000 f88a 	bl	80036c4 <printArray>
        clearArray();
 80035b0:	f000 f894 	bl	80036dc <clearArray>
        connected = 1;
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <addCharacterToArray+0x15c>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <addCharacterToArray+0x14c>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
}
 80035c0:	e06c      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == '!') {
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	2b21      	cmp	r3, #33	; 0x21
 80035c6:	d10a      	bne.n	80035de <addCharacterToArray+0x82>
        connected = 1;
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <addCharacterToArray+0x15c>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <addCharacterToArray+0x14c>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
        printArray();
 80035d4:	f000 f876 	bl	80036c4 <printArray>
        clearArray();
 80035d8:	f000 f880 	bl	80036dc <clearArray>
}
 80035dc:	e05e      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'G') {
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2b47      	cmp	r3, #71	; 0x47
 80035e2:	d109      	bne.n	80035f8 <addCharacterToArray+0x9c>
        inSignal = 1;
 80035e4:	4b31      	ldr	r3, [pc, #196]	; (80036ac <addCharacterToArray+0x150>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
        setMPGameChoice();
 80035ea:	f000 f8a7 	bl	800373c <setMPGameChoice>
        printArray();
 80035ee:	f000 f869 	bl	80036c4 <printArray>
        clearArray();
 80035f2:	f000 f873 	bl	80036dc <clearArray>
}
 80035f6:	e051      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'B') {
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	2b42      	cmp	r3, #66	; 0x42
 80035fc:	d102      	bne.n	8003604 <addCharacterToArray+0xa8>
        setCoord();
 80035fe:	f000 f8bf 	bl	8003780 <setCoord>
}
 8003602:	e04b      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'S'){
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b53      	cmp	r3, #83	; 0x53
 8003608:	d10a      	bne.n	8003620 <addCharacterToArray+0xc4>
        inSignal = 1;
 800360a:	4b28      	ldr	r3, [pc, #160]	; (80036ac <addCharacterToArray+0x150>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
    	mpMenuState = 1;
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <addCharacterToArray+0x160>)
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
    	printArray();
 8003616:	f000 f855 	bl	80036c4 <printArray>
    	clearArray();
 800361a:	f000 f85f 	bl	80036dc <clearArray>
}
 800361e:	e03d      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'X') {
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	2b58      	cmp	r3, #88	; 0x58
 8003624:	d10a      	bne.n	800363c <addCharacterToArray+0xe0>
       connected = 0;
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <addCharacterToArray+0x15c>)
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
       mp = disabled;
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <addCharacterToArray+0x14c>)
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
       printArray();
 8003632:	f000 f847 	bl	80036c4 <printArray>
       clearArray();
 8003636:	f000 f851 	bl	80036dc <clearArray>
}
 800363a:	e02f      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'P') {
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	2b50      	cmp	r3, #80	; 0x50
 8003640:	d10a      	bne.n	8003658 <addCharacterToArray+0xfc>
        inSignal = 1;
 8003642:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <addCharacterToArray+0x150>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
        mpMenuState = 2;
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <addCharacterToArray+0x160>)
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
        printArray();
 800364e:	f000 f839 	bl	80036c4 <printArray>
        clearArray();
 8003652:	f000 f843 	bl	80036dc <clearArray>
}
 8003656:	e021      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'C') {
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2b43      	cmp	r3, #67	; 0x43
 800365c:	d10a      	bne.n	8003674 <addCharacterToArray+0x118>
        inSignal = 1;
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <addCharacterToArray+0x150>)
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
        mpMenuState = 1;
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <addCharacterToArray+0x160>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
        printArray();
 800366a:	f000 f82b 	bl	80036c4 <printArray>
        clearArray();
 800366e:	f000 f835 	bl	80036dc <clearArray>
}
 8003672:	e013      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'M') {
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	2b4d      	cmp	r3, #77	; 0x4d
 8003678:	d10a      	bne.n	8003690 <addCharacterToArray+0x134>
        inSignal = 1;
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <addCharacterToArray+0x150>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
        mpMenuState = 3;
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <addCharacterToArray+0x160>)
 8003682:	2203      	movs	r2, #3
 8003684:	701a      	strb	r2, [r3, #0]
        printArray();
 8003686:	f000 f81d 	bl	80036c4 <printArray>
        clearArray();
 800368a:	f000 f827 	bl	80036dc <clearArray>
}
 800368e:	e005      	b.n	800369c <addCharacterToArray+0x140>
    }else if(c == 'L') {
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	2b4c      	cmp	r3, #76	; 0x4c
 8003694:	d102      	bne.n	800369c <addCharacterToArray+0x140>
        mpGameState = win;
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <addCharacterToArray+0x164>)
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20002108 	.word	0x20002108
 80036a8:	20002106 	.word	0x20002106
 80036ac:	2000216c 	.word	0x2000216c
 80036b0:	0800c2f0 	.word	0x0800c2f0
 80036b4:	20001fec 	.word	0x20001fec
 80036b8:	20002105 	.word	0x20002105
 80036bc:	2000216f 	.word	0x2000216f
 80036c0:	2000216e 	.word	0x2000216e

080036c4 <printArray>:
/**
 * @fn void printArray()
 * @brief prints the buffer array
 *
 */
void printArray() {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
    printf("%s\r\n", characterArray);
 80036c8:	4902      	ldr	r1, [pc, #8]	; (80036d4 <printArray+0x10>)
 80036ca:	4803      	ldr	r0, [pc, #12]	; (80036d8 <printArray+0x14>)
 80036cc:	f007 f9d8 	bl	800aa80 <iprintf>
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20002108 	.word	0x20002108
 80036d8:	0800c2f4 	.word	0x0800c2f4

080036dc <clearArray>:
/**
 * @fn void clearArray()
 * @brief clears the buffer array
 *
 */
void clearArray() {
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
    memset(characterArray, '\0', sizeof(characterArray));
 80036e0:	2264      	movs	r2, #100	; 0x64
 80036e2:	2100      	movs	r1, #0
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <clearArray+0x14>)
 80036e6:	f007 f9c3 	bl	800aa70 <memset>
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20002108 	.word	0x20002108

080036f4 <getSignal>:
 * @fn uint8_t getSignal()
 * @brief returns the inSignal variable
 *
 * @return 1 there has been incoming data, 0 if not
 */
uint8_t getSignal() {
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
    return inSignal;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <getSignal+0x14>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	2000216c 	.word	0x2000216c

0800370c <turnOffSignal>:
/**
 * @fn void turnOffSignal()
 * @brief sets the inSignal variable to 0, meaning the incoming data has been handled
 *
 */
void turnOffSignal() {
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
    inSignal = 0;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <turnOffSignal+0x14>)
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	2000216c 	.word	0x2000216c

08003724 <getConnection>:
 * @fn uint8_t getConnection()
 * @brief returns the connection state of multiplayer
 *
 * @return 0 if no connection has been made, 1 if there is a connection established
 */
uint8_t getConnection() {
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
    return connected;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <getConnection+0x14>)
 800372a:	781b      	ldrb	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20002105 	.word	0x20002105

0800373c <setMPGameChoice>:
/**
 * @fn void setMPGameChoice()
 * @brief saves the number of the game chosen by the opposing console
 *
 */
void setMPGameChoice() {
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
    mpGameChoice = characterArray[0] - '0';
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <setMPGameChoice+0x20>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	3b30      	subs	r3, #48	; 0x30
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <setMPGameChoice+0x24>)
 800374a:	701a      	strb	r2, [r3, #0]
    printf("%d\r\n", mpGameChoice);
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <setMPGameChoice+0x24>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	4619      	mov	r1, r3
 8003752:	4804      	ldr	r0, [pc, #16]	; (8003764 <setMPGameChoice+0x28>)
 8003754:	f007 f994 	bl	800aa80 <iprintf>
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20002108 	.word	0x20002108
 8003760:	2000216d 	.word	0x2000216d
 8003764:	0800c2fc 	.word	0x0800c2fc

08003768 <getMPGameChoice>:
 * @fn uint8_t getMPGameChoice()
 * @brief returns the number of the game chosen by the opposing console
 *
 * @return the number of the game chosen by the opposing console
 */
uint8_t getMPGameChoice() {
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
    return mpGameChoice;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <getMPGameChoice+0x14>)
 800376e:	781b      	ldrb	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000216d 	.word	0x2000216d

08003780 <setCoord>:
/**
 * @fn void setCoord()
 * @brief converts the incomming coordinate to a uint8_t and saves it
 *
 */
void setCoord() {
 8003780:	b580      	push	{r7, lr}
 8003782:	b09a      	sub	sp, #104	; 0x68
 8003784:	af00      	add	r7, sp, #0
    char buffer[100];
    strncpy(buffer, characterArray, strlen(characterArray) - 2);
 8003786:	4810      	ldr	r0, [pc, #64]	; (80037c8 <setCoord+0x48>)
 8003788:	f7fc fd22 	bl	80001d0 <strlen>
 800378c:	4603      	mov	r3, r0
 800378e:	1e9a      	subs	r2, r3, #2
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <setCoord+0x48>)
 8003794:	4618      	mov	r0, r3
 8003796:	f007 fab0 	bl	800acfa <strncpy>
    buffer[strlen(characterArray) - 1] = '\0';
 800379a:	480b      	ldr	r0, [pc, #44]	; (80037c8 <setCoord+0x48>)
 800379c:	f7fc fd18 	bl	80001d0 <strlen>
 80037a0:	4603      	mov	r3, r0
 80037a2:	3b01      	subs	r3, #1
 80037a4:	3368      	adds	r3, #104	; 0x68
 80037a6:	443b      	add	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	f803 2c64 	strb.w	r2, [r3, #-100]

    x_coord = (uint8_t)atoi(buffer);
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f007 f92e 	bl	800aa12 <atoi>
 80037b6:	4603      	mov	r3, r0
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b04      	ldr	r3, [pc, #16]	; (80037cc <setCoord+0x4c>)
 80037bc:	701a      	strb	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	3768      	adds	r7, #104	; 0x68
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20002108 	.word	0x20002108
 80037cc:	20002170 	.word	0x20002170

080037d0 <closeConnection>:
/**
 * @fn void closeConnection()
 * @brief Closes the connection for multiplayer
 *
 */
void closeConnection() {
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
    connected = 0;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <closeConnection+0x1c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
    mp = disabled;
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <closeConnection+0x20>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20002105 	.word	0x20002105
 80037f0:	20002106 	.word	0x20002106

080037f4 <getMPMenuState>:
 * @fn uint8_t getMPMenuState()
 * @brief returns the Menu State in multiplayer when the opposing player has made a change
 *
 * @return the Menu State in multiplayer when the opposing player has made a change
 */
uint8_t getMPMenuState() {
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
    return mpMenuState;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <getMPMenuState+0x14>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	2000216f 	.word	0x2000216f

0800380c <setGameState>:
 * @fn void setGameState(GameState)
 * @brief when the player loses or wins, the state of the game is saved
 *
 * @param state holds the state of the game: ongoing, won or lost
 */
void setGameState(GameState state) {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
    mpGameState = state;
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <setGameState+0x1c>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	7013      	strb	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	2000216e 	.word	0x2000216e

0800382c <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
    money = 0;
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <initSpaceInvaders+0x6c>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    lives = 3;
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <initSpaceInvaders+0x70>)
 8003838:	2203      	movs	r2, #3
 800383a:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 800383c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003840:	f001 feda 	bl	80055f8 <Displ_CLS>

    srand(HAL_GetTick());		   // Seed the random number generator
 8003844:	f002 fb44 	bl	8005ed0 <HAL_GetTick>
 8003848:	4603      	mov	r3, r0
 800384a:	4618      	mov	r0, r3
 800384c:	f007 f9a6 	bl	800ab9c <srand>
    comet_delay = RANDOM(5,20);
 8003850:	f007 f9d2 	bl	800abf8 <rand>
 8003854:	4603      	mov	r3, r0
 8003856:	425a      	negs	r2, r3
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	f002 020f 	and.w	r2, r2, #15
 8003860:	bf58      	it	pl
 8003862:	4253      	negpl	r3, r2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3305      	adds	r3, #5
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <initSpaceInvaders+0x74>)
 800386c:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 800386e:	f000 f81f 	bl	80038b0 <initSpaceShip>
    initAmmo(&ammo,0);
 8003872:	2100      	movs	r1, #0
 8003874:	480b      	ldr	r0, [pc, #44]	; (80038a4 <initSpaceInvaders+0x78>)
 8003876:	f000 f827 	bl	80038c8 <initAmmo>
    if(connected){
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <initSpaceInvaders+0x7c>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 8003882:	2101      	movs	r1, #1
 8003884:	4809      	ldr	r0, [pc, #36]	; (80038ac <initSpaceInvaders+0x80>)
 8003886:	f000 f81f 	bl	80038c8 <initAmmo>
    }
    initComets();
 800388a:	f000 f845 	bl	8003918 <initComets>
    initStars();
 800388e:	f000 f86d 	bl	800396c <initStars>
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200021dc 	.word	0x200021dc
 800389c:	20000049 	.word	0x20000049
 80038a0:	200021d6 	.word	0x200021d6
 80038a4:	20002174 	.word	0x20002174
 80038a8:	20002105 	.word	0x20002105
 80038ac:	20002184 	.word	0x20002184

080038b0 <initSpaceShip>:
/**
 * @fn void initSpaceShip(void)
 * @brief initialises the spaceship
 *
 */
void initSpaceShip(){
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <initSpaceShip+0x14>)
 80038b6:	2228      	movs	r2, #40	; 0x28
 80038b8:	701a      	strb	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	2000004c 	.word	0x2000004c

080038c8 <initAmmo>:
 * x and y cords are set to -1
 *
 * @param[out] am bullets_t*: the bullets to initialise, can be your own or the enemy's
 * @param[in] enemy int: if 1, bullets pointer is for the enemy bullets
 */
void initAmmo(bullets_t *am,int enemy){
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b25a      	sxtb	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e00e      	b.n	8003904 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	22ff      	movs	r2, #255	; 0xff
 80038fc:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3301      	adds	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b05      	cmp	r3, #5
 8003908:	dded      	ble.n	80038e6 <initAmmo+0x1e>
    }
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <initComets>:
 * @brief initialises the comets
 * the comets in play are set to 0
 * x and y cords are set to -1
 *
 */
void initComets(){
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <initComets+0x50>)
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003924:	2300      	movs	r3, #0
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	e014      	b.n	8003954 <initComets+0x3c>
        COMET_X(i) = -1;
 800392a:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <initComets+0x50>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <initComets+0x50>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <initComets+0x50>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	2202      	movs	r2, #2
 800394c:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3301      	adds	r3, #1
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b09      	cmp	r3, #9
 8003958:	dde7      	ble.n	800392a <initComets+0x12>
    }
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	20002194 	.word	0x20002194

0800396c <initStars>:
 * @brief initialises the stars
 * the stars in play are set to 0
 * x and y cords are set to -1
 *
 */
void initStars(){
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <initStars+0x44>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003978:	2300      	movs	r3, #0
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	e00e      	b.n	800399c <initStars+0x30>
    	STAR_X(i) = -1;
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <initStars+0x44>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	22ff      	movs	r2, #255	; 0xff
 8003988:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <initStars+0x44>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	22ff      	movs	r2, #255	; 0xff
 8003994:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3301      	adds	r3, #1
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b09      	cmp	r3, #9
 80039a0:	dded      	ble.n	800397e <initStars+0x12>
    }
}
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	200021c0 	.word	0x200021c0

080039b4 <spawnComet>:
 * @fn void spawnComet()
 * @brief spawns a comet at a random x-cord with a random size
 * generates a random delay for the spawning of the next comet
 *
 */
void spawnComet(){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 80039b8:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <spawnComet+0xfc>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d16e      	bne.n	8003a9e <spawnComet+0xea>
 80039c0:	4b3c      	ldr	r3, [pc, #240]	; (8003ab4 <spawnComet+0x100>)
 80039c2:	f993 3000 	ldrsb.w	r3, [r3]
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	dc69      	bgt.n	8003a9e <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 80039ca:	f007 f915 	bl	800abf8 <rand>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <spawnComet+0x104>)
 80039d2:	fb83 1302 	smull	r1, r3, r3, r2
 80039d6:	4413      	add	r3, r2
 80039d8:	1199      	asrs	r1, r3, #6
 80039da:	17d3      	asrs	r3, r2, #31
 80039dc:	1ac9      	subs	r1, r1, r3
 80039de:	460b      	mov	r3, r1
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	440b      	add	r3, r1
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a5b      	subs	r3, r3, r1
 80039e8:	1ad1      	subs	r1, r2, r3
 80039ea:	b2cb      	uxtb	r3, r1
 80039ec:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <spawnComet+0x100>)
 80039ee:	f992 2000 	ldrsb.w	r2, [r2]
 80039f2:	4610      	mov	r0, r2
 80039f4:	3305      	adds	r3, #5
 80039f6:	b2d9      	uxtb	r1, r3
 80039f8:	4a2e      	ldr	r2, [pc, #184]	; (8003ab4 <spawnComet+0x100>)
 80039fa:	0083      	lsls	r3, r0, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	460a      	mov	r2, r1
 8003a00:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 8003a02:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <spawnComet+0x100>)
 8003a04:	f993 3000 	ldrsb.w	r3, [r3]
 8003a08:	4a2a      	ldr	r2, [pc, #168]	; (8003ab4 <spawnComet+0x100>)
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 8003a12:	f007 f8f1 	bl	800abf8 <rand>
 8003a16:	4602      	mov	r2, r0
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <spawnComet+0x108>)
 8003a1a:	fb83 3102 	smull	r3, r1, r3, r2
 8003a1e:	17d3      	asrs	r3, r2, #31
 8003a20:	1ac9      	subs	r1, r1, r3
 8003a22:	460b      	mov	r3, r1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	1ad1      	subs	r1, r2, r3
 8003a2a:	b2cb      	uxtb	r3, r1
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <spawnComet+0x100>)
 8003a32:	f993 3000 	ldrsb.w	r3, [r3]
 8003a36:	b251      	sxtb	r1, r2
 8003a38:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <spawnComet+0x100>)
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	460a      	mov	r2, r1
 8003a40:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 8003a42:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <spawnComet+0x100>)
 8003a44:	f993 3000 	ldrsb.w	r3, [r3]
 8003a48:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <spawnComet+0x100>)
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f1c3 0307 	rsb	r3, r3, #7
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <spawnComet+0x100>)
 8003a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8003a60:	b251      	sxtb	r1, r2
 8003a62:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <spawnComet+0x100>)
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	460a      	mov	r2, r1
 8003a6a:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 8003a6c:	f007 f8c4 	bl	800abf8 <rand>
 8003a70:	4603      	mov	r3, r0
 8003a72:	425a      	negs	r2, r3
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	f002 020f 	and.w	r2, r2, #15
 8003a7c:	bf58      	it	pl
 8003a7e:	4253      	negpl	r3, r2
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3305      	adds	r3, #5
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <spawnComet+0xfc>)
 8003a88:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <spawnComet+0x100>)
 8003a8c:	f993 3000 	ldrsb.w	r3, [r3]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	b25a      	sxtb	r2, r3
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <spawnComet+0x100>)
 8003a9a:	701a      	strb	r2, [r3, #0]
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003a9c:	e006      	b.n	8003aac <spawnComet+0xf8>
    }else{
        comet_delay--;
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <spawnComet+0xfc>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <spawnComet+0xfc>)
 8003aa8:	701a      	strb	r2, [r3, #0]
    }

}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	200021d6 	.word	0x200021d6
 8003ab4:	20002194 	.word	0x20002194
 8003ab8:	e6c2b449 	.word	0xe6c2b449
 8003abc:	55555556 	.word	0x55555556

08003ac0 <spawnBullet>:
 * @brief spawns a bullet at the x-cord of the spaceship
 * reloads the bullet_delay variable, so the user can't spam bullets
 *
 * @param[in] enemy uint8_t: if 1, it spawns an enemy bullet instead of your own bullet
 */
void spawnBullet(int enemy){
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <spawnBullet+0x98>)
 8003aca:	f993 3000 	ldrsb.w	r3, [r3]
 8003ace:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <spawnBullet+0x98>)
 8003ad2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ad6:	3b03      	subs	r3, #3
 8003ad8:	617b      	str	r3, [r7, #20]
    bullets_t *am_p;
    if (enemy){
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <spawnBullet+0x26>
        am_p = &enemy_ammo;
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <spawnBullet+0x9c>)
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e001      	b.n	8003aea <spawnBullet+0x2a>
    }else{
        am_p = &ammo;
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <spawnBullet+0xa0>)
 8003ae8:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	dc2a      	bgt.n	8003b4a <spawnBullet+0x8a>
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <spawnBullet+0xa4>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d126      	bne.n	8003b4a <spawnBullet+0x8a>
        if(am_p->enemy){
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f993 3000 	ldrsb.w	r3, [r3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <spawnBullet+0x4a>
            //x_val = read the input from multiplayer;
            y_val = 3;
 8003b06:	2303      	movs	r3, #3
 8003b08:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	b251      	sxtb	r1, r2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	b251      	sxtb	r1, r2
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	460a      	mov	r2, r1
 8003b30:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	b25a      	sxtb	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <spawnBullet+0xa4>)
 8003b46:	220a      	movs	r2, #10
 8003b48:	701a      	strb	r2, [r3, #0]
    }
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	2000004c 	.word	0x2000004c
 8003b5c:	20002184 	.word	0x20002184
 8003b60:	20002174 	.word	0x20002174
 8003b64:	200021d5 	.word	0x200021d5

08003b68 <spawnStar>:
 * @fn void spawnStar()
 * @brief spawns a star at a random x-cord
 * generates a random delay for the spawning of the next star
 *
 */
void spawnStar(){
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <spawnStar+0xa4>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d141      	bne.n	8003bf8 <spawnStar+0x90>
 8003b74:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <spawnStar+0xa8>)
 8003b76:	f993 3000 	ldrsb.w	r3, [r3]
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	dc3c      	bgt.n	8003bf8 <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 8003b7e:	f007 f83b 	bl	800abf8 <rand>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <spawnStar+0xac>)
 8003b86:	fb83 1302 	smull	r1, r3, r3, r2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	1199      	asrs	r1, r3, #6
 8003b8e:	17d3      	asrs	r3, r2, #31
 8003b90:	1ac9      	subs	r1, r1, r3
 8003b92:	460b      	mov	r3, r1
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	1a5b      	subs	r3, r3, r1
 8003b9c:	1ad1      	subs	r1, r2, r3
 8003b9e:	b2cb      	uxtb	r3, r1
 8003ba0:	3305      	adds	r3, #5
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <spawnStar+0xa8>)
 8003ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8003baa:	b251      	sxtb	r1, r2
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <spawnStar+0xa8>)
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <spawnStar+0xa8>)
 8003bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8003bbc:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <spawnStar+0xa8>)
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 8003bc6:	f007 f817 	bl	800abf8 <rand>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	425a      	negs	r2, r3
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	f002 020f 	and.w	r2, r2, #15
 8003bd6:	bf58      	it	pl
 8003bd8:	4253      	negpl	r3, r2
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3305      	adds	r3, #5
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <spawnStar+0xa4>)
 8003be2:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <spawnStar+0xa8>)
 8003be6:	f993 3000 	ldrsb.w	r3, [r3]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	b25a      	sxtb	r2, r3
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <spawnStar+0xa8>)
 8003bf4:	701a      	strb	r2, [r3, #0]
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003bf6:	e006      	b.n	8003c06 <spawnStar+0x9e>
    }else{
        star_delay--;
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <spawnStar+0xa4>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b02      	ldr	r3, [pc, #8]	; (8003c0c <spawnStar+0xa4>)
 8003c02:	701a      	strb	r2, [r3, #0]
    }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200021d7 	.word	0x200021d7
 8003c10:	200021c0 	.word	0x200021c0
 8003c14:	e6c2b449 	.word	0xe6c2b449

08003c18 <moveBullets>:
/**
 * @fn void moveBullets(void)
 * @brief moves the bullets and displays them on the screen aswell by calling "displayAmmo()"
 *
 */
void moveBullets(){
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 8003c1e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003c22:	f000 facd 	bl	80041c0 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){											  // For every bullet in play
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e09c      	b.n	8003d66 <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){									  	// For every comet in play
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	e040      	b.n	8003cb4 <moveBullets+0x9c>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){    		// check whether there's a comet at the same x-cord
 8003c32:	4a55      	ldr	r2, [pc, #340]	; (8003d88 <moveBullets+0x170>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4a52      	ldr	r2, [pc, #328]	; (8003d8c <moveBullets+0x174>)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	db2f      	blt.n	8003cae <moveBullets+0x96>
 8003c4e:	4a4e      	ldr	r2, [pc, #312]	; (8003d88 <moveBullets+0x170>)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4a4b      	ldr	r2, [pc, #300]	; (8003d8c <moveBullets+0x174>)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	4618      	mov	r0, r3
 8003c68:	4a48      	ldr	r2, [pc, #288]	; (8003d8c <moveBullets+0x174>)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c74:	4403      	add	r3, r0
 8003c76:	4299      	cmp	r1, r3
 8003c78:	da19      	bge.n	8003cae <moveBullets+0x96>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){					  		// if the y-cord is also smaller, a comet has been hit by this bullet
 8003c7a:	4a44      	ldr	r2, [pc, #272]	; (8003d8c <moveBullets+0x174>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	789b      	ldrb	r3, [r3, #2]
 8003c84:	4619      	mov	r1, r3
 8003c86:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <moveBullets+0x174>)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c92:	18ca      	adds	r2, r1, r3
 8003c94:	493c      	ldr	r1, [pc, #240]	; (8003d88 <moveBullets+0x170>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	dd04      	ble.n	8003cae <moveBullets+0x96>
					hitComet(i,j);
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fd36 	bl	8004718 <hitComet>
					continue;
 8003cac:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){									  	// For every comet in play
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <moveBullets+0x174>)
 8003cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	dbb7      	blt.n	8003c32 <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <moveBullets+0x170>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	b259      	sxtb	r1, r3
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <moveBullets+0x170>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	460a      	mov	r2, r1
 8003ce0:	70da      	strb	r2, [r3, #3]
		if (AMMO_Y(i) < 0){																// If the y-cord is negative, the bullet left the screen and should be deleted.
 8003ce2:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <moveBullets+0x170>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	4413      	add	r3, r2
 8003cea:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da36      	bge.n	8003d60 <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);													// send the bullet to the other console (if connected)
 8003cf2:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <moveBullets+0x170>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	885a      	ldrh	r2, [r3, #2]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f362 030f 	bfi	r3, r2, #0, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fcb6 	bl	8004674 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){										// move every bullet that's behind the one that should be deleted
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	e01c      	b.n	8003d48 <moveBullets+0x130>
				AMMO_X(j) = AMMO_X(j+1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <moveBullets+0x170>)
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <moveBullets+0x170>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	460a      	mov	r2, r1
 8003d26:	709a      	strb	r2, [r3, #2]
				AMMO_Y(j) = AMMO_Y(j+1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <moveBullets+0x170>)
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003d36:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <moveBullets+0x170>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	460a      	mov	r2, r1
 8003d40:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){										// move every bullet that's behind the one that should be deleted
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3301      	adds	r3, #1
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	dddf      	ble.n	8003d0e <moveBullets+0xf6>
			}
			ammo.in_play--;																	// decrement ammo in play
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <moveBullets+0x170>)
 8003d50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	b25a      	sxtb	r2, r3
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <moveBullets+0x170>)
 8003d5e:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){											  // For every bullet in play
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <moveBullets+0x170>)
 8003d68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	f6ff af5b 	blt.w	8003c2c <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 8003d76:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003d7a:	f000 fa21 	bl	80041c0 <displayAmmo>
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20002174 	.word	0x20002174
 8003d8c:	20002194 	.word	0x20002194

08003d90 <moveComets>:
/**
 * @fn void moveComets(void)
 * @brief moves the comets and displays them on the screen aswell by calling "displayComets()"
 *
 */
void moveComets(){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003d96:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003d9a:	f000 fa79 	bl	8004290 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){															   // For every comet in play
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e0f3      	b.n	8003f8c <moveComets+0x1fc>
		for(int j = 0; j < COMET_SIZE(i); j++){														   // For the size of the current comet
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	e060      	b.n	8003e6c <moveComets+0xdc>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){      // if the comet's x_cords are in between the bounds of the spaceship
 8003daa:	4a80      	ldr	r2, [pc, #512]	; (8003fac <moveComets+0x21c>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	461a      	mov	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	441a      	add	r2, r3
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <moveComets+0x220>)
 8003dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	dc4f      	bgt.n	8003e66 <moveComets+0xd6>
 8003dc6:	4a79      	ldr	r2, [pc, #484]	; (8003fac <moveComets+0x21c>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	441a      	add	r2, r3
 8003dd6:	4b76      	ldr	r3, [pc, #472]	; (8003fb0 <moveComets+0x220>)
 8003dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ddc:	3b02      	subs	r3, #2
 8003dde:	429a      	cmp	r2, r3
 8003de0:	db41      	blt.n	8003e66 <moveComets+0xd6>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){			   // if shield is enabled and the comet hit it, delete comet and get rid of shield
 8003de2:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <moveComets+0x224>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d11f      	bne.n	8003e2a <moveComets+0x9a>
 8003dea:	4a70      	ldr	r2, [pc, #448]	; (8003fac <moveComets+0x21c>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	789b      	ldrb	r3, [r3, #2]
 8003df4:	4619      	mov	r1, r3
 8003df6:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <moveComets+0x21c>)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e02:	18ca      	adds	r2, r1, r3
 8003e04:	4b6a      	ldr	r3, [pc, #424]	; (8003fb0 <moveComets+0x220>)
 8003e06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	db0c      	blt.n	8003e2a <moveComets+0x9a>
					hitComet(420,i);
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003e16:	f000 fc7f 	bl	8004718 <hitComet>
					displayPowerup(DARK_GREY);
 8003e1a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003e1e:	f000 fd81 	bl	8004924 <displayPowerup>
					powerUp = 0;
 8003e22:	4b64      	ldr	r3, [pc, #400]	; (8003fb4 <moveComets+0x224>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e01d      	b.n	8003e66 <moveComets+0xd6>
				}
				else if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){			   // else the spaceship has been hit
 8003e2a:	4a60      	ldr	r2, [pc, #384]	; (8003fac <moveComets+0x21c>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	789b      	ldrb	r3, [r3, #2]
 8003e34:	4619      	mov	r1, r3
 8003e36:	4a5d      	ldr	r2, [pc, #372]	; (8003fac <moveComets+0x21c>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e42:	18ca      	adds	r2, r1, r3
 8003e44:	4b5a      	ldr	r3, [pc, #360]	; (8003fb0 <moveComets+0x220>)
 8003e46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	db0a      	blt.n	8003e66 <moveComets+0xd6>
 8003e50:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <moveComets+0x228>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <moveComets+0xd6>
                    hitComet(420,i);
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003e5e:	f000 fc5b 	bl	8004718 <hitComet>
                    beenHit();
 8003e62:	f000 fcfb 	bl	800485c <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){														   // For the size of the current comet
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	4a4f      	ldr	r2, [pc, #316]	; (8003fac <moveComets+0x21c>)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	db94      	blt.n	8003daa <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){    // If death-ray is enabled and the comet is above the spaceship, obliterate it
 8003e80:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <moveComets+0x224>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d133      	bne.n	8003ef0 <moveComets+0x160>
 8003e88:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <moveComets+0x220>)
 8003e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4a46      	ldr	r2, [pc, #280]	; (8003fac <moveComets+0x21c>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	db28      	blt.n	8003ef0 <moveComets+0x160>
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <moveComets+0x220>)
 8003ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4a41      	ldr	r2, [pc, #260]	; (8003fac <moveComets+0x21c>)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	4a3e      	ldr	r2, [pc, #248]	; (8003fac <moveComets+0x21c>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ebe:	4403      	add	r3, r0
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	dc15      	bgt.n	8003ef0 <moveComets+0x160>
        	hitComet(420,i);
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003eca:	f000 fc25 	bl	8004718 <hitComet>
        	if(powerUp_delay == 0){																	   // If death ray has hit MAX_DELAY_POWERUP comets, disable powerup
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <moveComets+0x22c>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <moveComets+0x154>
        		displayPowerup(DARK_GREY);
 8003ed6:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003eda:	f000 fd23 	bl	8004924 <displayPowerup>
        		powerUp = 0;
 8003ede:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <moveComets+0x224>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8003ee4:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <moveComets+0x22c>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <moveComets+0x22c>)
 8003eee:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <moveComets+0x21c>)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	789b      	ldrb	r3, [r3, #2]
 8003efa:	3301      	adds	r3, #1
 8003efc:	b2d9      	uxtb	r1, r3
 8003efe:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <moveComets+0x21c>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	460a      	mov	r2, r1
 8003f08:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){														   // if the comet went out of the screen, delete it
 8003f0a:	4a28      	ldr	r2, [pc, #160]	; (8003fac <moveComets+0x21c>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	789b      	ldrb	r3, [r3, #2]
 8003f14:	2b3b      	cmp	r3, #59	; 0x3b
 8003f16:	d936      	bls.n	8003f86 <moveComets+0x1f6>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	e027      	b.n	8003f6e <moveComets+0x1de>
            	COMET_X(j) = COMET_X(j+1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3301      	adds	r3, #1
 8003f22:	4a22      	ldr	r2, [pc, #136]	; (8003fac <moveComets+0x21c>)
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	7859      	ldrb	r1, [r3, #1]
 8003f2a:	4a20      	ldr	r2, [pc, #128]	; (8003fac <moveComets+0x21c>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	460a      	mov	r2, r1
 8003f34:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <moveComets+0x21c>)
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	7899      	ldrb	r1, [r3, #2]
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <moveComets+0x21c>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3301      	adds	r3, #1
 8003f52:	4a16      	ldr	r2, [pc, #88]	; (8003fac <moveComets+0x21c>)
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <moveComets+0x21c>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	460a      	mov	r2, r1
 8003f66:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	ddd4      	ble.n	8003f1e <moveComets+0x18e>
            }
            Comet.in_play--;
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <moveComets+0x21c>)
 8003f76:	f993 3000 	ldrsb.w	r3, [r3]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	b25a      	sxtb	r2, r3
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <moveComets+0x21c>)
 8003f84:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){															   // For every comet in play
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <moveComets+0x21c>)
 8003f8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4293      	cmp	r3, r2
 8003f98:	f6ff af04 	blt.w	8003da4 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8003f9c:	f249 6096 	movw	r0, #38550	; 0x9696
 8003fa0:	f000 f976 	bl	8004290 <displayComets>
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20002194 	.word	0x20002194
 8003fb0:	2000004c 	.word	0x2000004c
 8003fb4:	200021e0 	.word	0x200021e0
 8003fb8:	20001eeb 	.word	0x20001eeb
 8003fbc:	200021d8 	.word	0x200021d8

08003fc0 <moveStars>:
/**
 * @fn void moveStars(void)
 * @brief moves the stars and displays them on the screen aswell by calling "displayStars()"
 *
 */
void moveStars(){
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 8003fc6:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003fca:	f000 f8c7 	bl	800415c <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	e046      	b.n	8004062 <moveStars+0xa2>
    	STAR_Y(i)++;
 8003fd4:	4a2a      	ldr	r2, [pc, #168]	; (8004080 <moveStars+0xc0>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	b259      	sxtb	r1, r3
 8003fe8:	4a25      	ldr	r2, [pc, #148]	; (8004080 <moveStars+0xc0>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	460a      	mov	r2, r1
 8003ff2:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8003ff4:	4a22      	ldr	r2, [pc, #136]	; (8004080 <moveStars+0xc0>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004000:	2b38      	cmp	r3, #56	; 0x38
 8004002:	dd2b      	ble.n	800405c <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	e01c      	b.n	8004044 <moveStars+0x84>
            	STAR_X(j) = STAR_X(j+1);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <moveStars+0xc0>)
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <moveStars+0xc0>)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	460a      	mov	r2, r1
 8004022:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <moveStars+0xc0>)
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <moveStars+0xc0>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	460a      	mov	r2, r1
 800403c:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b08      	cmp	r3, #8
 8004048:	dddf      	ble.n	800400a <moveStars+0x4a>
            }
            Star.in_play--;
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <moveStars+0xc0>)
 800404c:	f993 3000 	ldrsb.w	r3, [r3]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	b25a      	sxtb	r2, r3
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <moveStars+0xc0>)
 800405a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3301      	adds	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <moveStars+0xc0>)
 8004064:	f993 3000 	ldrsb.w	r3, [r3]
 8004068:	461a      	mov	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4293      	cmp	r3, r2
 800406e:	dbb1      	blt.n	8003fd4 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 8004070:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004074:	f000 f872 	bl	800415c <displayStars>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200021c0 	.word	0x200021c0

08004084 <moveSpaceship>:
 * @fn void moveSpaceship(int)
 * @brief moves the spaceship and displays it on the screen aswell by calling "displaySpaceShip()"
 *
 * @param
 */
void moveSpaceship(int direction){
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 800408c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8004090:	f000 f93e 	bl	8004310 <displaySpaceShip>
	if(powerUp > 0){
 8004094:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <moveSpaceship+0xcc>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 800409c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80040a0:	f000 fc40 	bl	8004924 <displayPowerup>
	}
    if(direction < 0){
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	da26      	bge.n	80040f8 <moveSpaceship+0x74>
        SpaceShip.x--;
 80040aa:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <moveSpaceship+0xd0>)
 80040ac:	f993 3000 	ldrsb.w	r3, [r3]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	b25a      	sxtb	r2, r3
 80040b8:	4b26      	ldr	r3, [pc, #152]	; (8004154 <moveSpaceship+0xd0>)
 80040ba:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 80040bc:	4b25      	ldr	r3, [pc, #148]	; (8004154 <moveSpaceship+0xd0>)
 80040be:	f993 3000 	ldrsb.w	r3, [r3]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	dc02      	bgt.n	80040cc <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <moveSpaceship+0xd0>)
 80040c8:	2202      	movs	r2, #2
 80040ca:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <moveSpaceship+0xd4>)
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f91d 	bl	8004310 <displaySpaceShip>
        if(powerUp == 1){
 80040d6:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <moveSpaceship+0xcc>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d103      	bne.n	80040e6 <moveSpaceship+0x62>
        	displayPowerup(RED);
 80040de:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80040e2:	f000 fc1f 	bl	8004924 <displayPowerup>
        }
        if(powerUp == 2){
 80040e6:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <moveSpaceship+0xcc>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d12b      	bne.n	8004146 <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 80040ee:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80040f2:	f000 fc17 	bl	8004924 <displayPowerup>
        }
        return;
 80040f6:	e026      	b.n	8004146 <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 80040f8:	4b16      	ldr	r3, [pc, #88]	; (8004154 <moveSpaceship+0xd0>)
 80040fa:	f993 3000 	ldrsb.w	r3, [r3]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	b2db      	uxtb	r3, r3
 8004104:	b25a      	sxtb	r2, r3
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <moveSpaceship+0xd0>)
 8004108:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <moveSpaceship+0xd0>)
 800410c:	f993 3000 	ldrsb.w	r3, [r3]
 8004110:	2b4d      	cmp	r3, #77	; 0x4d
 8004112:	dd02      	ble.n	800411a <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <moveSpaceship+0xd0>)
 8004116:	224d      	movs	r2, #77	; 0x4d
 8004118:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <moveSpaceship+0xd4>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f8f6 	bl	8004310 <displaySpaceShip>
    if(powerUp == 1){
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <moveSpaceship+0xcc>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d103      	bne.n	8004134 <moveSpaceship+0xb0>
    	displayPowerup(RED);
 800412c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004130:	f000 fbf8 	bl	8004924 <displayPowerup>
    }
	if(powerUp == 2){
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <moveSpaceship+0xcc>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d105      	bne.n	8004148 <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 800413c:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004140:	f000 fbf0 	bl	8004924 <displayPowerup>
 8004144:	e000      	b.n	8004148 <moveSpaceship+0xc4>
        return;
 8004146:	bf00      	nop
	}
}
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200021e0 	.word	0x200021e0
 8004154:	2000004c 	.word	0x2000004c
 8004158:	2000004e 	.word	0x2000004e

0800415c <displayStars>:
 * @fn void displayStars(uint16_t)
 * @brief 	displays the stars on the screen
 *
 * @param[in] color uint16_t: the color the star should be displayed with
 */
void displayStars(uint16_t color){
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	4603      	mov	r3, r0
 8004164:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e01a      	b.n	80041a2 <displayStars+0x46>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <displayStars+0x60>)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004178:	b29b      	uxth	r3, r3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	b298      	uxth	r0, r3
 800417e:	4a0f      	ldr	r2, [pc, #60]	; (80041bc <displayStars+0x60>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800418a:	b29b      	uxth	r3, r3
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	b299      	uxth	r1, r3
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2304      	movs	r3, #4
 8004196:	2204      	movs	r2, #4
 8004198:	f001 f87a 	bl	8005290 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <displayStars+0x60>)
 80041a4:	f993 3000 	ldrsb.w	r3, [r3]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4293      	cmp	r3, r2
 80041ae:	dbdd      	blt.n	800416c <displayStars+0x10>
    }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200021c0 	.word	0x200021c0

080041c0 <displayAmmo>:
 * @fn void displayAmmo(uint16_t)
 * @brief displays the Bullets on the screen
 *
 * @param[in] color uint16_t: the color the ammo should be displayed with
 */
void displayAmmo(uint16_t color){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e01a      	b.n	8004206 <displayAmmo+0x46>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <displayAmmo+0x60>)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	b298      	uxth	r0, r3
 80041e2:	4a0f      	ldr	r2, [pc, #60]	; (8004220 <displayAmmo+0x60>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	b299      	uxth	r1, r3
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2304      	movs	r3, #4
 80041fa:	2204      	movs	r2, #4
 80041fc:	f001 f848 	bl	8005290 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <displayAmmo+0x60>)
 8004208:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800420c:	461a      	mov	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4293      	cmp	r3, r2
 8004212:	dbdd      	blt.n	80041d0 <displayAmmo+0x10>
    }

}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20002174 	.word	0x20002174

08004224 <displayEnemyAmmo>:
 * @fn void displayEnemyAmmo(uint16_t)
 * @brief displays the enemy Bullets on the screen
 *
 * @param[in] color uint16_t: the color the ammo should be displayed with
 */
void displayEnemyAmmo(uint16_t color){
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af02      	add	r7, sp, #8
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
	if(connected){
 800422e:	4b16      	ldr	r3, [pc, #88]	; (8004288 <displayEnemyAmmo+0x64>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d024      	beq.n	8004280 <displayEnemyAmmo+0x5c>
		for(int i = 0; i < enemy_ammo.in_play; i++){
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e01a      	b.n	8004272 <displayEnemyAmmo+0x4e>
			Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, color);
 800423c:	4a13      	ldr	r2, [pc, #76]	; (800428c <displayEnemyAmmo+0x68>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004248:	b29b      	uxth	r3, r3
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	b298      	uxth	r0, r3
 800424e:	4a0f      	ldr	r2, [pc, #60]	; (800428c <displayEnemyAmmo+0x68>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800425a:	b29b      	uxth	r3, r3
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	b299      	uxth	r1, r3
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2304      	movs	r3, #4
 8004266:	2204      	movs	r2, #4
 8004268:	f001 f812 	bl	8005290 <Displ_FillArea>
		for(int i = 0; i < enemy_ammo.in_play; i++){
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <displayEnemyAmmo+0x68>)
 8004274:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004278:	461a      	mov	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4293      	cmp	r3, r2
 800427e:	dbdd      	blt.n	800423c <displayEnemyAmmo+0x18>
		}
	}
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20002105 	.word	0x20002105
 800428c:	20002184 	.word	0x20002184

08004290 <displayComets>:
 * @fn void displayComets(uint16_t)
 * @brief displays the comets on the screen
 *
 * @param[in] color uint16_t: the color the comets should be displayed with
 */
void displayComets(uint16_t color){
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b087      	sub	sp, #28
 8004294:	af02      	add	r7, sp, #8
 8004296:	4603      	mov	r3, r0
 8004298:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e029      	b.n	80042f4 <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 80042a0:	4a1a      	ldr	r2, [pc, #104]	; (800430c <displayComets+0x7c>)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	b298      	uxth	r0, r3
 80042b0:	4a16      	ldr	r2, [pc, #88]	; (800430c <displayComets+0x7c>)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	789b      	ldrb	r3, [r3, #2]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	b299      	uxth	r1, r3
 80042c0:	4a12      	ldr	r2, [pc, #72]	; (800430c <displayComets+0x7c>)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	4c0e      	ldr	r4, [pc, #56]	; (800430c <displayComets+0x7c>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4423      	add	r3, r4
 80042da:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	b29c      	uxth	r4, r3
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4623      	mov	r3, r4
 80042ea:	f000 ffd1 	bl	8005290 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <displayComets+0x7c>)
 80042f6:	f993 3000 	ldrsb.w	r3, [r3]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4293      	cmp	r3, r2
 8004300:	dbce      	blt.n	80042a0 <displayComets+0x10>
    }
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bd90      	pop	{r4, r7, pc}
 800430c:	20002194 	.word	0x20002194

08004310 <displaySpaceShip>:
 * @fn void displaySpaceShip(uint16_t)
 * @brief displays the spaceship on the screen
 *
 * @param[in] color uint16_t: the color the spaceship should be displayed with
 */
void displaySpaceShip(uint16_t color){
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af02      	add	r7, sp, #8
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <displaySpaceShip+0x80>)
 800431c:	f993 3000 	ldrsb.w	r3, [r3]
 8004320:	3b02      	subs	r3, #2
 8004322:	b29b      	uxth	r3, r3
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	b298      	uxth	r0, r3
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2310      	movs	r3, #16
 800432e:	2204      	movs	r2, #4
 8004330:	21d8      	movs	r1, #216	; 0xd8
 8004332:	f000 ffad 	bl	8005290 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <displaySpaceShip+0x80>)
 8004338:	f993 3000 	ldrsb.w	r3, [r3]
 800433c:	3302      	adds	r3, #2
 800433e:	b29b      	uxth	r3, r3
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	b298      	uxth	r0, r3
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2310      	movs	r3, #16
 800434a:	2204      	movs	r2, #4
 800434c:	21d8      	movs	r1, #216	; 0xd8
 800434e:	f000 ff9f 	bl	8005290 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <displaySpaceShip+0x80>)
 8004354:	f993 3000 	ldrsb.w	r3, [r3]
 8004358:	3b01      	subs	r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	b298      	uxth	r0, r3
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2304      	movs	r3, #4
 8004366:	220c      	movs	r2, #12
 8004368:	21dc      	movs	r1, #220	; 0xdc
 800436a:	f000 ff91 	bl	8005290 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <displaySpaceShip+0x80>)
 8004370:	f993 3000 	ldrsb.w	r3, [r3]
 8004374:	b29b      	uxth	r3, r3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	b298      	uxth	r0, r3
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	2310      	movs	r3, #16
 8004380:	2204      	movs	r2, #4
 8004382:	21d4      	movs	r1, #212	; 0xd4
 8004384:	f000 ff84 	bl	8005290 <Displ_FillArea>

}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	2000004c 	.word	0x2000004c

08004394 <displayLives>:
/**
 * @fn void displayLives(void)
 * @brief displays the amount of lives left on the screen
 *
 */
void displayLives(){
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	e013      	b.n	80043c8 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	0052      	lsls	r2, r2, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3308      	adds	r3, #8
 80043b0:	b298      	uxth	r0, r3
 80043b2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2304      	movs	r3, #4
 80043ba:	2204      	movs	r2, #4
 80043bc:	2108      	movs	r1, #8
 80043be:	f000 ff67 	bl	8005290 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3301      	adds	r3, #1
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	4b16      	ldr	r3, [pc, #88]	; (8004424 <displayLives+0x90>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	dbe5      	blt.n	80043a0 <displayLives+0xc>
    }
    if(lives < 3){
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <displayLives+0x90>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d81f      	bhi.n	800441c <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 80043dc:	2300      	movs	r3, #0
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	e015      	b.n	800440e <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f1c3 0303 	rsb	r3, r3, #3
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	0052      	lsls	r2, r2, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3308      	adds	r3, #8
 80043f6:	b298      	uxth	r0, r3
 80043f8:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	2304      	movs	r3, #4
 8004400:	2204      	movs	r2, #4
 8004402:	2108      	movs	r1, #8
 8004404:	f000 ff44 	bl	8005290 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <displayLives+0x90>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	f1c3 0303 	rsb	r3, r3, #3
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	dbe2      	blt.n	80043e2 <displayLives+0x4e>
    	}
    }
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000049 	.word	0x20000049

08004428 <spaceShipHitColorToggle>:
/**
 * @fn void spaceShipHitColorToggle(void)
 * @brief if the spaceship was hit by an enemy bullet or a comet, the spaceship has to blink red/white for a while
 *
 */
void spaceShipHitColorToggle(){
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <spaceShipHitColorToggle+0x84>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8004434:	d112      	bne.n	800445c <spaceShipHitColorToggle+0x34>
 8004436:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <spaceShipHitColorToggle+0x88>)
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <spaceShipHitColorToggle+0x8c>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	08d9      	lsrs	r1, r3, #3
 8004442:	460b      	mov	r3, r1
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 8004452:	4b16      	ldr	r3, [pc, #88]	; (80044ac <spaceShipHitColorToggle+0x84>)
 8004454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004458:	801a      	strh	r2, [r3, #0]
 800445a:	e011      	b.n	8004480 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <spaceShipHitColorToggle+0x88>)
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <spaceShipHitColorToggle+0x8c>)
 8004462:	fba3 1302 	umull	r1, r3, r3, r2
 8004466:	08d9      	lsrs	r1, r3, #3
 8004468:	460b      	mov	r3, r1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <spaceShipHitColorToggle+0x84>)
 800447a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800447e:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <spaceShipHitColorToggle+0x88>)
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <spaceShipHitColorToggle+0x90>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d206      	bcs.n	800449a <spaceShipHitColorToggle+0x72>
        hit++;
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <spaceShipHitColorToggle+0x88>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <spaceShipHitColorToggle+0x88>)
 8004496:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8004498:	e002      	b.n	80044a0 <spaceShipHitColorToggle+0x78>
        hit = 0;
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <spaceShipHitColorToggle+0x88>)
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000004e 	.word	0x2000004e
 80044b0:	20001eeb 	.word	0x20001eeb
 80044b4:	cccccccd 	.word	0xcccccccd
 80044b8:	20000050 	.word	0x20000050

080044bc <delayBullet>:
/**
 * @fn void delayBullet(void)
 * @brief decrements the bullet_delay variable, if 0 the spaceship can shoot a bullet again
 *
 */
void delayBullet(){
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <delayBullet+0x24>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <delayBullet+0x18>
        bullet_delay--;
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <delayBullet+0x24>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <delayBullet+0x24>)
 80044d2:	701a      	strb	r2, [r3, #0]
    }
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200021d5 	.word	0x200021d5

080044e4 <moveEnemyBullets>:
/**
 * @fn void moveEnemyBullets(void)
 * @brief move the enemy bullets
 *
 */
void moveEnemyBullets(void){
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
    if (!connected){
 80044ea:	4b5e      	ldr	r3, [pc, #376]	; (8004664 <moveEnemyBullets+0x180>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80b4 	beq.w	800465c <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayEnemyAmmo(DARK_GREY);
 80044f4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80044f8:	f7ff fe94 	bl	8004224 <displayEnemyAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){										   // For every enemy bullet in play
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e09f      	b.n	8004642 <moveEnemyBullets+0x15e>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){    // if it's x-cord is in the path of the spaceship
 8004502:	4a59      	ldr	r2, [pc, #356]	; (8004668 <moveEnemyBullets+0x184>)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800450e:	461a      	mov	r2, r3
 8004510:	4b56      	ldr	r3, [pc, #344]	; (800466c <moveEnemyBullets+0x188>)
 8004512:	f993 3000 	ldrsb.w	r3, [r3]
 8004516:	3302      	adds	r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	dc4b      	bgt.n	80045b4 <moveEnemyBullets+0xd0>
 800451c:	4a52      	ldr	r2, [pc, #328]	; (8004668 <moveEnemyBullets+0x184>)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004528:	461a      	mov	r2, r3
 800452a:	4b50      	ldr	r3, [pc, #320]	; (800466c <moveEnemyBullets+0x188>)
 800452c:	f993 3000 	ldrsb.w	r3, [r3]
 8004530:	3b02      	subs	r3, #2
 8004532:	429a      	cmp	r2, r3
 8004534:	db3e      	blt.n	80045b4 <moveEnemyBullets+0xd0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){							   // and it's y value is higher than the spaceship's, the spaceship has been hit
 8004536:	4a4c      	ldr	r2, [pc, #304]	; (8004668 <moveEnemyBullets+0x184>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004542:	461a      	mov	r2, r3
 8004544:	4b49      	ldr	r3, [pc, #292]	; (800466c <moveEnemyBullets+0x188>)
 8004546:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800454a:	3b02      	subs	r3, #2
 800454c:	429a      	cmp	r2, r3
 800454e:	db31      	blt.n	80045b4 <moveEnemyBullets+0xd0>
 8004550:	4b47      	ldr	r3, [pc, #284]	; (8004670 <moveEnemyBullets+0x18c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d12d      	bne.n	80045b4 <moveEnemyBullets+0xd0>
                beenHit();
 8004558:	f000 f980 	bl	800485c <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){								   // Delete this enemy bullet
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	e01c      	b.n	800459c <moveEnemyBullets+0xb8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3301      	adds	r3, #1
 8004566:	4a40      	ldr	r2, [pc, #256]	; (8004668 <moveEnemyBullets+0x184>)
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8004570:	4a3d      	ldr	r2, [pc, #244]	; (8004668 <moveEnemyBullets+0x184>)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	460a      	mov	r2, r1
 800457a:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3301      	adds	r3, #1
 8004580:	4a39      	ldr	r2, [pc, #228]	; (8004668 <moveEnemyBullets+0x184>)
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4413      	add	r3, r2
 8004586:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800458a:	4a37      	ldr	r2, [pc, #220]	; (8004668 <moveEnemyBullets+0x184>)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){								   // Delete this enemy bullet
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b04      	cmp	r3, #4
 80045a0:	dddf      	ble.n	8004562 <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <moveEnemyBullets+0x184>)
 80045a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	b25a      	sxtb	r2, r3
 80045b0:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <moveEnemyBullets+0x184>)
 80045b2:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 80045b4:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <moveEnemyBullets+0x184>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	b259      	sxtb	r1, r3
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <moveEnemyBullets+0x184>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	460a      	mov	r2, r1
 80045d2:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){											   // If the bullet left the screen, delete it
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <moveEnemyBullets+0x184>)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80045e0:	2b3b      	cmp	r3, #59	; 0x3b
 80045e2:	dd2b      	ble.n	800463c <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e01c      	b.n	8004624 <moveEnemyBullets+0x140>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <moveEnemyBullets+0x184>)
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4413      	add	r3, r2
 80045f4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80045f8:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <moveEnemyBullets+0x184>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	460a      	mov	r2, r1
 8004602:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3301      	adds	r3, #1
 8004608:	4a17      	ldr	r2, [pc, #92]	; (8004668 <moveEnemyBullets+0x184>)
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8004612:	4a15      	ldr	r2, [pc, #84]	; (8004668 <moveEnemyBullets+0x184>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	460a      	mov	r2, r1
 800461c:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3301      	adds	r3, #1
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b04      	cmp	r3, #4
 8004628:	dddf      	ble.n	80045ea <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <moveEnemyBullets+0x184>)
 800462c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	b25a      	sxtb	r2, r3
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <moveEnemyBullets+0x184>)
 800463a:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){										   // For every enemy bullet in play
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <moveEnemyBullets+0x184>)
 8004644:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004648:	461a      	mov	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4293      	cmp	r3, r2
 800464e:	f6ff af58 	blt.w	8004502 <moveEnemyBullets+0x1e>
        }
    }
    displayEnemyAmmo(LIGHT_BLUE);
 8004652:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004656:	f7ff fde5 	bl	8004224 <displayEnemyAmmo>
 800465a:	e000      	b.n	800465e <moveEnemyBullets+0x17a>
        return;
 800465c:	bf00      	nop
}
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20002105 	.word	0x20002105
 8004668:	20002184 	.word	0x20002184
 800466c:	2000004c 	.word	0x2000004c
 8004670:	20001eeb 	.word	0x20001eeb

08004674 <send_Bullet>:
 * @brief if a bullet leaves the screen this function is called
 * if multiplayer is enabled, it sends this bullet's x_cord to the other console
 *
 * @param[in] bullet so the x cord can be send to the other console
 */
void send_Bullet(point bullet){
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	80b8      	strh	r0, [r7, #4]
    if(connected && bullet.y != -2){
 800467c:	4b22      	ldr	r3, [pc, #136]	; (8004708 <send_Bullet+0x94>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d03d      	beq.n	8004700 <send_Bullet+0x8c>
 8004684:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004688:	f113 0f02 	cmn.w	r3, #2
 800468c:	d038      	beq.n	8004700 <send_Bullet+0x8c>
        //QD << "a bullet has been send to the other player at x:" << bullet.x;  // change to uart debug
        if(enemy_ammo.in_play < MAX_BULLETS){
 800468e:	4b1f      	ldr	r3, [pc, #124]	; (800470c <send_Bullet+0x98>)
 8004690:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004694:	2b05      	cmp	r3, #5
 8004696:	dc2d      	bgt.n	80046f4 <send_Bullet+0x80>
        	E_AMMO_X(enemy_ammo.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 8004698:	f006 faae 	bl	800abf8 <rand>
 800469c:	4602      	mov	r2, r0
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <send_Bullet+0x9c>)
 80046a0:	fb83 1302 	smull	r1, r3, r3, r2
 80046a4:	4413      	add	r3, r2
 80046a6:	1199      	asrs	r1, r3, #6
 80046a8:	17d3      	asrs	r3, r2, #31
 80046aa:	1ac9      	subs	r1, r1, r3
 80046ac:	460b      	mov	r3, r1
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	440b      	add	r3, r1
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a5b      	subs	r3, r3, r1
 80046b6:	1ad1      	subs	r1, r2, r3
 80046b8:	b2cb      	uxtb	r3, r1
 80046ba:	3305      	adds	r3, #5
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <send_Bullet+0x98>)
 80046c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80046c4:	b251      	sxtb	r1, r2
 80046c6:	4a11      	ldr	r2, [pc, #68]	; (800470c <send_Bullet+0x98>)
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	460a      	mov	r2, r1
 80046ce:	709a      	strb	r2, [r3, #2]
        	E_AMMO_Y(enemy_ammo.in_play) = 3;
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <send_Bullet+0x98>)
 80046d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80046d6:	4a0d      	ldr	r2, [pc, #52]	; (800470c <send_Bullet+0x98>)
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	2203      	movs	r2, #3
 80046de:	70da      	strb	r2, [r3, #3]
            enemy_ammo.in_play++;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <send_Bullet+0x98>)
 80046e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	3301      	adds	r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	b25a      	sxtb	r2, r3
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <send_Bullet+0x98>)
 80046f0:	705a      	strb	r2, [r3, #1]
        }else{
            star_delay--;
        }
    }
}
 80046f2:	e005      	b.n	8004700 <send_Bullet+0x8c>
            star_delay--;
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <send_Bullet+0xa0>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <send_Bullet+0xa0>)
 80046fe:	701a      	strb	r2, [r3, #0]
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20002105 	.word	0x20002105
 800470c:	20002184 	.word	0x20002184
 8004710:	e6c2b449 	.word	0xe6c2b449
 8004714:	200021d7 	.word	0x200021d7

08004718 <hitComet>:
 * @brief if a bullet or the spaceship hits a comet, this is called to delete the correct comet (and bullet if applicable)
 *
 * @param[in] bul int: the index of the bullet that hit a comet, if the spaceship hit the comet 420 is given to this function
 * @param[in] com int: the index of the comet that has been hit
 */
void hitComet(int bul,int com){
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af02      	add	r7, sp, #8
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 8004722:	4a4b      	ldr	r2, [pc, #300]	; (8004850 <hitComet+0x138>)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800472e:	461a      	mov	r2, r3
 8004730:	4b48      	ldr	r3, [pc, #288]	; (8004854 <hitComet+0x13c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4413      	add	r3, r2
 8004736:	4a47      	ldr	r2, [pc, #284]	; (8004854 <hitComet+0x13c>)
 8004738:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 800473a:	4a45      	ldr	r2, [pc, #276]	; (8004850 <hitComet+0x138>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	b29b      	uxth	r3, r3
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	b298      	uxth	r0, r3
 800474a:	4a41      	ldr	r2, [pc, #260]	; (8004850 <hitComet+0x138>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	b29b      	uxth	r3, r3
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	b299      	uxth	r1, r3
 800475a:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <hitComet+0x138>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004766:	b29b      	uxth	r3, r3
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	b29a      	uxth	r2, r3
 800476c:	4c38      	ldr	r4, [pc, #224]	; (8004850 <hitComet+0x138>)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4423      	add	r3, r4
 8004774:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004778:	b29b      	uxth	r3, r3
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	b29b      	uxth	r3, r3
 800477e:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8004782:	9400      	str	r4, [sp, #0]
 8004784:	f000 fd84 	bl	8005290 <Displ_FillArea>
    if(bul != 420){
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800478e:	d024      	beq.n	80047da <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e01c      	b.n	80047d0 <hitComet+0xb8>
        	AMMO_X(j)= AMMO_X(j+1);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3301      	adds	r3, #1
 800479a:	4a2f      	ldr	r2, [pc, #188]	; (8004858 <hitComet+0x140>)
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80047a4:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <hitComet+0x140>)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	460a      	mov	r2, r1
 80047ae:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a28      	ldr	r2, [pc, #160]	; (8004858 <hitComet+0x140>)
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80047be:	4a26      	ldr	r2, [pc, #152]	; (8004858 <hitComet+0x140>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4413      	add	r3, r2
 80047c6:	460a      	mov	r2, r1
 80047c8:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3301      	adds	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	dddf      	ble.n	8004796 <hitComet+0x7e>
        }
        powerups();
 80047d6:	f000 f861 	bl	800489c <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	e027      	b.n	8004830 <hitComet+0x118>
    	COMET_X(j) = COMET_X(j+1);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <hitComet+0x138>)
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	7859      	ldrb	r1, [r3, #1]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <hitComet+0x138>)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	460a      	mov	r2, r1
 80047f6:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <hitComet+0x138>)
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	7899      	ldrb	r1, [r3, #2]
 8004804:	4a12      	ldr	r2, [pc, #72]	; (8004850 <hitComet+0x138>)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	460a      	mov	r2, r1
 800480e:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3301      	adds	r3, #1
 8004814:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <hitComet+0x138>)
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800481e:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <hitComet+0x138>)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	460a      	mov	r2, r1
 8004828:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3301      	adds	r3, #1
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b08      	cmp	r3, #8
 8004834:	ddd4      	ble.n	80047e0 <hitComet+0xc8>
    }
    Comet.in_play--;
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <hitComet+0x138>)
 8004838:	f993 3000 	ldrsb.w	r3, [r3]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	b25a      	sxtb	r2, r3
 8004844:	4b02      	ldr	r3, [pc, #8]	; (8004850 <hitComet+0x138>)
 8004846:	701a      	strb	r2, [r3, #0]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	bd90      	pop	{r4, r7, pc}
 8004850:	20002194 	.word	0x20002194
 8004854:	200021dc 	.word	0x200021dc
 8004858:	20002174 	.word	0x20002174

0800485c <beenHit>:
 * @fn void beenHit(void)
 * @brief if the spaceship has been hit by a comet or an enemy bullet, this function is called
 * decrements the lives, if lives is 0, the game is restarted in the notPlay state by calling initSpaceInvaders
 *
 */
void beenHit(){
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
    hit = 1;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <beenHit+0x34>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
    lives--;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <beenHit+0x38>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <beenHit+0x38>)
 8004870:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <beenHit+0x38>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <beenHit+0x2e>
        play = 0;
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <beenHit+0x3c>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <beenHit+0x34>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 8004886:	f7fe ffd1 	bl	800382c <initSpaceInvaders>

    }
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20001eeb 	.word	0x20001eeb
 8004894:	20000049 	.word	0x20000049
 8004898:	2000004a 	.word	0x2000004a

0800489c <powerups>:
/**
 * @fn void powerups(void)
 * @brief randomly gives a power-up when a comet has been hit
 *
 */
void powerups(){
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 80048a2:	f006 f9a9 	bl	800abf8 <rand>
 80048a6:	4603      	mov	r3, r0
 80048a8:	425a      	negs	r2, r3
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	f002 0203 	and.w	r2, r2, #3
 80048b2:	bf58      	it	pl
 80048b4:	4253      	negpl	r3, r2
 80048b6:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <powerups+0x7c>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d127      	bne.n	8004910 <powerups+0x74>
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d124      	bne.n	8004910 <powerups+0x74>
        powerUp = RANDOM(1,3);
 80048c6:	f006 f997 	bl	800abf8 <rand>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <powerups+0x80>)
 80048ce:	fb83 3102 	smull	r3, r1, r3, r2
 80048d2:	17d3      	asrs	r3, r2, #31
 80048d4:	1ac9      	subs	r1, r1, r3
 80048d6:	460b      	mov	r3, r1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	440b      	add	r3, r1
 80048dc:	1ad1      	subs	r1, r2, r3
 80048de:	b2cb      	uxtb	r3, r1
 80048e0:	3301      	adds	r3, #1
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <powerups+0x7c>)
 80048e6:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <powerups+0x7c>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d104      	bne.n	80048fa <powerups+0x5e>
        	displayPowerup(RED);
 80048f0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80048f4:	f000 f816 	bl	8004924 <displayPowerup>
 80048f8:	e007      	b.n	800490a <powerups+0x6e>
        }
        else if(powerUp == 2){
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <powerups+0x7c>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d103      	bne.n	800490a <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 8004902:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004906:	f000 f80d 	bl	8004924 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <powerups+0x84>)
 800490c:	2205      	movs	r2, #5
 800490e:	701a      	strb	r2, [r3, #0]
    }
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200021e0 	.word	0x200021e0
 800491c:	55555556 	.word	0x55555556
 8004920:	200021d8 	.word	0x200021d8

08004924 <displayPowerup>:
 * @fn void displayPowerup(uint16_t)
 * @brief displays the power-up on the screen
 *
 * @param[in] color uint16_t: the color to display the power-up with
 */
void displayPowerup(uint16_t color){
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af02      	add	r7, sp, #8
 800492a:	4603      	mov	r3, r0
 800492c:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <displayPowerup+0x88>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d11c      	bne.n	8004970 <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 8004936:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <displayPowerup+0x8c>)
 8004938:	f993 3000 	ldrsb.w	r3, [r3]
 800493c:	b29b      	uxth	r3, r3
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	b298      	uxth	r0, r3
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	23b4      	movs	r3, #180	; 0xb4
 8004948:	2204      	movs	r2, #4
 800494a:	2100      	movs	r1, #0
 800494c:	f000 fca0 	bl	8005290 <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <displayPowerup+0x8c>)
 8004952:	f993 3000 	ldrsb.w	r3, [r3]
 8004956:	b29b      	uxth	r3, r3
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	b29b      	uxth	r3, r3
 800495c:	3301      	adds	r3, #1
 800495e:	b298      	uxth	r0, r3
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	231e      	movs	r3, #30
 8004966:	2202      	movs	r2, #2
 8004968:	21b4      	movs	r1, #180	; 0xb4
 800496a:	f000 fc91 	bl	8005290 <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 800496e:	e019      	b.n	80049a4 <displayPowerup+0x80>
    else if(powerUp == 2){
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <displayPowerup+0x88>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d115      	bne.n	80049a4 <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <displayPowerup+0x8c>)
 800497a:	f993 3000 	ldrsb.w	r3, [r3]
 800497e:	b29b      	uxth	r3, r3
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	b29b      	uxth	r3, r3
 8004984:	3301      	adds	r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	b218      	sxth	r0, r3
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <displayPowerup+0x8c>)
 800498c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004990:	b29b      	uxth	r3, r3
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	b29b      	uxth	r3, r3
 8004996:	3302      	adds	r3, #2
 8004998:	b29b      	uxth	r3, r3
 800499a:	b219      	sxth	r1, r3
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	220e      	movs	r2, #14
 80049a0:	f000 fd56 	bl	8005450 <Displ_drawCircle>
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200021e0 	.word	0x200021e0
 80049b0:	2000004c 	.word	0x2000004c

080049b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_MspInit+0x44>)
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <HAL_MspInit+0x44>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6193      	str	r3, [r2, #24]
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_MspInit+0x44>)
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_MspInit+0x44>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <HAL_MspInit+0x44>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	61d3      	str	r3, [r2, #28]
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_MspInit+0x44>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000

080049fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <HAL_I2C_MspInit+0x7c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d127      	bne.n	8004a6e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <HAL_I2C_MspInit+0x80>)
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <HAL_I2C_MspInit+0x80>)
 8004a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a28:	6153      	str	r3, [r2, #20]
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_I2C_MspInit+0x80>)
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a36:	2303      	movs	r3, #3
 8004a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a3a:	2312      	movs	r3, #18
 8004a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a42:	2303      	movs	r3, #3
 8004a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a46:	2304      	movs	r3, #4
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a4a:	f107 0314 	add.w	r3, r7, #20
 8004a4e:	4619      	mov	r1, r3
 8004a50:	480b      	ldr	r0, [pc, #44]	; (8004a80 <HAL_I2C_MspInit+0x84>)
 8004a52:	f001 fd8d 	bl	8006570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_I2C_MspInit+0x80>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <HAL_I2C_MspInit+0x80>)
 8004a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a60:	61d3      	str	r3, [r2, #28]
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_I2C_MspInit+0x80>)
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004a6e:	bf00      	nop
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40005800 	.word	0x40005800
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	48001400 	.word	0x48001400

08004a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2e      	ldr	r2, [pc, #184]	; (8004b5c <HAL_SPI_MspInit+0xd8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d156      	bne.n	8004b54 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004aa6:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <HAL_SPI_MspInit+0xdc>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4a2d      	ldr	r2, [pc, #180]	; (8004b60 <HAL_SPI_MspInit+0xdc>)
 8004aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab0:	61d3      	str	r3, [r2, #28]
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <HAL_SPI_MspInit+0xdc>)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_SPI_MspInit+0xdc>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <HAL_SPI_MspInit+0xdc>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac8:	6153      	str	r3, [r2, #20]
 8004aca:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <HAL_SPI_MspInit+0xdc>)
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8004ad6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004adc:	2302      	movs	r3, #2
 8004ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ae8:	2305      	movs	r3, #5
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	4619      	mov	r1, r3
 8004af2:	481c      	ldr	r0, [pc, #112]	; (8004b64 <HAL_SPI_MspInit+0xe0>)
 8004af4:	f001 fd3c 	bl	8006570 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004af8:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004afa:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <HAL_SPI_MspInit+0xe8>)
 8004afc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004afe:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b00:	2210      	movs	r2, #16
 8004b02:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b04:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004b28:	480f      	ldr	r0, [pc, #60]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b2a:	f001 fb12 	bl	8006152 <HAL_DMA_Init>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004b34:	f7fe fb30 	bl	8003198 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a0b      	ldr	r2, [pc, #44]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <HAL_SPI_MspInit+0xe4>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004b44:	2200      	movs	r2, #0
 8004b46:	2100      	movs	r1, #0
 8004b48:	2024      	movs	r0, #36	; 0x24
 8004b4a:	f001 facc 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004b4e:	2024      	movs	r0, #36	; 0x24
 8004b50:	f001 fae5 	bl	800611e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004b54:	bf00      	nop
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40003800 	.word	0x40003800
 8004b60:	40021000 	.word	0x40021000
 8004b64:	48000400 	.word	0x48000400
 8004b68:	20001fa8 	.word	0x20001fa8
 8004b6c:	40020058 	.word	0x40020058

08004b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	; 0x30
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b78:	f107 031c 	add.w	r3, r7, #28
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a33      	ldr	r2, [pc, #204]	; (8004c5c <HAL_UART_MspInit+0xec>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d131      	bne.n	8004bf6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b92:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4a32      	ldr	r2, [pc, #200]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	61d3      	str	r3, [r2, #28]
 8004b9e:	4b30      	ldr	r3, [pc, #192]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004baa:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb4:	6153      	str	r3, [r2, #20]
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bd2:	2307      	movs	r3, #7
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd6:	f107 031c 	add.w	r3, r7, #28
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004be0:	f001 fcc6 	bl	8006570 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004be4:	2200      	movs	r2, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	2026      	movs	r0, #38	; 0x26
 8004bea:	f001 fa7c 	bl	80060e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004bee:	2026      	movs	r0, #38	; 0x26
 8004bf0:	f001 fa95 	bl	800611e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004bf4:	e02d      	b.n	8004c52 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <HAL_UART_MspInit+0xf4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d128      	bne.n	8004c52 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c0a:	61d3      	str	r3, [r2, #28]
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	4a10      	ldr	r2, [pc, #64]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c22:	6153      	str	r3, [r2, #20]
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <HAL_UART_MspInit+0xf0>)
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c36:	2302      	movs	r3, #2
 8004c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c42:	2307      	movs	r3, #7
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c46:	f107 031c 	add.w	r3, r7, #28
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4806      	ldr	r0, [pc, #24]	; (8004c68 <HAL_UART_MspInit+0xf8>)
 8004c4e:	f001 fc8f 	bl	8006570 <HAL_GPIO_Init>
}
 8004c52:	bf00      	nop
 8004c54:	3730      	adds	r7, #48	; 0x30
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40004400 	.word	0x40004400
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40004800 	.word	0x40004800
 8004c68:	48000400 	.word	0x48000400

08004c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c70:	e7fe      	b.n	8004c70 <NMI_Handler+0x4>

08004c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c76:	e7fe      	b.n	8004c76 <HardFault_Handler+0x4>

08004c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c7c:	e7fe      	b.n	8004c7c <MemManage_Handler+0x4>

08004c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c82:	e7fe      	b.n	8004c82 <BusFault_Handler+0x4>

08004c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c88:	e7fe      	b.n	8004c88 <UsageFault_Handler+0x4>

08004c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cb8:	f001 f8f6 	bl	8005ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f001 fdf5 	bl	80068b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004cd4:	4802      	ldr	r0, [pc, #8]	; (8004ce0 <DMA1_Channel5_IRQHandler+0x10>)
 8004cd6:	f001 fb59 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20001fa8 	.word	0x20001fa8

08004ce4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004ce8:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <SPI2_IRQHandler+0x10>)
 8004cea:	f004 fc1b 	bl	8009524 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20001f44 	.word	0x20001f44

08004cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <USART2_IRQHandler+0x50>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <USART2_IRQHandler+0x50>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <USART2_IRQHandler+0x42>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <USART2_IRQHandler+0x50>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <USART2_IRQHandler+0x50>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe fc11 	bl	800355c <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d3a:	4803      	ldr	r0, [pc, #12]	; (8004d48 <USART2_IRQHandler+0x50>)
 8004d3c:	f004 ffce 	bl	8009cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20001fec 	.word	0x20001fec

08004d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8004d50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d54:	f001 fdae 	bl	80068b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8004d58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d5c:	f001 fdaa 	bl	80068b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8004d60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d64:	f001 fda6 	bl	80068b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d68:	bf00      	nop
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return 1;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <_kill>:

int _kill(int pid, int sig)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d86:	f005 fe49 	bl	800aa1c <__errno>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2216      	movs	r2, #22
 8004d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_exit>:

void _exit (int status)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004da4:	f04f 31ff 	mov.w	r1, #4294967295
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ffe7 	bl	8004d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dae:	e7fe      	b.n	8004dae <_exit+0x12>

08004db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e00a      	b.n	8004dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dc2:	f3af 8000 	nop.w
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	60ba      	str	r2, [r7, #8]
 8004dce:	b2ca      	uxtb	r2, r1
 8004dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	dbf0      	blt.n	8004dc2 <_read+0x12>
  }

  return len;
 8004de0:	687b      	ldr	r3, [r7, #4]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <_close>:
  }
  return len;
}

int _close(int file)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e12:	605a      	str	r2, [r3, #4]
  return 0;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <_isatty>:

int _isatty(int file)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e2a:	2301      	movs	r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e5c:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <_sbrk+0x5c>)
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <_sbrk+0x60>)
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <_sbrk+0x64>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <_sbrk+0x64>)
 8004e72:	4a12      	ldr	r2, [pc, #72]	; (8004ebc <_sbrk+0x68>)
 8004e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <_sbrk+0x64>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d207      	bcs.n	8004e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e84:	f005 fdca 	bl	800aa1c <__errno>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	220c      	movs	r2, #12
 8004e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e92:	e009      	b.n	8004ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <_sbrk+0x64>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <_sbrk+0x64>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <_sbrk+0x64>)
 8004ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20004000 	.word	0x20004000
 8004eb4:	00000400 	.word	0x00000400
 8004eb8:	200021e4 	.word	0x200021e4
 8004ebc:	20002a10 	.word	0x20002a10

08004ec0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <SystemInit+0x20>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <SystemInit+0x20>)
 8004ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	e000ed00 	.word	0xe000ed00

08004ee4 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 8004ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ef0:	f001 fcb0 	bl	8006854 <HAL_GPIO_ReadPin>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d017      	beq.n	8004f2a <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 8004efa:	2201      	movs	r2, #1
 8004efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f00:	480b      	ldr	r0, [pc, #44]	; (8004f30 <Displ_Select+0x4c>)
 8004f02:	f001 fcbf 	bl	8006884 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <Displ_Select+0x50>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	490a      	ldr	r1, [pc, #40]	; (8004f34 <Displ_Select+0x50>)
 8004f0c:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004f10:	4013      	ands	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <Displ_Select+0x50>)
 8004f16:	4a07      	ldr	r2, [pc, #28]	; (8004f34 <Displ_Select+0x50>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f26:	f001 fcad 	bl	8006884 <HAL_GPIO_WritePin>
        }
    }
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	48000400 	.word	0x48000400
 8004f34:	40003800 	.word	0x40003800

08004f38 <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6039      	str	r1, [r7, #0]
 8004f40:	4611      	mov	r1, r2
 8004f42:	461a      	mov	r2, r3
 8004f44:	4603      	mov	r3, r0
 8004f46:	71fb      	strb	r3, [r7, #7]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	80bb      	strh	r3, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004f50:	bf00      	nop
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <Displ_Transmit+0xa8>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0fa      	beq.n	8004f52 <Displ_Transmit+0x1a>

    Displ_Select();
 8004f5c:	f7ff ffc2 	bl	8004ee4 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f001 fc8a 	bl	8006884 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8004f70:	79bb      	ldrb	r3, [r7, #6]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 8004f76:	88bb      	ldrh	r3, [r7, #4]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	e00b      	b.n	8004f9c <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	ba5b      	rev16	r3, r3
 8004f8e:	60bb      	str	r3, [r7, #8]
  return result;
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3ef      	bcc.n	8004f84 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 8004fa4:	88bb      	ldrh	r3, [r7, #4]
 8004fa6:	2b13      	cmp	r3, #19
 8004fa8:	d80d      	bhi.n	8004fc6 <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <Displ_Transmit+0xa8>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004fb0:	88ba      	ldrh	r2, [r7, #4]
 8004fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	480a      	ldr	r0, [pc, #40]	; (8004fe4 <Displ_Transmit+0xac>)
 8004fba:	f004 f84e 	bl	800905a <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 8004fbe:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <Displ_Transmit+0xa8>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 8004fc4:	e008      	b.n	8004fd8 <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <Displ_Transmit+0xa8>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004fcc:	88bb      	ldrh	r3, [r7, #4]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	4804      	ldr	r0, [pc, #16]	; (8004fe4 <Displ_Transmit+0xac>)
 8004fd4:	f004 f9b6 	bl	8009344 <HAL_SPI_Transmit_DMA>
    }
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000058 	.word	0x20000058
 8004fe4:	20001f44 	.word	0x20001f44

08004fe8 <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004ff2:	1df9      	adds	r1, r7, #7
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f7ff ff9d 	bl	8004f38 <Displ_Transmit>
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	4613      	mov	r3, r2
 8005012:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	b29a      	uxth	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	68f9      	ldr	r1, [r7, #12]
 8005022:	2001      	movs	r0, #1
 8005024:	f7ff ff88 	bl	8004f38 <Displ_Transmit>
 8005028:	e000      	b.n	800502c <Displ_WriteData+0x26>
    if (buff_size==0) return;
 800502a:	bf00      	nop
}
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
    Displ_Select();
 8005038:	f7ff ff54 	bl	8004ee4 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005046:	f001 fc1d 	bl	8006884 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800504a:	2001      	movs	r0, #1
 800504c:	f000 ff4c 	bl	8005ee8 <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8005050:	2201      	movs	r2, #1
 8005052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800505a:	f001 fc13 	bl	8006884 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 800505e:	2096      	movs	r0, #150	; 0x96
 8005060:	f000 ff42 	bl	8005ee8 <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005064:	203a      	movs	r0, #58	; 0x3a
 8005066:	f7ff ffbf 	bl	8004fe8 <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 800506a:	2200      	movs	r2, #0
 800506c:	2101      	movs	r1, #1
 800506e:	4810      	ldr	r0, [pc, #64]	; (80050b0 <ILI9XXX_Init+0x7c>)
 8005070:	f7ff ffc9 	bl	8005006 <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005074:	20b0      	movs	r0, #176	; 0xb0
 8005076:	f7ff ffb7 	bl	8004fe8 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800507a:	2200      	movs	r2, #0
 800507c:	2101      	movs	r1, #1
 800507e:	480d      	ldr	r0, [pc, #52]	; (80050b4 <ILI9XXX_Init+0x80>)
 8005080:	f7ff ffc1 	bl	8005006 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005084:	20b0      	movs	r0, #176	; 0xb0
 8005086:	f7ff ffaf 	bl	8004fe8 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800508a:	2200      	movs	r2, #0
 800508c:	2101      	movs	r1, #1
 800508e:	4809      	ldr	r0, [pc, #36]	; (80050b4 <ILI9XXX_Init+0x80>)
 8005090:	f7ff ffb9 	bl	8005006 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8005094:	2011      	movs	r0, #17
 8005096:	f7ff ffa7 	bl	8004fe8 <Displ_WriteCommand>
    HAL_Delay(120);
 800509a:	2078      	movs	r0, #120	; 0x78
 800509c:	f000 ff24 	bl	8005ee8 <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 80050a0:	2029      	movs	r0, #41	; 0x29
 80050a2:	f7ff ffa1 	bl	8004fe8 <Displ_WriteCommand>
    HAL_Delay(5);
 80050a6:	2005      	movs	r0, #5
 80050a8:	f000 ff1e 	bl	8005ee8 <HAL_Delay>

}
 80050ac:	bf00      	nop
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	0800c304 	.word	0x0800c304
 80050b4:	0800c308 	.word	0x0800c308

080050b8 <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4623      	mov	r3, r4
 80050c8:	80fb      	strh	r3, [r7, #6]
 80050ca:	4603      	mov	r3, r0
 80050cc:	80bb      	strh	r3, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	807b      	strh	r3, [r7, #2]
 80050d2:	4613      	mov	r3, r2
 80050d4:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80050d6:	887b      	ldrh	r3, [r7, #2]
 80050d8:	061a      	lsls	r2, r3, #24
 80050da:	887b      	ldrh	r3, [r7, #2]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050e2:	431a      	orrs	r2, r3
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	88fa      	ldrh	r2, [r7, #6]
 80050ee:	0a12      	lsrs	r2, r2, #8
 80050f0:	b292      	uxth	r2, r2
 80050f2:	431a      	orrs	r2, r3
 80050f4:	4b14      	ldr	r3, [pc, #80]	; (8005148 <Displ_SetAddressWindow+0x90>)
 80050f6:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80050f8:	202a      	movs	r0, #42	; 0x2a
 80050fa:	f7ff ff75 	bl	8004fe8 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 80050fe:	2200      	movs	r2, #0
 8005100:	2104      	movs	r1, #4
 8005102:	4811      	ldr	r0, [pc, #68]	; (8005148 <Displ_SetAddressWindow+0x90>)
 8005104:	f7ff ff7f 	bl	8005006 <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8005108:	883b      	ldrh	r3, [r7, #0]
 800510a:	061a      	lsls	r2, r3, #24
 800510c:	883b      	ldrh	r3, [r7, #0]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005114:	431a      	orrs	r2, r3
 8005116:	88bb      	ldrh	r3, [r7, #4]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	b29b      	uxth	r3, r3
 800511c:	4313      	orrs	r3, r2
 800511e:	88ba      	ldrh	r2, [r7, #4]
 8005120:	0a12      	lsrs	r2, r2, #8
 8005122:	b292      	uxth	r2, r2
 8005124:	431a      	orrs	r2, r3
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <Displ_SetAddressWindow+0x90>)
 8005128:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800512a:	202b      	movs	r0, #43	; 0x2b
 800512c:	f7ff ff5c 	bl	8004fe8 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8005130:	2200      	movs	r2, #0
 8005132:	2104      	movs	r1, #4
 8005134:	4804      	ldr	r0, [pc, #16]	; (8005148 <Displ_SetAddressWindow+0x90>)
 8005136:	f7ff ff66 	bl	8005006 <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 800513a:	202c      	movs	r0, #44	; 0x2c
 800513c:	f7ff ff54 	bl	8004fe8 <Displ_WriteCommand>
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bd90      	pop	{r4, r7, pc}
 8005148:	200029f0 	.word	0x200029f0

0800514c <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8005156:	2201      	movs	r2, #1
 8005158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800515c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005160:	f001 fb90 	bl	8006884 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8005164:	2201      	movs	r2, #1
 8005166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800516a:	4806      	ldr	r0, [pc, #24]	; (8005184 <Displ_Init+0x38>)
 800516c:	f001 fb8a 	bl	8006884 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8005170:	f7ff ff60 	bl	8005034 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f806 	bl	8005188 <Displ_Orientation>
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	48000400 	.word	0x48000400

08005188 <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d837      	bhi.n	8005208 <Displ_Orientation+0x80>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <Displ_Orientation+0x18>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051c7 	.word	0x080051c7
 80051a8:	080051dd 	.word	0x080051dd
 80051ac:	080051f3 	.word	0x080051f3
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <Displ_Orientation+0xa0>)
 80051b2:	2288      	movs	r2, #136	; 0x88
 80051b4:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <Displ_Orientation+0xa4>)
 80051b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051bc:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 80051be:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <Displ_Orientation+0xa8>)
 80051c0:	22f0      	movs	r2, #240	; 0xf0
 80051c2:	801a      	strh	r2, [r3, #0]
            break;
 80051c4:	e020      	b.n	8005208 <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <Displ_Orientation+0xa0>)
 80051c8:	22e8      	movs	r2, #232	; 0xe8
 80051ca:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 80051cc:	4b17      	ldr	r3, [pc, #92]	; (800522c <Displ_Orientation+0xa4>)
 80051ce:	22f0      	movs	r2, #240	; 0xf0
 80051d0:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 80051d2:	4b17      	ldr	r3, [pc, #92]	; (8005230 <Displ_Orientation+0xa8>)
 80051d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051d8:	801a      	strh	r2, [r3, #0]
            break;
 80051da:	e015      	b.n	8005208 <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <Displ_Orientation+0xa0>)
 80051de:	2248      	movs	r2, #72	; 0x48
 80051e0:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <Displ_Orientation+0xa4>)
 80051e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051e8:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <Displ_Orientation+0xa8>)
 80051ec:	22f0      	movs	r2, #240	; 0xf0
 80051ee:	801a      	strh	r2, [r3, #0]
            break;
 80051f0:	e00a      	b.n	8005208 <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 80051f2:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <Displ_Orientation+0xa0>)
 80051f4:	2228      	movs	r2, #40	; 0x28
 80051f6:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <Displ_Orientation+0xa4>)
 80051fa:	22f0      	movs	r2, #240	; 0xf0
 80051fc:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <Displ_Orientation+0xa8>)
 8005200:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005204:	801a      	strh	r2, [r3, #0]
            break;
 8005206:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 8005208:	2036      	movs	r0, #54	; 0x36
 800520a:	f7ff feed 	bl	8004fe8 <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 800520e:	2200      	movs	r2, #0
 8005210:	2101      	movs	r1, #1
 8005212:	4805      	ldr	r0, [pc, #20]	; (8005228 <Displ_Orientation+0xa0>)
 8005214:	f7ff fef7 	bl	8005006 <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8005218:	4a06      	ldr	r2, [pc, #24]	; (8005234 <Displ_Orientation+0xac>)
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	7013      	strb	r3, [r2, #0]
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	200029f4 	.word	0x200029f4
 800522c:	200021ec 	.word	0x200021ec
 8005230:	200021ea 	.word	0x200021ea
 8005234:	200021e8 	.word	0x200021e8

08005238 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a05      	ldr	r2, [pc, #20]	; (800525c <HAL_SPI_ErrorCallback+0x24>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d102      	bne.n	8005250 <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_SPI_ErrorCallback+0x28>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
    }
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	40003800 	.word	0x40003800
 8005260:	20000058 	.word	0x20000058

08005264 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a05      	ldr	r2, [pc, #20]	; (8005288 <HAL_SPI_TxCpltCallback+0x24>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d102      	bne.n	800527c <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_SPI_TxCpltCallback+0x28>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40003800 	.word	0x40003800
 800528c:	20000058 	.word	0x20000058

08005290 <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005290:	b590      	push	{r4, r7, lr}
 8005292:	b08b      	sub	sp, #44	; 0x2c
 8005294:	af00      	add	r7, sp, #0
 8005296:	4604      	mov	r4, r0
 8005298:	4608      	mov	r0, r1
 800529a:	4611      	mov	r1, r2
 800529c:	461a      	mov	r2, r3
 800529e:	4623      	mov	r3, r4
 80052a0:	80fb      	strh	r3, [r7, #6]
 80052a2:	4603      	mov	r3, r0
 80052a4:	80bb      	strh	r3, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	807b      	strh	r3, [r7, #2]
 80052aa:	4613      	mov	r3, r2
 80052ac:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	4a4f      	ldr	r2, [pc, #316]	; (80053f0 <Displ_FillArea+0x160>)
 80052b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80052b6:	4293      	cmp	r3, r2
 80052b8:	f280 8096 	bge.w	80053e8 <Displ_FillArea+0x158>
 80052bc:	88bb      	ldrh	r3, [r7, #4]
 80052be:	4a4d      	ldr	r2, [pc, #308]	; (80053f4 <Displ_FillArea+0x164>)
 80052c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f280 808f 	bge.w	80053e8 <Displ_FillArea+0x158>
 80052ca:	887b      	ldrh	r3, [r7, #2]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 808b 	beq.w	80053e8 <Displ_FillArea+0x158>
 80052d2:	883b      	ldrh	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8087 	beq.w	80053e8 <Displ_FillArea+0x158>

    x1=x + w - 1;
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	887b      	ldrh	r3, [r7, #2]
 80052de:	4413      	add	r3, r2
 80052e0:	3b01      	subs	r3, #1
 80052e2:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 80052e4:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <Displ_FillArea+0x160>)
 80052e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d903      	bls.n	80052fa <Displ_FillArea+0x6a>
        x1=_width;
 80052f2:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <Displ_FillArea+0x160>)
 80052f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052f8:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 80052fa:	88ba      	ldrh	r2, [r7, #4]
 80052fc:	883b      	ldrh	r3, [r7, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	3b01      	subs	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8005304:	4b3b      	ldr	r3, [pc, #236]	; (80053f4 <Displ_FillArea+0x164>)
 8005306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800530a:	461a      	mov	r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4293      	cmp	r3, r2
 8005310:	d903      	bls.n	800531a <Displ_FillArea+0x8a>
        y1=_height;
 8005312:	4b38      	ldr	r3, [pc, #224]	; (80053f4 <Displ_FillArea+0x164>)
 8005314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005318:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800531a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	431a      	orrs	r2, r3
 8005328:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8005330:	88bb      	ldrh	r3, [r7, #4]
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	3301      	adds	r3, #1
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	6a39      	ldr	r1, [r7, #32]
 800533c:	1a8a      	subs	r2, r1, r2
 800533e:	3201      	adds	r2, #1
 8005340:	fb02 f303 	mul.w	r3, r2, r3
 8005344:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8005346:	4b2c      	ldr	r3, [pc, #176]	; (80053f8 <Displ_FillArea+0x168>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005352:	d204      	bcs.n	800535e <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	3301      	adds	r3, #1
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	e002      	b.n	8005364 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 800535e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005362:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8005364:	2300      	movs	r3, #0
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
 8005368:	e007      	b.n	800537a <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	1d1a      	adds	r2, r3, #4
 800536e:	617a      	str	r2, [r7, #20]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	3301      	adds	r3, #1
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	429a      	cmp	r2, r3
 8005380:	d3f3      	bcc.n	800536a <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	b29a      	uxth	r2, r3
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	b29b      	uxth	r3, r3
 800538a:	88b9      	ldrh	r1, [r7, #4]
 800538c:	88f8      	ldrh	r0, [r7, #6]
 800538e:	f7ff fe93 	bl	80050b8 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	0a5b      	lsrs	r3, r3, #9
 8005396:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e00a      	b.n	80053b4 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 800539e:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <Displ_FillArea+0x168>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fe2c 	bl	8005006 <Displ_WriteData>
    for  (k=0;k<times;k++) {
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	3301      	adds	r3, #1
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d3f0      	bcc.n	800539e <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <Displ_FillArea+0x168>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	005a      	lsls	r2, r3, #1
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	029b      	lsls	r3, r3, #10
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2200      	movs	r2, #0
 80053cc:	4619      	mov	r1, r3
 80053ce:	f7ff fe1a 	bl	8005006 <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <Displ_FillArea+0x168>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a09      	ldr	r2, [pc, #36]	; (80053fc <Displ_FillArea+0x16c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d101      	bne.n	80053e0 <Displ_FillArea+0x150>
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <Displ_FillArea+0x170>)
 80053de:	e000      	b.n	80053e2 <Displ_FillArea+0x152>
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <Displ_FillArea+0x16c>)
 80053e2:	4a05      	ldr	r2, [pc, #20]	; (80053f8 <Displ_FillArea+0x168>)
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e000      	b.n	80053ea <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80053e8:	bf00      	nop

}
 80053ea:	372c      	adds	r7, #44	; 0x2c
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd90      	pop	{r4, r7, pc}
 80053f0:	200021ea 	.word	0x200021ea
 80053f4:	200021ec 	.word	0x200021ec
 80053f8:	2000005c 	.word	0x2000005c
 80053fc:	200021f0 	.word	0x200021f0
 8005400:	200025f0 	.word	0x200025f0

08005404 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af02      	add	r7, sp, #8
 800540a:	4603      	mov	r3, r0
 800540c:	80fb      	strh	r3, [r7, #6]
 800540e:	460b      	mov	r3, r1
 8005410:	80bb      	strh	r3, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	4a0b      	ldr	r2, [pc, #44]	; (8005448 <Displ_Pixel+0x44>)
 800541a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800541e:	4293      	cmp	r3, r2
 8005420:	da0e      	bge.n	8005440 <Displ_Pixel+0x3c>
 8005422:	88bb      	ldrh	r3, [r7, #4]
 8005424:	4a09      	ldr	r2, [pc, #36]	; (800544c <Displ_Pixel+0x48>)
 8005426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800542a:	4293      	cmp	r3, r2
 800542c:	da08      	bge.n	8005440 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 800542e:	88b9      	ldrh	r1, [r7, #4]
 8005430:	88f8      	ldrh	r0, [r7, #6]
 8005432:	887b      	ldrh	r3, [r7, #2]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2301      	movs	r3, #1
 8005438:	2201      	movs	r2, #1
 800543a:	f7ff ff29 	bl	8005290 <Displ_FillArea>
 800543e:	e000      	b.n	8005442 <Displ_Pixel+0x3e>
        return;
 8005440:	bf00      	nop

}
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200021ea 	.word	0x200021ea
 800544c:	200021ec 	.word	0x200021ec

08005450 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	461a      	mov	r2, r3
 800545e:	4623      	mov	r3, r4
 8005460:	80fb      	strh	r3, [r7, #6]
 8005462:	4603      	mov	r3, r0
 8005464:	80bb      	strh	r3, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	807b      	strh	r3, [r7, #2]
 800546a:	4613      	mov	r3, r2
 800546c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800546e:	887b      	ldrh	r3, [r7, #2]
 8005470:	f1c3 0301 	rsb	r3, r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005478:	2301      	movs	r3, #1
 800547a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800547c:	887b      	ldrh	r3, [r7, #2]
 800547e:	461a      	mov	r2, r3
 8005480:	03d2      	lsls	r2, r2, #15
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	b29b      	uxth	r3, r3
 8005488:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8005492:	88f8      	ldrh	r0, [r7, #6]
 8005494:	88ba      	ldrh	r2, [r7, #4]
 8005496:	887b      	ldrh	r3, [r7, #2]
 8005498:	4413      	add	r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	883a      	ldrh	r2, [r7, #0]
 800549e:	4619      	mov	r1, r3
 80054a0:	f7ff ffb0 	bl	8005404 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80054a4:	88f8      	ldrh	r0, [r7, #6]
 80054a6:	88ba      	ldrh	r2, [r7, #4]
 80054a8:	887b      	ldrh	r3, [r7, #2]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	883a      	ldrh	r2, [r7, #0]
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7ff ffa7 	bl	8005404 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	4413      	add	r3, r2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	88b9      	ldrh	r1, [r7, #4]
 80054c0:	883a      	ldrh	r2, [r7, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff9e 	bl	8005404 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	88b9      	ldrh	r1, [r7, #4]
 80054d2:	883a      	ldrh	r2, [r7, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff ff95 	bl	8005404 <Displ_Pixel>

    while (x<y) {
 80054da:	e081      	b.n	80055e0 <Displ_drawCircle+0x190>
        if (f >= 0) {
 80054dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	db0e      	blt.n	8005502 <Displ_drawCircle+0xb2>
            y--;
 80054e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80054f0:	8a7b      	ldrh	r3, [r7, #18]
 80054f2:	3302      	adds	r3, #2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80054f8:	8afa      	ldrh	r2, [r7, #22]
 80054fa:	8a7b      	ldrh	r3, [r7, #18]
 80054fc:	4413      	add	r3, r2
 80054fe:	b29b      	uxth	r3, r3
 8005500:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005502:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005506:	b29b      	uxth	r3, r3
 8005508:	3301      	adds	r3, #1
 800550a:	b29b      	uxth	r3, r3
 800550c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800550e:	8abb      	ldrh	r3, [r7, #20]
 8005510:	3302      	adds	r3, #2
 8005512:	b29b      	uxth	r3, r3
 8005514:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8005516:	8afa      	ldrh	r2, [r7, #22]
 8005518:	8abb      	ldrh	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	b29b      	uxth	r3, r3
 800551e:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005520:	88fa      	ldrh	r2, [r7, #6]
 8005522:	8a3b      	ldrh	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	b298      	uxth	r0, r3
 8005528:	88ba      	ldrh	r2, [r7, #4]
 800552a:	89fb      	ldrh	r3, [r7, #14]
 800552c:	4413      	add	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	883a      	ldrh	r2, [r7, #0]
 8005532:	4619      	mov	r1, r3
 8005534:	f7ff ff66 	bl	8005404 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	8a3b      	ldrh	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	b298      	uxth	r0, r3
 8005540:	88ba      	ldrh	r2, [r7, #4]
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	4413      	add	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	883a      	ldrh	r2, [r7, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	f7ff ff5a 	bl	8005404 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	8a3b      	ldrh	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	b298      	uxth	r0, r3
 8005558:	88ba      	ldrh	r2, [r7, #4]
 800555a:	89fb      	ldrh	r3, [r7, #14]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	b29b      	uxth	r3, r3
 8005560:	883a      	ldrh	r2, [r7, #0]
 8005562:	4619      	mov	r1, r3
 8005564:	f7ff ff4e 	bl	8005404 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	8a3b      	ldrh	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	b298      	uxth	r0, r3
 8005570:	88ba      	ldrh	r2, [r7, #4]
 8005572:	89fb      	ldrh	r3, [r7, #14]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	b29b      	uxth	r3, r3
 8005578:	883a      	ldrh	r2, [r7, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	f7ff ff42 	bl	8005404 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005580:	88fa      	ldrh	r2, [r7, #6]
 8005582:	89fb      	ldrh	r3, [r7, #14]
 8005584:	4413      	add	r3, r2
 8005586:	b298      	uxth	r0, r3
 8005588:	88ba      	ldrh	r2, [r7, #4]
 800558a:	8a3b      	ldrh	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	883a      	ldrh	r2, [r7, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	f7ff ff36 	bl	8005404 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	89fb      	ldrh	r3, [r7, #14]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	b298      	uxth	r0, r3
 80055a0:	88ba      	ldrh	r2, [r7, #4]
 80055a2:	8a3b      	ldrh	r3, [r7, #16]
 80055a4:	4413      	add	r3, r2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	883a      	ldrh	r2, [r7, #0]
 80055aa:	4619      	mov	r1, r3
 80055ac:	f7ff ff2a 	bl	8005404 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	89fb      	ldrh	r3, [r7, #14]
 80055b4:	4413      	add	r3, r2
 80055b6:	b298      	uxth	r0, r3
 80055b8:	88ba      	ldrh	r2, [r7, #4]
 80055ba:	8a3b      	ldrh	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	b29b      	uxth	r3, r3
 80055c0:	883a      	ldrh	r2, [r7, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7ff ff1e 	bl	8005404 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	b298      	uxth	r0, r3
 80055d0:	88ba      	ldrh	r2, [r7, #4]
 80055d2:	8a3b      	ldrh	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	883a      	ldrh	r2, [r7, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	f7ff ff12 	bl	8005404 <Displ_Pixel>
    while (x<y) {
 80055e0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80055e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	f6ff af77 	blt.w	80054dc <Displ_drawCircle+0x8c>
    }
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd90      	pop	{r4, r7, pc}

080055f8 <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	4603      	mov	r3, r0
 8005600:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 8005602:	4b09      	ldr	r3, [pc, #36]	; (8005628 <Displ_CLS+0x30>)
 8005604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005608:	b29a      	uxth	r2, r3
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <Displ_CLS+0x34>)
 800560c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005610:	b299      	uxth	r1, r3
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	460b      	mov	r3, r1
 8005618:	2100      	movs	r1, #0
 800561a:	2000      	movs	r0, #0
 800561c:	f7ff fe38 	bl	8005290 <Displ_FillArea>
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200021ea 	.word	0x200021ea
 800562c:	200021ec 	.word	0x200021ec

08005630 <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b08b      	sub	sp, #44	; 0x2c
 8005634:	af02      	add	r7, sp, #8
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4623      	mov	r3, r4
 8005640:	80fb      	strh	r3, [r7, #6]
 8005642:	4603      	mov	r3, r0
 8005644:	80bb      	strh	r3, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	807b      	strh	r3, [r7, #2]
 800564a:	4613      	mov	r3, r2
 800564c:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 800564e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005656:	429a      	cmp	r2, r3
 8005658:	d123      	bne.n	80056a2 <Displ_Line+0x72>
        if (y1>y0){
 800565a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800565e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	dd0e      	ble.n	8005684 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005666:	88f8      	ldrh	r0, [r7, #6]
 8005668:	88b9      	ldrh	r1, [r7, #4]
 800566a:	883a      	ldrh	r2, [r7, #0]
 800566c:	88bb      	ldrh	r3, [r7, #4]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b29b      	uxth	r3, r3
 8005672:	3301      	adds	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	2201      	movs	r2, #1
 800567e:	f7ff fe07 	bl	8005290 <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 8005682:	e103      	b.n	800588c <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005684:	88f8      	ldrh	r0, [r7, #6]
 8005686:	8839      	ldrh	r1, [r7, #0]
 8005688:	88ba      	ldrh	r2, [r7, #4]
 800568a:	883b      	ldrh	r3, [r7, #0]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	b29b      	uxth	r3, r3
 8005690:	3301      	adds	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	2201      	movs	r2, #1
 800569c:	f7ff fdf8 	bl	8005290 <Displ_FillArea>
        return;
 80056a0:	e0f4      	b.n	800588c <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 80056a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80056a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d121      	bne.n	80056f2 <Displ_Line+0xc2>
        if (x1>x0)
 80056ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	dd0d      	ble.n	80056d6 <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80056ba:	88f8      	ldrh	r0, [r7, #6]
 80056bc:	88b9      	ldrh	r1, [r7, #4]
 80056be:	887a      	ldrh	r2, [r7, #2]
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3301      	adds	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2301      	movs	r3, #1
 80056d0:	f7ff fdde 	bl	8005290 <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 80056d4:	e0da      	b.n	800588c <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80056d6:	8878      	ldrh	r0, [r7, #2]
 80056d8:	8839      	ldrh	r1, [r7, #0]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	887b      	ldrh	r3, [r7, #2]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3301      	adds	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	2301      	movs	r3, #1
 80056ec:	f7ff fdd0 	bl	8005290 <Displ_FillArea>
        return;
 80056f0:	e0cc      	b.n	800588c <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80056f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80056f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	dd05      	ble.n	800570a <Displ_Line+0xda>
 80056fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005702:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	e004      	b.n	8005714 <Displ_Line+0xe4>
 800570a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800570e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571c:	4299      	cmp	r1, r3
 800571e:	dd05      	ble.n	800572c <Displ_Line+0xfc>
 8005720:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005728:	1acb      	subs	r3, r1, r3
 800572a:	e004      	b.n	8005736 <Displ_Line+0x106>
 800572c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005730:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005734:	1acb      	subs	r3, r1, r3
 8005736:	429a      	cmp	r2, r3
 8005738:	bfcc      	ite	gt
 800573a:	2301      	movgt	r3, #1
 800573c:	2300      	movle	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8005742:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	827b      	strh	r3, [r7, #18]
 800574e:	88bb      	ldrh	r3, [r7, #4]
 8005750:	80fb      	strh	r3, [r7, #6]
 8005752:	8a7b      	ldrh	r3, [r7, #18]
 8005754:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	823b      	strh	r3, [r7, #16]
 800575a:	883b      	ldrh	r3, [r7, #0]
 800575c:	807b      	strh	r3, [r7, #2]
 800575e:	8a3b      	ldrh	r3, [r7, #16]
 8005760:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005766:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800576a:	429a      	cmp	r2, r3
 800576c:	dd0b      	ble.n	8005786 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	81fb      	strh	r3, [r7, #14]
 8005772:	887b      	ldrh	r3, [r7, #2]
 8005774:	80fb      	strh	r3, [r7, #6]
 8005776:	89fb      	ldrh	r3, [r7, #14]
 8005778:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800577a:	88bb      	ldrh	r3, [r7, #4]
 800577c:	81bb      	strh	r3, [r7, #12]
 800577e:	883b      	ldrh	r3, [r7, #0]
 8005780:	80bb      	strh	r3, [r7, #4]
 8005782:	89bb      	ldrh	r3, [r7, #12]
 8005784:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	b29b      	uxth	r3, r3
 800578e:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005790:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005794:	105b      	asrs	r3, r3, #1
 8005796:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005798:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800579c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	da07      	bge.n	80057b4 <Displ_Line+0x184>
        dy = y1-y0;
 80057a4:	883a      	ldrh	r2, [r7, #0]
 80057a6:	88bb      	ldrh	r3, [r7, #4]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80057ae:	2301      	movs	r3, #1
 80057b0:	837b      	strh	r3, [r7, #26]
 80057b2:	e007      	b.n	80057c4 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80057b4:	88ba      	ldrh	r2, [r7, #4]
 80057b6:	883b      	ldrh	r3, [r7, #0]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80057be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057c2:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80057c4:	2300      	movs	r3, #0
 80057c6:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	83bb      	strh	r3, [r7, #28]
 80057cc:	e03a      	b.n	8005844 <Displ_Line+0x214>
        l++;
 80057ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3301      	adds	r3, #1
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80057da:	8b3a      	ldrh	r2, [r7, #24]
 80057dc:	8afb      	ldrh	r3, [r7, #22]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80057e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	da25      	bge.n	8005838 <Displ_Line+0x208>
            if (steep) {
 80057ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 80057f4:	88b8      	ldrh	r0, [r7, #4]
 80057f6:	88f9      	ldrh	r1, [r7, #6]
 80057f8:	8bfa      	ldrh	r2, [r7, #30]
 80057fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4613      	mov	r3, r2
 8005800:	2201      	movs	r2, #1
 8005802:	f7ff fd45 	bl	8005290 <Displ_FillArea>
 8005806:	e007      	b.n	8005818 <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 8005808:	88f8      	ldrh	r0, [r7, #6]
 800580a:	88b9      	ldrh	r1, [r7, #4]
 800580c:	8bfa      	ldrh	r2, [r7, #30]
 800580e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	2301      	movs	r3, #1
 8005814:	f7ff fd3c 	bl	8005290 <Displ_FillArea>
            }
            y0 += ystep;
 8005818:	88ba      	ldrh	r2, [r7, #4]
 800581a:	8b7b      	ldrh	r3, [r7, #26]
 800581c:	4413      	add	r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005822:	2300      	movs	r3, #0
 8005824:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005826:	8bbb      	ldrh	r3, [r7, #28]
 8005828:	3301      	adds	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	80fb      	strh	r3, [r7, #6]
            err += dx;
 800582e:	8b3a      	ldrh	r2, [r7, #24]
 8005830:	897b      	ldrh	r3, [r7, #10]
 8005832:	4413      	add	r3, r2
 8005834:	b29b      	uxth	r3, r3
 8005836:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005838:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800583c:	b29b      	uxth	r3, r3
 800583e:	3301      	adds	r3, #1
 8005840:	b29b      	uxth	r3, r3
 8005842:	83bb      	strh	r3, [r7, #28]
 8005844:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800584c:	429a      	cmp	r2, r3
 800584e:	ddbe      	ble.n	80057ce <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005850:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d019      	beq.n	800588c <Displ_Line+0x25c>
        if (steep) {
 8005858:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 8005860:	88b8      	ldrh	r0, [r7, #4]
 8005862:	88f9      	ldrh	r1, [r7, #6]
 8005864:	8bfb      	ldrh	r3, [r7, #30]
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	2201      	movs	r2, #1
 8005872:	f7ff fd0d 	bl	8005290 <Displ_FillArea>
 8005876:	e009      	b.n	800588c <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 8005878:	88f8      	ldrh	r0, [r7, #6]
 800587a:	88b9      	ldrh	r1, [r7, #4]
 800587c:	8bfb      	ldrh	r3, [r7, #30]
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	2301      	movs	r3, #1
 8005888:	f7ff fd02 	bl	8005290 <Displ_FillArea>
        }
    }
}
 800588c:	3724      	adds	r7, #36	; 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd90      	pop	{r4, r7, pc}

08005892 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005892:	b590      	push	{r4, r7, lr}
 8005894:	b091      	sub	sp, #68	; 0x44
 8005896:	af02      	add	r7, sp, #8
 8005898:	4604      	mov	r4, r0
 800589a:	4608      	mov	r0, r1
 800589c:	4611      	mov	r1, r2
 800589e:	461a      	mov	r2, r3
 80058a0:	4623      	mov	r3, r4
 80058a2:	80fb      	strh	r3, [r7, #6]
 80058a4:	4603      	mov	r3, r0
 80058a6:	80bb      	strh	r3, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	807b      	strh	r3, [r7, #2]
 80058ac:	4613      	mov	r3, r2
 80058ae:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80058b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80058b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	dd0b      	ble.n	80058d4 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80058bc:	88bb      	ldrh	r3, [r7, #4]
 80058be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80058c0:	883b      	ldrh	r3, [r7, #0]
 80058c2:	80bb      	strh	r3, [r7, #4]
 80058c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058c6:	803b      	strh	r3, [r7, #0]
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80058cc:	887b      	ldrh	r3, [r7, #2]
 80058ce:	80fb      	strh	r3, [r7, #6]
 80058d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058d2:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80058d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80058d8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80058dc:	429a      	cmp	r2, r3
 80058de:	dd0f      	ble.n	8005900 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80058e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80058e4:	847b      	strh	r3, [r7, #34]	; 0x22
 80058e6:	883b      	ldrh	r3, [r7, #0]
 80058e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80058ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058ee:	803b      	strh	r3, [r7, #0]
 80058f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058f4:	843b      	strh	r3, [r7, #32]
 80058f6:	887b      	ldrh	r3, [r7, #2]
 80058f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80058fc:	8c3b      	ldrh	r3, [r7, #32]
 80058fe:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8005900:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005904:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005908:	429a      	cmp	r2, r3
 800590a:	dd0b      	ble.n	8005924 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800590c:	88bb      	ldrh	r3, [r7, #4]
 800590e:	83fb      	strh	r3, [r7, #30]
 8005910:	883b      	ldrh	r3, [r7, #0]
 8005912:	80bb      	strh	r3, [r7, #4]
 8005914:	8bfb      	ldrh	r3, [r7, #30]
 8005916:	803b      	strh	r3, [r7, #0]
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	83bb      	strh	r3, [r7, #28]
 800591c:	887b      	ldrh	r3, [r7, #2]
 800591e:	80fb      	strh	r3, [r7, #6]
 8005920:	8bbb      	ldrh	r3, [r7, #28]
 8005922:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005924:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005928:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800592c:	429a      	cmp	r2, r3
 800592e:	d136      	bne.n	800599e <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005934:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005936:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005938:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800593c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005940:	429a      	cmp	r2, r3
 8005942:	da02      	bge.n	800594a <Displ_fillTriangle+0xb8>
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005948:	e007      	b.n	800595a <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800594a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800594e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005952:	429a      	cmp	r2, r3
 8005954:	dd01      	ble.n	800595a <Displ_fillTriangle+0xc8>
 8005956:	887b      	ldrh	r3, [r7, #2]
 8005958:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 800595a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800595e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005962:	429a      	cmp	r2, r3
 8005964:	da03      	bge.n	800596e <Displ_fillTriangle+0xdc>
 8005966:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800596a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800596c:	e008      	b.n	8005980 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 800596e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005972:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005976:	429a      	cmp	r2, r3
 8005978:	dd02      	ble.n	8005980 <Displ_fillTriangle+0xee>
 800597a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800597e:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005980:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005984:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005988:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800598c:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005990:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	4623      	mov	r3, r4
 8005998:	f7ff fe4a 	bl	8005630 <Displ_Line>
        return;
 800599c:	e0d2      	b.n	8005b44 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80059a8:	883a      	ldrh	r2, [r7, #0]
 80059aa:	88bb      	ldrh	r3, [r7, #4]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80059b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80059be:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80059c2:	88bb      	ldrh	r3, [r7, #4]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80059ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059ce:	887b      	ldrh	r3, [r7, #2]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80059d6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80059da:	883b      	ldrh	r3, [r7, #0]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	b29b      	uxth	r3, r3
 80059e0:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80059e2:	2300      	movs	r3, #0
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80059ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80059ee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d102      	bne.n	80059fc <Displ_fillTriangle+0x16a>
 80059f6:	883b      	ldrh	r3, [r7, #0]
 80059f8:	863b      	strh	r3, [r7, #48]	; 0x30
 80059fa:	e003      	b.n	8005a04 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80059fc:	883b      	ldrh	r3, [r7, #0]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005a04:	88bb      	ldrh	r3, [r7, #4]
 8005a06:	867b      	strh	r3, [r7, #50]	; 0x32
 8005a08:	e03d      	b.n	8005a86 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005a0a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	4413      	add	r3, r2
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005a1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005a32:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a38:	4413      	add	r3, r2
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005a3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a42:	4413      	add	r3, r2
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005a46:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005a4a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	dd05      	ble.n	8005a5e <Displ_fillTriangle+0x1cc>
 8005a52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a54:	81bb      	strh	r3, [r7, #12]
 8005a56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a58:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a5a:	89bb      	ldrh	r3, [r7, #12]
 8005a5c:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005a5e:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005a62:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005a66:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005a6a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005a6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4623      	mov	r3, r4
 8005a76:	f7ff fddb 	bl	8005630 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005a7a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3301      	adds	r3, #1
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	867b      	strh	r3, [r7, #50]	; 0x32
 8005a86:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005a8a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	ddbb      	ble.n	8005a0a <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005a92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a96:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005a9a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005a9e:	1a8a      	subs	r2, r1, r2
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005aa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005aaa:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005aae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005ab2:	1a8a      	subs	r2, r1, r2
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005aba:	e03d      	b.n	8005b38 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005abc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	4413      	add	r3, r2
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005ad0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	4413      	add	r3, r2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005ae4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aea:	4413      	add	r3, r2
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005aee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af4:	4413      	add	r3, r2
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005af8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005afc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005b00:	429a      	cmp	r2, r3
 8005b02:	dd05      	ble.n	8005b10 <Displ_fillTriangle+0x27e>
 8005b04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b06:	81fb      	strh	r3, [r7, #14]
 8005b08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b0a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005b10:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005b14:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005b18:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b1c:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005b20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4623      	mov	r3, r4
 8005b28:	f7ff fd82 	bl	8005630 <Displ_Line>
    for(; y<=y2; y++) {
 8005b2c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3301      	adds	r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b38:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005b3c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	ddbb      	ble.n	8005abc <Displ_fillTriangle+0x22a>
    }
}
 8005b44:	373c      	adds	r7, #60	; 0x3c
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd90      	pop	{r4, r7, pc}
	...

08005b4c <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	b590      	push	{r4, r7, lr}
 8005b50:	b08d      	sub	sp, #52	; 0x34
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
 8005b56:	4603      	mov	r3, r0
 8005b58:	80fb      	strh	r3, [r7, #6]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	80bb      	strh	r3, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 8005b62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b66:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 8005b68:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d102      	bne.n	8005b76 <Displ_WChar+0x2a>
        wsize<<= 1;
 8005b70:	7efb      	ldrb	r3, [r7, #27]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 8005b7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b7e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	3b20      	subs	r3, #32
 8005b8e:	4619      	mov	r1, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	fb01 f303 	mul.w	r3, r1, r3
 8005b96:	4413      	add	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 8005b9a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d005      	beq.n	8005bae <Displ_WChar+0x62>
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d107      	bne.n	8005bb6 <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 8005ba6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005baa:	61fb      	str	r3, [r7, #28]
            break;
 8005bac:	e005      	b.n	8005bba <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	61fb      	str	r3, [r7, #28]
            break;
 8005bb4:	e001      	b.n	8005bba <Displ_WChar+0x6e>
        default:
            mask=0x80;
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8005bba:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <Displ_WChar+0x1f0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005bc0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	b21a      	sxth	r2, r3
 8005bc8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005bcc:	0a1b      	lsrs	r3, r3, #8
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005bd8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	b21a      	sxth	r2, r3
 8005be0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf4:	e06f      	b.n	8005cd6 <Displ_WChar+0x18a>
        b=0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 8005bfa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d015      	beq.n	8005c2e <Displ_WChar+0xe2>
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d120      	bne.n	8005c48 <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	4413      	add	r3, r2
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	041a      	lsls	r2, r3, #16
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	3301      	adds	r3, #1
 8005c14:	6939      	ldr	r1, [r7, #16]
 8005c16:	440b      	add	r3, r1
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c20:	3202      	adds	r2, #2
 8005c22:	6939      	ldr	r1, [r7, #16]
 8005c24:	440a      	add	r2, r1
 8005c26:	7812      	ldrb	r2, [r2, #0]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005c2c:	e011      	b.n	8005c52 <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	4413      	add	r3, r2
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c3a:	3201      	adds	r2, #1
 8005c3c:	6939      	ldr	r1, [r7, #16]
 8005c3e:	440a      	add	r2, r1
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005c46:	e004      	b.n	8005c52 <Displ_WChar+0x106>
            default:
                b=pos[i];
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	4413      	add	r3, r2
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
 8005c56:	e032      	b.n	8005cbe <Displ_WChar+0x172>
            if((b << j) & mask)  {
 8005c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d014      	beq.n	8005c90 <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	623a      	str	r2, [r7, #32]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	897a      	ldrh	r2, [r7, #10]
 8005c74:	801a      	strh	r2, [r3, #0]
                if (size==2){
 8005c76:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d11c      	bne.n	8005cb8 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	623a      	str	r2, [r7, #32]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	897a      	ldrh	r2, [r7, #10]
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e013      	b.n	8005cb8 <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	623a      	str	r2, [r7, #32]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	893a      	ldrh	r2, [r7, #8]
 8005c9e:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005ca0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d107      	bne.n	8005cb8 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	623a      	str	r2, [r7, #32]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	893a      	ldrh	r2, [r7, #8]
 8005cb6:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	3301      	adds	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d3c6      	bcc.n	8005c58 <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 8005cca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	4413      	add	r3, r2
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d38b      	bcc.n	8005bf6 <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005ce4:	7efb      	ldrb	r3, [r7, #27]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	4413      	add	r3, r2
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29c      	uxth	r4, r3
 8005cf2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005cf6:	88bb      	ldrh	r3, [r7, #4]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	88b9      	ldrh	r1, [r7, #4]
 8005d02:	88f8      	ldrh	r0, [r7, #6]
 8005d04:	4622      	mov	r2, r4
 8005d06:	f7ff f9d7 	bl	80050b8 <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <Displ_WChar+0x1f0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff f977 	bl	8005006 <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005d18:	4b08      	ldr	r3, [pc, #32]	; (8005d3c <Displ_WChar+0x1f0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <Displ_WChar+0x1f4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d101      	bne.n	8005d26 <Displ_WChar+0x1da>
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <Displ_WChar+0x1f8>)
 8005d24:	e000      	b.n	8005d28 <Displ_WChar+0x1dc>
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <Displ_WChar+0x1f4>)
 8005d28:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <Displ_WChar+0x1f0>)
 8005d2a:	6013      	str	r3, [r2, #0]

}
 8005d2c:	bf00      	nop
 8005d2e:	3734      	adds	r7, #52	; 0x34
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005d36:	b002      	add	sp, #8
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	2000005c 	.word	0x2000005c
 8005d40:	200021f0 	.word	0x200021f0
 8005d44:	200025f0 	.word	0x200025f0

08005d48 <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005d48:	b082      	sub	sp, #8
 8005d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4c:	b08b      	sub	sp, #44	; 0x2c
 8005d4e:	af06      	add	r7, sp, #24
 8005d50:	603a      	str	r2, [r7, #0]
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d54:	4603      	mov	r3, r0
 8005d56:	80fb      	strh	r3, [r7, #6]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005d5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d5e:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 8005d60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d922      	bls.n	8005dae <Displ_WString+0x66>
        delta<<=1;
 8005d68:	89fb      	ldrh	r3, [r7, #14]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8005d6e:	e01e      	b.n	8005dae <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781a      	ldrb	r2, [r3, #0]
 8005d74:	88bd      	ldrh	r5, [r7, #4]
 8005d76:	88fc      	ldrh	r4, [r7, #6]
 8005d78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d7c:	9304      	str	r3, [sp, #16]
 8005d7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d80:	9303      	str	r3, [sp, #12]
 8005d82:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005d86:	9302      	str	r3, [sp, #8]
 8005d88:	466e      	mov	r6, sp
 8005d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d92:	e886 0003 	stmia.w	r6, {r0, r1}
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f7ff fed6 	bl	8005b4c <Displ_WChar>
        x += delta;
 8005da0:	88fa      	ldrh	r2, [r7, #6]
 8005da2:	89fb      	ldrh	r3, [r7, #14]
 8005da4:	4413      	add	r3, r2
 8005da6:	80fb      	strh	r3, [r7, #6]
        str++;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1dc      	bne.n	8005d70 <Displ_WString+0x28>
    }
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005dc2:	b002      	add	sp, #8
 8005dc4:	4770      	bx	lr
	...

08005dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005dcc:	f7ff f878 	bl	8004ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005dd0:	480c      	ldr	r0, [pc, #48]	; (8005e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8005dd2:	490d      	ldr	r1, [pc, #52]	; (8005e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005dd4:	4a0d      	ldr	r2, [pc, #52]	; (8005e0c <LoopForever+0xe>)
  movs r3, #0
 8005dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dd8:	e002      	b.n	8005de0 <LoopCopyDataInit>

08005dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dde:	3304      	adds	r3, #4

08005de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de4:	d3f9      	bcc.n	8005dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005de6:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005de8:	4c0a      	ldr	r4, [pc, #40]	; (8005e14 <LoopForever+0x16>)
  movs r3, #0
 8005dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dec:	e001      	b.n	8005df2 <LoopFillZerobss>

08005dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005df0:	3204      	adds	r2, #4

08005df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df4:	d3fb      	bcc.n	8005dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005df6:	f004 fe17 	bl	800aa28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005dfa:	f7fc feef 	bl	8002bdc <main>

08005dfe <LoopForever>:

LoopForever:
    b LoopForever
 8005dfe:	e7fe      	b.n	8005dfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e00:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e08:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005e0c:	0800e04c 	.word	0x0800e04c
  ldr r2, =_sbss
 8005e10:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005e14:	20002a0c 	.word	0x20002a0c

08005e18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e18:	e7fe      	b.n	8005e18 <ADC1_IRQHandler>
	...

08005e1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e20:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <HAL_Init+0x28>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a07      	ldr	r2, [pc, #28]	; (8005e44 <HAL_Init+0x28>)
 8005e26:	f043 0310 	orr.w	r3, r3, #16
 8005e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e2c:	2003      	movs	r0, #3
 8005e2e:	f000 f94f 	bl	80060d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e32:	200f      	movs	r0, #15
 8005e34:	f000 f808 	bl	8005e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e38:	f7fe fdbc 	bl	80049b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40022000 	.word	0x40022000

08005e48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_InitTick+0x54>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_InitTick+0x58>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f967 	bl	800613a <HAL_SYSTICK_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e00e      	b.n	8005e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b0f      	cmp	r3, #15
 8005e7a:	d80a      	bhi.n	8005e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	f000 f92f 	bl	80060e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e88:	4a06      	ldr	r2, [pc, #24]	; (8005ea4 <HAL_InitTick+0x5c>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e000      	b.n	8005e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000054 	.word	0x20000054
 8005ea0:	20000064 	.word	0x20000064
 8005ea4:	20000060 	.word	0x20000060

08005ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005eac:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <HAL_IncTick+0x20>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_IncTick+0x24>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <HAL_IncTick+0x24>)
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000064 	.word	0x20000064
 8005ecc:	200029f8 	.word	0x200029f8

08005ed0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  return uwTick;  
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <HAL_GetTick+0x14>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	200029f8 	.word	0x200029f8

08005ee8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ef0:	f7ff ffee 	bl	8005ed0 <HAL_GetTick>
 8005ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d005      	beq.n	8005f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <HAL_Delay+0x44>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005f0e:	bf00      	nop
 8005f10:	f7ff ffde 	bl	8005ed0 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d8f7      	bhi.n	8005f10 <HAL_Delay+0x28>
  {
  }
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000064 	.word	0x20000064

08005f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f40:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <__NVIC_SetPriorityGrouping+0x44>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f62:	4a04      	ldr	r2, [pc, #16]	; (8005f74 <__NVIC_SetPriorityGrouping+0x44>)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	60d3      	str	r3, [r2, #12]
}
 8005f68:	bf00      	nop
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f7c:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <__NVIC_GetPriorityGrouping+0x18>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	f003 0307 	and.w	r3, r3, #7
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	db0b      	blt.n	8005fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	f003 021f 	and.w	r2, r3, #31
 8005fac:	4907      	ldr	r1, [pc, #28]	; (8005fcc <__NVIC_EnableIRQ+0x38>)
 8005fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8005fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	e000e100 	.word	0xe000e100

08005fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	6039      	str	r1, [r7, #0]
 8005fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	db0a      	blt.n	8005ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	490c      	ldr	r1, [pc, #48]	; (800601c <__NVIC_SetPriority+0x4c>)
 8005fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fee:	0112      	lsls	r2, r2, #4
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff8:	e00a      	b.n	8006010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4908      	ldr	r1, [pc, #32]	; (8006020 <__NVIC_SetPriority+0x50>)
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	3b04      	subs	r3, #4
 8006008:	0112      	lsls	r2, r2, #4
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	440b      	add	r3, r1
 800600e:	761a      	strb	r2, [r3, #24]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	e000e100 	.word	0xe000e100
 8006020:	e000ed00 	.word	0xe000ed00

08006024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	; 0x24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f1c3 0307 	rsb	r3, r3, #7
 800603e:	2b04      	cmp	r3, #4
 8006040:	bf28      	it	cs
 8006042:	2304      	movcs	r3, #4
 8006044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3304      	adds	r3, #4
 800604a:	2b06      	cmp	r3, #6
 800604c:	d902      	bls.n	8006054 <NVIC_EncodePriority+0x30>
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	3b03      	subs	r3, #3
 8006052:	e000      	b.n	8006056 <NVIC_EncodePriority+0x32>
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006058:	f04f 32ff 	mov.w	r2, #4294967295
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43da      	mvns	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	401a      	ands	r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800606c:	f04f 31ff 	mov.w	r1, #4294967295
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	43d9      	mvns	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800607c:	4313      	orrs	r3, r2
         );
}
 800607e:	4618      	mov	r0, r3
 8006080:	3724      	adds	r7, #36	; 0x24
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800609c:	d301      	bcc.n	80060a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800609e:	2301      	movs	r3, #1
 80060a0:	e00f      	b.n	80060c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <SysTick_Config+0x40>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060aa:	210f      	movs	r1, #15
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	f7ff ff8e 	bl	8005fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <SysTick_Config+0x40>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ba:	4b04      	ldr	r3, [pc, #16]	; (80060cc <SysTick_Config+0x40>)
 80060bc:	2207      	movs	r2, #7
 80060be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	e000e010 	.word	0xe000e010

080060d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ff29 	bl	8005f30 <__NVIC_SetPriorityGrouping>
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	4603      	mov	r3, r0
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060f8:	f7ff ff3e 	bl	8005f78 <__NVIC_GetPriorityGrouping>
 80060fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	6978      	ldr	r0, [r7, #20]
 8006104:	f7ff ff8e 	bl	8006024 <NVIC_EncodePriority>
 8006108:	4602      	mov	r2, r0
 800610a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff ff5d 	bl	8005fd0 <__NVIC_SetPriority>
}
 8006116:	bf00      	nop
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	4603      	mov	r3, r0
 8006126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff31 	bl	8005f94 <__NVIC_EnableIRQ>
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff ffa2 	bl	800608c <SysTick_Config>
 8006148:	4603      	mov	r3, r0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e037      	b.n	80061d8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800617e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800618c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9b8 	bl	8006530 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}  
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_DMA_Start_IT+0x20>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e04a      	b.n	8006296 <HAL_DMA_Start_IT+0xb6>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800620e:	2b01      	cmp	r3, #1
 8006210:	d13a      	bne.n	8006288 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f94b 	bl	80064d2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 020e 	orr.w	r2, r2, #14
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e00f      	b.n	8006276 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 020a 	orr.w	r2, r2, #10
 8006264:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0204 	bic.w	r2, r2, #4
 8006274:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0201 	orr.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e005      	b.n	8006294 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006290:	2302      	movs	r3, #2
 8006292:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006294:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d008      	beq.n	80062c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2204      	movs	r2, #4
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e020      	b.n	8006304 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 020e 	bic.w	r2, r2, #14
 80062d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	2101      	movs	r1, #1
 80062ec:	fa01 f202 	lsl.w	r2, r1, r2
 80062f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006322:	2b02      	cmp	r3, #2
 8006324:	d005      	beq.n	8006332 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2204      	movs	r2, #4
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
 8006330:	e027      	b.n	8006382 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 020e 	bic.w	r2, r2, #14
 8006340:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0201 	bic.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	2101      	movs	r1, #1
 800635c:	fa01 f202 	lsl.w	r2, r1, r2
 8006360:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
    } 
  }
  return status;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	2204      	movs	r2, #4
 80063aa:	409a      	lsls	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d024      	beq.n	80063fe <HAL_DMA_IRQHandler+0x72>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d01f      	beq.n	80063fe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d107      	bne.n	80063dc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0204 	bic.w	r2, r2, #4
 80063da:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	2104      	movs	r1, #4
 80063e6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ea:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d06a      	beq.n	80064ca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80063fc:	e065      	b.n	80064ca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	2202      	movs	r2, #2
 8006404:	409a      	lsls	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d02c      	beq.n	8006468 <HAL_DMA_IRQHandler+0xdc>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d027      	beq.n	8006468 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 020a 	bic.w	r2, r2, #10
 8006434:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	2102      	movs	r1, #2
 8006448:	fa01 f202 	lsl.w	r2, r1, r2
 800644c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d035      	beq.n	80064ca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006466:	e030      	b.n	80064ca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	2208      	movs	r2, #8
 800646e:	409a      	lsls	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d028      	beq.n	80064ca <HAL_DMA_IRQHandler+0x13e>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d023      	beq.n	80064ca <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 020e 	bic.w	r2, r2, #14
 8006490:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	2101      	movs	r1, #1
 800649c:	fa01 f202 	lsl.w	r2, r1, r2
 80064a0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
    }
  }
}  
 80064c8:	e7ff      	b.n	80064ca <HAL_DMA_IRQHandler+0x13e>
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f202 	lsl.w	r2, r1, r2
 80064ee:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d108      	bne.n	8006512 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006510:	e007      	b.n	8006522 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	60da      	str	r2, [r3, #12]
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <DMA_CalcBaseAndBitshift+0x34>)
 8006540:	4413      	add	r3, r2
 8006542:	4a09      	ldr	r2, [pc, #36]	; (8006568 <DMA_CalcBaseAndBitshift+0x38>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	009a      	lsls	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a06      	ldr	r2, [pc, #24]	; (800656c <DMA_CalcBaseAndBitshift+0x3c>)
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	bffdfff8 	.word	0xbffdfff8
 8006568:	cccccccd 	.word	0xcccccccd
 800656c:	40020000 	.word	0x40020000

08006570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800657e:	e14e      	b.n	800681e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	2101      	movs	r1, #1
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	4013      	ands	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8140 	beq.w	8006818 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d005      	beq.n	80065b0 <HAL_GPIO_Init+0x40>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d130      	bne.n	8006612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	2203      	movs	r2, #3
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43db      	mvns	r3, r3
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4013      	ands	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065e6:	2201      	movs	r2, #1
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	43db      	mvns	r3, r3
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4013      	ands	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	f003 0201 	and.w	r2, r3, #1
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d017      	beq.n	800664e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	2203      	movs	r2, #3
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43db      	mvns	r3, r3
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4013      	ands	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d123      	bne.n	80066a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	08da      	lsrs	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3208      	adds	r2, #8
 8006662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	220f      	movs	r2, #15
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	43db      	mvns	r3, r3
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4013      	ands	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	08da      	lsrs	r2, r3, #3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3208      	adds	r2, #8
 800669c:	6939      	ldr	r1, [r7, #16]
 800669e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	2203      	movs	r2, #3
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43db      	mvns	r3, r3
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4013      	ands	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f003 0203 	and.w	r2, r3, #3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 809a 	beq.w	8006818 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066e4:	4b55      	ldr	r3, [pc, #340]	; (800683c <HAL_GPIO_Init+0x2cc>)
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	4a54      	ldr	r2, [pc, #336]	; (800683c <HAL_GPIO_Init+0x2cc>)
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	6193      	str	r3, [r2, #24]
 80066f0:	4b52      	ldr	r3, [pc, #328]	; (800683c <HAL_GPIO_Init+0x2cc>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80066fc:	4a50      	ldr	r2, [pc, #320]	; (8006840 <HAL_GPIO_Init+0x2d0>)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	089b      	lsrs	r3, r3, #2
 8006702:	3302      	adds	r3, #2
 8006704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	220f      	movs	r2, #15
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4013      	ands	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006726:	d013      	beq.n	8006750 <HAL_GPIO_Init+0x1e0>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a46      	ldr	r2, [pc, #280]	; (8006844 <HAL_GPIO_Init+0x2d4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00d      	beq.n	800674c <HAL_GPIO_Init+0x1dc>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a45      	ldr	r2, [pc, #276]	; (8006848 <HAL_GPIO_Init+0x2d8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d007      	beq.n	8006748 <HAL_GPIO_Init+0x1d8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a44      	ldr	r2, [pc, #272]	; (800684c <HAL_GPIO_Init+0x2dc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d101      	bne.n	8006744 <HAL_GPIO_Init+0x1d4>
 8006740:	2303      	movs	r3, #3
 8006742:	e006      	b.n	8006752 <HAL_GPIO_Init+0x1e2>
 8006744:	2305      	movs	r3, #5
 8006746:	e004      	b.n	8006752 <HAL_GPIO_Init+0x1e2>
 8006748:	2302      	movs	r3, #2
 800674a:	e002      	b.n	8006752 <HAL_GPIO_Init+0x1e2>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_GPIO_Init+0x1e2>
 8006750:	2300      	movs	r3, #0
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	f002 0203 	and.w	r2, r2, #3
 8006758:	0092      	lsls	r2, r2, #2
 800675a:	4093      	lsls	r3, r2
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006762:	4937      	ldr	r1, [pc, #220]	; (8006840 <HAL_GPIO_Init+0x2d0>)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	089b      	lsrs	r3, r3, #2
 8006768:	3302      	adds	r3, #2
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006770:	4b37      	ldr	r3, [pc, #220]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	43db      	mvns	r3, r3
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4013      	ands	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006794:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800679a:	4b2d      	ldr	r3, [pc, #180]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	43db      	mvns	r3, r3
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4013      	ands	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80067be:	4a24      	ldr	r2, [pc, #144]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067c4:	4b22      	ldr	r3, [pc, #136]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4013      	ands	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80067e8:	4a19      	ldr	r2, [pc, #100]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067ee:	4b18      	ldr	r3, [pc, #96]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	43db      	mvns	r3, r3
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4013      	ands	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006812:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <HAL_GPIO_Init+0x2e0>)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3301      	adds	r3, #1
 800681c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	f47f aea9 	bne.w	8006580 <HAL_GPIO_Init+0x10>
  }
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40021000 	.word	0x40021000
 8006840:	40010000 	.word	0x40010000
 8006844:	48000400 	.word	0x48000400
 8006848:	48000800 	.word	0x48000800
 800684c:	48000c00 	.word	0x48000c00
 8006850:	40010400 	.word	0x40010400

08006854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800686c:	2301      	movs	r3, #1
 800686e:	73fb      	strb	r3, [r7, #15]
 8006870:	e001      	b.n	8006876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	807b      	strh	r3, [r7, #2]
 8006890:	4613      	mov	r3, r2
 8006892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006894:	787b      	ldrb	r3, [r7, #1]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800689a:	887a      	ldrh	r2, [r7, #2]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068a0:	e002      	b.n	80068a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068a2:	887a      	ldrh	r2, [r7, #2]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068be:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068c0:	695a      	ldr	r2, [r3, #20]
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d006      	beq.n	80068d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068ca:	4a05      	ldr	r2, [pc, #20]	; (80068e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fc fbec 	bl	80030b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	40010400 	.word	0x40010400

080068e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e081      	b.n	80069fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe f876 	bl	80049fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2224      	movs	r2, #36	; 0x24
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0201 	bic.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d107      	bne.n	800695e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800695a:	609a      	str	r2, [r3, #8]
 800695c:	e006      	b.n	800696c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800696a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d104      	bne.n	800697e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800697c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800698c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69d9      	ldr	r1, [r3, #28]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	817b      	strh	r3, [r7, #10]
 8006a16:	460b      	mov	r3, r1
 8006a18:	813b      	strh	r3, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	f040 80f9 	bne.w	8006c1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_I2C_Mem_Write+0x34>
 8006a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0ed      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_I2C_Mem_Write+0x4e>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e0e6      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a5a:	f7ff fa39 	bl	8005ed0 <HAL_GetTick>
 8006a5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	2319      	movs	r3, #25
 8006a66:	2201      	movs	r2, #1
 8006a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fbcd 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0d1      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2221      	movs	r2, #33	; 0x21
 8006a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2240      	movs	r2, #64	; 0x40
 8006a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aa4:	88f8      	ldrh	r0, [r7, #6]
 8006aa6:	893a      	ldrh	r2, [r7, #8]
 8006aa8:	8979      	ldrh	r1, [r7, #10]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fadd 	bl	8007074 <I2C_RequestMemoryWrite>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0a9      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2bff      	cmp	r3, #255	; 0xff
 8006ad4:	d90e      	bls.n	8006af4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	22ff      	movs	r2, #255	; 0xff
 8006ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	8979      	ldrh	r1, [r7, #10]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fd47 	bl	8007580 <I2C_TransferConfig>
 8006af2:	e00f      	b.n	8006b14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	8979      	ldrh	r1, [r7, #10]
 8006b06:	2300      	movs	r3, #0
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 fd36 	bl	8007580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 fbc6 	bl	80072aa <I2C_WaitOnTXISFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e07b      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d034      	beq.n	8006bcc <HAL_I2C_Mem_Write+0x1c8>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d130      	bne.n	8006bcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	2200      	movs	r2, #0
 8006b72:	2180      	movs	r1, #128	; 0x80
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fb49 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e04d      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2bff      	cmp	r3, #255	; 0xff
 8006b8c:	d90e      	bls.n	8006bac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	22ff      	movs	r2, #255	; 0xff
 8006b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	8979      	ldrh	r1, [r7, #10]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 fceb 	bl	8007580 <I2C_TransferConfig>
 8006baa:	e00f      	b.n	8006bcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	8979      	ldrh	r1, [r7, #10]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fcda 	bl	8007580 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d19e      	bne.n	8006b14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 fbac 	bl	8007338 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e01a      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6859      	ldr	r1, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <HAL_I2C_Mem_Write+0x224>)
 8006bfe:	400b      	ands	r3, r1
 8006c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e000      	b.n	8006c20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c1e:	2302      	movs	r3, #2
  }
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	fe00e800 	.word	0xfe00e800

08006c2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	813b      	strh	r3, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	f040 80fd 	bne.w	8006e4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_I2C_Mem_Read+0x34>
 8006c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0f1      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_I2C_Mem_Read+0x4e>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e0ea      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c82:	f7ff f925 	bl	8005ed0 <HAL_GetTick>
 8006c86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2319      	movs	r3, #25
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 fab9 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0d5      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2222      	movs	r2, #34	; 0x22
 8006ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2240      	movs	r2, #64	; 0x40
 8006cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a3a      	ldr	r2, [r7, #32]
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ccc:	88f8      	ldrh	r0, [r7, #6]
 8006cce:	893a      	ldrh	r2, [r7, #8]
 8006cd0:	8979      	ldrh	r1, [r7, #10]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	4603      	mov	r3, r0
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 fa1d 	bl	800711c <I2C_RequestMemoryRead>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0ad      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2bff      	cmp	r3, #255	; 0xff
 8006cfc:	d90e      	bls.n	8006d1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	22ff      	movs	r2, #255	; 0xff
 8006d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	8979      	ldrh	r1, [r7, #10]
 8006d0c:	4b52      	ldr	r3, [pc, #328]	; (8006e58 <HAL_I2C_Mem_Read+0x22c>)
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fc33 	bl	8007580 <I2C_TransferConfig>
 8006d1a:	e00f      	b.n	8006d3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	8979      	ldrh	r1, [r7, #10]
 8006d2e:	4b4a      	ldr	r3, [pc, #296]	; (8006e58 <HAL_I2C_Mem_Read+0x22c>)
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fc22 	bl	8007580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	2200      	movs	r2, #0
 8006d44:	2104      	movs	r1, #4
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fa60 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e07c      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d034      	beq.n	8006dfc <HAL_I2C_Mem_Read+0x1d0>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d130      	bne.n	8006dfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	2200      	movs	r2, #0
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa31 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e04d      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2bff      	cmp	r3, #255	; 0xff
 8006dbc:	d90e      	bls.n	8006ddc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	22ff      	movs	r2, #255	; 0xff
 8006dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	8979      	ldrh	r1, [r7, #10]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fbd3 	bl	8007580 <I2C_TransferConfig>
 8006dda:	e00f      	b.n	8006dfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	8979      	ldrh	r1, [r7, #10]
 8006dee:	2300      	movs	r3, #0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fbc2 	bl	8007580 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d19a      	bne.n	8006d3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fa94 	bl	8007338 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e01a      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6859      	ldr	r1, [r3, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_I2C_Mem_Read+0x230>)
 8006e2e:	400b      	ands	r3, r1
 8006e30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e000      	b.n	8006e50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006e4e:	2302      	movs	r3, #2
  }
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	80002400 	.word	0x80002400
 8006e5c:	fe00e800 	.word	0xfe00e800

08006e60 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	; 0x28
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	f040 80f3 	bne.w	8007068 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e90:	d101      	bne.n	8006e96 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
 8006e94:	e0e9      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_I2C_IsDeviceReady+0x44>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e0e2      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2224      	movs	r2, #36	; 0x24
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d107      	bne.n	8006ed2 <HAL_I2C_IsDeviceReady+0x72>
 8006ec2:	897b      	ldrh	r3, [r7, #10]
 8006ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ed0:	e006      	b.n	8006ee0 <HAL_I2C_IsDeviceReady+0x80>
 8006ed2:	897b      	ldrh	r3, [r7, #10]
 8006ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006edc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006ee6:	f7fe fff3 	bl	8005ed0 <HAL_GetTick>
 8006eea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	bf0c      	ite	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	2300      	movne	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b10      	cmp	r3, #16
 8006f0e:	bf0c      	ite	eq
 8006f10:	2301      	moveq	r3, #1
 8006f12:	2300      	movne	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006f18:	e034      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d01a      	beq.n	8006f58 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f22:	f7fe ffd5 	bl	8005ed0 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <HAL_I2C_IsDeviceReady+0xd8>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10f      	bne.n	8006f58 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	f043 0220 	orr.w	r2, r3, #32
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e088      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	bf0c      	ite	eq
 8006f7c:	2301      	moveq	r3, #1
 8006f7e:	2300      	movne	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006f84:	7ffb      	ldrb	r3, [r7, #31]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <HAL_I2C_IsDeviceReady+0x130>
 8006f8a:	7fbb      	ldrb	r3, [r7, #30]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0c4      	beq.n	8006f1a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d01a      	beq.n	8006fd4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2120      	movs	r1, #32
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f92f 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e058      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e04a      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2120      	movs	r1, #32
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f914 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e03d      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	429a      	cmp	r2, r3
 8007004:	d118      	bne.n	8007038 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007014:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2200      	movs	r2, #0
 800701e:	2120      	movs	r1, #32
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f8f3 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e01c      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2220      	movs	r2, #32
 8007036:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	3301      	adds	r3, #1
 800703c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	429a      	cmp	r2, r3
 8007044:	f63f af39 	bhi.w	8006eba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007054:	f043 0220 	orr.w	r2, r3, #32
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8007068:	2302      	movs	r3, #2
  }
}
 800706a:	4618      	mov	r0, r3
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af02      	add	r7, sp, #8
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	461a      	mov	r2, r3
 8007082:	4603      	mov	r3, r0
 8007084:	817b      	strh	r3, [r7, #10]
 8007086:	460b      	mov	r3, r1
 8007088:	813b      	strh	r3, [r7, #8]
 800708a:	4613      	mov	r3, r2
 800708c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	8979      	ldrh	r1, [r7, #10]
 8007094:	4b20      	ldr	r3, [pc, #128]	; (8007118 <I2C_RequestMemoryWrite+0xa4>)
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fa6f 	bl	8007580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	69b9      	ldr	r1, [r7, #24]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f8ff 	bl	80072aa <I2C_WaitOnTXISFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e02c      	b.n	8007110 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d105      	bne.n	80070c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070bc:	893b      	ldrh	r3, [r7, #8]
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	629a      	str	r2, [r3, #40]	; 0x28
 80070c6:	e015      	b.n	80070f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80070c8:	893b      	ldrh	r3, [r7, #8]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f8e5 	bl	80072aa <I2C_WaitOnTXISFlagUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e012      	b.n	8007110 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070ea:	893b      	ldrh	r3, [r7, #8]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2200      	movs	r2, #0
 80070fc:	2180      	movs	r1, #128	; 0x80
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f884 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	80002000 	.word	0x80002000

0800711c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	4608      	mov	r0, r1
 8007126:	4611      	mov	r1, r2
 8007128:	461a      	mov	r2, r3
 800712a:	4603      	mov	r3, r0
 800712c:	817b      	strh	r3, [r7, #10]
 800712e:	460b      	mov	r3, r1
 8007130:	813b      	strh	r3, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	b2da      	uxtb	r2, r3
 800713a:	8979      	ldrh	r1, [r7, #10]
 800713c:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <I2C_RequestMemoryRead+0xa4>)
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2300      	movs	r3, #0
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fa1c 	bl	8007580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	69b9      	ldr	r1, [r7, #24]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f8ac 	bl	80072aa <I2C_WaitOnTXISFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e02c      	b.n	80071b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d105      	bne.n	800716e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007162:	893b      	ldrh	r3, [r7, #8]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	629a      	str	r2, [r3, #40]	; 0x28
 800716c:	e015      	b.n	800719a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800716e:	893b      	ldrh	r3, [r7, #8]
 8007170:	0a1b      	lsrs	r3, r3, #8
 8007172:	b29b      	uxth	r3, r3
 8007174:	b2da      	uxtb	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	69b9      	ldr	r1, [r7, #24]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f892 	bl	80072aa <I2C_WaitOnTXISFlagUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e012      	b.n	80071b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007190:	893b      	ldrh	r3, [r7, #8]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2140      	movs	r1, #64	; 0x40
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f831 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	80002000 	.word	0x80002000

080071c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d103      	bne.n	80071e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2200      	movs	r2, #0
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d007      	beq.n	8007200 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	619a      	str	r2, [r3, #24]
  }
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800721c:	e031      	b.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007224:	d02d      	beq.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007226:	f7fe fe53 	bl	8005ed0 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d302      	bcc.n	800723c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d122      	bne.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4013      	ands	r3, r2
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	bf0c      	ite	eq
 800724c:	2301      	moveq	r3, #1
 800724e:	2300      	movne	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	429a      	cmp	r2, r3
 8007258:	d113      	bne.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725e:	f043 0220 	orr.w	r2, r3, #32
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e00f      	b.n	80072a2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	429a      	cmp	r2, r3
 800729e:	d0be      	beq.n	800721e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072b6:	e033      	b.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f87f 	bl	80073c0 <I2C_IsErrorOccurred>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e031      	b.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d025      	beq.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d4:	f7fe fdfc 	bl	8005ed0 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d302      	bcc.n	80072ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d11a      	bne.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d013      	beq.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e007      	b.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d1c4      	bne.n	80072b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007344:	e02f      	b.n	80073a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f838 	bl	80073c0 <I2C_IsErrorOccurred>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e02d      	b.n	80073b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735a:	f7fe fdb9 	bl	8005ed0 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11a      	bne.n	80073a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b20      	cmp	r3, #32
 800737c:	d013      	beq.n	80073a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e007      	b.n	80073b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d1c8      	bne.n	8007346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08a      	sub	sp, #40	; 0x28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d068      	beq.n	80074be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2210      	movs	r2, #16
 80073f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073f4:	e049      	b.n	800748a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fc:	d045      	beq.n	800748a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073fe:	f7fe fd67 	bl	8005ed0 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	d302      	bcc.n	8007414 <I2C_IsErrorOccurred+0x54>
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d13a      	bne.n	800748a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007426:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007436:	d121      	bne.n	800747c <I2C_IsErrorOccurred+0xbc>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800743e:	d01d      	beq.n	800747c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007440:	7cfb      	ldrb	r3, [r7, #19]
 8007442:	2b20      	cmp	r3, #32
 8007444:	d01a      	beq.n	800747c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007454:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007456:	f7fe fd3b 	bl	8005ed0 <HAL_GetTick>
 800745a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800745c:	e00e      	b.n	800747c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800745e:	f7fe fd37 	bl	8005ed0 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b19      	cmp	r3, #25
 800746a:	d907      	bls.n	800747c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f043 0320 	orr.w	r3, r3, #32
 8007472:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800747a:	e006      	b.n	800748a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b20      	cmp	r3, #32
 8007488:	d1e9      	bne.n	800745e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b20      	cmp	r3, #32
 8007496:	d003      	beq.n	80074a0 <I2C_IsErrorOccurred+0xe0>
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0aa      	beq.n	80073f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2220      	movs	r2, #32
 80074ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	f043 0304 	orr.w	r3, r3, #4
 80074b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f043 0301 	orr.w	r3, r3, #1
 80074d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f043 0308 	orr.w	r3, r3, #8
 80074f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007502:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f043 0302 	orr.w	r3, r3, #2
 800751a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800752c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01c      	beq.n	800756e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fe45 	bl	80071c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b0d      	ldr	r3, [pc, #52]	; (800757c <I2C_IsErrorOccurred+0x1bc>)
 8007546:	400b      	ands	r3, r1
 8007548:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	431a      	orrs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800756e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007572:	4618      	mov	r0, r3
 8007574:	3728      	adds	r7, #40	; 0x28
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	fe00e800 	.word	0xfe00e800

08007580 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	817b      	strh	r3, [r7, #10]
 800758e:	4613      	mov	r3, r2
 8007590:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007592:	897b      	ldrh	r3, [r7, #10]
 8007594:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007598:	7a7b      	ldrb	r3, [r7, #9]
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	0d5b      	lsrs	r3, r3, #21
 80075ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075be:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <I2C_TransferConfig+0x60>)
 80075c0:	430b      	orrs	r3, r1
 80075c2:	43db      	mvns	r3, r3
 80075c4:	ea02 0103 	and.w	r1, r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	03ff63ff 	.word	0x03ff63ff

080075e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d138      	bne.n	800766c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007604:	2302      	movs	r3, #2
 8007606:	e032      	b.n	800766e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2224      	movs	r2, #36	; 0x24
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0201 	bic.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6819      	ldr	r1, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b20      	cmp	r3, #32
 800768e:	d139      	bne.n	8007704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800769a:	2302      	movs	r3, #2
 800769c:	e033      	b.n	8007706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2224      	movs	r2, #36	; 0x24
 80076aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0201 	bic.w	r2, r2, #1
 80076bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	e000      	b.n	8007706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007704:	2302      	movs	r3, #2
  }
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
	...

08007714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800771a:	af00      	add	r7, sp, #0
 800771c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007724:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800772a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d102      	bne.n	800773a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	f001 b823 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800773a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 817d 	beq.w	8007a4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007750:	4bbc      	ldr	r3, [pc, #752]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 030c 	and.w	r3, r3, #12
 8007758:	2b04      	cmp	r3, #4
 800775a:	d00c      	beq.n	8007776 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800775c:	4bb9      	ldr	r3, [pc, #740]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f003 030c 	and.w	r3, r3, #12
 8007764:	2b08      	cmp	r3, #8
 8007766:	d15c      	bne.n	8007822 <HAL_RCC_OscConfig+0x10e>
 8007768:	4bb6      	ldr	r3, [pc, #728]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007774:	d155      	bne.n	8007822 <HAL_RCC_OscConfig+0x10e>
 8007776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800777a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800777e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007782:	fa93 f3a3 	rbit	r3, r3
 8007786:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800778a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800778e:	fab3 f383 	clz	r3, r3
 8007792:	b2db      	uxtb	r3, r3
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d102      	bne.n	80077a8 <HAL_RCC_OscConfig+0x94>
 80077a2:	4ba8      	ldr	r3, [pc, #672]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	e015      	b.n	80077d4 <HAL_RCC_OscConfig+0xc0>
 80077a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80077b4:	fa93 f3a3 	rbit	r3, r3
 80077b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80077bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80077c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80077c8:	fa93 f3a3 	rbit	r3, r3
 80077cc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80077d0:	4b9c      	ldr	r3, [pc, #624]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80077dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80077e0:	fa92 f2a2 	rbit	r2, r2
 80077e4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80077e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80077ec:	fab2 f282 	clz	r2, r2
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	f042 0220 	orr.w	r2, r2, #32
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	f002 021f 	and.w	r2, r2, #31
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 811f 	beq.w	8007a48 <HAL_RCC_OscConfig+0x334>
 800780a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800780e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f040 8116 	bne.w	8007a48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f000 bfaf 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007832:	d106      	bne.n	8007842 <HAL_RCC_OscConfig+0x12e>
 8007834:	4b83      	ldr	r3, [pc, #524]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a82      	ldr	r2, [pc, #520]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 800783a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e036      	b.n	80078b0 <HAL_RCC_OscConfig+0x19c>
 8007842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10c      	bne.n	800786c <HAL_RCC_OscConfig+0x158>
 8007852:	4b7c      	ldr	r3, [pc, #496]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a7b      	ldr	r2, [pc, #492]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	4b79      	ldr	r3, [pc, #484]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a78      	ldr	r2, [pc, #480]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e021      	b.n	80078b0 <HAL_RCC_OscConfig+0x19c>
 800786c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007870:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800787c:	d10c      	bne.n	8007898 <HAL_RCC_OscConfig+0x184>
 800787e:	4b71      	ldr	r3, [pc, #452]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a70      	ldr	r2, [pc, #448]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4b6e      	ldr	r3, [pc, #440]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a6d      	ldr	r2, [pc, #436]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	e00b      	b.n	80078b0 <HAL_RCC_OscConfig+0x19c>
 8007898:	4b6a      	ldr	r3, [pc, #424]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a69      	ldr	r2, [pc, #420]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b67      	ldr	r3, [pc, #412]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a66      	ldr	r2, [pc, #408]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 80078aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80078b0:	4b64      	ldr	r3, [pc, #400]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	f023 020f 	bic.w	r2, r3, #15
 80078b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	495f      	ldr	r1, [pc, #380]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d059      	beq.n	800798e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078da:	f7fe faf9 	bl	8005ed0 <HAL_GetTick>
 80078de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e2:	e00a      	b.n	80078fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e4:	f7fe faf4 	bl	8005ed0 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b64      	cmp	r3, #100	; 0x64
 80078f2:	d902      	bls.n	80078fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	f000 bf43 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
 80078fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007902:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007906:	fa93 f3a3 	rbit	r3, r3
 800790a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800790e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007912:	fab3 f383 	clz	r3, r3
 8007916:	b2db      	uxtb	r3, r3
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	d102      	bne.n	800792c <HAL_RCC_OscConfig+0x218>
 8007926:	4b47      	ldr	r3, [pc, #284]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	e015      	b.n	8007958 <HAL_RCC_OscConfig+0x244>
 800792c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007930:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007934:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007938:	fa93 f3a3 	rbit	r3, r3
 800793c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007944:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007948:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007954:	4b3b      	ldr	r3, [pc, #236]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800795c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007960:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007964:	fa92 f2a2 	rbit	r2, r2
 8007968:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800796c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007970:	fab2 f282 	clz	r2, r2
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	f042 0220 	orr.w	r2, r2, #32
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	f002 021f 	and.w	r2, r2, #31
 8007980:	2101      	movs	r1, #1
 8007982:	fa01 f202 	lsl.w	r2, r1, r2
 8007986:	4013      	ands	r3, r2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0ab      	beq.n	80078e4 <HAL_RCC_OscConfig+0x1d0>
 800798c:	e05d      	b.n	8007a4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798e:	f7fe fa9f 	bl	8005ed0 <HAL_GetTick>
 8007992:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007996:	e00a      	b.n	80079ae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007998:	f7fe fa9a 	bl	8005ed0 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b64      	cmp	r3, #100	; 0x64
 80079a6:	d902      	bls.n	80079ae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	f000 bee9 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
 80079ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079b2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80079ba:	fa93 f3a3 	rbit	r3, r3
 80079be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80079c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079c6:	fab3 f383 	clz	r3, r3
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f043 0301 	orr.w	r3, r3, #1
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d102      	bne.n	80079e0 <HAL_RCC_OscConfig+0x2cc>
 80079da:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	e015      	b.n	8007a0c <HAL_RCC_OscConfig+0x2f8>
 80079e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079e4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80079ec:	fa93 f3a3 	rbit	r3, r3
 80079f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80079f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80079fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007a00:	fa93 f3a3 	rbit	r3, r3
 8007a04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007a08:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <HAL_RCC_OscConfig+0x330>)
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a10:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007a14:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007a18:	fa92 f2a2 	rbit	r2, r2
 8007a1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007a20:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007a24:	fab2 f282 	clz	r2, r2
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	f042 0220 	orr.w	r2, r2, #32
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	f002 021f 	and.w	r2, r2, #31
 8007a34:	2101      	movs	r1, #1
 8007a36:	fa01 f202 	lsl.w	r2, r1, r2
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1ab      	bne.n	8007998 <HAL_RCC_OscConfig+0x284>
 8007a40:	e003      	b.n	8007a4a <HAL_RCC_OscConfig+0x336>
 8007a42:	bf00      	nop
 8007a44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 817d 	beq.w	8007d5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007a60:	4ba6      	ldr	r3, [pc, #664]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f003 030c 	and.w	r3, r3, #12
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a6c:	4ba3      	ldr	r3, [pc, #652]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f003 030c 	and.w	r3, r3, #12
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d172      	bne.n	8007b5e <HAL_RCC_OscConfig+0x44a>
 8007a78:	4ba0      	ldr	r3, [pc, #640]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d16c      	bne.n	8007b5e <HAL_RCC_OscConfig+0x44a>
 8007a84:	2302      	movs	r3, #2
 8007a86:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007a8e:	fa93 f3a3 	rbit	r3, r3
 8007a92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007a96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a9a:	fab3 f383 	clz	r3, r3
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d102      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x3a0>
 8007aae:	4b93      	ldr	r3, [pc, #588]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	e013      	b.n	8007adc <HAL_RCC_OscConfig+0x3c8>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007abe:	fa93 f3a3 	rbit	r3, r3
 8007ac2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007acc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007ad0:	fa93 f3a3 	rbit	r3, r3
 8007ad4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007ad8:	4b88      	ldr	r3, [pc, #544]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	2202      	movs	r2, #2
 8007ade:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007ae2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007ae6:	fa92 f2a2 	rbit	r2, r2
 8007aea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007aee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007af2:	fab2 f282 	clz	r2, r2
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	f042 0220 	orr.w	r2, r2, #32
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	f002 021f 	and.w	r2, r2, #31
 8007b02:	2101      	movs	r1, #1
 8007b04:	fa01 f202 	lsl.w	r2, r1, r2
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <HAL_RCC_OscConfig+0x410>
 8007b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d002      	beq.n	8007b24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	f000 be2e 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b24:	4b75      	ldr	r3, [pc, #468]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	21f8      	movs	r1, #248	; 0xf8
 8007b3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007b42:	fa91 f1a1 	rbit	r1, r1
 8007b46:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007b4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007b4e:	fab1 f181 	clz	r1, r1
 8007b52:	b2c9      	uxtb	r1, r1
 8007b54:	408b      	lsls	r3, r1
 8007b56:	4969      	ldr	r1, [pc, #420]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b5c:	e0fd      	b.n	8007d5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8088 	beq.w	8007c80 <HAL_RCC_OscConfig+0x56c>
 8007b70:	2301      	movs	r3, #1
 8007b72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007b7a:	fa93 f3a3 	rbit	r3, r3
 8007b7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007b82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b86:	fab3 f383 	clz	r3, r3
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	461a      	mov	r2, r3
 8007b98:	2301      	movs	r3, #1
 8007b9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9c:	f7fe f998 	bl	8005ed0 <HAL_GetTick>
 8007ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba4:	e00a      	b.n	8007bbc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ba6:	f7fe f993 	bl	8005ed0 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d902      	bls.n	8007bbc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	f000 bde2 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007bc6:	fa93 f3a3 	rbit	r3, r3
 8007bca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007bce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bd2:	fab3 f383 	clz	r3, r3
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f043 0301 	orr.w	r3, r3, #1
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d102      	bne.n	8007bec <HAL_RCC_OscConfig+0x4d8>
 8007be6:	4b45      	ldr	r3, [pc, #276]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	e013      	b.n	8007c14 <HAL_RCC_OscConfig+0x500>
 8007bec:	2302      	movs	r3, #2
 8007bee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007bf6:	fa93 f3a3 	rbit	r3, r3
 8007bfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007bfe:	2302      	movs	r3, #2
 8007c00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007c04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007c08:	fa93 f3a3 	rbit	r3, r3
 8007c0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007c10:	4b3a      	ldr	r3, [pc, #232]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2202      	movs	r2, #2
 8007c16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007c1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007c1e:	fa92 f2a2 	rbit	r2, r2
 8007c22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007c26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007c2a:	fab2 f282 	clz	r2, r2
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	f042 0220 	orr.w	r2, r2, #32
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	f002 021f 	and.w	r2, r2, #31
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0af      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c46:	4b2d      	ldr	r3, [pc, #180]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	21f8      	movs	r1, #248	; 0xf8
 8007c5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007c64:	fa91 f1a1 	rbit	r1, r1
 8007c68:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007c6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007c70:	fab1 f181 	clz	r1, r1
 8007c74:	b2c9      	uxtb	r1, r1
 8007c76:	408b      	lsls	r3, r1
 8007c78:	4920      	ldr	r1, [pc, #128]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]
 8007c7e:	e06c      	b.n	8007d5a <HAL_RCC_OscConfig+0x646>
 8007c80:	2301      	movs	r3, #1
 8007c82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007c8a:	fa93 f3a3 	rbit	r3, r3
 8007c8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007c92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c96:	fab3 f383 	clz	r3, r3
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ca0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	2300      	movs	r3, #0
 8007caa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cac:	f7fe f910 	bl	8005ed0 <HAL_GetTick>
 8007cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cb4:	e00a      	b.n	8007ccc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cb6:	f7fe f90b 	bl	8005ed0 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d902      	bls.n	8007ccc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	f000 bd5a 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cd6:	fa93 f3a3 	rbit	r3, r3
 8007cda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ce2:	fab3 f383 	clz	r3, r3
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d104      	bne.n	8007d00 <HAL_RCC_OscConfig+0x5ec>
 8007cf6:	4b01      	ldr	r3, [pc, #4]	; (8007cfc <HAL_RCC_OscConfig+0x5e8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	e015      	b.n	8007d28 <HAL_RCC_OscConfig+0x614>
 8007cfc:	40021000 	.word	0x40021000
 8007d00:	2302      	movs	r3, #2
 8007d02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d0a:	fa93 f3a3 	rbit	r3, r3
 8007d0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007d12:	2302      	movs	r3, #2
 8007d14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007d18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007d1c:	fa93 f3a3 	rbit	r3, r3
 8007d20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d24:	4bc8      	ldr	r3, [pc, #800]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007d2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007d32:	fa92 f2a2 	rbit	r2, r2
 8007d36:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007d3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007d3e:	fab2 f282 	clz	r2, r2
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	f042 0220 	orr.w	r2, r2, #32
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	f002 021f 	and.w	r2, r2, #31
 8007d4e:	2101      	movs	r1, #1
 8007d50:	fa01 f202 	lsl.w	r2, r1, r2
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1ad      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8110 	beq.w	8007f90 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d079      	beq.n	8007e74 <HAL_RCC_OscConfig+0x760>
 8007d80:	2301      	movs	r3, #1
 8007d82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d8a:	fa93 f3a3 	rbit	r3, r3
 8007d8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d96:	fab3 f383 	clz	r3, r3
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4bab      	ldr	r3, [pc, #684]	; (800804c <HAL_RCC_OscConfig+0x938>)
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	461a      	mov	r2, r3
 8007da6:	2301      	movs	r3, #1
 8007da8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007daa:	f7fe f891 	bl	8005ed0 <HAL_GetTick>
 8007dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007db2:	e00a      	b.n	8007dca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007db4:	f7fe f88c 	bl	8005ed0 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d902      	bls.n	8007dca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	f000 bcdb 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dd4:	fa93 f3a3 	rbit	r3, r3
 8007dd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007de4:	2202      	movs	r2, #2
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	fa93 f2a3 	rbit	r2, r3
 8007df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e08:	2202      	movs	r2, #2
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	fa93 f2a3 	rbit	r2, r3
 8007e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007e22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e24:	4b88      	ldr	r3, [pc, #544]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 8007e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007e30:	2102      	movs	r1, #2
 8007e32:	6019      	str	r1, [r3, #0]
 8007e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	fa93 f1a3 	rbit	r1, r3
 8007e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e4a:	6019      	str	r1, [r3, #0]
  return result;
 8007e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e50:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	fab3 f383 	clz	r3, r3
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	2101      	movs	r1, #1
 8007e68:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0a0      	beq.n	8007db4 <HAL_RCC_OscConfig+0x6a0>
 8007e72:	e08d      	b.n	8007f90 <HAL_RCC_OscConfig+0x87c>
 8007e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	fa93 f2a3 	rbit	r2, r3
 8007e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e96:	601a      	str	r2, [r3, #0]
  return result;
 8007e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ea0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ea2:	fab3 f383 	clz	r3, r3
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b68      	ldr	r3, [pc, #416]	; (800804c <HAL_RCC_OscConfig+0x938>)
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eb6:	f7fe f80b 	bl	8005ed0 <HAL_GetTick>
 8007eba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ebe:	e00a      	b.n	8007ed6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7fe f806 	bl	8005ed0 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d902      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	f000 bc55 	b.w	8008780 <HAL_RCC_OscConfig+0x106c>
 8007ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007ede:	2202      	movs	r2, #2
 8007ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ee6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	fa93 f2a3 	rbit	r2, r3
 8007ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ef4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f02:	2202      	movs	r2, #2
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	fa93 f2a3 	rbit	r2, r3
 8007f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	2202      	movs	r2, #2
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	fa93 f2a3 	rbit	r2, r3
 8007f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007f40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f42:	4b41      	ldr	r3, [pc, #260]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 8007f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007f4e:	2102      	movs	r1, #2
 8007f50:	6019      	str	r1, [r3, #0]
 8007f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	fa93 f1a3 	rbit	r1, r3
 8007f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007f68:	6019      	str	r1, [r3, #0]
  return result;
 8007f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	fab3 f383 	clz	r3, r3
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 031f 	and.w	r3, r3, #31
 8007f84:	2101      	movs	r1, #1
 8007f86:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d197      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0304 	and.w	r3, r3, #4
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 81a1 	beq.w	80082e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fac:	4b26      	ldr	r3, [pc, #152]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d116      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fb8:	4b23      	ldr	r3, [pc, #140]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	4a22      	ldr	r2, [pc, #136]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 8007fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc2:	61d3      	str	r3, [r2, #28]
 8007fc4:	4b20      	ldr	r3, [pc, #128]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fd0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fda:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007fde:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fe6:	4b1a      	ldr	r3, [pc, #104]	; (8008050 <HAL_RCC_OscConfig+0x93c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d11a      	bne.n	8008028 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ff2:	4b17      	ldr	r3, [pc, #92]	; (8008050 <HAL_RCC_OscConfig+0x93c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a16      	ldr	r2, [pc, #88]	; (8008050 <HAL_RCC_OscConfig+0x93c>)
 8007ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ffc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ffe:	f7fd ff67 	bl	8005ed0 <HAL_GetTick>
 8008002:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008006:	e009      	b.n	800801c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008008:	f7fd ff62 	bl	8005ed0 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b64      	cmp	r3, #100	; 0x64
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e3b1      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801c:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <HAL_RCC_OscConfig+0x93c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0ef      	beq.n	8008008 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800802c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d10d      	bne.n	8008054 <HAL_RCC_OscConfig+0x940>
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	4a02      	ldr	r2, [pc, #8]	; (8008048 <HAL_RCC_OscConfig+0x934>)
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	6213      	str	r3, [r2, #32]
 8008044:	e03c      	b.n	80080c0 <HAL_RCC_OscConfig+0x9ac>
 8008046:	bf00      	nop
 8008048:	40021000 	.word	0x40021000
 800804c:	10908120 	.word	0x10908120
 8008050:	40007000 	.word	0x40007000
 8008054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10c      	bne.n	800807e <HAL_RCC_OscConfig+0x96a>
 8008064:	4bc1      	ldr	r3, [pc, #772]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	4ac0      	ldr	r2, [pc, #768]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 800806a:	f023 0301 	bic.w	r3, r3, #1
 800806e:	6213      	str	r3, [r2, #32]
 8008070:	4bbe      	ldr	r3, [pc, #760]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	4abd      	ldr	r2, [pc, #756]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 8008076:	f023 0304 	bic.w	r3, r3, #4
 800807a:	6213      	str	r3, [r2, #32]
 800807c:	e020      	b.n	80080c0 <HAL_RCC_OscConfig+0x9ac>
 800807e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	2b05      	cmp	r3, #5
 800808c:	d10c      	bne.n	80080a8 <HAL_RCC_OscConfig+0x994>
 800808e:	4bb7      	ldr	r3, [pc, #732]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	4ab6      	ldr	r2, [pc, #728]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 8008094:	f043 0304 	orr.w	r3, r3, #4
 8008098:	6213      	str	r3, [r2, #32]
 800809a:	4bb4      	ldr	r3, [pc, #720]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	4ab3      	ldr	r2, [pc, #716]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6213      	str	r3, [r2, #32]
 80080a6:	e00b      	b.n	80080c0 <HAL_RCC_OscConfig+0x9ac>
 80080a8:	4bb0      	ldr	r3, [pc, #704]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	4aaf      	ldr	r2, [pc, #700]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80080ae:	f023 0301 	bic.w	r3, r3, #1
 80080b2:	6213      	str	r3, [r2, #32]
 80080b4:	4bad      	ldr	r3, [pc, #692]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	4aac      	ldr	r2, [pc, #688]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80080ba:	f023 0304 	bic.w	r3, r3, #4
 80080be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8081 	beq.w	80081d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080d2:	f7fd fefd 	bl	8005ed0 <HAL_GetTick>
 80080d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080da:	e00b      	b.n	80080f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080dc:	f7fd fef8 	bl	8005ed0 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e345      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
 80080f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80080fc:	2202      	movs	r2, #2
 80080fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008104:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	fa93 f2a3 	rbit	r2, r3
 800810e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008112:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800811c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008120:	2202      	movs	r2, #2
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008128:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	fa93 f2a3 	rbit	r2, r3
 8008132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008136:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800813a:	601a      	str	r2, [r3, #0]
  return result;
 800813c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008140:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008144:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008146:	fab3 f383 	clz	r3, r3
 800814a:	b2db      	uxtb	r3, r3
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d102      	bne.n	8008160 <HAL_RCC_OscConfig+0xa4c>
 800815a:	4b84      	ldr	r3, [pc, #528]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	e013      	b.n	8008188 <HAL_RCC_OscConfig+0xa74>
 8008160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008164:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008168:	2202      	movs	r2, #2
 800816a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800816c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008170:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	fa93 f2a3 	rbit	r2, r3
 800817a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800817e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	4b79      	ldr	r3, [pc, #484]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800818c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008190:	2102      	movs	r1, #2
 8008192:	6011      	str	r1, [r2, #0]
 8008194:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008198:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800819c:	6812      	ldr	r2, [r2, #0]
 800819e:	fa92 f1a2 	rbit	r1, r2
 80081a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80081aa:	6011      	str	r1, [r2, #0]
  return result;
 80081ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081b0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	fab2 f282 	clz	r2, r2
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c0:	b2d2      	uxtb	r2, r2
 80081c2:	f002 021f 	and.w	r2, r2, #31
 80081c6:	2101      	movs	r1, #1
 80081c8:	fa01 f202 	lsl.w	r2, r1, r2
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d084      	beq.n	80080dc <HAL_RCC_OscConfig+0x9c8>
 80081d2:	e07f      	b.n	80082d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081d4:	f7fd fe7c 	bl	8005ed0 <HAL_GetTick>
 80081d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081dc:	e00b      	b.n	80081f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081de:	f7fd fe77 	bl	8005ed0 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e2c4      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
 80081f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80081fe:	2202      	movs	r2, #2
 8008200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008206:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	fa93 f2a3 	rbit	r2, r3
 8008210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008214:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800821e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008222:	2202      	movs	r2, #2
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800822a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	fa93 f2a3 	rbit	r2, r3
 8008234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008238:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800823c:	601a      	str	r2, [r3, #0]
  return result;
 800823e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008242:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008246:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008248:	fab3 f383 	clz	r3, r3
 800824c:	b2db      	uxtb	r3, r3
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f043 0302 	orr.w	r3, r3, #2
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d102      	bne.n	8008262 <HAL_RCC_OscConfig+0xb4e>
 800825c:	4b43      	ldr	r3, [pc, #268]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	e013      	b.n	800828a <HAL_RCC_OscConfig+0xb76>
 8008262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008266:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800826a:	2202      	movs	r2, #2
 800826c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008272:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	fa93 f2a3 	rbit	r2, r3
 800827c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008280:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	4b39      	ldr	r3, [pc, #228]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800828e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008292:	2102      	movs	r1, #2
 8008294:	6011      	str	r1, [r2, #0]
 8008296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800829a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	fa92 f1a2 	rbit	r1, r2
 80082a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80082ac:	6011      	str	r1, [r2, #0]
  return result;
 80082ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082b2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	fab2 f282 	clz	r2, r2
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	f002 021f 	and.w	r2, r2, #31
 80082c8:	2101      	movs	r1, #1
 80082ca:	fa01 f202 	lsl.w	r2, r1, r2
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d184      	bne.n	80081de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80082d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d105      	bne.n	80082e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082dc:	4b23      	ldr	r3, [pc, #140]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	4a22      	ldr	r2, [pc, #136]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80082e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8242 	beq.w	800877e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082fa:	4b1c      	ldr	r3, [pc, #112]	; (800836c <HAL_RCC_OscConfig+0xc58>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f003 030c 	and.w	r3, r3, #12
 8008302:	2b08      	cmp	r3, #8
 8008304:	f000 8213 	beq.w	800872e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800830c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	2b02      	cmp	r3, #2
 8008316:	f040 8162 	bne.w	80085de <HAL_RCC_OscConfig+0xeca>
 800831a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800831e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800832c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	fa93 f2a3 	rbit	r2, r3
 8008336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800833a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800833e:	601a      	str	r2, [r3, #0]
  return result;
 8008340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008344:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008348:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800834a:	fab3 f383 	clz	r3, r3
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008354:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	461a      	mov	r2, r3
 800835c:	2300      	movs	r3, #0
 800835e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008360:	f7fd fdb6 	bl	8005ed0 <HAL_GetTick>
 8008364:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008368:	e00c      	b.n	8008384 <HAL_RCC_OscConfig+0xc70>
 800836a:	bf00      	nop
 800836c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008370:	f7fd fdae 	bl	8005ed0 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e1fd      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
 8008384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008388:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800838c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008396:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	fa93 f2a3 	rbit	r2, r3
 80083a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083a8:	601a      	str	r2, [r3, #0]
  return result;
 80083aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083b4:	fab3 f383 	clz	r3, r3
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d102      	bne.n	80083ce <HAL_RCC_OscConfig+0xcba>
 80083c8:	4bb0      	ldr	r3, [pc, #704]	; (800868c <HAL_RCC_OscConfig+0xf78>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	e027      	b.n	800841e <HAL_RCC_OscConfig+0xd0a>
 80083ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80083d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	fa93 f2a3 	rbit	r2, r3
 80083ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80083fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008406:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	fa93 f2a3 	rbit	r2, r3
 8008410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008414:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	4b9c      	ldr	r3, [pc, #624]	; (800868c <HAL_RCC_OscConfig+0xf78>)
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008422:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008426:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800842a:	6011      	str	r1, [r2, #0]
 800842c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008430:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008434:	6812      	ldr	r2, [r2, #0]
 8008436:	fa92 f1a2 	rbit	r1, r2
 800843a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800843e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008442:	6011      	str	r1, [r2, #0]
  return result;
 8008444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008448:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	fab2 f282 	clz	r2, r2
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	f042 0220 	orr.w	r2, r2, #32
 8008458:	b2d2      	uxtb	r2, r2
 800845a:	f002 021f 	and.w	r2, r2, #31
 800845e:	2101      	movs	r1, #1
 8008460:	fa01 f202 	lsl.w	r2, r1, r2
 8008464:	4013      	ands	r3, r2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d182      	bne.n	8008370 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800846a:	4b88      	ldr	r3, [pc, #544]	; (800868c <HAL_RCC_OscConfig+0xf78>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800847e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	430b      	orrs	r3, r1
 800848c:	497f      	ldr	r1, [pc, #508]	; (800868c <HAL_RCC_OscConfig+0xf78>)
 800848e:	4313      	orrs	r3, r2
 8008490:	604b      	str	r3, [r1, #4]
 8008492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008496:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800849a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800849e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	fa93 f2a3 	rbit	r2, r3
 80084ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80084b6:	601a      	str	r2, [r3, #0]
  return result;
 80084b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80084c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084c2:	fab3 f383 	clz	r3, r3
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80084cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	461a      	mov	r2, r3
 80084d4:	2301      	movs	r3, #1
 80084d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084d8:	f7fd fcfa 	bl	8005ed0 <HAL_GetTick>
 80084dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084e0:	e009      	b.n	80084f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e2:	f7fd fcf5 	bl	8005ed0 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e144      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
 80084f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80084fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008508:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	fa93 f2a3 	rbit	r2, r3
 8008512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008516:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800851a:	601a      	str	r2, [r3, #0]
  return result;
 800851c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008520:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008524:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008526:	fab3 f383 	clz	r3, r3
 800852a:	b2db      	uxtb	r3, r3
 800852c:	095b      	lsrs	r3, r3, #5
 800852e:	b2db      	uxtb	r3, r3
 8008530:	f043 0301 	orr.w	r3, r3, #1
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b01      	cmp	r3, #1
 8008538:	d102      	bne.n	8008540 <HAL_RCC_OscConfig+0xe2c>
 800853a:	4b54      	ldr	r3, [pc, #336]	; (800868c <HAL_RCC_OscConfig+0xf78>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	e027      	b.n	8008590 <HAL_RCC_OscConfig+0xe7c>
 8008540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008544:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800854c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800854e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008552:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	fa93 f2a3 	rbit	r2, r3
 800855c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008560:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800856a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800856e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008578:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	fa93 f2a3 	rbit	r2, r3
 8008582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008586:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	4b3f      	ldr	r3, [pc, #252]	; (800868c <HAL_RCC_OscConfig+0xf78>)
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008594:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008598:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085a2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	fa92 f1a2 	rbit	r1, r2
 80085ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085b0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80085b4:	6011      	str	r1, [r2, #0]
  return result;
 80085b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80085be:	6812      	ldr	r2, [r2, #0]
 80085c0:	fab2 f282 	clz	r2, r2
 80085c4:	b2d2      	uxtb	r2, r2
 80085c6:	f042 0220 	orr.w	r2, r2, #32
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	f002 021f 	and.w	r2, r2, #31
 80085d0:	2101      	movs	r1, #1
 80085d2:	fa01 f202 	lsl.w	r2, r1, r2
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d082      	beq.n	80084e2 <HAL_RCC_OscConfig+0xdce>
 80085dc:	e0cf      	b.n	800877e <HAL_RCC_OscConfig+0x106a>
 80085de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80085e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	fa93 f2a3 	rbit	r2, r3
 80085fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008602:	601a      	str	r2, [r3, #0]
  return result;
 8008604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008608:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800860c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800860e:	fab3 f383 	clz	r3, r3
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008618:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	461a      	mov	r2, r3
 8008620:	2300      	movs	r3, #0
 8008622:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008624:	f7fd fc54 	bl	8005ed0 <HAL_GetTick>
 8008628:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800862c:	e009      	b.n	8008642 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800862e:	f7fd fc4f 	bl	8005ed0 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e09e      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
 8008642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008646:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800864a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800864e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008654:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	fa93 f2a3 	rbit	r2, r3
 800865e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008662:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008666:	601a      	str	r2, [r3, #0]
  return result;
 8008668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800866c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008670:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008672:	fab3 f383 	clz	r3, r3
 8008676:	b2db      	uxtb	r3, r3
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f043 0301 	orr.w	r3, r3, #1
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b01      	cmp	r3, #1
 8008684:	d104      	bne.n	8008690 <HAL_RCC_OscConfig+0xf7c>
 8008686:	4b01      	ldr	r3, [pc, #4]	; (800868c <HAL_RCC_OscConfig+0xf78>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	e029      	b.n	80086e0 <HAL_RCC_OscConfig+0xfcc>
 800868c:	40021000 	.word	0x40021000
 8008690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008694:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800869c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800869e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	fa93 f2a3 	rbit	r2, r3
 80086ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80086be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	fa93 f2a3 	rbit	r2, r3
 80086d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	4b2b      	ldr	r3, [pc, #172]	; (800878c <HAL_RCC_OscConfig+0x1078>)
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086e4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80086e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80086ec:	6011      	str	r1, [r2, #0]
 80086ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086f2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	fa92 f1a2 	rbit	r1, r2
 80086fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008700:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008704:	6011      	str	r1, [r2, #0]
  return result;
 8008706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800870a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800870e:	6812      	ldr	r2, [r2, #0]
 8008710:	fab2 f282 	clz	r2, r2
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	f042 0220 	orr.w	r2, r2, #32
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	f002 021f 	and.w	r2, r2, #31
 8008720:	2101      	movs	r1, #1
 8008722:	fa01 f202 	lsl.w	r2, r1, r2
 8008726:	4013      	ands	r3, r2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d180      	bne.n	800862e <HAL_RCC_OscConfig+0xf1a>
 800872c:	e027      	b.n	800877e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800872e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e01e      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008742:	4b12      	ldr	r3, [pc, #72]	; (800878c <HAL_RCC_OscConfig+0x1078>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800874a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800874e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	429a      	cmp	r2, r3
 8008760:	d10b      	bne.n	800877a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008762:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800876a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800876e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008776:	429a      	cmp	r2, r3
 8008778:	d001      	beq.n	800877e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40021000 	.word	0x40021000

08008790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b09e      	sub	sp, #120	; 0x78
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e162      	b.n	8008a6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087a8:	4b90      	ldr	r3, [pc, #576]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d910      	bls.n	80087d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b6:	4b8d      	ldr	r3, [pc, #564]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f023 0207 	bic.w	r2, r3, #7
 80087be:	498b      	ldr	r1, [pc, #556]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c6:	4b89      	ldr	r3, [pc, #548]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d001      	beq.n	80087d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e14a      	b.n	8008a6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d008      	beq.n	80087f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087e4:	4b82      	ldr	r3, [pc, #520]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	497f      	ldr	r1, [pc, #508]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80dc 	beq.w	80089bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d13c      	bne.n	8008886 <HAL_RCC_ClockConfig+0xf6>
 800880c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008810:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008814:	fa93 f3a3 	rbit	r3, r3
 8008818:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800881a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800881c:	fab3 f383 	clz	r3, r3
 8008820:	b2db      	uxtb	r3, r3
 8008822:	095b      	lsrs	r3, r3, #5
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	d102      	bne.n	8008836 <HAL_RCC_ClockConfig+0xa6>
 8008830:	4b6f      	ldr	r3, [pc, #444]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	e00f      	b.n	8008856 <HAL_RCC_ClockConfig+0xc6>
 8008836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800883a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800883c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800883e:	fa93 f3a3 	rbit	r3, r3
 8008842:	667b      	str	r3, [r7, #100]	; 0x64
 8008844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008848:	663b      	str	r3, [r7, #96]	; 0x60
 800884a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800884c:	fa93 f3a3 	rbit	r3, r3
 8008850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008852:	4b67      	ldr	r3, [pc, #412]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800885a:	65ba      	str	r2, [r7, #88]	; 0x58
 800885c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800885e:	fa92 f2a2 	rbit	r2, r2
 8008862:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008866:	fab2 f282 	clz	r2, r2
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	f042 0220 	orr.w	r2, r2, #32
 8008870:	b2d2      	uxtb	r2, r2
 8008872:	f002 021f 	and.w	r2, r2, #31
 8008876:	2101      	movs	r1, #1
 8008878:	fa01 f202 	lsl.w	r2, r1, r2
 800887c:	4013      	ands	r3, r2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d17b      	bne.n	800897a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e0f3      	b.n	8008a6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d13c      	bne.n	8008908 <HAL_RCC_ClockConfig+0x178>
 800888e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008892:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008896:	fa93 f3a3 	rbit	r3, r3
 800889a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800889c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800889e:	fab3 f383 	clz	r3, r3
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	095b      	lsrs	r3, r3, #5
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f043 0301 	orr.w	r3, r3, #1
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d102      	bne.n	80088b8 <HAL_RCC_ClockConfig+0x128>
 80088b2:	4b4f      	ldr	r3, [pc, #316]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	e00f      	b.n	80088d8 <HAL_RCC_ClockConfig+0x148>
 80088b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c0:	fa93 f3a3 	rbit	r3, r3
 80088c4:	647b      	str	r3, [r7, #68]	; 0x44
 80088c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088ca:	643b      	str	r3, [r7, #64]	; 0x40
 80088cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ce:	fa93 f3a3 	rbit	r3, r3
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d4:	4b46      	ldr	r3, [pc, #280]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80088de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088e0:	fa92 f2a2 	rbit	r2, r2
 80088e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80088e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088e8:	fab2 f282 	clz	r2, r2
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	f042 0220 	orr.w	r2, r2, #32
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	f002 021f 	and.w	r2, r2, #31
 80088f8:	2101      	movs	r1, #1
 80088fa:	fa01 f202 	lsl.w	r2, r1, r2
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d13a      	bne.n	800897a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0b2      	b.n	8008a6e <HAL_RCC_ClockConfig+0x2de>
 8008908:	2302      	movs	r3, #2
 800890a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	fa93 f3a3 	rbit	r3, r3
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008916:	fab3 f383 	clz	r3, r3
 800891a:	b2db      	uxtb	r3, r3
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b01      	cmp	r3, #1
 8008928:	d102      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
 800892a:	4b31      	ldr	r3, [pc, #196]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	e00d      	b.n	800894c <HAL_RCC_ClockConfig+0x1bc>
 8008930:	2302      	movs	r3, #2
 8008932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	fa93 f3a3 	rbit	r3, r3
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
 800893c:	2302      	movs	r3, #2
 800893e:	623b      	str	r3, [r7, #32]
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	fa93 f3a3 	rbit	r3, r3
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	4b29      	ldr	r3, [pc, #164]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2202      	movs	r2, #2
 800894e:	61ba      	str	r2, [r7, #24]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	fa92 f2a2 	rbit	r2, r2
 8008956:	617a      	str	r2, [r7, #20]
  return result;
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	fab2 f282 	clz	r2, r2
 800895e:	b2d2      	uxtb	r2, r2
 8008960:	f042 0220 	orr.w	r2, r2, #32
 8008964:	b2d2      	uxtb	r2, r2
 8008966:	f002 021f 	and.w	r2, r2, #31
 800896a:	2101      	movs	r1, #1
 800896c:	fa01 f202 	lsl.w	r2, r1, r2
 8008970:	4013      	ands	r3, r2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e079      	b.n	8008a6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800897a:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f023 0203 	bic.w	r2, r3, #3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	491a      	ldr	r1, [pc, #104]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 8008988:	4313      	orrs	r3, r2
 800898a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800898c:	f7fd faa0 	bl	8005ed0 <HAL_GetTick>
 8008990:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008992:	e00a      	b.n	80089aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008994:	f7fd fa9c 	bl	8005ed0 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e061      	b.n	8008a6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089aa:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <HAL_RCC_ClockConfig+0x260>)
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f003 020c 	and.w	r2, r3, #12
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d1eb      	bne.n	8008994 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d214      	bcs.n	80089f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ca:	4b08      	ldr	r3, [pc, #32]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f023 0207 	bic.w	r2, r3, #7
 80089d2:	4906      	ldr	r1, [pc, #24]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089da:	4b04      	ldr	r3, [pc, #16]	; (80089ec <HAL_RCC_ClockConfig+0x25c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d005      	beq.n	80089f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e040      	b.n	8008a6e <HAL_RCC_ClockConfig+0x2de>
 80089ec:	40022000 	.word	0x40022000
 80089f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d008      	beq.n	8008a12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a00:	4b1d      	ldr	r3, [pc, #116]	; (8008a78 <HAL_RCC_ClockConfig+0x2e8>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	491a      	ldr	r1, [pc, #104]	; (8008a78 <HAL_RCC_ClockConfig+0x2e8>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0308 	and.w	r3, r3, #8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a1e:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <HAL_RCC_ClockConfig+0x2e8>)
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4912      	ldr	r1, [pc, #72]	; (8008a78 <HAL_RCC_ClockConfig+0x2e8>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008a32:	f000 f829 	bl	8008a88 <HAL_RCC_GetSysClockFreq>
 8008a36:	4601      	mov	r1, r0
 8008a38:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <HAL_RCC_ClockConfig+0x2e8>)
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a40:	22f0      	movs	r2, #240	; 0xf0
 8008a42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	fa92 f2a2 	rbit	r2, r2
 8008a4a:	60fa      	str	r2, [r7, #12]
  return result;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	fab2 f282 	clz	r2, r2
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	40d3      	lsrs	r3, r2
 8008a56:	4a09      	ldr	r2, [pc, #36]	; (8008a7c <HAL_RCC_ClockConfig+0x2ec>)
 8008a58:	5cd3      	ldrb	r3, [r2, r3]
 8008a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8008a5e:	4a08      	ldr	r2, [pc, #32]	; (8008a80 <HAL_RCC_ClockConfig+0x2f0>)
 8008a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008a62:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <HAL_RCC_ClockConfig+0x2f4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fd f9ee 	bl	8005e48 <HAL_InitTick>
  
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3778      	adds	r7, #120	; 0x78
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40021000 	.word	0x40021000
 8008a7c:	0800ddc4 	.word	0x0800ddc4
 8008a80:	20000054 	.word	0x20000054
 8008a84:	20000060 	.word	0x20000060

08008a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b08b      	sub	sp, #44	; 0x2c
 8008a8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	2300      	movs	r3, #0
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	2300      	movs	r3, #0
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008aa2:	4b29      	ldr	r3, [pc, #164]	; (8008b48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f003 030c 	and.w	r3, r3, #12
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d002      	beq.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d003      	beq.n	8008abe <HAL_RCC_GetSysClockFreq+0x36>
 8008ab6:	e03c      	b.n	8008b32 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008ab8:	4b24      	ldr	r3, [pc, #144]	; (8008b4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008aba:	623b      	str	r3, [r7, #32]
      break;
 8008abc:	e03c      	b.n	8008b38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008ac4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008ac8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	fa92 f2a2 	rbit	r2, r2
 8008ad0:	607a      	str	r2, [r7, #4]
  return result;
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	fab2 f282 	clz	r2, r2
 8008ad8:	b2d2      	uxtb	r2, r2
 8008ada:	40d3      	lsrs	r3, r2
 8008adc:	4a1c      	ldr	r2, [pc, #112]	; (8008b50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008ade:	5cd3      	ldrb	r3, [r2, r3]
 8008ae0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008ae2:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	220f      	movs	r2, #15
 8008aec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	fa92 f2a2 	rbit	r2, r2
 8008af4:	60fa      	str	r2, [r7, #12]
  return result;
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	fab2 f282 	clz	r2, r2
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	40d3      	lsrs	r3, r2
 8008b00:	4a14      	ldr	r2, [pc, #80]	; (8008b54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008b02:	5cd3      	ldrb	r3, [r2, r3]
 8008b04:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008b10:	4a0e      	ldr	r2, [pc, #56]	; (8008b4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	fb02 f303 	mul.w	r3, r2, r3
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b20:	e004      	b.n	8008b2c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	4a0c      	ldr	r2, [pc, #48]	; (8008b58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008b26:	fb02 f303 	mul.w	r3, r2, r3
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	623b      	str	r3, [r7, #32]
      break;
 8008b30:	e002      	b.n	8008b38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008b32:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008b34:	623b      	str	r3, [r7, #32]
      break;
 8008b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b38:	6a3b      	ldr	r3, [r7, #32]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	372c      	adds	r7, #44	; 0x2c
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40021000 	.word	0x40021000
 8008b4c:	007a1200 	.word	0x007a1200
 8008b50:	0800dddc 	.word	0x0800dddc
 8008b54:	0800ddec 	.word	0x0800ddec
 8008b58:	003d0900 	.word	0x003d0900

08008b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b60:	4b03      	ldr	r3, [pc, #12]	; (8008b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b62:	681b      	ldr	r3, [r3, #0]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000054 	.word	0x20000054

08008b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008b7a:	f7ff ffef 	bl	8008b5c <HAL_RCC_GetHCLKFreq>
 8008b7e:	4601      	mov	r1, r0
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008b8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	fa92 f2a2 	rbit	r2, r2
 8008b94:	603a      	str	r2, [r7, #0]
  return result;
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	fab2 f282 	clz	r2, r2
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	40d3      	lsrs	r3, r2
 8008ba0:	4a04      	ldr	r2, [pc, #16]	; (8008bb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008ba2:	5cd3      	ldrb	r3, [r2, r3]
 8008ba4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40021000 	.word	0x40021000
 8008bb4:	0800ddd4 	.word	0x0800ddd4

08008bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008bbe:	f7ff ffcd 	bl	8008b5c <HAL_RCC_GetHCLKFreq>
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008bcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008bd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	fa92 f2a2 	rbit	r2, r2
 8008bd8:	603a      	str	r2, [r7, #0]
  return result;
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	fab2 f282 	clz	r2, r2
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	40d3      	lsrs	r3, r2
 8008be4:	4a04      	ldr	r2, [pc, #16]	; (8008bf8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008be6:	5cd3      	ldrb	r3, [r2, r3]
 8008be8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	40021000 	.word	0x40021000
 8008bf8:	0800ddd4 	.word	0x0800ddd4

08008bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b092      	sub	sp, #72	; 0x48
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80d4 	beq.w	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c20:	4b4e      	ldr	r3, [pc, #312]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10e      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c2c:	4b4b      	ldr	r3, [pc, #300]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	4a4a      	ldr	r2, [pc, #296]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c36:	61d3      	str	r3, [r2, #28]
 8008c38:	4b48      	ldr	r3, [pc, #288]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c4a:	4b45      	ldr	r3, [pc, #276]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d118      	bne.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c56:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a41      	ldr	r2, [pc, #260]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c62:	f7fd f935 	bl	8005ed0 <HAL_GetTick>
 8008c66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c68:	e008      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c6a:	f7fd f931 	bl	8005ed0 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b64      	cmp	r3, #100	; 0x64
 8008c76:	d901      	bls.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e13c      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c7c:	4b38      	ldr	r3, [pc, #224]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f0      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c88:	4b34      	ldr	r3, [pc, #208]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 8084 	beq.w	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d07c      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ca8:	4b2c      	ldr	r3, [pc, #176]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	fa93 f3a3 	rbit	r3, r3
 8008cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008cc2:	fab3 f383 	clz	r3, r3
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4b26      	ldr	r3, [pc, #152]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	fa93 f3a3 	rbit	r3, r3
 8008ce2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ce6:	fab3 f383 	clz	r3, r3
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	461a      	mov	r2, r3
 8008cee:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008cfa:	4a18      	ldr	r2, [pc, #96]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d04b      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d0a:	f7fd f8e1 	bl	8005ed0 <HAL_GetTick>
 8008d0e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d10:	e00a      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d12:	f7fd f8dd 	bl	8005ed0 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e0e6      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	fa93 f3a3 	rbit	r3, r3
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
 8008d34:	2302      	movs	r3, #2
 8008d36:	623b      	str	r3, [r7, #32]
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	fa93 f3a3 	rbit	r3, r3
 8008d3e:	61fb      	str	r3, [r7, #28]
  return result;
 8008d40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d42:	fab3 f383 	clz	r3, r3
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	095b      	lsrs	r3, r3, #5
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f043 0302 	orr.w	r3, r3, #2
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d108      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008d56:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	e00d      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	40007000 	.word	0x40007000
 8008d64:	10908100 	.word	0x10908100
 8008d68:	2302      	movs	r3, #2
 8008d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	fa93 f3a3 	rbit	r3, r3
 8008d72:	617b      	str	r3, [r7, #20]
 8008d74:	4b62      	ldr	r3, [pc, #392]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	2202      	movs	r2, #2
 8008d7a:	613a      	str	r2, [r7, #16]
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	fa92 f2a2 	rbit	r2, r2
 8008d82:	60fa      	str	r2, [r7, #12]
  return result;
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	fab2 f282 	clz	r2, r2
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d90:	b2d2      	uxtb	r2, r2
 8008d92:	f002 021f 	and.w	r2, r2, #31
 8008d96:	2101      	movs	r1, #1
 8008d98:	fa01 f202 	lsl.w	r2, r1, r2
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0b7      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008da2:	4b57      	ldr	r3, [pc, #348]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	4954      	ldr	r1, [pc, #336]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d105      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dbc:	4b50      	ldr	r3, [pc, #320]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	4a4f      	ldr	r2, [pc, #316]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008dd4:	4b4a      	ldr	r3, [pc, #296]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	f023 0203 	bic.w	r2, r3, #3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	4947      	ldr	r1, [pc, #284]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d008      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008df2:	4b43      	ldr	r3, [pc, #268]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df6:	f023 0210 	bic.w	r2, r3, #16
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	4940      	ldr	r1, [pc, #256]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d008      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e10:	4b3b      	ldr	r3, [pc, #236]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e14:	f023 0220 	bic.w	r2, r3, #32
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	4938      	ldr	r1, [pc, #224]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d008      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e2e:	4b34      	ldr	r3, [pc, #208]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	4931      	ldr	r1, [pc, #196]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d008      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e4c:	4b2c      	ldr	r3, [pc, #176]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	4929      	ldr	r1, [pc, #164]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d008      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8008e6a:	4b25      	ldr	r3, [pc, #148]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	4922      	ldr	r1, [pc, #136]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008e88:	4b1d      	ldr	r3, [pc, #116]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	491a      	ldr	r1, [pc, #104]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d008      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008ea6:	4b16      	ldr	r3, [pc, #88]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	4913      	ldr	r1, [pc, #76]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008ec4:	4b0e      	ldr	r3, [pc, #56]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed0:	490b      	ldr	r1, [pc, #44]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d008      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008ee2:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	4904      	ldr	r1, [pc, #16]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3748      	adds	r7, #72	; 0x48
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	40021000 	.word	0x40021000

08008f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e09d      	b.n	8009052 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d108      	bne.n	8008f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f26:	d009      	beq.n	8008f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	61da      	str	r2, [r3, #28]
 8008f2e:	e005      	b.n	8008f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fb fd94 	bl	8004a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f7c:	d902      	bls.n	8008f84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	e002      	b.n	8008f8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f92:	d007      	beq.n	8008fa4 <HAL_SPI_Init+0xa0>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f9c:	d002      	beq.n	8008fa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fb4:	431a      	orrs	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	431a      	orrs	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe6:	ea42 0103 	orr.w	r1, r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	0c1b      	lsrs	r3, r3, #16
 8009000:	f003 0204 	and.w	r2, r3, #4
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	f003 0310 	and.w	r3, r3, #16
 800900c:	431a      	orrs	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	f003 0308 	and.w	r3, r3, #8
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009020:	ea42 0103 	orr.w	r1, r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69da      	ldr	r2, [r3, #28]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009040:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b088      	sub	sp, #32
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	4613      	mov	r3, r2
 8009068:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009074:	2b01      	cmp	r3, #1
 8009076:	d101      	bne.n	800907c <HAL_SPI_Transmit+0x22>
 8009078:	2302      	movs	r3, #2
 800907a:	e15f      	b.n	800933c <HAL_SPI_Transmit+0x2e2>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009084:	f7fc ff24 	bl	8005ed0 <HAL_GetTick>
 8009088:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b01      	cmp	r3, #1
 8009098:	d002      	beq.n	80090a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800909a:	2302      	movs	r3, #2
 800909c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800909e:	e148      	b.n	8009332 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_SPI_Transmit+0x52>
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090b0:	e13f      	b.n	8009332 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2203      	movs	r2, #3
 80090b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	88fa      	ldrh	r2, [r7, #6]
 80090ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	88fa      	ldrh	r2, [r7, #6]
 80090d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090fc:	d10f      	bne.n	800911e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800910c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800911c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009128:	2b40      	cmp	r3, #64	; 0x40
 800912a:	d007      	beq.n	800913c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800913a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009144:	d94f      	bls.n	80091e6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_SPI_Transmit+0xfa>
 800914e:	8afb      	ldrh	r3, [r7, #22]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d142      	bne.n	80091da <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	881a      	ldrh	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	1c9a      	adds	r2, r3, #2
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009178:	e02f      	b.n	80091da <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b02      	cmp	r3, #2
 8009186:	d112      	bne.n	80091ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	881a      	ldrh	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	1c9a      	adds	r2, r3, #2
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091ac:	e015      	b.n	80091da <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ae:	f7fc fe8f 	bl	8005ed0 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d803      	bhi.n	80091c6 <HAL_SPI_Transmit+0x16c>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c4:	d102      	bne.n	80091cc <HAL_SPI_Transmit+0x172>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80091d8:	e0ab      	b.n	8009332 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091de:	b29b      	uxth	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1ca      	bne.n	800917a <HAL_SPI_Transmit+0x120>
 80091e4:	e080      	b.n	80092e8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <HAL_SPI_Transmit+0x19a>
 80091ee:	8afb      	ldrh	r3, [r7, #22]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d174      	bne.n	80092de <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d912      	bls.n	8009224 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009202:	881a      	ldrh	r2, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	1c9a      	adds	r2, r3, #2
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b02      	subs	r3, #2
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009222:	e05c      	b.n	80092de <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	7812      	ldrb	r2, [r2, #0]
 8009230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800924a:	e048      	b.n	80092de <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d12b      	bne.n	80092b2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b01      	cmp	r3, #1
 8009262:	d912      	bls.n	800928a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	881a      	ldrh	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	1c9a      	adds	r2, r3, #2
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b02      	subs	r3, #2
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009288:	e029      	b.n	80092de <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	330c      	adds	r3, #12
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	3b01      	subs	r3, #1
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092b0:	e015      	b.n	80092de <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092b2:	f7fc fe0d 	bl	8005ed0 <HAL_GetTick>
 80092b6:	4602      	mov	r2, r0
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d803      	bhi.n	80092ca <HAL_SPI_Transmit+0x270>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c8:	d102      	bne.n	80092d0 <HAL_SPI_Transmit+0x276>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80092dc:	e029      	b.n	8009332 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1b1      	bne.n	800924c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fbd7 	bl	8009aa0 <SPI_EndRxTxTransaction>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2220      	movs	r2, #32
 80092fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	613b      	str	r3, [r7, #16]
 800931a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	77fb      	strb	r3, [r7, #31]
 8009328:	e003      	b.n	8009332 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800933a:	7ffb      	ldrb	r3, [r7, #31]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3720      	adds	r7, #32
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_SPI_Transmit_DMA+0x20>
 8009360:	2302      	movs	r3, #2
 8009362:	e0d4      	b.n	800950e <HAL_SPI_Transmit_DMA+0x1ca>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b01      	cmp	r3, #1
 8009376:	d002      	beq.n	800937e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009378:	2302      	movs	r3, #2
 800937a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800937c:	e0c2      	b.n	8009504 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <HAL_SPI_Transmit_DMA+0x46>
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d102      	bne.n	8009390 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800938e:	e0b9      	b.n	8009504 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2203      	movs	r2, #3
 8009394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	88fa      	ldrh	r2, [r7, #6]
 80093a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	88fa      	ldrh	r2, [r7, #6]
 80093ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093da:	d10f      	bne.n	80093fc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009400:	4a45      	ldr	r2, [pc, #276]	; (8009518 <HAL_SPI_Transmit_DMA+0x1d4>)
 8009402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	4a44      	ldr	r2, [pc, #272]	; (800951c <HAL_SPI_Transmit_DMA+0x1d8>)
 800940a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009410:	4a43      	ldr	r2, [pc, #268]	; (8009520 <HAL_SPI_Transmit_DMA+0x1dc>)
 8009412:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009418:	2200      	movs	r2, #0
 800941a:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800942a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009434:	d82d      	bhi.n	8009492 <HAL_SPI_Transmit_DMA+0x14e>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009440:	d127      	bne.n	8009492 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009446:	b29b      	uxth	r3, r3
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10f      	bne.n	8009470 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800945e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009464:	b29b      	uxth	r3, r3
 8009466:	085b      	lsrs	r3, r3, #1
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800946e:	e010      	b.n	8009492 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800947e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009484:	b29b      	uxth	r3, r3
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	b29b      	uxth	r3, r3
 800948a:	3301      	adds	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	4619      	mov	r1, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80094aa:	f7fc fe99 	bl	80061e0 <HAL_DMA_Start_IT>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d008      	beq.n	80094c6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b8:	f043 0210 	orr.w	r2, r3, #16
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	75fb      	strb	r3, [r7, #23]

    goto error;
 80094c4:	e01e      	b.n	8009504 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d0:	2b40      	cmp	r3, #64	; 0x40
 80094d2:	d007      	beq.n	80094e4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094e2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0220 	orr.w	r2, r2, #32
 80094f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0202 	orr.w	r2, r2, #2
 8009502:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800950c:	7dfb      	ldrb	r3, [r7, #23]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	080097df 	.word	0x080097df
 800951c:	08009739 	.word	0x08009739
 8009520:	080097fb 	.word	0x080097fb

08009524 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	099b      	lsrs	r3, r3, #6
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10f      	bne.n	8009568 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	099b      	lsrs	r3, r3, #6
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
    return;
 8009566:	e0d7      	b.n	8009718 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <HAL_SPI_IRQHandler+0x66>
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	09db      	lsrs	r3, r3, #7
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
    return;
 8009588:	e0c6      	b.n	8009718 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10c      	bne.n	80095b0 <HAL_SPI_IRQHandler+0x8c>
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	099b      	lsrs	r3, r3, #6
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	0a1b      	lsrs	r3, r3, #8
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 80b4 	beq.w	8009718 <HAL_SPI_IRQHandler+0x1f4>
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	095b      	lsrs	r3, r3, #5
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80ad 	beq.w	8009718 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	099b      	lsrs	r3, r3, #6
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d023      	beq.n	8009612 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d011      	beq.n	80095fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095da:	f043 0204 	orr.w	r2, r3, #4
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	e00b      	b.n	8009612 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095fa:	2300      	movs	r3, #0
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	693b      	ldr	r3, [r7, #16]
        return;
 8009610:	e082      	b.n	8009718 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	095b      	lsrs	r3, r3, #5
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d014      	beq.n	8009648 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009622:	f043 0201 	orr.w	r2, r3, #1
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	0a1b      	lsrs	r3, r3, #8
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00c      	beq.n	800966e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009658:	f043 0208 	orr.w	r2, r3, #8
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009660:	2300      	movs	r3, #0
 8009662:	60bb      	str	r3, [r7, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	60bb      	str	r3, [r7, #8]
 800966c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009672:	2b00      	cmp	r3, #0
 8009674:	d04f      	beq.n	8009716 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009684:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d104      	bne.n	80096a2 <HAL_SPI_IRQHandler+0x17e>
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d034      	beq.n	800970c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0203 	bic.w	r2, r2, #3
 80096b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d011      	beq.n	80096de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096be:	4a18      	ldr	r2, [pc, #96]	; (8009720 <HAL_SPI_IRQHandler+0x1fc>)
 80096c0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fc fe22 	bl	8006310 <HAL_DMA_Abort_IT>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d005      	beq.n	80096de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d016      	beq.n	8009714 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ea:	4a0d      	ldr	r2, [pc, #52]	; (8009720 <HAL_SPI_IRQHandler+0x1fc>)
 80096ec:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fc fe0c 	bl	8006310 <HAL_DMA_Abort_IT>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009702:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800970a:	e003      	b.n	8009714 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fb fd93 	bl	8005238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009712:	e000      	b.n	8009716 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009714:	bf00      	nop
    return;
 8009716:	bf00      	nop
  }
}
 8009718:	3720      	adds	r7, #32
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	0800983b 	.word	0x0800983b

08009724 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009746:	f7fc fbc3 	bl	8005ed0 <HAL_GetTick>
 800974a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b20      	cmp	r3, #32
 8009758:	d03b      	beq.n	80097d2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 0220 	bic.w	r2, r2, #32
 8009768:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0202 	bic.w	r2, r2, #2
 8009778:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	2164      	movs	r1, #100	; 0x64
 800977e:	6978      	ldr	r0, [r7, #20]
 8009780:	f000 f98e 	bl	8009aa0 <SPI_EndRxTxTransaction>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978e:	f043 0220 	orr.w	r2, r3, #32
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2200      	movs	r2, #0
 80097b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80097ca:	6978      	ldr	r0, [r7, #20]
 80097cc:	f7fb fd34 	bl	8005238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80097d0:	e002      	b.n	80097d8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80097d2:	6978      	ldr	r0, [r7, #20]
 80097d4:	f7fb fd46 	bl	8005264 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7ff ff99 	bl	8009724 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0203 	bic.w	r2, r2, #3
 8009816:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800981c:	f043 0210 	orr.w	r2, r3, #16
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7fb fd03 	bl	8005238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7fb fcee 	bl	8005238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009874:	f7fc fb2c 	bl	8005ed0 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	1a9b      	subs	r3, r3, r2
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4413      	add	r3, r2
 8009882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009884:	f7fc fb24 	bl	8005ed0 <HAL_GetTick>
 8009888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800988a:	4b39      	ldr	r3, [pc, #228]	; (8009970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	015b      	lsls	r3, r3, #5
 8009890:	0d1b      	lsrs	r3, r3, #20
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	fb02 f303 	mul.w	r3, r2, r3
 8009898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800989a:	e054      	b.n	8009946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d050      	beq.n	8009946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098a4:	f7fc fb14 	bl	8005ed0 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d902      	bls.n	80098ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d13d      	bne.n	8009936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098d2:	d111      	bne.n	80098f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098dc:	d004      	beq.n	80098e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098e6:	d107      	bne.n	80098f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009900:	d10f      	bne.n	8009922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e017      	b.n	8009966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	3b01      	subs	r3, #1
 8009944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4013      	ands	r3, r2
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	429a      	cmp	r2, r3
 8009954:	bf0c      	ite	eq
 8009956:	2301      	moveq	r3, #1
 8009958:	2300      	movne	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	429a      	cmp	r2, r3
 8009962:	d19b      	bne.n	800989c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000054 	.word	0x20000054

08009974 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009986:	f7fc faa3 	bl	8005ed0 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	4413      	add	r3, r2
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009996:	f7fc fa9b 	bl	8005ed0 <HAL_GetTick>
 800999a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099a4:	4b3d      	ldr	r3, [pc, #244]	; (8009a9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	00da      	lsls	r2, r3, #3
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	0d1b      	lsrs	r3, r3, #20
 80099b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80099bc:	e060      	b.n	8009a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80099c4:	d107      	bne.n	80099d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d050      	beq.n	8009a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099de:	f7fc fa77 	bl	8005ed0 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d902      	bls.n	80099f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d13d      	bne.n	8009a70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a0c:	d111      	bne.n	8009a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a16:	d004      	beq.n	8009a22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a20:	d107      	bne.n	8009a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a3a:	d10f      	bne.n	8009a5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e010      	b.n	8009a92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689a      	ldr	r2, [r3, #8]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4013      	ands	r3, r2
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d196      	bne.n	80099be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3728      	adds	r7, #40	; 0x28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000054 	.word	0x20000054

08009aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af02      	add	r7, sp, #8
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff ff5b 	bl	8009974 <SPI_WaitFifoStateUntilTimeout>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d007      	beq.n	8009ad4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ac8:	f043 0220 	orr.w	r2, r3, #32
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e027      	b.n	8009b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	2180      	movs	r1, #128	; 0x80
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff fec0 	bl	8009864 <SPI_WaitFlagStateUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d007      	beq.n	8009afa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aee:	f043 0220 	orr.w	r2, r3, #32
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e014      	b.n	8009b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f7ff ff34 	bl	8009974 <SPI_WaitFifoStateUntilTimeout>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b16:	f043 0220 	orr.w	r2, r3, #32
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e000      	b.n	8009b24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e040      	b.n	8009bc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d106      	bne.n	8009b54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7fb f80e 	bl	8004b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2224      	movs	r2, #36	; 0x24
 8009b58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0201 	bic.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fbbc 	bl	800a2e8 <UART_SetConfig>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d101      	bne.n	8009b7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e022      	b.n	8009bc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fce6 	bl	800a554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fd6d 	bl	800a698 <UART_CheckIdleState>
 8009bbe:	4603      	mov	r3, r0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08a      	sub	sp, #40	; 0x28
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bdc:	2b20      	cmp	r3, #32
 8009bde:	d178      	bne.n	8009cd2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <HAL_UART_Transmit+0x24>
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e071      	b.n	8009cd4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2221      	movs	r2, #33	; 0x21
 8009bfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bfe:	f7fc f967 	bl	8005ed0 <HAL_GetTick>
 8009c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	88fa      	ldrh	r2, [r7, #6]
 8009c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c1c:	d108      	bne.n	8009c30 <HAL_UART_Transmit+0x68>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d104      	bne.n	8009c30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	e003      	b.n	8009c38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c38:	e030      	b.n	8009c9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2200      	movs	r2, #0
 8009c42:	2180      	movs	r1, #128	; 0x80
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 fdcf 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d004      	beq.n	8009c5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2220      	movs	r2, #32
 8009c54:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e03c      	b.n	8009cd4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10b      	bne.n	8009c78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	881a      	ldrh	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c6c:	b292      	uxth	r2, r2
 8009c6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	3302      	adds	r3, #2
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	e008      	b.n	8009c8a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	781a      	ldrb	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	b292      	uxth	r2, r2
 8009c82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	3301      	adds	r3, #1
 8009c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1c8      	bne.n	8009c3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2140      	movs	r1, #64	; 0x40
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 fd98 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d004      	beq.n	8009cc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e005      	b.n	8009cd4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e000      	b.n	8009cd4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009cd2:	2302      	movs	r3, #2
  }
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3720      	adds	r7, #32
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b0ba      	sub	sp, #232	; 0xe8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d06:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d115      	bne.n	8009d44 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d1c:	f003 0320 	and.w	r3, r3, #32
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00f      	beq.n	8009d44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d009      	beq.n	8009d44 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 82ab 	beq.w	800a290 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	4798      	blx	r3
      }
      return;
 8009d42:	e2a5      	b.n	800a290 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 8117 	beq.w	8009f7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009d5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d5e:	4b85      	ldr	r3, [pc, #532]	; (8009f74 <HAL_UART_IRQHandler+0x298>)
 8009d60:	4013      	ands	r3, r2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 810a 	beq.w	8009f7c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d011      	beq.n	8009d98 <HAL_UART_IRQHandler+0xbc>
 8009d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2201      	movs	r2, #1
 8009d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d8e:	f043 0201 	orr.w	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d011      	beq.n	8009dc8 <HAL_UART_IRQHandler+0xec>
 8009da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00b      	beq.n	8009dc8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2202      	movs	r2, #2
 8009db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dbe:	f043 0204 	orr.w	r2, r3, #4
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d011      	beq.n	8009df8 <HAL_UART_IRQHandler+0x11c>
 8009dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2204      	movs	r2, #4
 8009de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dee:	f043 0202 	orr.w	r2, r3, #2
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfc:	f003 0308 	and.w	r3, r3, #8
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d017      	beq.n	8009e34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e08:	f003 0320 	and.w	r3, r3, #32
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d105      	bne.n	8009e1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2208      	movs	r2, #8
 8009e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2a:	f043 0208 	orr.w	r2, r3, #8
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d012      	beq.n	8009e66 <HAL_UART_IRQHandler+0x18a>
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00c      	beq.n	8009e66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5c:	f043 0220 	orr.w	r2, r3, #32
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 8211 	beq.w	800a294 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00d      	beq.n	8009e9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eae:	2b40      	cmp	r3, #64	; 0x40
 8009eb0:	d005      	beq.n	8009ebe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d04f      	beq.n	8009f5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fcf9 	bl	800a8b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d141      	bne.n	8009f56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
 8009ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3308      	adds	r3, #8
 8009efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1d9      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d013      	beq.n	8009f4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f2a:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <HAL_UART_IRQHandler+0x29c>)
 8009f2c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fc f9ec 	bl	8006310 <HAL_DMA_Abort_IT>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d017      	beq.n	8009f6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f4c:	e00f      	b.n	8009f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f9b4 	bl	800a2bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f54:	e00b      	b.n	8009f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f9b0 	bl	800a2bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f5c:	e007      	b.n	8009f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f9ac 	bl	800a2bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009f6c:	e192      	b.n	800a294 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f6e:	bf00      	nop
    return;
 8009f70:	e190      	b.n	800a294 <HAL_UART_IRQHandler+0x5b8>
 8009f72:	bf00      	nop
 8009f74:	04000120 	.word	0x04000120
 8009f78:	0800a97f 	.word	0x0800a97f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	f040 814b 	bne.w	800a21c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 8144 	beq.w	800a21c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 813d 	beq.w	800a21c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2210      	movs	r2, #16
 8009fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb4:	2b40      	cmp	r3, #64	; 0x40
 8009fb6:	f040 80b5 	bne.w	800a124 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 8164 	beq.w	800a298 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	f080 815c 	bcs.w	800a298 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fe6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	f000 8086 	beq.w	800a102 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a002:	e853 3f00 	ldrex	r3, [r3]
 800a006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a00a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a00e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a012:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a024:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a028:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a02c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1da      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3308      	adds	r3, #8
 800a046:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a04a:	e853 3f00 	ldrex	r3, [r3]
 800a04e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a052:	f023 0301 	bic.w	r3, r3, #1
 800a056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3308      	adds	r3, #8
 800a060:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a064:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a068:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a06c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a070:	e841 2300 	strex	r3, r2, [r1]
 800a074:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e1      	bne.n	800a040 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3308      	adds	r3, #8
 800a082:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a08c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a08e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3308      	adds	r3, #8
 800a09c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0a8:	e841 2300 	strex	r3, r2, [r1]
 800a0ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e3      	bne.n	800a07c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0d2:	f023 0310 	bic.w	r3, r3, #16
 800a0d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0ec:	e841 2300 	strex	r3, r2, [r1]
 800a0f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1e4      	bne.n	800a0c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fc f8ce 	bl	800629e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a114:	b29b      	uxth	r3, r3
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	b29b      	uxth	r3, r3
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f8d7 	bl	800a2d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a122:	e0b9      	b.n	800a298 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a130:	b29b      	uxth	r3, r3
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a13e:	b29b      	uxth	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 80ab 	beq.w	800a29c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800a146:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 80a6 	beq.w	800a29c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	461a      	mov	r2, r3
 800a16e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a172:	647b      	str	r3, [r7, #68]	; 0x44
 800a174:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e4      	bne.n	800a150 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3308      	adds	r3, #8
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	623b      	str	r3, [r7, #32]
   return(result);
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f023 0301 	bic.w	r3, r3, #1
 800a19c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1aa:	633a      	str	r2, [r7, #48]	; 0x30
 800a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b2:	e841 2300 	strex	r3, r2, [r1]
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1e3      	bne.n	800a186 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	e853 3f00 	ldrex	r3, [r3]
 800a1de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 0310 	bic.w	r3, r3, #16
 800a1e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a1f4:	61fb      	str	r3, [r7, #28]
 800a1f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	69b9      	ldr	r1, [r7, #24]
 800a1fa:	69fa      	ldr	r2, [r7, #28]
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	617b      	str	r3, [r7, #20]
   return(result);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e4      	bne.n	800a1d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a20e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f85b 	bl	800a2d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a21a:	e03f      	b.n	800a29c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00e      	beq.n	800a246 <HAL_UART_IRQHandler+0x56a>
 800a228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a22c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d008      	beq.n	800a246 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a23c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fbdd 	bl	800a9fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a244:	e02d      	b.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d008      	beq.n	800a270 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01c      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
    }
    return;
 800a26e:	e017      	b.n	800a2a0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d012      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
 800a27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00c      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fb8e 	bl	800a9aa <UART_EndTransmit_IT>
    return;
 800a28e:	e008      	b.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a290:	bf00      	nop
 800a292:	e006      	b.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 800a294:	bf00      	nop
 800a296:	e004      	b.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a298:	bf00      	nop
 800a29a:	e002      	b.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a29c:	bf00      	nop
 800a29e:	e000      	b.n	800a2a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 800a2a0:	bf00      	nop
  }

}
 800a2a2:	37e8      	adds	r7, #232	; 0xe8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	4313      	orrs	r3, r2
 800a30a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	4b8a      	ldr	r3, [pc, #552]	; (800a53c <UART_SetConfig+0x254>)
 800a314:	4013      	ands	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	6812      	ldr	r2, [r2, #0]
 800a31a:	6979      	ldr	r1, [r7, #20]
 800a31c:	430b      	orrs	r3, r1
 800a31e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	4313      	orrs	r3, r2
 800a344:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	430a      	orrs	r2, r1
 800a358:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a78      	ldr	r2, [pc, #480]	; (800a540 <UART_SetConfig+0x258>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d120      	bne.n	800a3a6 <UART_SetConfig+0xbe>
 800a364:	4b77      	ldr	r3, [pc, #476]	; (800a544 <UART_SetConfig+0x25c>)
 800a366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d817      	bhi.n	800a3a0 <UART_SetConfig+0xb8>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <UART_SetConfig+0x90>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a389 	.word	0x0800a389
 800a37c:	0800a395 	.word	0x0800a395
 800a380:	0800a39b 	.word	0x0800a39b
 800a384:	0800a38f 	.word	0x0800a38f
 800a388:	2300      	movs	r3, #0
 800a38a:	77fb      	strb	r3, [r7, #31]
 800a38c:	e01d      	b.n	800a3ca <UART_SetConfig+0xe2>
 800a38e:	2302      	movs	r3, #2
 800a390:	77fb      	strb	r3, [r7, #31]
 800a392:	e01a      	b.n	800a3ca <UART_SetConfig+0xe2>
 800a394:	2304      	movs	r3, #4
 800a396:	77fb      	strb	r3, [r7, #31]
 800a398:	e017      	b.n	800a3ca <UART_SetConfig+0xe2>
 800a39a:	2308      	movs	r3, #8
 800a39c:	77fb      	strb	r3, [r7, #31]
 800a39e:	e014      	b.n	800a3ca <UART_SetConfig+0xe2>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	77fb      	strb	r3, [r7, #31]
 800a3a4:	e011      	b.n	800a3ca <UART_SetConfig+0xe2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a67      	ldr	r2, [pc, #412]	; (800a548 <UART_SetConfig+0x260>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d102      	bne.n	800a3b6 <UART_SetConfig+0xce>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	77fb      	strb	r3, [r7, #31]
 800a3b4:	e009      	b.n	800a3ca <UART_SetConfig+0xe2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a64      	ldr	r2, [pc, #400]	; (800a54c <UART_SetConfig+0x264>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d102      	bne.n	800a3c6 <UART_SetConfig+0xde>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	77fb      	strb	r3, [r7, #31]
 800a3c4:	e001      	b.n	800a3ca <UART_SetConfig+0xe2>
 800a3c6:	2310      	movs	r3, #16
 800a3c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d2:	d15a      	bne.n	800a48a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800a3d4:	7ffb      	ldrb	r3, [r7, #31]
 800a3d6:	2b08      	cmp	r3, #8
 800a3d8:	d827      	bhi.n	800a42a <UART_SetConfig+0x142>
 800a3da:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <UART_SetConfig+0xf8>)
 800a3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e0:	0800a405 	.word	0x0800a405
 800a3e4:	0800a40d 	.word	0x0800a40d
 800a3e8:	0800a415 	.word	0x0800a415
 800a3ec:	0800a42b 	.word	0x0800a42b
 800a3f0:	0800a41b 	.word	0x0800a41b
 800a3f4:	0800a42b 	.word	0x0800a42b
 800a3f8:	0800a42b 	.word	0x0800a42b
 800a3fc:	0800a42b 	.word	0x0800a42b
 800a400:	0800a423 	.word	0x0800a423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a404:	f7fe fbb6 	bl	8008b74 <HAL_RCC_GetPCLK1Freq>
 800a408:	61b8      	str	r0, [r7, #24]
        break;
 800a40a:	e013      	b.n	800a434 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a40c:	f7fe fbd4 	bl	8008bb8 <HAL_RCC_GetPCLK2Freq>
 800a410:	61b8      	str	r0, [r7, #24]
        break;
 800a412:	e00f      	b.n	800a434 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a414:	4b4e      	ldr	r3, [pc, #312]	; (800a550 <UART_SetConfig+0x268>)
 800a416:	61bb      	str	r3, [r7, #24]
        break;
 800a418:	e00c      	b.n	800a434 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a41a:	f7fe fb35 	bl	8008a88 <HAL_RCC_GetSysClockFreq>
 800a41e:	61b8      	str	r0, [r7, #24]
        break;
 800a420:	e008      	b.n	800a434 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a426:	61bb      	str	r3, [r7, #24]
        break;
 800a428:	e004      	b.n	800a434 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	77bb      	strb	r3, [r7, #30]
        break;
 800a432:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d074      	beq.n	800a524 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	005a      	lsls	r2, r3, #1
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	085b      	lsrs	r3, r3, #1
 800a444:	441a      	add	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b0f      	cmp	r3, #15
 800a454:	d916      	bls.n	800a484 <UART_SetConfig+0x19c>
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a45c:	d212      	bcs.n	800a484 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	b29b      	uxth	r3, r3
 800a462:	f023 030f 	bic.w	r3, r3, #15
 800a466:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	085b      	lsrs	r3, r3, #1
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	b29a      	uxth	r2, r3
 800a474:	89fb      	ldrh	r3, [r7, #14]
 800a476:	4313      	orrs	r3, r2
 800a478:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	89fa      	ldrh	r2, [r7, #14]
 800a480:	60da      	str	r2, [r3, #12]
 800a482:	e04f      	b.n	800a524 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	77bb      	strb	r3, [r7, #30]
 800a488:	e04c      	b.n	800a524 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a48a:	7ffb      	ldrb	r3, [r7, #31]
 800a48c:	2b08      	cmp	r3, #8
 800a48e:	d828      	bhi.n	800a4e2 <UART_SetConfig+0x1fa>
 800a490:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <UART_SetConfig+0x1b0>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4bd 	.word	0x0800a4bd
 800a49c:	0800a4c5 	.word	0x0800a4c5
 800a4a0:	0800a4cd 	.word	0x0800a4cd
 800a4a4:	0800a4e3 	.word	0x0800a4e3
 800a4a8:	0800a4d3 	.word	0x0800a4d3
 800a4ac:	0800a4e3 	.word	0x0800a4e3
 800a4b0:	0800a4e3 	.word	0x0800a4e3
 800a4b4:	0800a4e3 	.word	0x0800a4e3
 800a4b8:	0800a4db 	.word	0x0800a4db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4bc:	f7fe fb5a 	bl	8008b74 <HAL_RCC_GetPCLK1Freq>
 800a4c0:	61b8      	str	r0, [r7, #24]
        break;
 800a4c2:	e013      	b.n	800a4ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4c4:	f7fe fb78 	bl	8008bb8 <HAL_RCC_GetPCLK2Freq>
 800a4c8:	61b8      	str	r0, [r7, #24]
        break;
 800a4ca:	e00f      	b.n	800a4ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4cc:	4b20      	ldr	r3, [pc, #128]	; (800a550 <UART_SetConfig+0x268>)
 800a4ce:	61bb      	str	r3, [r7, #24]
        break;
 800a4d0:	e00c      	b.n	800a4ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4d2:	f7fe fad9 	bl	8008a88 <HAL_RCC_GetSysClockFreq>
 800a4d6:	61b8      	str	r0, [r7, #24]
        break;
 800a4d8:	e008      	b.n	800a4ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4de:	61bb      	str	r3, [r7, #24]
        break;
 800a4e0:	e004      	b.n	800a4ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	77bb      	strb	r3, [r7, #30]
        break;
 800a4ea:	bf00      	nop
    }

    if (pclk != 0U)
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d018      	beq.n	800a524 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	085a      	lsrs	r2, r3, #1
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	fbb2 f3f3 	udiv	r3, r2, r3
 800a504:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2b0f      	cmp	r3, #15
 800a50a:	d909      	bls.n	800a520 <UART_SetConfig+0x238>
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a512:	d205      	bcs.n	800a520 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	b29a      	uxth	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	60da      	str	r2, [r3, #12]
 800a51e:	e001      	b.n	800a524 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a530:	7fbb      	ldrb	r3, [r7, #30]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	efff69f3 	.word	0xefff69f3
 800a540:	40013800 	.word	0x40013800
 800a544:	40021000 	.word	0x40021000
 800a548:	40004400 	.word	0x40004400
 800a54c:	40004800 	.word	0x40004800
 800a550:	007a1200 	.word	0x007a1200

0800a554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00a      	beq.n	800a57e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	f003 0308 	and.w	r3, r3, #8
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	f003 0310 	and.w	r3, r3, #16
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00a      	beq.n	800a606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	f003 0320 	and.w	r3, r3, #32
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a630:	2b00      	cmp	r3, #0
 800a632:	d01a      	beq.n	800a66a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a652:	d10a      	bne.n	800a66a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	605a      	str	r2, [r3, #4]
  }
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b098      	sub	sp, #96	; 0x60
 800a69c:	af02      	add	r7, sp, #8
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6a8:	f7fb fc12 	bl	8005ed0 <HAL_GetTick>
 800a6ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d12e      	bne.n	800a71a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f88c 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d021      	beq.n	800a71a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e6      	bne.n	800a6d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2220      	movs	r2, #32
 800a70c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e062      	b.n	800a7e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b04      	cmp	r3, #4
 800a726:	d149      	bne.n	800a7bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a730:	2200      	movs	r2, #0
 800a732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f856 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d03c      	beq.n	800a7bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	e853 3f00 	ldrex	r3, [r3]
 800a74e:	623b      	str	r3, [r7, #32]
   return(result);
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a756:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a760:	633b      	str	r3, [r7, #48]	; 0x30
 800a762:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e6      	bne.n	800a742 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	60fb      	str	r3, [r7, #12]
   return(result);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f023 0301 	bic.w	r3, r3, #1
 800a78a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3308      	adds	r3, #8
 800a792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a794:	61fa      	str	r2, [r7, #28]
 800a796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	69b9      	ldr	r1, [r7, #24]
 800a79a:	69fa      	ldr	r2, [r7, #28]
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e5      	bne.n	800a774 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e011      	b.n	800a7e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3758      	adds	r7, #88	; 0x58
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f8:	e049      	b.n	800a88e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d045      	beq.n	800a88e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a802:	f7fb fb65 	bl	8005ed0 <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d302      	bcc.n	800a818 <UART_WaitOnFlagUntilTimeout+0x30>
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e048      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0304 	and.w	r3, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	d031      	beq.n	800a88e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	f003 0308 	and.w	r3, r3, #8
 800a834:	2b08      	cmp	r3, #8
 800a836:	d110      	bne.n	800a85a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2208      	movs	r2, #8
 800a83e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 f838 	bl	800a8b6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2208      	movs	r2, #8
 800a84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e029      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a868:	d111      	bne.n	800a88e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f81e 	bl	800a8b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2220      	movs	r2, #32
 800a87e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e00f      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69da      	ldr	r2, [r3, #28]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4013      	ands	r3, r2
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	bf0c      	ite	eq
 800a89e:	2301      	moveq	r3, #1
 800a8a0:	2300      	movne	r3, #0
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d0a6      	beq.n	800a7fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b095      	sub	sp, #84	; 0x54
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	e853 3f00 	ldrex	r3, [r3]
 800a8ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8dc:	643b      	str	r3, [r7, #64]	; 0x40
 800a8de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8e4:	e841 2300 	strex	r3, r2, [r1]
 800a8e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1e6      	bne.n	800a8be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	e853 3f00 	ldrex	r3, [r3]
 800a8fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	f023 0301 	bic.w	r3, r3, #1
 800a906:	64bb      	str	r3, [r7, #72]	; 0x48
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3308      	adds	r3, #8
 800a90e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a910:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a918:	e841 2300 	strex	r3, r2, [r1]
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1e5      	bne.n	800a8f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d118      	bne.n	800a95e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	60bb      	str	r3, [r7, #8]
   return(result);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f023 0310 	bic.w	r3, r3, #16
 800a940:	647b      	str	r3, [r7, #68]	; 0x44
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a94a:	61bb      	str	r3, [r7, #24]
 800a94c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6979      	ldr	r1, [r7, #20]
 800a950:	69ba      	ldr	r2, [r7, #24]
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	613b      	str	r3, [r7, #16]
   return(result);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e6      	bne.n	800a92c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a972:	bf00      	nop
 800a974:	3754      	adds	r7, #84	; 0x54
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fc8d 	bl	800a2bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b088      	sub	sp, #32
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	e853 3f00 	ldrex	r3, [r3]
 800a9be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9c6:	61fb      	str	r3, [r7, #28]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	61bb      	str	r3, [r7, #24]
 800a9d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6979      	ldr	r1, [r7, #20]
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e6      	bne.n	800a9b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7ff fc59 	bl	800a2a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9f6:	bf00      	nop
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <atoi>:
 800aa12:	220a      	movs	r2, #10
 800aa14:	2100      	movs	r1, #0
 800aa16:	f000 ba05 	b.w	800ae24 <strtol>
	...

0800aa1c <__errno>:
 800aa1c:	4b01      	ldr	r3, [pc, #4]	; (800aa24 <__errno+0x8>)
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20000068 	.word	0x20000068

0800aa28 <__libc_init_array>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	4d0d      	ldr	r5, [pc, #52]	; (800aa60 <__libc_init_array+0x38>)
 800aa2c:	4c0d      	ldr	r4, [pc, #52]	; (800aa64 <__libc_init_array+0x3c>)
 800aa2e:	1b64      	subs	r4, r4, r5
 800aa30:	10a4      	asrs	r4, r4, #2
 800aa32:	2600      	movs	r6, #0
 800aa34:	42a6      	cmp	r6, r4
 800aa36:	d109      	bne.n	800aa4c <__libc_init_array+0x24>
 800aa38:	4d0b      	ldr	r5, [pc, #44]	; (800aa68 <__libc_init_array+0x40>)
 800aa3a:	4c0c      	ldr	r4, [pc, #48]	; (800aa6c <__libc_init_array+0x44>)
 800aa3c:	f001 fbb2 	bl	800c1a4 <_init>
 800aa40:	1b64      	subs	r4, r4, r5
 800aa42:	10a4      	asrs	r4, r4, #2
 800aa44:	2600      	movs	r6, #0
 800aa46:	42a6      	cmp	r6, r4
 800aa48:	d105      	bne.n	800aa56 <__libc_init_array+0x2e>
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa50:	4798      	blx	r3
 800aa52:	3601      	adds	r6, #1
 800aa54:	e7ee      	b.n	800aa34 <__libc_init_array+0xc>
 800aa56:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa5a:	4798      	blx	r3
 800aa5c:	3601      	adds	r6, #1
 800aa5e:	e7f2      	b.n	800aa46 <__libc_init_array+0x1e>
 800aa60:	0800e044 	.word	0x0800e044
 800aa64:	0800e044 	.word	0x0800e044
 800aa68:	0800e044 	.word	0x0800e044
 800aa6c:	0800e048 	.word	0x0800e048

0800aa70 <memset>:
 800aa70:	4402      	add	r2, r0
 800aa72:	4603      	mov	r3, r0
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d100      	bne.n	800aa7a <memset+0xa>
 800aa78:	4770      	bx	lr
 800aa7a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7e:	e7f9      	b.n	800aa74 <memset+0x4>

0800aa80 <iprintf>:
 800aa80:	b40f      	push	{r0, r1, r2, r3}
 800aa82:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <iprintf+0x2c>)
 800aa84:	b513      	push	{r0, r1, r4, lr}
 800aa86:	681c      	ldr	r4, [r3, #0]
 800aa88:	b124      	cbz	r4, 800aa94 <iprintf+0x14>
 800aa8a:	69a3      	ldr	r3, [r4, #24]
 800aa8c:	b913      	cbnz	r3, 800aa94 <iprintf+0x14>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fbca 	bl	800b228 <__sinit>
 800aa94:	ab05      	add	r3, sp, #20
 800aa96:	9a04      	ldr	r2, [sp, #16]
 800aa98:	68a1      	ldr	r1, [r4, #8]
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 ff49 	bl	800b934 <_vfiprintf_r>
 800aaa2:	b002      	add	sp, #8
 800aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa8:	b004      	add	sp, #16
 800aaaa:	4770      	bx	lr
 800aaac:	20000068 	.word	0x20000068

0800aab0 <_puts_r>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	460e      	mov	r6, r1
 800aab4:	4605      	mov	r5, r0
 800aab6:	b118      	cbz	r0, 800aac0 <_puts_r+0x10>
 800aab8:	6983      	ldr	r3, [r0, #24]
 800aaba:	b90b      	cbnz	r3, 800aac0 <_puts_r+0x10>
 800aabc:	f000 fbb4 	bl	800b228 <__sinit>
 800aac0:	69ab      	ldr	r3, [r5, #24]
 800aac2:	68ac      	ldr	r4, [r5, #8]
 800aac4:	b913      	cbnz	r3, 800aacc <_puts_r+0x1c>
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 fbae 	bl	800b228 <__sinit>
 800aacc:	4b2c      	ldr	r3, [pc, #176]	; (800ab80 <_puts_r+0xd0>)
 800aace:	429c      	cmp	r4, r3
 800aad0:	d120      	bne.n	800ab14 <_puts_r+0x64>
 800aad2:	686c      	ldr	r4, [r5, #4]
 800aad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aad6:	07db      	lsls	r3, r3, #31
 800aad8:	d405      	bmi.n	800aae6 <_puts_r+0x36>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	0598      	lsls	r0, r3, #22
 800aade:	d402      	bmi.n	800aae6 <_puts_r+0x36>
 800aae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aae2:	f000 fc51 	bl	800b388 <__retarget_lock_acquire_recursive>
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	0719      	lsls	r1, r3, #28
 800aaea:	d51d      	bpl.n	800ab28 <_puts_r+0x78>
 800aaec:	6923      	ldr	r3, [r4, #16]
 800aaee:	b1db      	cbz	r3, 800ab28 <_puts_r+0x78>
 800aaf0:	3e01      	subs	r6, #1
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	60a3      	str	r3, [r4, #8]
 800aafc:	bb39      	cbnz	r1, 800ab4e <_puts_r+0x9e>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	da38      	bge.n	800ab74 <_puts_r+0xc4>
 800ab02:	4622      	mov	r2, r4
 800ab04:	210a      	movs	r1, #10
 800ab06:	4628      	mov	r0, r5
 800ab08:	f000 f996 	bl	800ae38 <__swbuf_r>
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d011      	beq.n	800ab34 <_puts_r+0x84>
 800ab10:	250a      	movs	r5, #10
 800ab12:	e011      	b.n	800ab38 <_puts_r+0x88>
 800ab14:	4b1b      	ldr	r3, [pc, #108]	; (800ab84 <_puts_r+0xd4>)
 800ab16:	429c      	cmp	r4, r3
 800ab18:	d101      	bne.n	800ab1e <_puts_r+0x6e>
 800ab1a:	68ac      	ldr	r4, [r5, #8]
 800ab1c:	e7da      	b.n	800aad4 <_puts_r+0x24>
 800ab1e:	4b1a      	ldr	r3, [pc, #104]	; (800ab88 <_puts_r+0xd8>)
 800ab20:	429c      	cmp	r4, r3
 800ab22:	bf08      	it	eq
 800ab24:	68ec      	ldreq	r4, [r5, #12]
 800ab26:	e7d5      	b.n	800aad4 <_puts_r+0x24>
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	f000 f9d6 	bl	800aedc <__swsetup_r>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d0dd      	beq.n	800aaf0 <_puts_r+0x40>
 800ab34:	f04f 35ff 	mov.w	r5, #4294967295
 800ab38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab3a:	07da      	lsls	r2, r3, #31
 800ab3c:	d405      	bmi.n	800ab4a <_puts_r+0x9a>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	059b      	lsls	r3, r3, #22
 800ab42:	d402      	bmi.n	800ab4a <_puts_r+0x9a>
 800ab44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab46:	f000 fc20 	bl	800b38a <__retarget_lock_release_recursive>
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	bd70      	pop	{r4, r5, r6, pc}
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da04      	bge.n	800ab5c <_puts_r+0xac>
 800ab52:	69a2      	ldr	r2, [r4, #24]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	dc06      	bgt.n	800ab66 <_puts_r+0xb6>
 800ab58:	290a      	cmp	r1, #10
 800ab5a:	d004      	beq.n	800ab66 <_puts_r+0xb6>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	6022      	str	r2, [r4, #0]
 800ab62:	7019      	strb	r1, [r3, #0]
 800ab64:	e7c5      	b.n	800aaf2 <_puts_r+0x42>
 800ab66:	4622      	mov	r2, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f000 f965 	bl	800ae38 <__swbuf_r>
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d1bf      	bne.n	800aaf2 <_puts_r+0x42>
 800ab72:	e7df      	b.n	800ab34 <_puts_r+0x84>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	250a      	movs	r5, #10
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	6022      	str	r2, [r4, #0]
 800ab7c:	701d      	strb	r5, [r3, #0]
 800ab7e:	e7db      	b.n	800ab38 <_puts_r+0x88>
 800ab80:	0800dfd0 	.word	0x0800dfd0
 800ab84:	0800dff0 	.word	0x0800dff0
 800ab88:	0800dfb0 	.word	0x0800dfb0

0800ab8c <puts>:
 800ab8c:	4b02      	ldr	r3, [pc, #8]	; (800ab98 <puts+0xc>)
 800ab8e:	4601      	mov	r1, r0
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f7ff bf8d 	b.w	800aab0 <_puts_r>
 800ab96:	bf00      	nop
 800ab98:	20000068 	.word	0x20000068

0800ab9c <srand>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <srand+0x44>)
 800aba0:	681d      	ldr	r5, [r3, #0]
 800aba2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aba4:	4604      	mov	r4, r0
 800aba6:	b9b3      	cbnz	r3, 800abd6 <srand+0x3a>
 800aba8:	2018      	movs	r0, #24
 800abaa:	f000 fc55 	bl	800b458 <malloc>
 800abae:	4602      	mov	r2, r0
 800abb0:	63a8      	str	r0, [r5, #56]	; 0x38
 800abb2:	b920      	cbnz	r0, 800abbe <srand+0x22>
 800abb4:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <srand+0x48>)
 800abb6:	480c      	ldr	r0, [pc, #48]	; (800abe8 <srand+0x4c>)
 800abb8:	2142      	movs	r1, #66	; 0x42
 800abba:	f000 f9fd 	bl	800afb8 <__assert_func>
 800abbe:	490b      	ldr	r1, [pc, #44]	; (800abec <srand+0x50>)
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <srand+0x54>)
 800abc2:	e9c0 1300 	strd	r1, r3, [r0]
 800abc6:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <srand+0x58>)
 800abc8:	6083      	str	r3, [r0, #8]
 800abca:	230b      	movs	r3, #11
 800abcc:	8183      	strh	r3, [r0, #12]
 800abce:	2100      	movs	r1, #0
 800abd0:	2001      	movs	r0, #1
 800abd2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800abd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800abd8:	2200      	movs	r2, #0
 800abda:	611c      	str	r4, [r3, #16]
 800abdc:	615a      	str	r2, [r3, #20]
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	20000068 	.word	0x20000068
 800abe4:	0800de00 	.word	0x0800de00
 800abe8:	0800de17 	.word	0x0800de17
 800abec:	abcd330e 	.word	0xabcd330e
 800abf0:	e66d1234 	.word	0xe66d1234
 800abf4:	0005deec 	.word	0x0005deec

0800abf8 <rand>:
 800abf8:	4b16      	ldr	r3, [pc, #88]	; (800ac54 <rand+0x5c>)
 800abfa:	b510      	push	{r4, lr}
 800abfc:	681c      	ldr	r4, [r3, #0]
 800abfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac00:	b9b3      	cbnz	r3, 800ac30 <rand+0x38>
 800ac02:	2018      	movs	r0, #24
 800ac04:	f000 fc28 	bl	800b458 <malloc>
 800ac08:	63a0      	str	r0, [r4, #56]	; 0x38
 800ac0a:	b928      	cbnz	r0, 800ac18 <rand+0x20>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <rand+0x60>)
 800ac10:	4812      	ldr	r0, [pc, #72]	; (800ac5c <rand+0x64>)
 800ac12:	214e      	movs	r1, #78	; 0x4e
 800ac14:	f000 f9d0 	bl	800afb8 <__assert_func>
 800ac18:	4a11      	ldr	r2, [pc, #68]	; (800ac60 <rand+0x68>)
 800ac1a:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <rand+0x6c>)
 800ac1c:	e9c0 2300 	strd	r2, r3, [r0]
 800ac20:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <rand+0x70>)
 800ac22:	6083      	str	r3, [r0, #8]
 800ac24:	230b      	movs	r3, #11
 800ac26:	8183      	strh	r3, [r0, #12]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ac30:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ac32:	4a0e      	ldr	r2, [pc, #56]	; (800ac6c <rand+0x74>)
 800ac34:	6920      	ldr	r0, [r4, #16]
 800ac36:	6963      	ldr	r3, [r4, #20]
 800ac38:	490d      	ldr	r1, [pc, #52]	; (800ac70 <rand+0x78>)
 800ac3a:	4342      	muls	r2, r0
 800ac3c:	fb01 2203 	mla	r2, r1, r3, r2
 800ac40:	fba0 0101 	umull	r0, r1, r0, r1
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	eb42 0001 	adc.w	r0, r2, r1
 800ac4a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ac4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	20000068 	.word	0x20000068
 800ac58:	0800de00 	.word	0x0800de00
 800ac5c:	0800de17 	.word	0x0800de17
 800ac60:	abcd330e 	.word	0xabcd330e
 800ac64:	e66d1234 	.word	0xe66d1234
 800ac68:	0005deec 	.word	0x0005deec
 800ac6c:	5851f42d 	.word	0x5851f42d
 800ac70:	4c957f2d 	.word	0x4c957f2d

0800ac74 <sniprintf>:
 800ac74:	b40c      	push	{r2, r3}
 800ac76:	b530      	push	{r4, r5, lr}
 800ac78:	4b17      	ldr	r3, [pc, #92]	; (800acd8 <sniprintf+0x64>)
 800ac7a:	1e0c      	subs	r4, r1, #0
 800ac7c:	681d      	ldr	r5, [r3, #0]
 800ac7e:	b09d      	sub	sp, #116	; 0x74
 800ac80:	da08      	bge.n	800ac94 <sniprintf+0x20>
 800ac82:	238b      	movs	r3, #139	; 0x8b
 800ac84:	602b      	str	r3, [r5, #0]
 800ac86:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8a:	b01d      	add	sp, #116	; 0x74
 800ac8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac90:	b002      	add	sp, #8
 800ac92:	4770      	bx	lr
 800ac94:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac9c:	bf14      	ite	ne
 800ac9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aca2:	4623      	moveq	r3, r4
 800aca4:	9304      	str	r3, [sp, #16]
 800aca6:	9307      	str	r3, [sp, #28]
 800aca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acac:	9002      	str	r0, [sp, #8]
 800acae:	9006      	str	r0, [sp, #24]
 800acb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800acb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800acb6:	ab21      	add	r3, sp, #132	; 0x84
 800acb8:	a902      	add	r1, sp, #8
 800acba:	4628      	mov	r0, r5
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	f000 fd0f 	bl	800b6e0 <_svfiprintf_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	bfbc      	itt	lt
 800acc6:	238b      	movlt	r3, #139	; 0x8b
 800acc8:	602b      	strlt	r3, [r5, #0]
 800acca:	2c00      	cmp	r4, #0
 800accc:	d0dd      	beq.n	800ac8a <sniprintf+0x16>
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	2200      	movs	r2, #0
 800acd2:	701a      	strb	r2, [r3, #0]
 800acd4:	e7d9      	b.n	800ac8a <sniprintf+0x16>
 800acd6:	bf00      	nop
 800acd8:	20000068 	.word	0x20000068

0800acdc <strcat>:
 800acdc:	b510      	push	{r4, lr}
 800acde:	4602      	mov	r2, r0
 800ace0:	7814      	ldrb	r4, [r2, #0]
 800ace2:	4613      	mov	r3, r2
 800ace4:	3201      	adds	r2, #1
 800ace6:	2c00      	cmp	r4, #0
 800ace8:	d1fa      	bne.n	800ace0 <strcat+0x4>
 800acea:	3b01      	subs	r3, #1
 800acec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	d1f9      	bne.n	800acec <strcat+0x10>
 800acf8:	bd10      	pop	{r4, pc}

0800acfa <strncpy>:
 800acfa:	b510      	push	{r4, lr}
 800acfc:	3901      	subs	r1, #1
 800acfe:	4603      	mov	r3, r0
 800ad00:	b132      	cbz	r2, 800ad10 <strncpy+0x16>
 800ad02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad06:	f803 4b01 	strb.w	r4, [r3], #1
 800ad0a:	3a01      	subs	r2, #1
 800ad0c:	2c00      	cmp	r4, #0
 800ad0e:	d1f7      	bne.n	800ad00 <strncpy+0x6>
 800ad10:	441a      	add	r2, r3
 800ad12:	2100      	movs	r1, #0
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d100      	bne.n	800ad1a <strncpy+0x20>
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1e:	e7f9      	b.n	800ad14 <strncpy+0x1a>

0800ad20 <_strtol_l.constprop.0>:
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad26:	d001      	beq.n	800ad2c <_strtol_l.constprop.0+0xc>
 800ad28:	2b24      	cmp	r3, #36	; 0x24
 800ad2a:	d906      	bls.n	800ad3a <_strtol_l.constprop.0+0x1a>
 800ad2c:	f7ff fe76 	bl	800aa1c <__errno>
 800ad30:	2316      	movs	r3, #22
 800ad32:	6003      	str	r3, [r0, #0]
 800ad34:	2000      	movs	r0, #0
 800ad36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ae20 <_strtol_l.constprop.0+0x100>
 800ad3e:	460d      	mov	r5, r1
 800ad40:	462e      	mov	r6, r5
 800ad42:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad46:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ad4a:	f017 0708 	ands.w	r7, r7, #8
 800ad4e:	d1f7      	bne.n	800ad40 <_strtol_l.constprop.0+0x20>
 800ad50:	2c2d      	cmp	r4, #45	; 0x2d
 800ad52:	d132      	bne.n	800adba <_strtol_l.constprop.0+0x9a>
 800ad54:	782c      	ldrb	r4, [r5, #0]
 800ad56:	2701      	movs	r7, #1
 800ad58:	1cb5      	adds	r5, r6, #2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d05b      	beq.n	800ae16 <_strtol_l.constprop.0+0xf6>
 800ad5e:	2b10      	cmp	r3, #16
 800ad60:	d109      	bne.n	800ad76 <_strtol_l.constprop.0+0x56>
 800ad62:	2c30      	cmp	r4, #48	; 0x30
 800ad64:	d107      	bne.n	800ad76 <_strtol_l.constprop.0+0x56>
 800ad66:	782c      	ldrb	r4, [r5, #0]
 800ad68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad6c:	2c58      	cmp	r4, #88	; 0x58
 800ad6e:	d14d      	bne.n	800ae0c <_strtol_l.constprop.0+0xec>
 800ad70:	786c      	ldrb	r4, [r5, #1]
 800ad72:	2310      	movs	r3, #16
 800ad74:	3502      	adds	r5, #2
 800ad76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad7e:	f04f 0c00 	mov.w	ip, #0
 800ad82:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad86:	4666      	mov	r6, ip
 800ad88:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad90:	f1be 0f09 	cmp.w	lr, #9
 800ad94:	d816      	bhi.n	800adc4 <_strtol_l.constprop.0+0xa4>
 800ad96:	4674      	mov	r4, lr
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	dd24      	ble.n	800ade6 <_strtol_l.constprop.0+0xc6>
 800ad9c:	f1bc 0f00 	cmp.w	ip, #0
 800ada0:	db1e      	blt.n	800ade0 <_strtol_l.constprop.0+0xc0>
 800ada2:	45b1      	cmp	r9, r6
 800ada4:	d31c      	bcc.n	800ade0 <_strtol_l.constprop.0+0xc0>
 800ada6:	d101      	bne.n	800adac <_strtol_l.constprop.0+0x8c>
 800ada8:	45a2      	cmp	sl, r4
 800adaa:	db19      	blt.n	800ade0 <_strtol_l.constprop.0+0xc0>
 800adac:	fb06 4603 	mla	r6, r6, r3, r4
 800adb0:	f04f 0c01 	mov.w	ip, #1
 800adb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adb8:	e7e8      	b.n	800ad8c <_strtol_l.constprop.0+0x6c>
 800adba:	2c2b      	cmp	r4, #43	; 0x2b
 800adbc:	bf04      	itt	eq
 800adbe:	782c      	ldrbeq	r4, [r5, #0]
 800adc0:	1cb5      	addeq	r5, r6, #2
 800adc2:	e7ca      	b.n	800ad5a <_strtol_l.constprop.0+0x3a>
 800adc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800adc8:	f1be 0f19 	cmp.w	lr, #25
 800adcc:	d801      	bhi.n	800add2 <_strtol_l.constprop.0+0xb2>
 800adce:	3c37      	subs	r4, #55	; 0x37
 800add0:	e7e2      	b.n	800ad98 <_strtol_l.constprop.0+0x78>
 800add2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800add6:	f1be 0f19 	cmp.w	lr, #25
 800adda:	d804      	bhi.n	800ade6 <_strtol_l.constprop.0+0xc6>
 800addc:	3c57      	subs	r4, #87	; 0x57
 800adde:	e7db      	b.n	800ad98 <_strtol_l.constprop.0+0x78>
 800ade0:	f04f 3cff 	mov.w	ip, #4294967295
 800ade4:	e7e6      	b.n	800adb4 <_strtol_l.constprop.0+0x94>
 800ade6:	f1bc 0f00 	cmp.w	ip, #0
 800adea:	da05      	bge.n	800adf8 <_strtol_l.constprop.0+0xd8>
 800adec:	2322      	movs	r3, #34	; 0x22
 800adee:	6003      	str	r3, [r0, #0]
 800adf0:	4646      	mov	r6, r8
 800adf2:	b942      	cbnz	r2, 800ae06 <_strtol_l.constprop.0+0xe6>
 800adf4:	4630      	mov	r0, r6
 800adf6:	e79e      	b.n	800ad36 <_strtol_l.constprop.0+0x16>
 800adf8:	b107      	cbz	r7, 800adfc <_strtol_l.constprop.0+0xdc>
 800adfa:	4276      	negs	r6, r6
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d0f9      	beq.n	800adf4 <_strtol_l.constprop.0+0xd4>
 800ae00:	f1bc 0f00 	cmp.w	ip, #0
 800ae04:	d000      	beq.n	800ae08 <_strtol_l.constprop.0+0xe8>
 800ae06:	1e69      	subs	r1, r5, #1
 800ae08:	6011      	str	r1, [r2, #0]
 800ae0a:	e7f3      	b.n	800adf4 <_strtol_l.constprop.0+0xd4>
 800ae0c:	2430      	movs	r4, #48	; 0x30
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1b1      	bne.n	800ad76 <_strtol_l.constprop.0+0x56>
 800ae12:	2308      	movs	r3, #8
 800ae14:	e7af      	b.n	800ad76 <_strtol_l.constprop.0+0x56>
 800ae16:	2c30      	cmp	r4, #48	; 0x30
 800ae18:	d0a5      	beq.n	800ad66 <_strtol_l.constprop.0+0x46>
 800ae1a:	230a      	movs	r3, #10
 800ae1c:	e7ab      	b.n	800ad76 <_strtol_l.constprop.0+0x56>
 800ae1e:	bf00      	nop
 800ae20:	0800deaf 	.word	0x0800deaf

0800ae24 <strtol>:
 800ae24:	4613      	mov	r3, r2
 800ae26:	460a      	mov	r2, r1
 800ae28:	4601      	mov	r1, r0
 800ae2a:	4802      	ldr	r0, [pc, #8]	; (800ae34 <strtol+0x10>)
 800ae2c:	6800      	ldr	r0, [r0, #0]
 800ae2e:	f7ff bf77 	b.w	800ad20 <_strtol_l.constprop.0>
 800ae32:	bf00      	nop
 800ae34:	20000068 	.word	0x20000068

0800ae38 <__swbuf_r>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	460e      	mov	r6, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	4605      	mov	r5, r0
 800ae40:	b118      	cbz	r0, 800ae4a <__swbuf_r+0x12>
 800ae42:	6983      	ldr	r3, [r0, #24]
 800ae44:	b90b      	cbnz	r3, 800ae4a <__swbuf_r+0x12>
 800ae46:	f000 f9ef 	bl	800b228 <__sinit>
 800ae4a:	4b21      	ldr	r3, [pc, #132]	; (800aed0 <__swbuf_r+0x98>)
 800ae4c:	429c      	cmp	r4, r3
 800ae4e:	d12b      	bne.n	800aea8 <__swbuf_r+0x70>
 800ae50:	686c      	ldr	r4, [r5, #4]
 800ae52:	69a3      	ldr	r3, [r4, #24]
 800ae54:	60a3      	str	r3, [r4, #8]
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	071a      	lsls	r2, r3, #28
 800ae5a:	d52f      	bpl.n	800aebc <__swbuf_r+0x84>
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	b36b      	cbz	r3, 800aebc <__swbuf_r+0x84>
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	6820      	ldr	r0, [r4, #0]
 800ae64:	1ac0      	subs	r0, r0, r3
 800ae66:	6963      	ldr	r3, [r4, #20]
 800ae68:	b2f6      	uxtb	r6, r6
 800ae6a:	4283      	cmp	r3, r0
 800ae6c:	4637      	mov	r7, r6
 800ae6e:	dc04      	bgt.n	800ae7a <__swbuf_r+0x42>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f944 	bl	800b100 <_fflush_r>
 800ae78:	bb30      	cbnz	r0, 800aec8 <__swbuf_r+0x90>
 800ae7a:	68a3      	ldr	r3, [r4, #8]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	60a3      	str	r3, [r4, #8]
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	6022      	str	r2, [r4, #0]
 800ae86:	701e      	strb	r6, [r3, #0]
 800ae88:	6963      	ldr	r3, [r4, #20]
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	4283      	cmp	r3, r0
 800ae8e:	d004      	beq.n	800ae9a <__swbuf_r+0x62>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	07db      	lsls	r3, r3, #31
 800ae94:	d506      	bpl.n	800aea4 <__swbuf_r+0x6c>
 800ae96:	2e0a      	cmp	r6, #10
 800ae98:	d104      	bne.n	800aea4 <__swbuf_r+0x6c>
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 f92f 	bl	800b100 <_fflush_r>
 800aea2:	b988      	cbnz	r0, 800aec8 <__swbuf_r+0x90>
 800aea4:	4638      	mov	r0, r7
 800aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <__swbuf_r+0x9c>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	d101      	bne.n	800aeb2 <__swbuf_r+0x7a>
 800aeae:	68ac      	ldr	r4, [r5, #8]
 800aeb0:	e7cf      	b.n	800ae52 <__swbuf_r+0x1a>
 800aeb2:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <__swbuf_r+0xa0>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	bf08      	it	eq
 800aeb8:	68ec      	ldreq	r4, [r5, #12]
 800aeba:	e7ca      	b.n	800ae52 <__swbuf_r+0x1a>
 800aebc:	4621      	mov	r1, r4
 800aebe:	4628      	mov	r0, r5
 800aec0:	f000 f80c 	bl	800aedc <__swsetup_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d0cb      	beq.n	800ae60 <__swbuf_r+0x28>
 800aec8:	f04f 37ff 	mov.w	r7, #4294967295
 800aecc:	e7ea      	b.n	800aea4 <__swbuf_r+0x6c>
 800aece:	bf00      	nop
 800aed0:	0800dfd0 	.word	0x0800dfd0
 800aed4:	0800dff0 	.word	0x0800dff0
 800aed8:	0800dfb0 	.word	0x0800dfb0

0800aedc <__swsetup_r>:
 800aedc:	4b32      	ldr	r3, [pc, #200]	; (800afa8 <__swsetup_r+0xcc>)
 800aede:	b570      	push	{r4, r5, r6, lr}
 800aee0:	681d      	ldr	r5, [r3, #0]
 800aee2:	4606      	mov	r6, r0
 800aee4:	460c      	mov	r4, r1
 800aee6:	b125      	cbz	r5, 800aef2 <__swsetup_r+0x16>
 800aee8:	69ab      	ldr	r3, [r5, #24]
 800aeea:	b913      	cbnz	r3, 800aef2 <__swsetup_r+0x16>
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 f99b 	bl	800b228 <__sinit>
 800aef2:	4b2e      	ldr	r3, [pc, #184]	; (800afac <__swsetup_r+0xd0>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	d10f      	bne.n	800af18 <__swsetup_r+0x3c>
 800aef8:	686c      	ldr	r4, [r5, #4]
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af00:	0719      	lsls	r1, r3, #28
 800af02:	d42c      	bmi.n	800af5e <__swsetup_r+0x82>
 800af04:	06dd      	lsls	r5, r3, #27
 800af06:	d411      	bmi.n	800af2c <__swsetup_r+0x50>
 800af08:	2309      	movs	r3, #9
 800af0a:	6033      	str	r3, [r6, #0]
 800af0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	e03e      	b.n	800af96 <__swsetup_r+0xba>
 800af18:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <__swsetup_r+0xd4>)
 800af1a:	429c      	cmp	r4, r3
 800af1c:	d101      	bne.n	800af22 <__swsetup_r+0x46>
 800af1e:	68ac      	ldr	r4, [r5, #8]
 800af20:	e7eb      	b.n	800aefa <__swsetup_r+0x1e>
 800af22:	4b24      	ldr	r3, [pc, #144]	; (800afb4 <__swsetup_r+0xd8>)
 800af24:	429c      	cmp	r4, r3
 800af26:	bf08      	it	eq
 800af28:	68ec      	ldreq	r4, [r5, #12]
 800af2a:	e7e6      	b.n	800aefa <__swsetup_r+0x1e>
 800af2c:	0758      	lsls	r0, r3, #29
 800af2e:	d512      	bpl.n	800af56 <__swsetup_r+0x7a>
 800af30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af32:	b141      	cbz	r1, 800af46 <__swsetup_r+0x6a>
 800af34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af38:	4299      	cmp	r1, r3
 800af3a:	d002      	beq.n	800af42 <__swsetup_r+0x66>
 800af3c:	4630      	mov	r0, r6
 800af3e:	f000 fa93 	bl	800b468 <_free_r>
 800af42:	2300      	movs	r3, #0
 800af44:	6363      	str	r3, [r4, #52]	; 0x34
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	2300      	movs	r3, #0
 800af50:	6063      	str	r3, [r4, #4]
 800af52:	6923      	ldr	r3, [r4, #16]
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f043 0308 	orr.w	r3, r3, #8
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	b94b      	cbnz	r3, 800af76 <__swsetup_r+0x9a>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af6c:	d003      	beq.n	800af76 <__swsetup_r+0x9a>
 800af6e:	4621      	mov	r1, r4
 800af70:	4630      	mov	r0, r6
 800af72:	f000 fa31 	bl	800b3d8 <__smakebuf_r>
 800af76:	89a0      	ldrh	r0, [r4, #12]
 800af78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af7c:	f010 0301 	ands.w	r3, r0, #1
 800af80:	d00a      	beq.n	800af98 <__swsetup_r+0xbc>
 800af82:	2300      	movs	r3, #0
 800af84:	60a3      	str	r3, [r4, #8]
 800af86:	6963      	ldr	r3, [r4, #20]
 800af88:	425b      	negs	r3, r3
 800af8a:	61a3      	str	r3, [r4, #24]
 800af8c:	6923      	ldr	r3, [r4, #16]
 800af8e:	b943      	cbnz	r3, 800afa2 <__swsetup_r+0xc6>
 800af90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af94:	d1ba      	bne.n	800af0c <__swsetup_r+0x30>
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	0781      	lsls	r1, r0, #30
 800af9a:	bf58      	it	pl
 800af9c:	6963      	ldrpl	r3, [r4, #20]
 800af9e:	60a3      	str	r3, [r4, #8]
 800afa0:	e7f4      	b.n	800af8c <__swsetup_r+0xb0>
 800afa2:	2000      	movs	r0, #0
 800afa4:	e7f7      	b.n	800af96 <__swsetup_r+0xba>
 800afa6:	bf00      	nop
 800afa8:	20000068 	.word	0x20000068
 800afac:	0800dfd0 	.word	0x0800dfd0
 800afb0:	0800dff0 	.word	0x0800dff0
 800afb4:	0800dfb0 	.word	0x0800dfb0

0800afb8 <__assert_func>:
 800afb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afba:	4614      	mov	r4, r2
 800afbc:	461a      	mov	r2, r3
 800afbe:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <__assert_func+0x2c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4605      	mov	r5, r0
 800afc4:	68d8      	ldr	r0, [r3, #12]
 800afc6:	b14c      	cbz	r4, 800afdc <__assert_func+0x24>
 800afc8:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <__assert_func+0x30>)
 800afca:	9100      	str	r1, [sp, #0]
 800afcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afd0:	4906      	ldr	r1, [pc, #24]	; (800afec <__assert_func+0x34>)
 800afd2:	462b      	mov	r3, r5
 800afd4:	f000 f9a6 	bl	800b324 <fiprintf>
 800afd8:	f000 ffd6 	bl	800bf88 <abort>
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <__assert_func+0x38>)
 800afde:	461c      	mov	r4, r3
 800afe0:	e7f3      	b.n	800afca <__assert_func+0x12>
 800afe2:	bf00      	nop
 800afe4:	20000068 	.word	0x20000068
 800afe8:	0800de72 	.word	0x0800de72
 800afec:	0800de7f 	.word	0x0800de7f
 800aff0:	0800dead 	.word	0x0800dead

0800aff4 <__sflush_r>:
 800aff4:	898a      	ldrh	r2, [r1, #12]
 800aff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800affa:	4605      	mov	r5, r0
 800affc:	0710      	lsls	r0, r2, #28
 800affe:	460c      	mov	r4, r1
 800b000:	d458      	bmi.n	800b0b4 <__sflush_r+0xc0>
 800b002:	684b      	ldr	r3, [r1, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	dc05      	bgt.n	800b014 <__sflush_r+0x20>
 800b008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dc02      	bgt.n	800b014 <__sflush_r+0x20>
 800b00e:	2000      	movs	r0, #0
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b016:	2e00      	cmp	r6, #0
 800b018:	d0f9      	beq.n	800b00e <__sflush_r+0x1a>
 800b01a:	2300      	movs	r3, #0
 800b01c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b020:	682f      	ldr	r7, [r5, #0]
 800b022:	602b      	str	r3, [r5, #0]
 800b024:	d032      	beq.n	800b08c <__sflush_r+0x98>
 800b026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	075a      	lsls	r2, r3, #29
 800b02c:	d505      	bpl.n	800b03a <__sflush_r+0x46>
 800b02e:	6863      	ldr	r3, [r4, #4]
 800b030:	1ac0      	subs	r0, r0, r3
 800b032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b034:	b10b      	cbz	r3, 800b03a <__sflush_r+0x46>
 800b036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b038:	1ac0      	subs	r0, r0, r3
 800b03a:	2300      	movs	r3, #0
 800b03c:	4602      	mov	r2, r0
 800b03e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b040:	6a21      	ldr	r1, [r4, #32]
 800b042:	4628      	mov	r0, r5
 800b044:	47b0      	blx	r6
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	d106      	bne.n	800b05a <__sflush_r+0x66>
 800b04c:	6829      	ldr	r1, [r5, #0]
 800b04e:	291d      	cmp	r1, #29
 800b050:	d82c      	bhi.n	800b0ac <__sflush_r+0xb8>
 800b052:	4a2a      	ldr	r2, [pc, #168]	; (800b0fc <__sflush_r+0x108>)
 800b054:	40ca      	lsrs	r2, r1
 800b056:	07d6      	lsls	r6, r2, #31
 800b058:	d528      	bpl.n	800b0ac <__sflush_r+0xb8>
 800b05a:	2200      	movs	r2, #0
 800b05c:	6062      	str	r2, [r4, #4]
 800b05e:	04d9      	lsls	r1, r3, #19
 800b060:	6922      	ldr	r2, [r4, #16]
 800b062:	6022      	str	r2, [r4, #0]
 800b064:	d504      	bpl.n	800b070 <__sflush_r+0x7c>
 800b066:	1c42      	adds	r2, r0, #1
 800b068:	d101      	bne.n	800b06e <__sflush_r+0x7a>
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	b903      	cbnz	r3, 800b070 <__sflush_r+0x7c>
 800b06e:	6560      	str	r0, [r4, #84]	; 0x54
 800b070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b072:	602f      	str	r7, [r5, #0]
 800b074:	2900      	cmp	r1, #0
 800b076:	d0ca      	beq.n	800b00e <__sflush_r+0x1a>
 800b078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b07c:	4299      	cmp	r1, r3
 800b07e:	d002      	beq.n	800b086 <__sflush_r+0x92>
 800b080:	4628      	mov	r0, r5
 800b082:	f000 f9f1 	bl	800b468 <_free_r>
 800b086:	2000      	movs	r0, #0
 800b088:	6360      	str	r0, [r4, #52]	; 0x34
 800b08a:	e7c1      	b.n	800b010 <__sflush_r+0x1c>
 800b08c:	6a21      	ldr	r1, [r4, #32]
 800b08e:	2301      	movs	r3, #1
 800b090:	4628      	mov	r0, r5
 800b092:	47b0      	blx	r6
 800b094:	1c41      	adds	r1, r0, #1
 800b096:	d1c7      	bne.n	800b028 <__sflush_r+0x34>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0c4      	beq.n	800b028 <__sflush_r+0x34>
 800b09e:	2b1d      	cmp	r3, #29
 800b0a0:	d001      	beq.n	800b0a6 <__sflush_r+0xb2>
 800b0a2:	2b16      	cmp	r3, #22
 800b0a4:	d101      	bne.n	800b0aa <__sflush_r+0xb6>
 800b0a6:	602f      	str	r7, [r5, #0]
 800b0a8:	e7b1      	b.n	800b00e <__sflush_r+0x1a>
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	e7ad      	b.n	800b010 <__sflush_r+0x1c>
 800b0b4:	690f      	ldr	r7, [r1, #16]
 800b0b6:	2f00      	cmp	r7, #0
 800b0b8:	d0a9      	beq.n	800b00e <__sflush_r+0x1a>
 800b0ba:	0793      	lsls	r3, r2, #30
 800b0bc:	680e      	ldr	r6, [r1, #0]
 800b0be:	bf08      	it	eq
 800b0c0:	694b      	ldreq	r3, [r1, #20]
 800b0c2:	600f      	str	r7, [r1, #0]
 800b0c4:	bf18      	it	ne
 800b0c6:	2300      	movne	r3, #0
 800b0c8:	eba6 0807 	sub.w	r8, r6, r7
 800b0cc:	608b      	str	r3, [r1, #8]
 800b0ce:	f1b8 0f00 	cmp.w	r8, #0
 800b0d2:	dd9c      	ble.n	800b00e <__sflush_r+0x1a>
 800b0d4:	6a21      	ldr	r1, [r4, #32]
 800b0d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0d8:	4643      	mov	r3, r8
 800b0da:	463a      	mov	r2, r7
 800b0dc:	4628      	mov	r0, r5
 800b0de:	47b0      	blx	r6
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dc06      	bgt.n	800b0f2 <__sflush_r+0xfe>
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f0:	e78e      	b.n	800b010 <__sflush_r+0x1c>
 800b0f2:	4407      	add	r7, r0
 800b0f4:	eba8 0800 	sub.w	r8, r8, r0
 800b0f8:	e7e9      	b.n	800b0ce <__sflush_r+0xda>
 800b0fa:	bf00      	nop
 800b0fc:	20400001 	.word	0x20400001

0800b100 <_fflush_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	690b      	ldr	r3, [r1, #16]
 800b104:	4605      	mov	r5, r0
 800b106:	460c      	mov	r4, r1
 800b108:	b913      	cbnz	r3, 800b110 <_fflush_r+0x10>
 800b10a:	2500      	movs	r5, #0
 800b10c:	4628      	mov	r0, r5
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	b118      	cbz	r0, 800b11a <_fflush_r+0x1a>
 800b112:	6983      	ldr	r3, [r0, #24]
 800b114:	b90b      	cbnz	r3, 800b11a <_fflush_r+0x1a>
 800b116:	f000 f887 	bl	800b228 <__sinit>
 800b11a:	4b14      	ldr	r3, [pc, #80]	; (800b16c <_fflush_r+0x6c>)
 800b11c:	429c      	cmp	r4, r3
 800b11e:	d11b      	bne.n	800b158 <_fflush_r+0x58>
 800b120:	686c      	ldr	r4, [r5, #4]
 800b122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0ef      	beq.n	800b10a <_fflush_r+0xa>
 800b12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b12c:	07d0      	lsls	r0, r2, #31
 800b12e:	d404      	bmi.n	800b13a <_fflush_r+0x3a>
 800b130:	0599      	lsls	r1, r3, #22
 800b132:	d402      	bmi.n	800b13a <_fflush_r+0x3a>
 800b134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b136:	f000 f927 	bl	800b388 <__retarget_lock_acquire_recursive>
 800b13a:	4628      	mov	r0, r5
 800b13c:	4621      	mov	r1, r4
 800b13e:	f7ff ff59 	bl	800aff4 <__sflush_r>
 800b142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b144:	07da      	lsls	r2, r3, #31
 800b146:	4605      	mov	r5, r0
 800b148:	d4e0      	bmi.n	800b10c <_fflush_r+0xc>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	059b      	lsls	r3, r3, #22
 800b14e:	d4dd      	bmi.n	800b10c <_fflush_r+0xc>
 800b150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b152:	f000 f91a 	bl	800b38a <__retarget_lock_release_recursive>
 800b156:	e7d9      	b.n	800b10c <_fflush_r+0xc>
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <_fflush_r+0x70>)
 800b15a:	429c      	cmp	r4, r3
 800b15c:	d101      	bne.n	800b162 <_fflush_r+0x62>
 800b15e:	68ac      	ldr	r4, [r5, #8]
 800b160:	e7df      	b.n	800b122 <_fflush_r+0x22>
 800b162:	4b04      	ldr	r3, [pc, #16]	; (800b174 <_fflush_r+0x74>)
 800b164:	429c      	cmp	r4, r3
 800b166:	bf08      	it	eq
 800b168:	68ec      	ldreq	r4, [r5, #12]
 800b16a:	e7da      	b.n	800b122 <_fflush_r+0x22>
 800b16c:	0800dfd0 	.word	0x0800dfd0
 800b170:	0800dff0 	.word	0x0800dff0
 800b174:	0800dfb0 	.word	0x0800dfb0

0800b178 <std>:
 800b178:	2300      	movs	r3, #0
 800b17a:	b510      	push	{r4, lr}
 800b17c:	4604      	mov	r4, r0
 800b17e:	e9c0 3300 	strd	r3, r3, [r0]
 800b182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b186:	6083      	str	r3, [r0, #8]
 800b188:	8181      	strh	r1, [r0, #12]
 800b18a:	6643      	str	r3, [r0, #100]	; 0x64
 800b18c:	81c2      	strh	r2, [r0, #14]
 800b18e:	6183      	str	r3, [r0, #24]
 800b190:	4619      	mov	r1, r3
 800b192:	2208      	movs	r2, #8
 800b194:	305c      	adds	r0, #92	; 0x5c
 800b196:	f7ff fc6b 	bl	800aa70 <memset>
 800b19a:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <std+0x38>)
 800b19c:	6263      	str	r3, [r4, #36]	; 0x24
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <std+0x3c>)
 800b1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1a2:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <std+0x40>)
 800b1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <std+0x44>)
 800b1a8:	6224      	str	r4, [r4, #32]
 800b1aa:	6323      	str	r3, [r4, #48]	; 0x30
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	bf00      	nop
 800b1b0:	0800bedd 	.word	0x0800bedd
 800b1b4:	0800beff 	.word	0x0800beff
 800b1b8:	0800bf37 	.word	0x0800bf37
 800b1bc:	0800bf5b 	.word	0x0800bf5b

0800b1c0 <_cleanup_r>:
 800b1c0:	4901      	ldr	r1, [pc, #4]	; (800b1c8 <_cleanup_r+0x8>)
 800b1c2:	f000 b8c1 	b.w	800b348 <_fwalk_reent>
 800b1c6:	bf00      	nop
 800b1c8:	0800b101 	.word	0x0800b101

0800b1cc <__sfmoreglue>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	2268      	movs	r2, #104	; 0x68
 800b1d0:	1e4d      	subs	r5, r1, #1
 800b1d2:	4355      	muls	r5, r2
 800b1d4:	460e      	mov	r6, r1
 800b1d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1da:	f000 f9b1 	bl	800b540 <_malloc_r>
 800b1de:	4604      	mov	r4, r0
 800b1e0:	b140      	cbz	r0, 800b1f4 <__sfmoreglue+0x28>
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1e8:	300c      	adds	r0, #12
 800b1ea:	60a0      	str	r0, [r4, #8]
 800b1ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1f0:	f7ff fc3e 	bl	800aa70 <memset>
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}

0800b1f8 <__sfp_lock_acquire>:
 800b1f8:	4801      	ldr	r0, [pc, #4]	; (800b200 <__sfp_lock_acquire+0x8>)
 800b1fa:	f000 b8c5 	b.w	800b388 <__retarget_lock_acquire_recursive>
 800b1fe:	bf00      	nop
 800b200:	200029fd 	.word	0x200029fd

0800b204 <__sfp_lock_release>:
 800b204:	4801      	ldr	r0, [pc, #4]	; (800b20c <__sfp_lock_release+0x8>)
 800b206:	f000 b8c0 	b.w	800b38a <__retarget_lock_release_recursive>
 800b20a:	bf00      	nop
 800b20c:	200029fd 	.word	0x200029fd

0800b210 <__sinit_lock_acquire>:
 800b210:	4801      	ldr	r0, [pc, #4]	; (800b218 <__sinit_lock_acquire+0x8>)
 800b212:	f000 b8b9 	b.w	800b388 <__retarget_lock_acquire_recursive>
 800b216:	bf00      	nop
 800b218:	200029fe 	.word	0x200029fe

0800b21c <__sinit_lock_release>:
 800b21c:	4801      	ldr	r0, [pc, #4]	; (800b224 <__sinit_lock_release+0x8>)
 800b21e:	f000 b8b4 	b.w	800b38a <__retarget_lock_release_recursive>
 800b222:	bf00      	nop
 800b224:	200029fe 	.word	0x200029fe

0800b228 <__sinit>:
 800b228:	b510      	push	{r4, lr}
 800b22a:	4604      	mov	r4, r0
 800b22c:	f7ff fff0 	bl	800b210 <__sinit_lock_acquire>
 800b230:	69a3      	ldr	r3, [r4, #24]
 800b232:	b11b      	cbz	r3, 800b23c <__sinit+0x14>
 800b234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b238:	f7ff bff0 	b.w	800b21c <__sinit_lock_release>
 800b23c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b240:	6523      	str	r3, [r4, #80]	; 0x50
 800b242:	4b13      	ldr	r3, [pc, #76]	; (800b290 <__sinit+0x68>)
 800b244:	4a13      	ldr	r2, [pc, #76]	; (800b294 <__sinit+0x6c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	62a2      	str	r2, [r4, #40]	; 0x28
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	bf04      	itt	eq
 800b24e:	2301      	moveq	r3, #1
 800b250:	61a3      	streq	r3, [r4, #24]
 800b252:	4620      	mov	r0, r4
 800b254:	f000 f820 	bl	800b298 <__sfp>
 800b258:	6060      	str	r0, [r4, #4]
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f81c 	bl	800b298 <__sfp>
 800b260:	60a0      	str	r0, [r4, #8]
 800b262:	4620      	mov	r0, r4
 800b264:	f000 f818 	bl	800b298 <__sfp>
 800b268:	2200      	movs	r2, #0
 800b26a:	60e0      	str	r0, [r4, #12]
 800b26c:	2104      	movs	r1, #4
 800b26e:	6860      	ldr	r0, [r4, #4]
 800b270:	f7ff ff82 	bl	800b178 <std>
 800b274:	68a0      	ldr	r0, [r4, #8]
 800b276:	2201      	movs	r2, #1
 800b278:	2109      	movs	r1, #9
 800b27a:	f7ff ff7d 	bl	800b178 <std>
 800b27e:	68e0      	ldr	r0, [r4, #12]
 800b280:	2202      	movs	r2, #2
 800b282:	2112      	movs	r1, #18
 800b284:	f7ff ff78 	bl	800b178 <std>
 800b288:	2301      	movs	r3, #1
 800b28a:	61a3      	str	r3, [r4, #24]
 800b28c:	e7d2      	b.n	800b234 <__sinit+0xc>
 800b28e:	bf00      	nop
 800b290:	0800ddfc 	.word	0x0800ddfc
 800b294:	0800b1c1 	.word	0x0800b1c1

0800b298 <__sfp>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	4607      	mov	r7, r0
 800b29c:	f7ff ffac 	bl	800b1f8 <__sfp_lock_acquire>
 800b2a0:	4b1e      	ldr	r3, [pc, #120]	; (800b31c <__sfp+0x84>)
 800b2a2:	681e      	ldr	r6, [r3, #0]
 800b2a4:	69b3      	ldr	r3, [r6, #24]
 800b2a6:	b913      	cbnz	r3, 800b2ae <__sfp+0x16>
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7ff ffbd 	bl	800b228 <__sinit>
 800b2ae:	3648      	adds	r6, #72	; 0x48
 800b2b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	d503      	bpl.n	800b2c0 <__sfp+0x28>
 800b2b8:	6833      	ldr	r3, [r6, #0]
 800b2ba:	b30b      	cbz	r3, 800b300 <__sfp+0x68>
 800b2bc:	6836      	ldr	r6, [r6, #0]
 800b2be:	e7f7      	b.n	800b2b0 <__sfp+0x18>
 800b2c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2c4:	b9d5      	cbnz	r5, 800b2fc <__sfp+0x64>
 800b2c6:	4b16      	ldr	r3, [pc, #88]	; (800b320 <__sfp+0x88>)
 800b2c8:	60e3      	str	r3, [r4, #12]
 800b2ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2ce:	6665      	str	r5, [r4, #100]	; 0x64
 800b2d0:	f000 f859 	bl	800b386 <__retarget_lock_init_recursive>
 800b2d4:	f7ff ff96 	bl	800b204 <__sfp_lock_release>
 800b2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2e0:	6025      	str	r5, [r4, #0]
 800b2e2:	61a5      	str	r5, [r4, #24]
 800b2e4:	2208      	movs	r2, #8
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2ec:	f7ff fbc0 	bl	800aa70 <memset>
 800b2f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2fc:	3468      	adds	r4, #104	; 0x68
 800b2fe:	e7d9      	b.n	800b2b4 <__sfp+0x1c>
 800b300:	2104      	movs	r1, #4
 800b302:	4638      	mov	r0, r7
 800b304:	f7ff ff62 	bl	800b1cc <__sfmoreglue>
 800b308:	4604      	mov	r4, r0
 800b30a:	6030      	str	r0, [r6, #0]
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1d5      	bne.n	800b2bc <__sfp+0x24>
 800b310:	f7ff ff78 	bl	800b204 <__sfp_lock_release>
 800b314:	230c      	movs	r3, #12
 800b316:	603b      	str	r3, [r7, #0]
 800b318:	e7ee      	b.n	800b2f8 <__sfp+0x60>
 800b31a:	bf00      	nop
 800b31c:	0800ddfc 	.word	0x0800ddfc
 800b320:	ffff0001 	.word	0xffff0001

0800b324 <fiprintf>:
 800b324:	b40e      	push	{r1, r2, r3}
 800b326:	b503      	push	{r0, r1, lr}
 800b328:	4601      	mov	r1, r0
 800b32a:	ab03      	add	r3, sp, #12
 800b32c:	4805      	ldr	r0, [pc, #20]	; (800b344 <fiprintf+0x20>)
 800b32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b332:	6800      	ldr	r0, [r0, #0]
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	f000 fafd 	bl	800b934 <_vfiprintf_r>
 800b33a:	b002      	add	sp, #8
 800b33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b340:	b003      	add	sp, #12
 800b342:	4770      	bx	lr
 800b344:	20000068 	.word	0x20000068

0800b348 <_fwalk_reent>:
 800b348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b34c:	4606      	mov	r6, r0
 800b34e:	4688      	mov	r8, r1
 800b350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b354:	2700      	movs	r7, #0
 800b356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b35a:	f1b9 0901 	subs.w	r9, r9, #1
 800b35e:	d505      	bpl.n	800b36c <_fwalk_reent+0x24>
 800b360:	6824      	ldr	r4, [r4, #0]
 800b362:	2c00      	cmp	r4, #0
 800b364:	d1f7      	bne.n	800b356 <_fwalk_reent+0xe>
 800b366:	4638      	mov	r0, r7
 800b368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36c:	89ab      	ldrh	r3, [r5, #12]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d907      	bls.n	800b382 <_fwalk_reent+0x3a>
 800b372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b376:	3301      	adds	r3, #1
 800b378:	d003      	beq.n	800b382 <_fwalk_reent+0x3a>
 800b37a:	4629      	mov	r1, r5
 800b37c:	4630      	mov	r0, r6
 800b37e:	47c0      	blx	r8
 800b380:	4307      	orrs	r7, r0
 800b382:	3568      	adds	r5, #104	; 0x68
 800b384:	e7e9      	b.n	800b35a <_fwalk_reent+0x12>

0800b386 <__retarget_lock_init_recursive>:
 800b386:	4770      	bx	lr

0800b388 <__retarget_lock_acquire_recursive>:
 800b388:	4770      	bx	lr

0800b38a <__retarget_lock_release_recursive>:
 800b38a:	4770      	bx	lr

0800b38c <__swhatbuf_r>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	460e      	mov	r6, r1
 800b390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b394:	2900      	cmp	r1, #0
 800b396:	b096      	sub	sp, #88	; 0x58
 800b398:	4614      	mov	r4, r2
 800b39a:	461d      	mov	r5, r3
 800b39c:	da08      	bge.n	800b3b0 <__swhatbuf_r+0x24>
 800b39e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	602a      	str	r2, [r5, #0]
 800b3a6:	061a      	lsls	r2, r3, #24
 800b3a8:	d410      	bmi.n	800b3cc <__swhatbuf_r+0x40>
 800b3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ae:	e00e      	b.n	800b3ce <__swhatbuf_r+0x42>
 800b3b0:	466a      	mov	r2, sp
 800b3b2:	f000 fe01 	bl	800bfb8 <_fstat_r>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	dbf1      	blt.n	800b39e <__swhatbuf_r+0x12>
 800b3ba:	9a01      	ldr	r2, [sp, #4]
 800b3bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3c4:	425a      	negs	r2, r3
 800b3c6:	415a      	adcs	r2, r3
 800b3c8:	602a      	str	r2, [r5, #0]
 800b3ca:	e7ee      	b.n	800b3aa <__swhatbuf_r+0x1e>
 800b3cc:	2340      	movs	r3, #64	; 0x40
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	b016      	add	sp, #88	; 0x58
 800b3d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3d8 <__smakebuf_r>:
 800b3d8:	898b      	ldrh	r3, [r1, #12]
 800b3da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3dc:	079d      	lsls	r5, r3, #30
 800b3de:	4606      	mov	r6, r0
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	d507      	bpl.n	800b3f4 <__smakebuf_r+0x1c>
 800b3e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	6123      	str	r3, [r4, #16]
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	6163      	str	r3, [r4, #20]
 800b3f0:	b002      	add	sp, #8
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	ab01      	add	r3, sp, #4
 800b3f6:	466a      	mov	r2, sp
 800b3f8:	f7ff ffc8 	bl	800b38c <__swhatbuf_r>
 800b3fc:	9900      	ldr	r1, [sp, #0]
 800b3fe:	4605      	mov	r5, r0
 800b400:	4630      	mov	r0, r6
 800b402:	f000 f89d 	bl	800b540 <_malloc_r>
 800b406:	b948      	cbnz	r0, 800b41c <__smakebuf_r+0x44>
 800b408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40c:	059a      	lsls	r2, r3, #22
 800b40e:	d4ef      	bmi.n	800b3f0 <__smakebuf_r+0x18>
 800b410:	f023 0303 	bic.w	r3, r3, #3
 800b414:	f043 0302 	orr.w	r3, r3, #2
 800b418:	81a3      	strh	r3, [r4, #12]
 800b41a:	e7e3      	b.n	800b3e4 <__smakebuf_r+0xc>
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <__smakebuf_r+0x7c>)
 800b41e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	6020      	str	r0, [r4, #0]
 800b424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	9b00      	ldr	r3, [sp, #0]
 800b42c:	6163      	str	r3, [r4, #20]
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	6120      	str	r0, [r4, #16]
 800b432:	b15b      	cbz	r3, 800b44c <__smakebuf_r+0x74>
 800b434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b438:	4630      	mov	r0, r6
 800b43a:	f000 fdcf 	bl	800bfdc <_isatty_r>
 800b43e:	b128      	cbz	r0, 800b44c <__smakebuf_r+0x74>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	89a0      	ldrh	r0, [r4, #12]
 800b44e:	4305      	orrs	r5, r0
 800b450:	81a5      	strh	r5, [r4, #12]
 800b452:	e7cd      	b.n	800b3f0 <__smakebuf_r+0x18>
 800b454:	0800b1c1 	.word	0x0800b1c1

0800b458 <malloc>:
 800b458:	4b02      	ldr	r3, [pc, #8]	; (800b464 <malloc+0xc>)
 800b45a:	4601      	mov	r1, r0
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f000 b86f 	b.w	800b540 <_malloc_r>
 800b462:	bf00      	nop
 800b464:	20000068 	.word	0x20000068

0800b468 <_free_r>:
 800b468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b46a:	2900      	cmp	r1, #0
 800b46c:	d044      	beq.n	800b4f8 <_free_r+0x90>
 800b46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b472:	9001      	str	r0, [sp, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f1a1 0404 	sub.w	r4, r1, #4
 800b47a:	bfb8      	it	lt
 800b47c:	18e4      	addlt	r4, r4, r3
 800b47e:	f000 fdf7 	bl	800c070 <__malloc_lock>
 800b482:	4a1e      	ldr	r2, [pc, #120]	; (800b4fc <_free_r+0x94>)
 800b484:	9801      	ldr	r0, [sp, #4]
 800b486:	6813      	ldr	r3, [r2, #0]
 800b488:	b933      	cbnz	r3, 800b498 <_free_r+0x30>
 800b48a:	6063      	str	r3, [r4, #4]
 800b48c:	6014      	str	r4, [r2, #0]
 800b48e:	b003      	add	sp, #12
 800b490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b494:	f000 bdf2 	b.w	800c07c <__malloc_unlock>
 800b498:	42a3      	cmp	r3, r4
 800b49a:	d908      	bls.n	800b4ae <_free_r+0x46>
 800b49c:	6825      	ldr	r5, [r4, #0]
 800b49e:	1961      	adds	r1, r4, r5
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf01      	itttt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	1949      	addeq	r1, r1, r5
 800b4aa:	6021      	streq	r1, [r4, #0]
 800b4ac:	e7ed      	b.n	800b48a <_free_r+0x22>
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	b10b      	cbz	r3, 800b4b8 <_free_r+0x50>
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d9fa      	bls.n	800b4ae <_free_r+0x46>
 800b4b8:	6811      	ldr	r1, [r2, #0]
 800b4ba:	1855      	adds	r5, r2, r1
 800b4bc:	42a5      	cmp	r5, r4
 800b4be:	d10b      	bne.n	800b4d8 <_free_r+0x70>
 800b4c0:	6824      	ldr	r4, [r4, #0]
 800b4c2:	4421      	add	r1, r4
 800b4c4:	1854      	adds	r4, r2, r1
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	6011      	str	r1, [r2, #0]
 800b4ca:	d1e0      	bne.n	800b48e <_free_r+0x26>
 800b4cc:	681c      	ldr	r4, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	6053      	str	r3, [r2, #4]
 800b4d2:	4421      	add	r1, r4
 800b4d4:	6011      	str	r1, [r2, #0]
 800b4d6:	e7da      	b.n	800b48e <_free_r+0x26>
 800b4d8:	d902      	bls.n	800b4e0 <_free_r+0x78>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	e7d6      	b.n	800b48e <_free_r+0x26>
 800b4e0:	6825      	ldr	r5, [r4, #0]
 800b4e2:	1961      	adds	r1, r4, r5
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	bf04      	itt	eq
 800b4e8:	6819      	ldreq	r1, [r3, #0]
 800b4ea:	685b      	ldreq	r3, [r3, #4]
 800b4ec:	6063      	str	r3, [r4, #4]
 800b4ee:	bf04      	itt	eq
 800b4f0:	1949      	addeq	r1, r1, r5
 800b4f2:	6021      	streq	r1, [r4, #0]
 800b4f4:	6054      	str	r4, [r2, #4]
 800b4f6:	e7ca      	b.n	800b48e <_free_r+0x26>
 800b4f8:	b003      	add	sp, #12
 800b4fa:	bd30      	pop	{r4, r5, pc}
 800b4fc:	20002a00 	.word	0x20002a00

0800b500 <sbrk_aligned>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	4e0e      	ldr	r6, [pc, #56]	; (800b53c <sbrk_aligned+0x3c>)
 800b504:	460c      	mov	r4, r1
 800b506:	6831      	ldr	r1, [r6, #0]
 800b508:	4605      	mov	r5, r0
 800b50a:	b911      	cbnz	r1, 800b512 <sbrk_aligned+0x12>
 800b50c:	f000 fcd6 	bl	800bebc <_sbrk_r>
 800b510:	6030      	str	r0, [r6, #0]
 800b512:	4621      	mov	r1, r4
 800b514:	4628      	mov	r0, r5
 800b516:	f000 fcd1 	bl	800bebc <_sbrk_r>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d00a      	beq.n	800b534 <sbrk_aligned+0x34>
 800b51e:	1cc4      	adds	r4, r0, #3
 800b520:	f024 0403 	bic.w	r4, r4, #3
 800b524:	42a0      	cmp	r0, r4
 800b526:	d007      	beq.n	800b538 <sbrk_aligned+0x38>
 800b528:	1a21      	subs	r1, r4, r0
 800b52a:	4628      	mov	r0, r5
 800b52c:	f000 fcc6 	bl	800bebc <_sbrk_r>
 800b530:	3001      	adds	r0, #1
 800b532:	d101      	bne.n	800b538 <sbrk_aligned+0x38>
 800b534:	f04f 34ff 	mov.w	r4, #4294967295
 800b538:	4620      	mov	r0, r4
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	20002a04 	.word	0x20002a04

0800b540 <_malloc_r>:
 800b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b544:	1ccd      	adds	r5, r1, #3
 800b546:	f025 0503 	bic.w	r5, r5, #3
 800b54a:	3508      	adds	r5, #8
 800b54c:	2d0c      	cmp	r5, #12
 800b54e:	bf38      	it	cc
 800b550:	250c      	movcc	r5, #12
 800b552:	2d00      	cmp	r5, #0
 800b554:	4607      	mov	r7, r0
 800b556:	db01      	blt.n	800b55c <_malloc_r+0x1c>
 800b558:	42a9      	cmp	r1, r5
 800b55a:	d905      	bls.n	800b568 <_malloc_r+0x28>
 800b55c:	230c      	movs	r3, #12
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	2600      	movs	r6, #0
 800b562:	4630      	mov	r0, r6
 800b564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b568:	4e2e      	ldr	r6, [pc, #184]	; (800b624 <_malloc_r+0xe4>)
 800b56a:	f000 fd81 	bl	800c070 <__malloc_lock>
 800b56e:	6833      	ldr	r3, [r6, #0]
 800b570:	461c      	mov	r4, r3
 800b572:	bb34      	cbnz	r4, 800b5c2 <_malloc_r+0x82>
 800b574:	4629      	mov	r1, r5
 800b576:	4638      	mov	r0, r7
 800b578:	f7ff ffc2 	bl	800b500 <sbrk_aligned>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	4604      	mov	r4, r0
 800b580:	d14d      	bne.n	800b61e <_malloc_r+0xde>
 800b582:	6834      	ldr	r4, [r6, #0]
 800b584:	4626      	mov	r6, r4
 800b586:	2e00      	cmp	r6, #0
 800b588:	d140      	bne.n	800b60c <_malloc_r+0xcc>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	4631      	mov	r1, r6
 800b58e:	4638      	mov	r0, r7
 800b590:	eb04 0803 	add.w	r8, r4, r3
 800b594:	f000 fc92 	bl	800bebc <_sbrk_r>
 800b598:	4580      	cmp	r8, r0
 800b59a:	d13a      	bne.n	800b612 <_malloc_r+0xd2>
 800b59c:	6821      	ldr	r1, [r4, #0]
 800b59e:	3503      	adds	r5, #3
 800b5a0:	1a6d      	subs	r5, r5, r1
 800b5a2:	f025 0503 	bic.w	r5, r5, #3
 800b5a6:	3508      	adds	r5, #8
 800b5a8:	2d0c      	cmp	r5, #12
 800b5aa:	bf38      	it	cc
 800b5ac:	250c      	movcc	r5, #12
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7ff ffa5 	bl	800b500 <sbrk_aligned>
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d02b      	beq.n	800b612 <_malloc_r+0xd2>
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	442b      	add	r3, r5
 800b5be:	6023      	str	r3, [r4, #0]
 800b5c0:	e00e      	b.n	800b5e0 <_malloc_r+0xa0>
 800b5c2:	6822      	ldr	r2, [r4, #0]
 800b5c4:	1b52      	subs	r2, r2, r5
 800b5c6:	d41e      	bmi.n	800b606 <_malloc_r+0xc6>
 800b5c8:	2a0b      	cmp	r2, #11
 800b5ca:	d916      	bls.n	800b5fa <_malloc_r+0xba>
 800b5cc:	1961      	adds	r1, r4, r5
 800b5ce:	42a3      	cmp	r3, r4
 800b5d0:	6025      	str	r5, [r4, #0]
 800b5d2:	bf18      	it	ne
 800b5d4:	6059      	strne	r1, [r3, #4]
 800b5d6:	6863      	ldr	r3, [r4, #4]
 800b5d8:	bf08      	it	eq
 800b5da:	6031      	streq	r1, [r6, #0]
 800b5dc:	5162      	str	r2, [r4, r5]
 800b5de:	604b      	str	r3, [r1, #4]
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f104 060b 	add.w	r6, r4, #11
 800b5e6:	f000 fd49 	bl	800c07c <__malloc_unlock>
 800b5ea:	f026 0607 	bic.w	r6, r6, #7
 800b5ee:	1d23      	adds	r3, r4, #4
 800b5f0:	1af2      	subs	r2, r6, r3
 800b5f2:	d0b6      	beq.n	800b562 <_malloc_r+0x22>
 800b5f4:	1b9b      	subs	r3, r3, r6
 800b5f6:	50a3      	str	r3, [r4, r2]
 800b5f8:	e7b3      	b.n	800b562 <_malloc_r+0x22>
 800b5fa:	6862      	ldr	r2, [r4, #4]
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	bf0c      	ite	eq
 800b600:	6032      	streq	r2, [r6, #0]
 800b602:	605a      	strne	r2, [r3, #4]
 800b604:	e7ec      	b.n	800b5e0 <_malloc_r+0xa0>
 800b606:	4623      	mov	r3, r4
 800b608:	6864      	ldr	r4, [r4, #4]
 800b60a:	e7b2      	b.n	800b572 <_malloc_r+0x32>
 800b60c:	4634      	mov	r4, r6
 800b60e:	6876      	ldr	r6, [r6, #4]
 800b610:	e7b9      	b.n	800b586 <_malloc_r+0x46>
 800b612:	230c      	movs	r3, #12
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	4638      	mov	r0, r7
 800b618:	f000 fd30 	bl	800c07c <__malloc_unlock>
 800b61c:	e7a1      	b.n	800b562 <_malloc_r+0x22>
 800b61e:	6025      	str	r5, [r4, #0]
 800b620:	e7de      	b.n	800b5e0 <_malloc_r+0xa0>
 800b622:	bf00      	nop
 800b624:	20002a00 	.word	0x20002a00

0800b628 <__ssputs_r>:
 800b628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b62c:	688e      	ldr	r6, [r1, #8]
 800b62e:	429e      	cmp	r6, r3
 800b630:	4682      	mov	sl, r0
 800b632:	460c      	mov	r4, r1
 800b634:	4690      	mov	r8, r2
 800b636:	461f      	mov	r7, r3
 800b638:	d838      	bhi.n	800b6ac <__ssputs_r+0x84>
 800b63a:	898a      	ldrh	r2, [r1, #12]
 800b63c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b640:	d032      	beq.n	800b6a8 <__ssputs_r+0x80>
 800b642:	6825      	ldr	r5, [r4, #0]
 800b644:	6909      	ldr	r1, [r1, #16]
 800b646:	eba5 0901 	sub.w	r9, r5, r1
 800b64a:	6965      	ldr	r5, [r4, #20]
 800b64c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b654:	3301      	adds	r3, #1
 800b656:	444b      	add	r3, r9
 800b658:	106d      	asrs	r5, r5, #1
 800b65a:	429d      	cmp	r5, r3
 800b65c:	bf38      	it	cc
 800b65e:	461d      	movcc	r5, r3
 800b660:	0553      	lsls	r3, r2, #21
 800b662:	d531      	bpl.n	800b6c8 <__ssputs_r+0xa0>
 800b664:	4629      	mov	r1, r5
 800b666:	f7ff ff6b 	bl	800b540 <_malloc_r>
 800b66a:	4606      	mov	r6, r0
 800b66c:	b950      	cbnz	r0, 800b684 <__ssputs_r+0x5c>
 800b66e:	230c      	movs	r3, #12
 800b670:	f8ca 3000 	str.w	r3, [sl]
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	f04f 30ff 	mov.w	r0, #4294967295
 800b680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b684:	6921      	ldr	r1, [r4, #16]
 800b686:	464a      	mov	r2, r9
 800b688:	f000 fcca 	bl	800c020 <memcpy>
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b696:	81a3      	strh	r3, [r4, #12]
 800b698:	6126      	str	r6, [r4, #16]
 800b69a:	6165      	str	r5, [r4, #20]
 800b69c:	444e      	add	r6, r9
 800b69e:	eba5 0509 	sub.w	r5, r5, r9
 800b6a2:	6026      	str	r6, [r4, #0]
 800b6a4:	60a5      	str	r5, [r4, #8]
 800b6a6:	463e      	mov	r6, r7
 800b6a8:	42be      	cmp	r6, r7
 800b6aa:	d900      	bls.n	800b6ae <__ssputs_r+0x86>
 800b6ac:	463e      	mov	r6, r7
 800b6ae:	6820      	ldr	r0, [r4, #0]
 800b6b0:	4632      	mov	r2, r6
 800b6b2:	4641      	mov	r1, r8
 800b6b4:	f000 fcc2 	bl	800c03c <memmove>
 800b6b8:	68a3      	ldr	r3, [r4, #8]
 800b6ba:	1b9b      	subs	r3, r3, r6
 800b6bc:	60a3      	str	r3, [r4, #8]
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	4433      	add	r3, r6
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	e7db      	b.n	800b680 <__ssputs_r+0x58>
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	f000 fcdd 	bl	800c088 <_realloc_r>
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d1e1      	bne.n	800b698 <__ssputs_r+0x70>
 800b6d4:	6921      	ldr	r1, [r4, #16]
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	f7ff fec6 	bl	800b468 <_free_r>
 800b6dc:	e7c7      	b.n	800b66e <__ssputs_r+0x46>
	...

0800b6e0 <_svfiprintf_r>:
 800b6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e4:	4698      	mov	r8, r3
 800b6e6:	898b      	ldrh	r3, [r1, #12]
 800b6e8:	061b      	lsls	r3, r3, #24
 800b6ea:	b09d      	sub	sp, #116	; 0x74
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	460d      	mov	r5, r1
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	d50e      	bpl.n	800b712 <_svfiprintf_r+0x32>
 800b6f4:	690b      	ldr	r3, [r1, #16]
 800b6f6:	b963      	cbnz	r3, 800b712 <_svfiprintf_r+0x32>
 800b6f8:	2140      	movs	r1, #64	; 0x40
 800b6fa:	f7ff ff21 	bl	800b540 <_malloc_r>
 800b6fe:	6028      	str	r0, [r5, #0]
 800b700:	6128      	str	r0, [r5, #16]
 800b702:	b920      	cbnz	r0, 800b70e <_svfiprintf_r+0x2e>
 800b704:	230c      	movs	r3, #12
 800b706:	603b      	str	r3, [r7, #0]
 800b708:	f04f 30ff 	mov.w	r0, #4294967295
 800b70c:	e0d1      	b.n	800b8b2 <_svfiprintf_r+0x1d2>
 800b70e:	2340      	movs	r3, #64	; 0x40
 800b710:	616b      	str	r3, [r5, #20]
 800b712:	2300      	movs	r3, #0
 800b714:	9309      	str	r3, [sp, #36]	; 0x24
 800b716:	2320      	movs	r3, #32
 800b718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b720:	2330      	movs	r3, #48	; 0x30
 800b722:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8cc <_svfiprintf_r+0x1ec>
 800b726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b72a:	f04f 0901 	mov.w	r9, #1
 800b72e:	4623      	mov	r3, r4
 800b730:	469a      	mov	sl, r3
 800b732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b736:	b10a      	cbz	r2, 800b73c <_svfiprintf_r+0x5c>
 800b738:	2a25      	cmp	r2, #37	; 0x25
 800b73a:	d1f9      	bne.n	800b730 <_svfiprintf_r+0x50>
 800b73c:	ebba 0b04 	subs.w	fp, sl, r4
 800b740:	d00b      	beq.n	800b75a <_svfiprintf_r+0x7a>
 800b742:	465b      	mov	r3, fp
 800b744:	4622      	mov	r2, r4
 800b746:	4629      	mov	r1, r5
 800b748:	4638      	mov	r0, r7
 800b74a:	f7ff ff6d 	bl	800b628 <__ssputs_r>
 800b74e:	3001      	adds	r0, #1
 800b750:	f000 80aa 	beq.w	800b8a8 <_svfiprintf_r+0x1c8>
 800b754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b756:	445a      	add	r2, fp
 800b758:	9209      	str	r2, [sp, #36]	; 0x24
 800b75a:	f89a 3000 	ldrb.w	r3, [sl]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 80a2 	beq.w	800b8a8 <_svfiprintf_r+0x1c8>
 800b764:	2300      	movs	r3, #0
 800b766:	f04f 32ff 	mov.w	r2, #4294967295
 800b76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b76e:	f10a 0a01 	add.w	sl, sl, #1
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	9307      	str	r3, [sp, #28]
 800b776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b77a:	931a      	str	r3, [sp, #104]	; 0x68
 800b77c:	4654      	mov	r4, sl
 800b77e:	2205      	movs	r2, #5
 800b780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b784:	4851      	ldr	r0, [pc, #324]	; (800b8cc <_svfiprintf_r+0x1ec>)
 800b786:	f7f4 fd2b 	bl	80001e0 <memchr>
 800b78a:	9a04      	ldr	r2, [sp, #16]
 800b78c:	b9d8      	cbnz	r0, 800b7c6 <_svfiprintf_r+0xe6>
 800b78e:	06d0      	lsls	r0, r2, #27
 800b790:	bf44      	itt	mi
 800b792:	2320      	movmi	r3, #32
 800b794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b798:	0711      	lsls	r1, r2, #28
 800b79a:	bf44      	itt	mi
 800b79c:	232b      	movmi	r3, #43	; 0x2b
 800b79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a8:	d015      	beq.n	800b7d6 <_svfiprintf_r+0xf6>
 800b7aa:	9a07      	ldr	r2, [sp, #28]
 800b7ac:	4654      	mov	r4, sl
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	f04f 0c0a 	mov.w	ip, #10
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ba:	3b30      	subs	r3, #48	; 0x30
 800b7bc:	2b09      	cmp	r3, #9
 800b7be:	d94e      	bls.n	800b85e <_svfiprintf_r+0x17e>
 800b7c0:	b1b0      	cbz	r0, 800b7f0 <_svfiprintf_r+0x110>
 800b7c2:	9207      	str	r2, [sp, #28]
 800b7c4:	e014      	b.n	800b7f0 <_svfiprintf_r+0x110>
 800b7c6:	eba0 0308 	sub.w	r3, r0, r8
 800b7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	46a2      	mov	sl, r4
 800b7d4:	e7d2      	b.n	800b77c <_svfiprintf_r+0x9c>
 800b7d6:	9b03      	ldr	r3, [sp, #12]
 800b7d8:	1d19      	adds	r1, r3, #4
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	9103      	str	r1, [sp, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	bfbb      	ittet	lt
 800b7e2:	425b      	neglt	r3, r3
 800b7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e8:	9307      	strge	r3, [sp, #28]
 800b7ea:	9307      	strlt	r3, [sp, #28]
 800b7ec:	bfb8      	it	lt
 800b7ee:	9204      	strlt	r2, [sp, #16]
 800b7f0:	7823      	ldrb	r3, [r4, #0]
 800b7f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7f4:	d10c      	bne.n	800b810 <_svfiprintf_r+0x130>
 800b7f6:	7863      	ldrb	r3, [r4, #1]
 800b7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7fa:	d135      	bne.n	800b868 <_svfiprintf_r+0x188>
 800b7fc:	9b03      	ldr	r3, [sp, #12]
 800b7fe:	1d1a      	adds	r2, r3, #4
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	9203      	str	r2, [sp, #12]
 800b804:	2b00      	cmp	r3, #0
 800b806:	bfb8      	it	lt
 800b808:	f04f 33ff 	movlt.w	r3, #4294967295
 800b80c:	3402      	adds	r4, #2
 800b80e:	9305      	str	r3, [sp, #20]
 800b810:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8dc <_svfiprintf_r+0x1fc>
 800b814:	7821      	ldrb	r1, [r4, #0]
 800b816:	2203      	movs	r2, #3
 800b818:	4650      	mov	r0, sl
 800b81a:	f7f4 fce1 	bl	80001e0 <memchr>
 800b81e:	b140      	cbz	r0, 800b832 <_svfiprintf_r+0x152>
 800b820:	2340      	movs	r3, #64	; 0x40
 800b822:	eba0 000a 	sub.w	r0, r0, sl
 800b826:	fa03 f000 	lsl.w	r0, r3, r0
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	4303      	orrs	r3, r0
 800b82e:	3401      	adds	r4, #1
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b836:	4826      	ldr	r0, [pc, #152]	; (800b8d0 <_svfiprintf_r+0x1f0>)
 800b838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b83c:	2206      	movs	r2, #6
 800b83e:	f7f4 fccf 	bl	80001e0 <memchr>
 800b842:	2800      	cmp	r0, #0
 800b844:	d038      	beq.n	800b8b8 <_svfiprintf_r+0x1d8>
 800b846:	4b23      	ldr	r3, [pc, #140]	; (800b8d4 <_svfiprintf_r+0x1f4>)
 800b848:	bb1b      	cbnz	r3, 800b892 <_svfiprintf_r+0x1b2>
 800b84a:	9b03      	ldr	r3, [sp, #12]
 800b84c:	3307      	adds	r3, #7
 800b84e:	f023 0307 	bic.w	r3, r3, #7
 800b852:	3308      	adds	r3, #8
 800b854:	9303      	str	r3, [sp, #12]
 800b856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b858:	4433      	add	r3, r6
 800b85a:	9309      	str	r3, [sp, #36]	; 0x24
 800b85c:	e767      	b.n	800b72e <_svfiprintf_r+0x4e>
 800b85e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b862:	460c      	mov	r4, r1
 800b864:	2001      	movs	r0, #1
 800b866:	e7a5      	b.n	800b7b4 <_svfiprintf_r+0xd4>
 800b868:	2300      	movs	r3, #0
 800b86a:	3401      	adds	r4, #1
 800b86c:	9305      	str	r3, [sp, #20]
 800b86e:	4619      	mov	r1, r3
 800b870:	f04f 0c0a 	mov.w	ip, #10
 800b874:	4620      	mov	r0, r4
 800b876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b87a:	3a30      	subs	r2, #48	; 0x30
 800b87c:	2a09      	cmp	r2, #9
 800b87e:	d903      	bls.n	800b888 <_svfiprintf_r+0x1a8>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0c5      	beq.n	800b810 <_svfiprintf_r+0x130>
 800b884:	9105      	str	r1, [sp, #20]
 800b886:	e7c3      	b.n	800b810 <_svfiprintf_r+0x130>
 800b888:	fb0c 2101 	mla	r1, ip, r1, r2
 800b88c:	4604      	mov	r4, r0
 800b88e:	2301      	movs	r3, #1
 800b890:	e7f0      	b.n	800b874 <_svfiprintf_r+0x194>
 800b892:	ab03      	add	r3, sp, #12
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	462a      	mov	r2, r5
 800b898:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <_svfiprintf_r+0x1f8>)
 800b89a:	a904      	add	r1, sp, #16
 800b89c:	4638      	mov	r0, r7
 800b89e:	f3af 8000 	nop.w
 800b8a2:	1c42      	adds	r2, r0, #1
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	d1d6      	bne.n	800b856 <_svfiprintf_r+0x176>
 800b8a8:	89ab      	ldrh	r3, [r5, #12]
 800b8aa:	065b      	lsls	r3, r3, #25
 800b8ac:	f53f af2c 	bmi.w	800b708 <_svfiprintf_r+0x28>
 800b8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8b2:	b01d      	add	sp, #116	; 0x74
 800b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b8:	ab03      	add	r3, sp, #12
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	462a      	mov	r2, r5
 800b8be:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <_svfiprintf_r+0x1f8>)
 800b8c0:	a904      	add	r1, sp, #16
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	f000 f9d4 	bl	800bc70 <_printf_i>
 800b8c8:	e7eb      	b.n	800b8a2 <_svfiprintf_r+0x1c2>
 800b8ca:	bf00      	nop
 800b8cc:	0800e010 	.word	0x0800e010
 800b8d0:	0800e01a 	.word	0x0800e01a
 800b8d4:	00000000 	.word	0x00000000
 800b8d8:	0800b629 	.word	0x0800b629
 800b8dc:	0800e016 	.word	0x0800e016

0800b8e0 <__sfputc_r>:
 800b8e0:	6893      	ldr	r3, [r2, #8]
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	b410      	push	{r4}
 800b8e8:	6093      	str	r3, [r2, #8]
 800b8ea:	da08      	bge.n	800b8fe <__sfputc_r+0x1e>
 800b8ec:	6994      	ldr	r4, [r2, #24]
 800b8ee:	42a3      	cmp	r3, r4
 800b8f0:	db01      	blt.n	800b8f6 <__sfputc_r+0x16>
 800b8f2:	290a      	cmp	r1, #10
 800b8f4:	d103      	bne.n	800b8fe <__sfputc_r+0x1e>
 800b8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8fa:	f7ff ba9d 	b.w	800ae38 <__swbuf_r>
 800b8fe:	6813      	ldr	r3, [r2, #0]
 800b900:	1c58      	adds	r0, r3, #1
 800b902:	6010      	str	r0, [r2, #0]
 800b904:	7019      	strb	r1, [r3, #0]
 800b906:	4608      	mov	r0, r1
 800b908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <__sfputs_r>:
 800b90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b910:	4606      	mov	r6, r0
 800b912:	460f      	mov	r7, r1
 800b914:	4614      	mov	r4, r2
 800b916:	18d5      	adds	r5, r2, r3
 800b918:	42ac      	cmp	r4, r5
 800b91a:	d101      	bne.n	800b920 <__sfputs_r+0x12>
 800b91c:	2000      	movs	r0, #0
 800b91e:	e007      	b.n	800b930 <__sfputs_r+0x22>
 800b920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b924:	463a      	mov	r2, r7
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff ffda 	bl	800b8e0 <__sfputc_r>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d1f3      	bne.n	800b918 <__sfputs_r+0xa>
 800b930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b934 <_vfiprintf_r>:
 800b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	460d      	mov	r5, r1
 800b93a:	b09d      	sub	sp, #116	; 0x74
 800b93c:	4614      	mov	r4, r2
 800b93e:	4698      	mov	r8, r3
 800b940:	4606      	mov	r6, r0
 800b942:	b118      	cbz	r0, 800b94c <_vfiprintf_r+0x18>
 800b944:	6983      	ldr	r3, [r0, #24]
 800b946:	b90b      	cbnz	r3, 800b94c <_vfiprintf_r+0x18>
 800b948:	f7ff fc6e 	bl	800b228 <__sinit>
 800b94c:	4b89      	ldr	r3, [pc, #548]	; (800bb74 <_vfiprintf_r+0x240>)
 800b94e:	429d      	cmp	r5, r3
 800b950:	d11b      	bne.n	800b98a <_vfiprintf_r+0x56>
 800b952:	6875      	ldr	r5, [r6, #4]
 800b954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b956:	07d9      	lsls	r1, r3, #31
 800b958:	d405      	bmi.n	800b966 <_vfiprintf_r+0x32>
 800b95a:	89ab      	ldrh	r3, [r5, #12]
 800b95c:	059a      	lsls	r2, r3, #22
 800b95e:	d402      	bmi.n	800b966 <_vfiprintf_r+0x32>
 800b960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b962:	f7ff fd11 	bl	800b388 <__retarget_lock_acquire_recursive>
 800b966:	89ab      	ldrh	r3, [r5, #12]
 800b968:	071b      	lsls	r3, r3, #28
 800b96a:	d501      	bpl.n	800b970 <_vfiprintf_r+0x3c>
 800b96c:	692b      	ldr	r3, [r5, #16]
 800b96e:	b9eb      	cbnz	r3, 800b9ac <_vfiprintf_r+0x78>
 800b970:	4629      	mov	r1, r5
 800b972:	4630      	mov	r0, r6
 800b974:	f7ff fab2 	bl	800aedc <__swsetup_r>
 800b978:	b1c0      	cbz	r0, 800b9ac <_vfiprintf_r+0x78>
 800b97a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b97c:	07dc      	lsls	r4, r3, #31
 800b97e:	d50e      	bpl.n	800b99e <_vfiprintf_r+0x6a>
 800b980:	f04f 30ff 	mov.w	r0, #4294967295
 800b984:	b01d      	add	sp, #116	; 0x74
 800b986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98a:	4b7b      	ldr	r3, [pc, #492]	; (800bb78 <_vfiprintf_r+0x244>)
 800b98c:	429d      	cmp	r5, r3
 800b98e:	d101      	bne.n	800b994 <_vfiprintf_r+0x60>
 800b990:	68b5      	ldr	r5, [r6, #8]
 800b992:	e7df      	b.n	800b954 <_vfiprintf_r+0x20>
 800b994:	4b79      	ldr	r3, [pc, #484]	; (800bb7c <_vfiprintf_r+0x248>)
 800b996:	429d      	cmp	r5, r3
 800b998:	bf08      	it	eq
 800b99a:	68f5      	ldreq	r5, [r6, #12]
 800b99c:	e7da      	b.n	800b954 <_vfiprintf_r+0x20>
 800b99e:	89ab      	ldrh	r3, [r5, #12]
 800b9a0:	0598      	lsls	r0, r3, #22
 800b9a2:	d4ed      	bmi.n	800b980 <_vfiprintf_r+0x4c>
 800b9a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9a6:	f7ff fcf0 	bl	800b38a <__retarget_lock_release_recursive>
 800b9aa:	e7e9      	b.n	800b980 <_vfiprintf_r+0x4c>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b0:	2320      	movs	r3, #32
 800b9b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ba:	2330      	movs	r3, #48	; 0x30
 800b9bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb80 <_vfiprintf_r+0x24c>
 800b9c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9c4:	f04f 0901 	mov.w	r9, #1
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	469a      	mov	sl, r3
 800b9cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d0:	b10a      	cbz	r2, 800b9d6 <_vfiprintf_r+0xa2>
 800b9d2:	2a25      	cmp	r2, #37	; 0x25
 800b9d4:	d1f9      	bne.n	800b9ca <_vfiprintf_r+0x96>
 800b9d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b9da:	d00b      	beq.n	800b9f4 <_vfiprintf_r+0xc0>
 800b9dc:	465b      	mov	r3, fp
 800b9de:	4622      	mov	r2, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f7ff ff93 	bl	800b90e <__sfputs_r>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	f000 80aa 	beq.w	800bb42 <_vfiprintf_r+0x20e>
 800b9ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9f0:	445a      	add	r2, fp
 800b9f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 80a2 	beq.w	800bb42 <_vfiprintf_r+0x20e>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f04f 32ff 	mov.w	r2, #4294967295
 800ba04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba08:	f10a 0a01 	add.w	sl, sl, #1
 800ba0c:	9304      	str	r3, [sp, #16]
 800ba0e:	9307      	str	r3, [sp, #28]
 800ba10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba14:	931a      	str	r3, [sp, #104]	; 0x68
 800ba16:	4654      	mov	r4, sl
 800ba18:	2205      	movs	r2, #5
 800ba1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1e:	4858      	ldr	r0, [pc, #352]	; (800bb80 <_vfiprintf_r+0x24c>)
 800ba20:	f7f4 fbde 	bl	80001e0 <memchr>
 800ba24:	9a04      	ldr	r2, [sp, #16]
 800ba26:	b9d8      	cbnz	r0, 800ba60 <_vfiprintf_r+0x12c>
 800ba28:	06d1      	lsls	r1, r2, #27
 800ba2a:	bf44      	itt	mi
 800ba2c:	2320      	movmi	r3, #32
 800ba2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba32:	0713      	lsls	r3, r2, #28
 800ba34:	bf44      	itt	mi
 800ba36:	232b      	movmi	r3, #43	; 0x2b
 800ba38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba40:	2b2a      	cmp	r3, #42	; 0x2a
 800ba42:	d015      	beq.n	800ba70 <_vfiprintf_r+0x13c>
 800ba44:	9a07      	ldr	r2, [sp, #28]
 800ba46:	4654      	mov	r4, sl
 800ba48:	2000      	movs	r0, #0
 800ba4a:	f04f 0c0a 	mov.w	ip, #10
 800ba4e:	4621      	mov	r1, r4
 800ba50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba54:	3b30      	subs	r3, #48	; 0x30
 800ba56:	2b09      	cmp	r3, #9
 800ba58:	d94e      	bls.n	800baf8 <_vfiprintf_r+0x1c4>
 800ba5a:	b1b0      	cbz	r0, 800ba8a <_vfiprintf_r+0x156>
 800ba5c:	9207      	str	r2, [sp, #28]
 800ba5e:	e014      	b.n	800ba8a <_vfiprintf_r+0x156>
 800ba60:	eba0 0308 	sub.w	r3, r0, r8
 800ba64:	fa09 f303 	lsl.w	r3, r9, r3
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	46a2      	mov	sl, r4
 800ba6e:	e7d2      	b.n	800ba16 <_vfiprintf_r+0xe2>
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	1d19      	adds	r1, r3, #4
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	9103      	str	r1, [sp, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	bfbb      	ittet	lt
 800ba7c:	425b      	neglt	r3, r3
 800ba7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba82:	9307      	strge	r3, [sp, #28]
 800ba84:	9307      	strlt	r3, [sp, #28]
 800ba86:	bfb8      	it	lt
 800ba88:	9204      	strlt	r2, [sp, #16]
 800ba8a:	7823      	ldrb	r3, [r4, #0]
 800ba8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba8e:	d10c      	bne.n	800baaa <_vfiprintf_r+0x176>
 800ba90:	7863      	ldrb	r3, [r4, #1]
 800ba92:	2b2a      	cmp	r3, #42	; 0x2a
 800ba94:	d135      	bne.n	800bb02 <_vfiprintf_r+0x1ce>
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	1d1a      	adds	r2, r3, #4
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	9203      	str	r2, [sp, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	bfb8      	it	lt
 800baa2:	f04f 33ff 	movlt.w	r3, #4294967295
 800baa6:	3402      	adds	r4, #2
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb90 <_vfiprintf_r+0x25c>
 800baae:	7821      	ldrb	r1, [r4, #0]
 800bab0:	2203      	movs	r2, #3
 800bab2:	4650      	mov	r0, sl
 800bab4:	f7f4 fb94 	bl	80001e0 <memchr>
 800bab8:	b140      	cbz	r0, 800bacc <_vfiprintf_r+0x198>
 800baba:	2340      	movs	r3, #64	; 0x40
 800babc:	eba0 000a 	sub.w	r0, r0, sl
 800bac0:	fa03 f000 	lsl.w	r0, r3, r0
 800bac4:	9b04      	ldr	r3, [sp, #16]
 800bac6:	4303      	orrs	r3, r0
 800bac8:	3401      	adds	r4, #1
 800baca:	9304      	str	r3, [sp, #16]
 800bacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad0:	482c      	ldr	r0, [pc, #176]	; (800bb84 <_vfiprintf_r+0x250>)
 800bad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bad6:	2206      	movs	r2, #6
 800bad8:	f7f4 fb82 	bl	80001e0 <memchr>
 800badc:	2800      	cmp	r0, #0
 800bade:	d03f      	beq.n	800bb60 <_vfiprintf_r+0x22c>
 800bae0:	4b29      	ldr	r3, [pc, #164]	; (800bb88 <_vfiprintf_r+0x254>)
 800bae2:	bb1b      	cbnz	r3, 800bb2c <_vfiprintf_r+0x1f8>
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	3307      	adds	r3, #7
 800bae8:	f023 0307 	bic.w	r3, r3, #7
 800baec:	3308      	adds	r3, #8
 800baee:	9303      	str	r3, [sp, #12]
 800baf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf2:	443b      	add	r3, r7
 800baf4:	9309      	str	r3, [sp, #36]	; 0x24
 800baf6:	e767      	b.n	800b9c8 <_vfiprintf_r+0x94>
 800baf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bafc:	460c      	mov	r4, r1
 800bafe:	2001      	movs	r0, #1
 800bb00:	e7a5      	b.n	800ba4e <_vfiprintf_r+0x11a>
 800bb02:	2300      	movs	r3, #0
 800bb04:	3401      	adds	r4, #1
 800bb06:	9305      	str	r3, [sp, #20]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f04f 0c0a 	mov.w	ip, #10
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb14:	3a30      	subs	r2, #48	; 0x30
 800bb16:	2a09      	cmp	r2, #9
 800bb18:	d903      	bls.n	800bb22 <_vfiprintf_r+0x1ee>
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0c5      	beq.n	800baaa <_vfiprintf_r+0x176>
 800bb1e:	9105      	str	r1, [sp, #20]
 800bb20:	e7c3      	b.n	800baaa <_vfiprintf_r+0x176>
 800bb22:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb26:	4604      	mov	r4, r0
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e7f0      	b.n	800bb0e <_vfiprintf_r+0x1da>
 800bb2c:	ab03      	add	r3, sp, #12
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	462a      	mov	r2, r5
 800bb32:	4b16      	ldr	r3, [pc, #88]	; (800bb8c <_vfiprintf_r+0x258>)
 800bb34:	a904      	add	r1, sp, #16
 800bb36:	4630      	mov	r0, r6
 800bb38:	f3af 8000 	nop.w
 800bb3c:	4607      	mov	r7, r0
 800bb3e:	1c78      	adds	r0, r7, #1
 800bb40:	d1d6      	bne.n	800baf0 <_vfiprintf_r+0x1bc>
 800bb42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb44:	07d9      	lsls	r1, r3, #31
 800bb46:	d405      	bmi.n	800bb54 <_vfiprintf_r+0x220>
 800bb48:	89ab      	ldrh	r3, [r5, #12]
 800bb4a:	059a      	lsls	r2, r3, #22
 800bb4c:	d402      	bmi.n	800bb54 <_vfiprintf_r+0x220>
 800bb4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb50:	f7ff fc1b 	bl	800b38a <__retarget_lock_release_recursive>
 800bb54:	89ab      	ldrh	r3, [r5, #12]
 800bb56:	065b      	lsls	r3, r3, #25
 800bb58:	f53f af12 	bmi.w	800b980 <_vfiprintf_r+0x4c>
 800bb5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb5e:	e711      	b.n	800b984 <_vfiprintf_r+0x50>
 800bb60:	ab03      	add	r3, sp, #12
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	462a      	mov	r2, r5
 800bb66:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <_vfiprintf_r+0x258>)
 800bb68:	a904      	add	r1, sp, #16
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f000 f880 	bl	800bc70 <_printf_i>
 800bb70:	e7e4      	b.n	800bb3c <_vfiprintf_r+0x208>
 800bb72:	bf00      	nop
 800bb74:	0800dfd0 	.word	0x0800dfd0
 800bb78:	0800dff0 	.word	0x0800dff0
 800bb7c:	0800dfb0 	.word	0x0800dfb0
 800bb80:	0800e010 	.word	0x0800e010
 800bb84:	0800e01a 	.word	0x0800e01a
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	0800b90f 	.word	0x0800b90f
 800bb90:	0800e016 	.word	0x0800e016

0800bb94 <_printf_common>:
 800bb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb98:	4616      	mov	r6, r2
 800bb9a:	4699      	mov	r9, r3
 800bb9c:	688a      	ldr	r2, [r1, #8]
 800bb9e:	690b      	ldr	r3, [r1, #16]
 800bba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bba4:	4293      	cmp	r3, r2
 800bba6:	bfb8      	it	lt
 800bba8:	4613      	movlt	r3, r2
 800bbaa:	6033      	str	r3, [r6, #0]
 800bbac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	b10a      	cbz	r2, 800bbba <_printf_common+0x26>
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	6033      	str	r3, [r6, #0]
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	0699      	lsls	r1, r3, #26
 800bbbe:	bf42      	ittt	mi
 800bbc0:	6833      	ldrmi	r3, [r6, #0]
 800bbc2:	3302      	addmi	r3, #2
 800bbc4:	6033      	strmi	r3, [r6, #0]
 800bbc6:	6825      	ldr	r5, [r4, #0]
 800bbc8:	f015 0506 	ands.w	r5, r5, #6
 800bbcc:	d106      	bne.n	800bbdc <_printf_common+0x48>
 800bbce:	f104 0a19 	add.w	sl, r4, #25
 800bbd2:	68e3      	ldr	r3, [r4, #12]
 800bbd4:	6832      	ldr	r2, [r6, #0]
 800bbd6:	1a9b      	subs	r3, r3, r2
 800bbd8:	42ab      	cmp	r3, r5
 800bbda:	dc26      	bgt.n	800bc2a <_printf_common+0x96>
 800bbdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbe0:	1e13      	subs	r3, r2, #0
 800bbe2:	6822      	ldr	r2, [r4, #0]
 800bbe4:	bf18      	it	ne
 800bbe6:	2301      	movne	r3, #1
 800bbe8:	0692      	lsls	r2, r2, #26
 800bbea:	d42b      	bmi.n	800bc44 <_printf_common+0xb0>
 800bbec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	4638      	mov	r0, r7
 800bbf4:	47c0      	blx	r8
 800bbf6:	3001      	adds	r0, #1
 800bbf8:	d01e      	beq.n	800bc38 <_printf_common+0xa4>
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	68e5      	ldr	r5, [r4, #12]
 800bbfe:	6832      	ldr	r2, [r6, #0]
 800bc00:	f003 0306 	and.w	r3, r3, #6
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	bf08      	it	eq
 800bc08:	1aad      	subeq	r5, r5, r2
 800bc0a:	68a3      	ldr	r3, [r4, #8]
 800bc0c:	6922      	ldr	r2, [r4, #16]
 800bc0e:	bf0c      	ite	eq
 800bc10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc14:	2500      	movne	r5, #0
 800bc16:	4293      	cmp	r3, r2
 800bc18:	bfc4      	itt	gt
 800bc1a:	1a9b      	subgt	r3, r3, r2
 800bc1c:	18ed      	addgt	r5, r5, r3
 800bc1e:	2600      	movs	r6, #0
 800bc20:	341a      	adds	r4, #26
 800bc22:	42b5      	cmp	r5, r6
 800bc24:	d11a      	bne.n	800bc5c <_printf_common+0xc8>
 800bc26:	2000      	movs	r0, #0
 800bc28:	e008      	b.n	800bc3c <_printf_common+0xa8>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	4652      	mov	r2, sl
 800bc2e:	4649      	mov	r1, r9
 800bc30:	4638      	mov	r0, r7
 800bc32:	47c0      	blx	r8
 800bc34:	3001      	adds	r0, #1
 800bc36:	d103      	bne.n	800bc40 <_printf_common+0xac>
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc40:	3501      	adds	r5, #1
 800bc42:	e7c6      	b.n	800bbd2 <_printf_common+0x3e>
 800bc44:	18e1      	adds	r1, r4, r3
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	2030      	movs	r0, #48	; 0x30
 800bc4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc4e:	4422      	add	r2, r4
 800bc50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc58:	3302      	adds	r3, #2
 800bc5a:	e7c7      	b.n	800bbec <_printf_common+0x58>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	4622      	mov	r2, r4
 800bc60:	4649      	mov	r1, r9
 800bc62:	4638      	mov	r0, r7
 800bc64:	47c0      	blx	r8
 800bc66:	3001      	adds	r0, #1
 800bc68:	d0e6      	beq.n	800bc38 <_printf_common+0xa4>
 800bc6a:	3601      	adds	r6, #1
 800bc6c:	e7d9      	b.n	800bc22 <_printf_common+0x8e>
	...

0800bc70 <_printf_i>:
 800bc70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc74:	7e0f      	ldrb	r7, [r1, #24]
 800bc76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc78:	2f78      	cmp	r7, #120	; 0x78
 800bc7a:	4691      	mov	r9, r2
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	460c      	mov	r4, r1
 800bc80:	469a      	mov	sl, r3
 800bc82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc86:	d807      	bhi.n	800bc98 <_printf_i+0x28>
 800bc88:	2f62      	cmp	r7, #98	; 0x62
 800bc8a:	d80a      	bhi.n	800bca2 <_printf_i+0x32>
 800bc8c:	2f00      	cmp	r7, #0
 800bc8e:	f000 80d8 	beq.w	800be42 <_printf_i+0x1d2>
 800bc92:	2f58      	cmp	r7, #88	; 0x58
 800bc94:	f000 80a3 	beq.w	800bdde <_printf_i+0x16e>
 800bc98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bca0:	e03a      	b.n	800bd18 <_printf_i+0xa8>
 800bca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bca6:	2b15      	cmp	r3, #21
 800bca8:	d8f6      	bhi.n	800bc98 <_printf_i+0x28>
 800bcaa:	a101      	add	r1, pc, #4	; (adr r1, 800bcb0 <_printf_i+0x40>)
 800bcac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcb0:	0800bd09 	.word	0x0800bd09
 800bcb4:	0800bd1d 	.word	0x0800bd1d
 800bcb8:	0800bc99 	.word	0x0800bc99
 800bcbc:	0800bc99 	.word	0x0800bc99
 800bcc0:	0800bc99 	.word	0x0800bc99
 800bcc4:	0800bc99 	.word	0x0800bc99
 800bcc8:	0800bd1d 	.word	0x0800bd1d
 800bccc:	0800bc99 	.word	0x0800bc99
 800bcd0:	0800bc99 	.word	0x0800bc99
 800bcd4:	0800bc99 	.word	0x0800bc99
 800bcd8:	0800bc99 	.word	0x0800bc99
 800bcdc:	0800be29 	.word	0x0800be29
 800bce0:	0800bd4d 	.word	0x0800bd4d
 800bce4:	0800be0b 	.word	0x0800be0b
 800bce8:	0800bc99 	.word	0x0800bc99
 800bcec:	0800bc99 	.word	0x0800bc99
 800bcf0:	0800be4b 	.word	0x0800be4b
 800bcf4:	0800bc99 	.word	0x0800bc99
 800bcf8:	0800bd4d 	.word	0x0800bd4d
 800bcfc:	0800bc99 	.word	0x0800bc99
 800bd00:	0800bc99 	.word	0x0800bc99
 800bd04:	0800be13 	.word	0x0800be13
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	1d1a      	adds	r2, r3, #4
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	602a      	str	r2, [r5, #0]
 800bd10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e0a3      	b.n	800be64 <_printf_i+0x1f4>
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	6829      	ldr	r1, [r5, #0]
 800bd20:	0606      	lsls	r6, r0, #24
 800bd22:	f101 0304 	add.w	r3, r1, #4
 800bd26:	d50a      	bpl.n	800bd3e <_printf_i+0xce>
 800bd28:	680e      	ldr	r6, [r1, #0]
 800bd2a:	602b      	str	r3, [r5, #0]
 800bd2c:	2e00      	cmp	r6, #0
 800bd2e:	da03      	bge.n	800bd38 <_printf_i+0xc8>
 800bd30:	232d      	movs	r3, #45	; 0x2d
 800bd32:	4276      	negs	r6, r6
 800bd34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd38:	485e      	ldr	r0, [pc, #376]	; (800beb4 <_printf_i+0x244>)
 800bd3a:	230a      	movs	r3, #10
 800bd3c:	e019      	b.n	800bd72 <_printf_i+0x102>
 800bd3e:	680e      	ldr	r6, [r1, #0]
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd46:	bf18      	it	ne
 800bd48:	b236      	sxthne	r6, r6
 800bd4a:	e7ef      	b.n	800bd2c <_printf_i+0xbc>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	6820      	ldr	r0, [r4, #0]
 800bd50:	1d19      	adds	r1, r3, #4
 800bd52:	6029      	str	r1, [r5, #0]
 800bd54:	0601      	lsls	r1, r0, #24
 800bd56:	d501      	bpl.n	800bd5c <_printf_i+0xec>
 800bd58:	681e      	ldr	r6, [r3, #0]
 800bd5a:	e002      	b.n	800bd62 <_printf_i+0xf2>
 800bd5c:	0646      	lsls	r6, r0, #25
 800bd5e:	d5fb      	bpl.n	800bd58 <_printf_i+0xe8>
 800bd60:	881e      	ldrh	r6, [r3, #0]
 800bd62:	4854      	ldr	r0, [pc, #336]	; (800beb4 <_printf_i+0x244>)
 800bd64:	2f6f      	cmp	r7, #111	; 0x6f
 800bd66:	bf0c      	ite	eq
 800bd68:	2308      	moveq	r3, #8
 800bd6a:	230a      	movne	r3, #10
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd72:	6865      	ldr	r5, [r4, #4]
 800bd74:	60a5      	str	r5, [r4, #8]
 800bd76:	2d00      	cmp	r5, #0
 800bd78:	bfa2      	ittt	ge
 800bd7a:	6821      	ldrge	r1, [r4, #0]
 800bd7c:	f021 0104 	bicge.w	r1, r1, #4
 800bd80:	6021      	strge	r1, [r4, #0]
 800bd82:	b90e      	cbnz	r6, 800bd88 <_printf_i+0x118>
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	d04d      	beq.n	800be24 <_printf_i+0x1b4>
 800bd88:	4615      	mov	r5, r2
 800bd8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd8e:	fb03 6711 	mls	r7, r3, r1, r6
 800bd92:	5dc7      	ldrb	r7, [r0, r7]
 800bd94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd98:	4637      	mov	r7, r6
 800bd9a:	42bb      	cmp	r3, r7
 800bd9c:	460e      	mov	r6, r1
 800bd9e:	d9f4      	bls.n	800bd8a <_printf_i+0x11a>
 800bda0:	2b08      	cmp	r3, #8
 800bda2:	d10b      	bne.n	800bdbc <_printf_i+0x14c>
 800bda4:	6823      	ldr	r3, [r4, #0]
 800bda6:	07de      	lsls	r6, r3, #31
 800bda8:	d508      	bpl.n	800bdbc <_printf_i+0x14c>
 800bdaa:	6923      	ldr	r3, [r4, #16]
 800bdac:	6861      	ldr	r1, [r4, #4]
 800bdae:	4299      	cmp	r1, r3
 800bdb0:	bfde      	ittt	le
 800bdb2:	2330      	movle	r3, #48	; 0x30
 800bdb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdbc:	1b52      	subs	r2, r2, r5
 800bdbe:	6122      	str	r2, [r4, #16]
 800bdc0:	f8cd a000 	str.w	sl, [sp]
 800bdc4:	464b      	mov	r3, r9
 800bdc6:	aa03      	add	r2, sp, #12
 800bdc8:	4621      	mov	r1, r4
 800bdca:	4640      	mov	r0, r8
 800bdcc:	f7ff fee2 	bl	800bb94 <_printf_common>
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d14c      	bne.n	800be6e <_printf_i+0x1fe>
 800bdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd8:	b004      	add	sp, #16
 800bdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdde:	4835      	ldr	r0, [pc, #212]	; (800beb4 <_printf_i+0x244>)
 800bde0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bde4:	6829      	ldr	r1, [r5, #0]
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdec:	6029      	str	r1, [r5, #0]
 800bdee:	061d      	lsls	r5, r3, #24
 800bdf0:	d514      	bpl.n	800be1c <_printf_i+0x1ac>
 800bdf2:	07df      	lsls	r7, r3, #31
 800bdf4:	bf44      	itt	mi
 800bdf6:	f043 0320 	orrmi.w	r3, r3, #32
 800bdfa:	6023      	strmi	r3, [r4, #0]
 800bdfc:	b91e      	cbnz	r6, 800be06 <_printf_i+0x196>
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	f023 0320 	bic.w	r3, r3, #32
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	2310      	movs	r3, #16
 800be08:	e7b0      	b.n	800bd6c <_printf_i+0xfc>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	f043 0320 	orr.w	r3, r3, #32
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	2378      	movs	r3, #120	; 0x78
 800be14:	4828      	ldr	r0, [pc, #160]	; (800beb8 <_printf_i+0x248>)
 800be16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be1a:	e7e3      	b.n	800bde4 <_printf_i+0x174>
 800be1c:	0659      	lsls	r1, r3, #25
 800be1e:	bf48      	it	mi
 800be20:	b2b6      	uxthmi	r6, r6
 800be22:	e7e6      	b.n	800bdf2 <_printf_i+0x182>
 800be24:	4615      	mov	r5, r2
 800be26:	e7bb      	b.n	800bda0 <_printf_i+0x130>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	6826      	ldr	r6, [r4, #0]
 800be2c:	6961      	ldr	r1, [r4, #20]
 800be2e:	1d18      	adds	r0, r3, #4
 800be30:	6028      	str	r0, [r5, #0]
 800be32:	0635      	lsls	r5, r6, #24
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	d501      	bpl.n	800be3c <_printf_i+0x1cc>
 800be38:	6019      	str	r1, [r3, #0]
 800be3a:	e002      	b.n	800be42 <_printf_i+0x1d2>
 800be3c:	0670      	lsls	r0, r6, #25
 800be3e:	d5fb      	bpl.n	800be38 <_printf_i+0x1c8>
 800be40:	8019      	strh	r1, [r3, #0]
 800be42:	2300      	movs	r3, #0
 800be44:	6123      	str	r3, [r4, #16]
 800be46:	4615      	mov	r5, r2
 800be48:	e7ba      	b.n	800bdc0 <_printf_i+0x150>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	1d1a      	adds	r2, r3, #4
 800be4e:	602a      	str	r2, [r5, #0]
 800be50:	681d      	ldr	r5, [r3, #0]
 800be52:	6862      	ldr	r2, [r4, #4]
 800be54:	2100      	movs	r1, #0
 800be56:	4628      	mov	r0, r5
 800be58:	f7f4 f9c2 	bl	80001e0 <memchr>
 800be5c:	b108      	cbz	r0, 800be62 <_printf_i+0x1f2>
 800be5e:	1b40      	subs	r0, r0, r5
 800be60:	6060      	str	r0, [r4, #4]
 800be62:	6863      	ldr	r3, [r4, #4]
 800be64:	6123      	str	r3, [r4, #16]
 800be66:	2300      	movs	r3, #0
 800be68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be6c:	e7a8      	b.n	800bdc0 <_printf_i+0x150>
 800be6e:	6923      	ldr	r3, [r4, #16]
 800be70:	462a      	mov	r2, r5
 800be72:	4649      	mov	r1, r9
 800be74:	4640      	mov	r0, r8
 800be76:	47d0      	blx	sl
 800be78:	3001      	adds	r0, #1
 800be7a:	d0ab      	beq.n	800bdd4 <_printf_i+0x164>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	079b      	lsls	r3, r3, #30
 800be80:	d413      	bmi.n	800beaa <_printf_i+0x23a>
 800be82:	68e0      	ldr	r0, [r4, #12]
 800be84:	9b03      	ldr	r3, [sp, #12]
 800be86:	4298      	cmp	r0, r3
 800be88:	bfb8      	it	lt
 800be8a:	4618      	movlt	r0, r3
 800be8c:	e7a4      	b.n	800bdd8 <_printf_i+0x168>
 800be8e:	2301      	movs	r3, #1
 800be90:	4632      	mov	r2, r6
 800be92:	4649      	mov	r1, r9
 800be94:	4640      	mov	r0, r8
 800be96:	47d0      	blx	sl
 800be98:	3001      	adds	r0, #1
 800be9a:	d09b      	beq.n	800bdd4 <_printf_i+0x164>
 800be9c:	3501      	adds	r5, #1
 800be9e:	68e3      	ldr	r3, [r4, #12]
 800bea0:	9903      	ldr	r1, [sp, #12]
 800bea2:	1a5b      	subs	r3, r3, r1
 800bea4:	42ab      	cmp	r3, r5
 800bea6:	dcf2      	bgt.n	800be8e <_printf_i+0x21e>
 800bea8:	e7eb      	b.n	800be82 <_printf_i+0x212>
 800beaa:	2500      	movs	r5, #0
 800beac:	f104 0619 	add.w	r6, r4, #25
 800beb0:	e7f5      	b.n	800be9e <_printf_i+0x22e>
 800beb2:	bf00      	nop
 800beb4:	0800e021 	.word	0x0800e021
 800beb8:	0800e032 	.word	0x0800e032

0800bebc <_sbrk_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d06      	ldr	r5, [pc, #24]	; (800bed8 <_sbrk_r+0x1c>)
 800bec0:	2300      	movs	r3, #0
 800bec2:	4604      	mov	r4, r0
 800bec4:	4608      	mov	r0, r1
 800bec6:	602b      	str	r3, [r5, #0]
 800bec8:	f7f8 ffc4 	bl	8004e54 <_sbrk>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_sbrk_r+0x1a>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_sbrk_r+0x1a>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	20002a08 	.word	0x20002a08

0800bedc <__sread>:
 800bedc:	b510      	push	{r4, lr}
 800bede:	460c      	mov	r4, r1
 800bee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee4:	f000 f900 	bl	800c0e8 <_read_r>
 800bee8:	2800      	cmp	r0, #0
 800beea:	bfab      	itete	ge
 800beec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beee:	89a3      	ldrhlt	r3, [r4, #12]
 800bef0:	181b      	addge	r3, r3, r0
 800bef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bef6:	bfac      	ite	ge
 800bef8:	6563      	strge	r3, [r4, #84]	; 0x54
 800befa:	81a3      	strhlt	r3, [r4, #12]
 800befc:	bd10      	pop	{r4, pc}

0800befe <__swrite>:
 800befe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf02:	461f      	mov	r7, r3
 800bf04:	898b      	ldrh	r3, [r1, #12]
 800bf06:	05db      	lsls	r3, r3, #23
 800bf08:	4605      	mov	r5, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	d505      	bpl.n	800bf1c <__swrite+0x1e>
 800bf10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf14:	2302      	movs	r3, #2
 800bf16:	2200      	movs	r2, #0
 800bf18:	f000 f870 	bl	800bffc <_lseek_r>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	4632      	mov	r2, r6
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf32:	f000 b817 	b.w	800bf64 <_write_r>

0800bf36 <__sseek>:
 800bf36:	b510      	push	{r4, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf3e:	f000 f85d 	bl	800bffc <_lseek_r>
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	bf15      	itete	ne
 800bf48:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf52:	81a3      	strheq	r3, [r4, #12]
 800bf54:	bf18      	it	ne
 800bf56:	81a3      	strhne	r3, [r4, #12]
 800bf58:	bd10      	pop	{r4, pc}

0800bf5a <__sclose>:
 800bf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5e:	f000 b81b 	b.w	800bf98 <_close_r>
	...

0800bf64 <_write_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d07      	ldr	r5, [pc, #28]	; (800bf84 <_write_r+0x20>)
 800bf68:	4604      	mov	r4, r0
 800bf6a:	4608      	mov	r0, r1
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	2200      	movs	r2, #0
 800bf70:	602a      	str	r2, [r5, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	f7f6 fa3e 	bl	80023f4 <_write>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d102      	bne.n	800bf82 <_write_r+0x1e>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	b103      	cbz	r3, 800bf82 <_write_r+0x1e>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	20002a08 	.word	0x20002a08

0800bf88 <abort>:
 800bf88:	b508      	push	{r3, lr}
 800bf8a:	2006      	movs	r0, #6
 800bf8c:	f000 f8e6 	bl	800c15c <raise>
 800bf90:	2001      	movs	r0, #1
 800bf92:	f7f8 ff03 	bl	8004d9c <_exit>
	...

0800bf98 <_close_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d06      	ldr	r5, [pc, #24]	; (800bfb4 <_close_r+0x1c>)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7f8 ff21 	bl	8004dea <_close>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_close_r+0x1a>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_close_r+0x1a>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	20002a08 	.word	0x20002a08

0800bfb8 <_fstat_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	; (800bfd8 <_fstat_r+0x20>)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	602b      	str	r3, [r5, #0]
 800bfc6:	f7f8 ff1c 	bl	8004e02 <_fstat>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	d102      	bne.n	800bfd4 <_fstat_r+0x1c>
 800bfce:	682b      	ldr	r3, [r5, #0]
 800bfd0:	b103      	cbz	r3, 800bfd4 <_fstat_r+0x1c>
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	bd38      	pop	{r3, r4, r5, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20002a08 	.word	0x20002a08

0800bfdc <_isatty_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d06      	ldr	r5, [pc, #24]	; (800bff8 <_isatty_r+0x1c>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	602b      	str	r3, [r5, #0]
 800bfe8:	f7f8 ff1b 	bl	8004e22 <_isatty>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_isatty_r+0x1a>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_isatty_r+0x1a>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	20002a08 	.word	0x20002a08

0800bffc <_lseek_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	4d07      	ldr	r5, [pc, #28]	; (800c01c <_lseek_r+0x20>)
 800c000:	4604      	mov	r4, r0
 800c002:	4608      	mov	r0, r1
 800c004:	4611      	mov	r1, r2
 800c006:	2200      	movs	r2, #0
 800c008:	602a      	str	r2, [r5, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f7f8 ff14 	bl	8004e38 <_lseek>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_lseek_r+0x1e>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_lseek_r+0x1e>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	20002a08 	.word	0x20002a08

0800c020 <memcpy>:
 800c020:	440a      	add	r2, r1
 800c022:	4291      	cmp	r1, r2
 800c024:	f100 33ff 	add.w	r3, r0, #4294967295
 800c028:	d100      	bne.n	800c02c <memcpy+0xc>
 800c02a:	4770      	bx	lr
 800c02c:	b510      	push	{r4, lr}
 800c02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c036:	4291      	cmp	r1, r2
 800c038:	d1f9      	bne.n	800c02e <memcpy+0xe>
 800c03a:	bd10      	pop	{r4, pc}

0800c03c <memmove>:
 800c03c:	4288      	cmp	r0, r1
 800c03e:	b510      	push	{r4, lr}
 800c040:	eb01 0402 	add.w	r4, r1, r2
 800c044:	d902      	bls.n	800c04c <memmove+0x10>
 800c046:	4284      	cmp	r4, r0
 800c048:	4623      	mov	r3, r4
 800c04a:	d807      	bhi.n	800c05c <memmove+0x20>
 800c04c:	1e43      	subs	r3, r0, #1
 800c04e:	42a1      	cmp	r1, r4
 800c050:	d008      	beq.n	800c064 <memmove+0x28>
 800c052:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c05a:	e7f8      	b.n	800c04e <memmove+0x12>
 800c05c:	4402      	add	r2, r0
 800c05e:	4601      	mov	r1, r0
 800c060:	428a      	cmp	r2, r1
 800c062:	d100      	bne.n	800c066 <memmove+0x2a>
 800c064:	bd10      	pop	{r4, pc}
 800c066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c06a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c06e:	e7f7      	b.n	800c060 <memmove+0x24>

0800c070 <__malloc_lock>:
 800c070:	4801      	ldr	r0, [pc, #4]	; (800c078 <__malloc_lock+0x8>)
 800c072:	f7ff b989 	b.w	800b388 <__retarget_lock_acquire_recursive>
 800c076:	bf00      	nop
 800c078:	200029fc 	.word	0x200029fc

0800c07c <__malloc_unlock>:
 800c07c:	4801      	ldr	r0, [pc, #4]	; (800c084 <__malloc_unlock+0x8>)
 800c07e:	f7ff b984 	b.w	800b38a <__retarget_lock_release_recursive>
 800c082:	bf00      	nop
 800c084:	200029fc 	.word	0x200029fc

0800c088 <_realloc_r>:
 800c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08c:	4680      	mov	r8, r0
 800c08e:	4614      	mov	r4, r2
 800c090:	460e      	mov	r6, r1
 800c092:	b921      	cbnz	r1, 800c09e <_realloc_r+0x16>
 800c094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c098:	4611      	mov	r1, r2
 800c09a:	f7ff ba51 	b.w	800b540 <_malloc_r>
 800c09e:	b92a      	cbnz	r2, 800c0ac <_realloc_r+0x24>
 800c0a0:	f7ff f9e2 	bl	800b468 <_free_r>
 800c0a4:	4625      	mov	r5, r4
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ac:	f000 f872 	bl	800c194 <_malloc_usable_size_r>
 800c0b0:	4284      	cmp	r4, r0
 800c0b2:	4607      	mov	r7, r0
 800c0b4:	d802      	bhi.n	800c0bc <_realloc_r+0x34>
 800c0b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0ba:	d812      	bhi.n	800c0e2 <_realloc_r+0x5a>
 800c0bc:	4621      	mov	r1, r4
 800c0be:	4640      	mov	r0, r8
 800c0c0:	f7ff fa3e 	bl	800b540 <_malloc_r>
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d0ed      	beq.n	800c0a6 <_realloc_r+0x1e>
 800c0ca:	42bc      	cmp	r4, r7
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	bf28      	it	cs
 800c0d2:	463a      	movcs	r2, r7
 800c0d4:	f7ff ffa4 	bl	800c020 <memcpy>
 800c0d8:	4631      	mov	r1, r6
 800c0da:	4640      	mov	r0, r8
 800c0dc:	f7ff f9c4 	bl	800b468 <_free_r>
 800c0e0:	e7e1      	b.n	800c0a6 <_realloc_r+0x1e>
 800c0e2:	4635      	mov	r5, r6
 800c0e4:	e7df      	b.n	800c0a6 <_realloc_r+0x1e>
	...

0800c0e8 <_read_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	4d07      	ldr	r5, [pc, #28]	; (800c108 <_read_r+0x20>)
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	602a      	str	r2, [r5, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	f7f8 fe5a 	bl	8004db0 <_read>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_read_r+0x1e>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_read_r+0x1e>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20002a08 	.word	0x20002a08

0800c10c <_raise_r>:
 800c10c:	291f      	cmp	r1, #31
 800c10e:	b538      	push	{r3, r4, r5, lr}
 800c110:	4604      	mov	r4, r0
 800c112:	460d      	mov	r5, r1
 800c114:	d904      	bls.n	800c120 <_raise_r+0x14>
 800c116:	2316      	movs	r3, #22
 800c118:	6003      	str	r3, [r0, #0]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	bd38      	pop	{r3, r4, r5, pc}
 800c120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c122:	b112      	cbz	r2, 800c12a <_raise_r+0x1e>
 800c124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c128:	b94b      	cbnz	r3, 800c13e <_raise_r+0x32>
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 f830 	bl	800c190 <_getpid_r>
 800c130:	462a      	mov	r2, r5
 800c132:	4601      	mov	r1, r0
 800c134:	4620      	mov	r0, r4
 800c136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c13a:	f000 b817 	b.w	800c16c <_kill_r>
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d00a      	beq.n	800c158 <_raise_r+0x4c>
 800c142:	1c59      	adds	r1, r3, #1
 800c144:	d103      	bne.n	800c14e <_raise_r+0x42>
 800c146:	2316      	movs	r3, #22
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	2001      	movs	r0, #1
 800c14c:	e7e7      	b.n	800c11e <_raise_r+0x12>
 800c14e:	2400      	movs	r4, #0
 800c150:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c154:	4628      	mov	r0, r5
 800c156:	4798      	blx	r3
 800c158:	2000      	movs	r0, #0
 800c15a:	e7e0      	b.n	800c11e <_raise_r+0x12>

0800c15c <raise>:
 800c15c:	4b02      	ldr	r3, [pc, #8]	; (800c168 <raise+0xc>)
 800c15e:	4601      	mov	r1, r0
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	f7ff bfd3 	b.w	800c10c <_raise_r>
 800c166:	bf00      	nop
 800c168:	20000068 	.word	0x20000068

0800c16c <_kill_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d07      	ldr	r5, [pc, #28]	; (800c18c <_kill_r+0x20>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	4611      	mov	r1, r2
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	f7f8 fdff 	bl	8004d7c <_kill>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d102      	bne.n	800c188 <_kill_r+0x1c>
 800c182:	682b      	ldr	r3, [r5, #0]
 800c184:	b103      	cbz	r3, 800c188 <_kill_r+0x1c>
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	bf00      	nop
 800c18c:	20002a08 	.word	0x20002a08

0800c190 <_getpid_r>:
 800c190:	f7f8 bdec 	b.w	8004d6c <_getpid>

0800c194 <_malloc_usable_size_r>:
 800c194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c198:	1f18      	subs	r0, r3, #4
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	bfbc      	itt	lt
 800c19e:	580b      	ldrlt	r3, [r1, r0]
 800c1a0:	18c0      	addlt	r0, r0, r3
 800c1a2:	4770      	bx	lr

0800c1a4 <_init>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_fini>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr
