
PE2_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006978  08006978  00016978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc0  08006bc0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006bc0  08006bc0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bc0  08006bc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000074  08006c3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006c3c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb0b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb9  00000000  00000000  0002ebaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  000316b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001589b  00000000  00000000  00032240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103c3  00000000  00000000  00047adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083fb7  00000000  00000000  00057e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbe55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e34  00000000  00000000  000dbea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800695c 	.word	0x0800695c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800695c 	.word	0x0800695c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <_write>:
uint8_t key = 0;
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;

int _write(int file, char *ptr, int len) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d003      	beq.n	8000c02 <_write+0x1a>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d015      	beq.n	8000c2c <_write+0x44>
 8000c00:	e029      	b.n	8000c56 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <_write+0x90>)
 8000c0e:	f003 ff44 	bl	8004a9a <HAL_UART_Transmit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d024      	beq.n	8000c66 <_write+0x7e>
			errno = EIO;
 8000c1c:	f004 fb14 	bl	8005248 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2205      	movs	r2, #5
 8000c24:	601a      	str	r2, [r3, #0]
			return -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e020      	b.n	8000c6e <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <_write+0x90>)
 8000c38:	f003 ff2f 	bl	8004a9a <HAL_UART_Transmit>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d011      	beq.n	8000c6a <_write+0x82>
			errno = EIO;
 8000c46:	f004 faff 	bl	8005248 <__errno>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	601a      	str	r2, [r3, #0]
			return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e00b      	b.n	8000c6e <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8000c56:	f004 faf7 	bl	8005248 <__errno>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	601a      	str	r2, [r3, #0]
        return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e003      	b.n	8000c6e <_write+0x86>
        break;
 8000c66:	bf00      	nop
 8000c68:	e000      	b.n	8000c6c <_write+0x84>
        break;
 8000c6a:	bf00      	nop
    }
    return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001d0 	.word	0x200001d0

08000c7c <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	f107 030f 	add.w	r3, r7, #15
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	21d0      	movs	r1, #208	; 0xd0
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <read_MPU_mem+0x40>)
 8000c9e:	f001 fc97 	bl	80025d0 <HAL_I2C_Mem_Read>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <read_MPU_mem+0x30>
		return data;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	e002      	b.n	8000cb2 <read_MPU_mem+0x36>
	}
	else{
		printf("mem not read\r\n");
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <read_MPU_mem+0x44>)
 8000cae:	f004 fb83 	bl	80053b8 <puts>
	}
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000090 	.word	0x20000090
 8000cc0:	08006978 	.word	0x08006978

08000cc4 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	21d1      	movs	r1, #209	; 0xd1
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <write_MPU_mem+0x40>)
 8000cea:	f001 fb5d 	bl	80023a8 <HAL_I2C_Mem_Write>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <write_MPU_mem+0x38>
		return data;
	}
	else{
		printf("mem not written\r\n");
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <write_MPU_mem+0x44>)
 8000cf6:	f004 fb5f 	bl	80053b8 <puts>
 8000cfa:	e000      	b.n	8000cfe <write_MPU_mem+0x3a>
		return data;
 8000cfc:	bf00      	nop
	}
}
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000090 	.word	0x20000090
 8000d08:	08006988 	.word	0x08006988

08000d0c <read_MPU>:

void read_MPU(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint8_t LSByte = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = 1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	71bb      	strb	r3, [r7, #6]

	MSByte = read_MPU_mem(REG_GYRO_XOUT158);
 8000d1a:	2043      	movs	r0, #67	; 0x43
 8000d1c:	f7ff ffae 	bl	8000c7c <read_MPU_mem>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_XOUT70);
 8000d24:	2044      	movs	r0, #68	; 0x44
 8000d26:	f7ff ffa9 	bl	8000c7c <read_MPU_mem>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]

	gx = ((int16_t)((MSByte << 8) | LSByte)) / 131;
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4a47      	ldr	r2, [pc, #284]	; (8000e5c <read_MPU+0x150>)
 8000d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d42:	1152      	asrs	r2, r2, #5
 8000d44:	17db      	asrs	r3, r3, #31
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <read_MPU+0x154>)
 8000d4c:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_GYRO_YOUT158);
 8000d4e:	2045      	movs	r0, #69	; 0x45
 8000d50:	f7ff ff94 	bl	8000c7c <read_MPU_mem>
 8000d54:	4603      	mov	r3, r0
 8000d56:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_YOUT70);
 8000d58:	2046      	movs	r0, #70	; 0x46
 8000d5a:	f7ff ff8f 	bl	8000c7c <read_MPU_mem>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]

	gy = ((int16_t)((MSByte << 8) | LSByte)) / 131;
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4a3a      	ldr	r2, [pc, #232]	; (8000e5c <read_MPU+0x150>)
 8000d72:	fb82 1203 	smull	r1, r2, r2, r3
 8000d76:	1152      	asrs	r2, r2, #5
 8000d78:	17db      	asrs	r3, r3, #31
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <read_MPU+0x158>)
 8000d80:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_GYRO_ZOUT158);
 8000d82:	2047      	movs	r0, #71	; 0x47
 8000d84:	f7ff ff7a 	bl	8000c7c <read_MPU_mem>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_ZOUT70);
 8000d8c:	2048      	movs	r0, #72	; 0x48
 8000d8e:	f7ff ff75 	bl	8000c7c <read_MPU_mem>
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]

	gz = ((int16_t)((MSByte << 8) | LSByte)) / 131;
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <read_MPU+0x150>)
 8000da6:	fb82 1203 	smull	r1, r2, r2, r3
 8000daa:	1152      	asrs	r2, r2, #5
 8000dac:	17db      	asrs	r3, r3, #31
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <read_MPU+0x15c>)
 8000db4:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_XOUT158);
 8000db6:	203b      	movs	r0, #59	; 0x3b
 8000db8:	f7ff ff60 	bl	8000c7c <read_MPU_mem>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_XOUT70);
 8000dc0:	203c      	movs	r0, #60	; 0x3c
 8000dc2:	f7ff ff5b 	bl	8000c7c <read_MPU_mem>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]

	ax = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da02      	bge.n	8000de2 <read_MPU+0xd6>
 8000ddc:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000de0:	333f      	adds	r3, #63	; 0x3f
 8000de2:	139b      	asrs	r3, r3, #14
 8000de4:	b21a      	sxth	r2, r3
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <read_MPU+0x160>)
 8000de8:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8000dea:	203d      	movs	r0, #61	; 0x3d
 8000dec:	f7ff ff46 	bl	8000c7c <read_MPU_mem>
 8000df0:	4603      	mov	r3, r0
 8000df2:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8000df4:	203e      	movs	r0, #62	; 0x3e
 8000df6:	f7ff ff41 	bl	8000c7c <read_MPU_mem>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]

	ay = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da02      	bge.n	8000e16 <read_MPU+0x10a>
 8000e10:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e14:	333f      	adds	r3, #63	; 0x3f
 8000e16:	139b      	asrs	r3, r3, #14
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <read_MPU+0x164>)
 8000e1c:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_ZOUT158);
 8000e1e:	203f      	movs	r0, #63	; 0x3f
 8000e20:	f7ff ff2c 	bl	8000c7c <read_MPU_mem>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_ZOUT70);
 8000e28:	2040      	movs	r0, #64	; 0x40
 8000e2a:	f7ff ff27 	bl	8000c7c <read_MPU_mem>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]

	az = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	da02      	bge.n	8000e4a <read_MPU+0x13e>
 8000e44:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e48:	333f      	adds	r3, #63	; 0x3f
 8000e4a:	139b      	asrs	r3, r3, #14
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <read_MPU+0x168>)
 8000e50:	801a      	strh	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	3e88cb3d 	.word	0x3e88cb3d
 8000e60:	20000258 	.word	0x20000258
 8000e64:	2000025c 	.word	0x2000025c
 8000e68:	20000260 	.word	0x20000260
 8000e6c:	2000025a 	.word	0x2000025a
 8000e70:	2000025e 	.word	0x2000025e
 8000e74:	20000262 	.word	0x20000262

08000e78 <wrap>:

static float wrap(float angle,float limit){
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e82:	edc7 0a00 	vstr	s1, [r7]
  while (angle >  limit) angle -= 2*limit;
 8000e86:	e009      	b.n	8000e9c <wrap+0x24>
 8000e88:	edd7 7a00 	vldr	s15, [r7]
 8000e8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e90:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e98:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ea0:	edd7 7a00 	vldr	s15, [r7]
 8000ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	dcec      	bgt.n	8000e88 <wrap+0x10>
  while (angle < -limit) angle += 2*limit;
 8000eae:	e009      	b.n	8000ec4 <wrap+0x4c>
 8000eb0:	edd7 7a00 	vldr	s15, [r7]
 8000eb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000eb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ec4:	edd7 7a00 	vldr	s15, [r7]
 8000ec8:	eef1 7a67 	vneg.f32	s15, s15
 8000ecc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	d4ea      	bmi.n	8000eb0 <wrap+0x38>
  return angle;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ee07 3a90 	vmov	s15, r3
}
 8000ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <update_MPU_vars>:

void update_MPU_vars(){
 8000ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
	read_MPU();
 8000ef8:	f7ff ff08 	bl	8000d0c <read_MPU>

	float sgZ = az<0 ? -1 : 1; // allow one angle to go from -180 to +180 degrees
 8000efc:	4bb8      	ldr	r3, [pc, #736]	; (80011e0 <update_MPU_vars+0x2f0>)
 8000efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da01      	bge.n	8000f0a <update_MPU_vars+0x1a>
 8000f06:	4bb7      	ldr	r3, [pc, #732]	; (80011e4 <update_MPU_vars+0x2f4>)
 8000f08:	e001      	b.n	8000f0e <update_MPU_vars+0x1e>
 8000f0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f0e:	617b      	str	r3, [r7, #20]
	float angleAccX =   atan2(ay, sgZ*sqrt(az*az + ax*ax)) * 57.29578 ; // [-180,+180] deg
 8000f10:	4bb5      	ldr	r3, [pc, #724]	; (80011e8 <update_MPU_vars+0x2f8>)
 8000f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fafc 	bl	8000514 <__aeabi_i2d>
 8000f1c:	4682      	mov	sl, r0
 8000f1e:	468b      	mov	fp, r1
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff fb09 	bl	8000538 <__aeabi_f2d>
 8000f26:	4680      	mov	r8, r0
 8000f28:	4689      	mov	r9, r1
 8000f2a:	4bad      	ldr	r3, [pc, #692]	; (80011e0 <update_MPU_vars+0x2f0>)
 8000f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4bab      	ldr	r3, [pc, #684]	; (80011e0 <update_MPU_vars+0x2f0>)
 8000f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f38:	fb03 f202 	mul.w	r2, r3, r2
 8000f3c:	4bab      	ldr	r3, [pc, #684]	; (80011ec <update_MPU_vars+0x2fc>)
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4ba9      	ldr	r3, [pc, #676]	; (80011ec <update_MPU_vars+0x2fc>)
 8000f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fadf 	bl	8000514 <__aeabi_i2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	ec43 2b10 	vmov	d0, r2, r3
 8000f5e:	f005 f9ab 	bl	80062b8 <sqrt>
 8000f62:	ec53 2b10 	vmov	r2, r3, d0
 8000f66:	4640      	mov	r0, r8
 8000f68:	4649      	mov	r1, r9
 8000f6a:	f7ff fb3d 	bl	80005e8 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	ec43 2b17 	vmov	d7, r2, r3
 8000f76:	eeb0 1a47 	vmov.f32	s2, s14
 8000f7a:	eef0 1a67 	vmov.f32	s3, s15
 8000f7e:	ec4b ab10 	vmov	d0, sl, fp
 8000f82:	f005 f997 	bl	80062b4 <atan2>
 8000f86:	ec51 0b10 	vmov	r0, r1, d0
 8000f8a:	a38f      	add	r3, pc, #572	; (adr r3, 80011c8 <update_MPU_vars+0x2d8>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fb2a 	bl	80005e8 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fdd4 	bl	8000b48 <__aeabi_d2f>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	613b      	str	r3, [r7, #16]
	float angleAccY = - atan2(ax,     sqrt(az*az + ax*ay)) * 57.29578 ; // [- 90,+ 90] deg
 8000fa4:	4b91      	ldr	r3, [pc, #580]	; (80011ec <update_MPU_vars+0x2fc>)
 8000fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fab2 	bl	8000514 <__aeabi_i2d>
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	4689      	mov	r9, r1
 8000fb4:	4b8a      	ldr	r3, [pc, #552]	; (80011e0 <update_MPU_vars+0x2f0>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <update_MPU_vars+0x2f0>)
 8000fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc2:	fb03 f202 	mul.w	r2, r3, r2
 8000fc6:	4b89      	ldr	r3, [pc, #548]	; (80011ec <update_MPU_vars+0x2fc>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b86      	ldr	r3, [pc, #536]	; (80011e8 <update_MPU_vars+0x2f8>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa9a 	bl	8000514 <__aeabi_i2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	ec43 2b10 	vmov	d0, r2, r3
 8000fe8:	f005 f966 	bl	80062b8 <sqrt>
 8000fec:	eeb0 7a40 	vmov.f32	s14, s0
 8000ff0:	eef0 7a60 	vmov.f32	s15, s1
 8000ff4:	eeb0 1a47 	vmov.f32	s2, s14
 8000ff8:	eef0 1a67 	vmov.f32	s3, s15
 8000ffc:	ec49 8b10 	vmov	d0, r8, r9
 8001000:	f005 f958 	bl	80062b4 <atan2>
 8001004:	ec53 2b10 	vmov	r2, r3, d0
 8001008:	4614      	mov	r4, r2
 800100a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800100e:	a36e      	add	r3, pc, #440	; (adr r3, 80011c8 <update_MPU_vars+0x2d8>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff fae6 	bl	80005e8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd90 	bl	8000b48 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	60fb      	str	r3, [r7, #12]

	uint32_t mil = millis = HAL_GetTick();;
 800102c:	f000 fe48 	bl	8001cc0 <HAL_GetTick>
 8001030:	4603      	mov	r3, r0
 8001032:	4a6f      	ldr	r2, [pc, #444]	; (80011f0 <update_MPU_vars+0x300>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <update_MPU_vars+0x300>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	60bb      	str	r3, [r7, #8]
	float dt = (mil - premillis);
 800103c:	4b6d      	ldr	r3, [pc, #436]	; (80011f4 <update_MPU_vars+0x304>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104c:	edc7 7a01 	vstr	s15, [r7, #4]
	premillis = mil;
 8001050:	4a68      	ldr	r2, [pc, #416]	; (80011f4 <update_MPU_vars+0x304>)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	6013      	str	r3, [r2, #0]

	angleX = wrap(0.98*(angleAccX + wrap(angleX + gx*dt - angleAccX,180)) + (1.0 - 0.98)*angleAccX,180);
 8001056:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <update_MPU_vars+0x308>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	edd7 7a01 	vldr	s15, [r7, #4]
 8001068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106c:	4b63      	ldr	r3, [pc, #396]	; (80011fc <update_MPU_vars+0x30c>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001076:	edd7 7a04 	vldr	s15, [r7, #16]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	eddf 0a60 	vldr	s1, [pc, #384]	; 8001200 <update_MPU_vars+0x310>
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	f7ff fef7 	bl	8000e78 <wrap>
 800108a:	eeb0 7a40 	vmov.f32	s14, s0
 800108e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001096:	ee17 0a90 	vmov	r0, s15
 800109a:	f7ff fa4d 	bl	8000538 <__aeabi_f2d>
 800109e:	a34c      	add	r3, pc, #304	; (adr r3, 80011d0 <update_MPU_vars+0x2e0>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff faa0 	bl	80005e8 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4614      	mov	r4, r2
 80010ae:	461d      	mov	r5, r3
 80010b0:	6938      	ldr	r0, [r7, #16]
 80010b2:	f7ff fa41 	bl	8000538 <__aeabi_f2d>
 80010b6:	a348      	add	r3, pc, #288	; (adr r3, 80011d8 <update_MPU_vars+0x2e8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa94 	bl	80005e8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff f8d8 	bl	800027c <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd38 	bl	8000b48 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001200 <update_MPU_vars+0x310>
 80010de:	ee00 3a10 	vmov	s0, r3
 80010e2:	f7ff fec9 	bl	8000e78 <wrap>
 80010e6:	eef0 7a40 	vmov.f32	s15, s0
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <update_MPU_vars+0x30c>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]
	angleY = wrap(0.98*(angleAccY + wrap(angleY + sgZ*gy*dt - angleAccY, 90)) + (1.0 - 0.98)*angleAccY, 90);
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <update_MPU_vars+0x314>)
 80010f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001106:	edd7 7a01 	vldr	s15, [r7, #4]
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110e:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <update_MPU_vars+0x318>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001118:	edd7 7a03 	vldr	s15, [r7, #12]
 800111c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001120:	eddf 0a3a 	vldr	s1, [pc, #232]	; 800120c <update_MPU_vars+0x31c>
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	f7ff fea6 	bl	8000e78 <wrap>
 800112c:	eeb0 7a40 	vmov.f32	s14, s0
 8001130:	edd7 7a03 	vldr	s15, [r7, #12]
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	ee17 0a90 	vmov	r0, s15
 800113c:	f7ff f9fc 	bl	8000538 <__aeabi_f2d>
 8001140:	a323      	add	r3, pc, #140	; (adr r3, 80011d0 <update_MPU_vars+0x2e0>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa4f 	bl	80005e8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4614      	mov	r4, r2
 8001150:	461d      	mov	r5, r3
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff f9f0 	bl	8000538 <__aeabi_f2d>
 8001158:	a31f      	add	r3, pc, #124	; (adr r3, 80011d8 <update_MPU_vars+0x2e8>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa43 	bl	80005e8 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff f887 	bl	800027c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fce7 	bl	8000b48 <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	eddf 0a23 	vldr	s1, [pc, #140]	; 800120c <update_MPU_vars+0x31c>
 8001180:	ee00 3a10 	vmov	s0, r3
 8001184:	f7ff fe78 	bl	8000e78 <wrap>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <update_MPU_vars+0x318>)
 800118e:	edc3 7a00 	vstr	s15, [r3]
	angleZ += gz*dt;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <update_MPU_vars+0x320>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <update_MPU_vars+0x324>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <update_MPU_vars+0x324>)
 80011b4:	edc3 7a00 	vstr	s15, [r3]
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011c2:	bf00      	nop
 80011c4:	f3af 8000 	nop.w
 80011c8:	1e7967cb 	.word	0x1e7967cb
 80011cc:	404ca5dc 	.word	0x404ca5dc
 80011d0:	f5c28f5c 	.word	0xf5c28f5c
 80011d4:	3fef5c28 	.word	0x3fef5c28
 80011d8:	47ae1480 	.word	0x47ae1480
 80011dc:	3f947ae1 	.word	0x3f947ae1
 80011e0:	20000262 	.word	0x20000262
 80011e4:	bf800000 	.word	0xbf800000
 80011e8:	2000025e 	.word	0x2000025e
 80011ec:	2000025a 	.word	0x2000025a
 80011f0:	20000274 	.word	0x20000274
 80011f4:	20000278 	.word	0x20000278
 80011f8:	20000258 	.word	0x20000258
 80011fc:	20000264 	.word	0x20000264
 8001200:	43340000 	.word	0x43340000
 8001204:	2000025c 	.word	0x2000025c
 8001208:	20000268 	.word	0x20000268
 800120c:	42b40000 	.word	0x42b40000
 8001210:	20000260 	.word	0x20000260
 8001214:	2000026c 	.word	0x2000026c

08001218 <init_MPU>:
void init_MPU(){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	206b      	movs	r0, #107	; 0x6b
 8001220:	f7ff fd50 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8001224:	2107      	movs	r1, #7
 8001226:	2019      	movs	r0, #25
 8001228:	f7ff fd4c 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 800122c:	2100      	movs	r1, #0
 800122e:	201b      	movs	r0, #27
 8001230:	f7ff fd48 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 8001234:	2100      	movs	r1, #0
 8001236:	201c      	movs	r0, #28
 8001238:	f7ff fd44 	bl	8000cc4 <write_MPU_mem>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fce0 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f8a4 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f000 f9d0 	bl	80015f4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001254:	f000 f8f0 	bl	8001438 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001258:	f000 f92e 	bl	80014b8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800125c:	f000 f96a 	bl	8001534 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001260:	f000 f998 	bl	8001594 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	2201      	movs	r2, #1
 8001268:	21d0      	movs	r1, #208	; 0xd0
 800126a:	483c      	ldr	r0, [pc, #240]	; (800135c <main+0x11c>)
 800126c:	f001 faca 	bl	8002804 <HAL_I2C_IsDeviceReady>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <main+0x42>
	  printf("succesfully communicated\n\r");
 8001276:	483a      	ldr	r0, [pc, #232]	; (8001360 <main+0x120>)
 8001278:	f004 f818 	bl	80052ac <iprintf>
	  init_MPU();
 800127c:	f7ff ffcc 	bl	8001218 <init_MPU>
 8001280:	e002      	b.n	8001288 <main+0x48>
  }
  else{
	  printf("i2C not found\n\r");
 8001282:	4838      	ldr	r0, [pc, #224]	; (8001364 <main+0x124>)
 8001284:	f004 f812 	bl	80052ac <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //key = loop(key);
	  HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f000 fd24 	bl	8001cd8 <HAL_Delay>
	  printf("doing code\r\n");
 8001290:	4835      	ldr	r0, [pc, #212]	; (8001368 <main+0x128>)
 8001292:	f004 f891 	bl	80053b8 <puts>
	  printf("whoami: 0x%x\r\n\n",read_MPU_mem(REG_WHOAMI));
 8001296:	2075      	movs	r0, #117	; 0x75
 8001298:	f7ff fcf0 	bl	8000c7c <read_MPU_mem>
 800129c:	4603      	mov	r3, r0
 800129e:	4619      	mov	r1, r3
 80012a0:	4832      	ldr	r0, [pc, #200]	; (800136c <main+0x12c>)
 80012a2:	f004 f803 	bl	80052ac <iprintf>
	  read_MPU();
 80012a6:	f7ff fd31 	bl	8000d0c <read_MPU>
	  millis = HAL_GetTick();
 80012aa:	f000 fd09 	bl	8001cc0 <HAL_GetTick>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <main+0x130>)
 80012b2:	6013      	str	r3, [r2, #0]
	  printf("° changed: %d",gx * (millis / 1000));
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <main+0x134>)
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <main+0x130>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <main+0x138>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	099b      	lsrs	r3, r3, #6
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	4619      	mov	r1, r3
 80012ce:	482b      	ldr	r0, [pc, #172]	; (800137c <main+0x13c>)
 80012d0:	f003 ffec 	bl	80052ac <iprintf>
	  angle = angle + gx * (millis / 1000);
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <main+0x134>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <main+0x130>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4925      	ldr	r1, [pc, #148]	; (8001378 <main+0x138>)
 80012e2:	fba1 1303 	umull	r1, r3, r1, r3
 80012e6:	099b      	lsrs	r3, r3, #6
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	fb12 f303 	smulbb	r3, r2, r3
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <main+0x140>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <main+0x140>)
 8001300:	801a      	strh	r2, [r3, #0]
	  printf("gyro x raw: %d\t angle: %d\r\n",gx,angle);
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <main+0x134>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	4619      	mov	r1, r3
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <main+0x140>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	461a      	mov	r2, r3
 8001312:	481c      	ldr	r0, [pc, #112]	; (8001384 <main+0x144>)
 8001314:	f003 ffca 	bl	80052ac <iprintf>
	  update_MPU_vars();
 8001318:	f7ff fdea 	bl	8000ef0 <update_MPU_vars>
	  printf("angleX:%d, angleY:%d, angleZ:%d\n\r",angleX,angleY,angleZ);
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <main+0x148>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f909 	bl	8000538 <__aeabi_f2d>
 8001326:	4680      	mov	r8, r0
 8001328:	4689      	mov	r9, r1
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <main+0x14c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f902 	bl	8000538 <__aeabi_f2d>
 8001334:	4604      	mov	r4, r0
 8001336:	460d      	mov	r5, r1
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <main+0x150>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8fb 	bl	8000538 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800134a:	e9cd 4500 	strd	r4, r5, [sp]
 800134e:	4642      	mov	r2, r8
 8001350:	464b      	mov	r3, r9
 8001352:	4810      	ldr	r0, [pc, #64]	; (8001394 <main+0x154>)
 8001354:	f003 ffaa 	bl	80052ac <iprintf>
  {
 8001358:	e796      	b.n	8001288 <main+0x48>
 800135a:	bf00      	nop
 800135c:	20000090 	.word	0x20000090
 8001360:	0800699c 	.word	0x0800699c
 8001364:	080069b8 	.word	0x080069b8
 8001368:	080069c8 	.word	0x080069c8
 800136c:	080069d4 	.word	0x080069d4
 8001370:	20000274 	.word	0x20000274
 8001374:	20000258 	.word	0x20000258
 8001378:	10624dd3 	.word	0x10624dd3
 800137c:	080069e4 	.word	0x080069e4
 8001380:	20000000 	.word	0x20000000
 8001384:	080069f4 	.word	0x080069f4
 8001388:	20000264 	.word	0x20000264
 800138c:	20000268 	.word	0x20000268
 8001390:	2000026c 	.word	0x2000026c
 8001394:	08006a10 	.word	0x08006a10

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09c      	sub	sp, #112	; 0x70
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013a2:	2228      	movs	r2, #40	; 0x28
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 ff78 	bl	800529c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2230      	movs	r2, #48	; 0x30
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 ff6a 	bl	800529c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c8:	2302      	movs	r3, #2
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013cc:	2301      	movs	r3, #1
 80013ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d0:	2310      	movs	r3, #16
 80013d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 fe6b 	bl	80030b8 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80013e8:	f000 f9e4 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fe94 	bl	8004134 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001412:	f000 f9cf 	bl	80017b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4618      	mov	r0, r3
 8001422:	f003 f8bd 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800142c:	f000 f9c2 	bl	80017b4 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3770      	adds	r7, #112	; 0x70
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_I2C2_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <MX_I2C2_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_I2C2_Init+0x74>)
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <MX_I2C2_Init+0x7c>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_I2C2_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_I2C2_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_I2C2_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_I2C2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_I2C2_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_I2C2_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_I2C2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <MX_I2C2_Init+0x74>)
 8001474:	f000 ff08 	bl	8002288 <HAL_I2C_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800147e:	f000 f999 	bl	80017b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <MX_I2C2_Init+0x74>)
 8001486:	f001 fd7f 	bl	8002f88 <HAL_I2CEx_ConfigAnalogFilter>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 f990 	bl	80017b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_I2C2_Init+0x74>)
 8001498:	f001 fdc1 	bl	800301e <HAL_I2CEx_ConfigDigitalFilter>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f000 f987 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000090 	.word	0x20000090
 80014b0:	40005800 	.word	0x40005800
 80014b4:	2000090e 	.word	0x2000090e

080014b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_SPI2_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <MX_SPI2_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_SPI2_Init+0x74>)
 80014c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_SPI2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_SPI2_Init+0x74>)
 80014d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_SPI2_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_SPI2_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_SPI2_Init+0x74>)
 80014e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_SPI2_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_SPI2_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SPI2_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_SPI2_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SPI2_Init+0x74>)
 8001506:	2207      	movs	r2, #7
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_SPI2_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_SPI2_Init+0x74>)
 8001512:	2208      	movs	r2, #8
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_SPI2_Init+0x74>)
 8001518:	f003 f9c6 	bl	80048a8 <HAL_SPI_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 f947 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200000e4 	.word	0x200000e4
 8001530:	40003800 	.word	0x40003800

08001534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USART2_UART_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <MX_USART2_UART_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001540:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART2_UART_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001578:	f003 fa41 	bl	80049fe <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f917 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000148 	.word	0x20000148
 8001590:	40004400 	.word	0x40004400

08001594 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_USART3_UART_Init+0x58>)
 800159a:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <MX_USART3_UART_Init+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART3_UART_Init+0x58>)
 80015d8:	f003 fa11 	bl	80049fe <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f8e7 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001d0 	.word	0x200001d0
 80015f0:	40004800 	.word	0x40004800

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	4b46      	ldr	r3, [pc, #280]	; (8001724 <MX_GPIO_Init+0x130>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4a45      	ldr	r2, [pc, #276]	; (8001724 <MX_GPIO_Init+0x130>)
 8001610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001614:	6153      	str	r3, [r2, #20]
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <MX_GPIO_Init+0x130>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MX_GPIO_Init+0x130>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <MX_GPIO_Init+0x130>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	6153      	str	r3, [r2, #20]
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <MX_GPIO_Init+0x130>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <MX_GPIO_Init+0x130>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a39      	ldr	r2, [pc, #228]	; (8001724 <MX_GPIO_Init+0x130>)
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <MX_GPIO_Init+0x130>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <MX_GPIO_Init+0x130>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a33      	ldr	r2, [pc, #204]	; (8001724 <MX_GPIO_Init+0x130>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <MX_GPIO_Init+0x130>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_T_CS_GPIO_Port, SPI2_T_CS_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001670:	482d      	ldr	r0, [pc, #180]	; (8001728 <MX_GPIO_Init+0x134>)
 8001672:	f000 fdd9 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin|SPI2_RESET_Pin|SPI2_DC_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 fdd2 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8001684:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800168a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4824      	ldr	r0, [pc, #144]	; (800172c <MX_GPIO_Init+0x138>)
 800169c:	f000 fc52 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f000 fc44 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_T_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_T_CS_Pin;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_T_CS_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_GPIO_Init+0x134>)
 80016d6:	f000 fc35 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI2_RESET_Pin SPI2_DC_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_RESET_Pin|SPI2_DC_Pin;
 80016da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f000 fc25 	bl	8001f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2006      	movs	r0, #6
 8001700:	f000 fbe9 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001704:	2006      	movs	r0, #6
 8001706:	f000 fc02 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2028      	movs	r0, #40	; 0x28
 8001710:	f000 fbe1 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001714:	2028      	movs	r0, #40	; 0x28
 8001716:	f000 fbfa 	bl	8001f0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	48000400 	.word	0x48000400
 800172c:	48000800 	.word	0x48000800

08001730 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
	printf("interupt!\r\n");
 800173a:	4818      	ldr	r0, [pc, #96]	; (800179c <HAL_GPIO_EXTI_Callback+0x6c>)
 800173c:	f003 fe3c 	bl	80053b8 <puts>
	if(GPIO_Pin == LEFT_Pin){
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001746:	d106      	bne.n	8001756 <HAL_GPIO_EXTI_Callback+0x26>
		key = left;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x70>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
		printf("left clicked\r\n");
 800174e:	4815      	ldr	r0, [pc, #84]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001750:	f003 fe32 	bl	80053b8 <puts>
	}
	else if(GPIO_Pin == MIDDLE_Pin){
		key = down;
		printf("down clicked\r\n");
	}
}
 8001754:	e01e      	b.n	8001794 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == TOP_Pin){
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175c:	d106      	bne.n	800176c <HAL_GPIO_EXTI_Callback+0x3c>
		key = up;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
		printf("up clicked\r\n");
 8001764:	4810      	ldr	r0, [pc, #64]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001766:	f003 fe27 	bl	80053b8 <puts>
}
 800176a:	e013      	b.n	8001794 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == RIGHT_Pin){
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001772:	d106      	bne.n	8001782 <HAL_GPIO_EXTI_Callback+0x52>
		key = right;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001776:	2203      	movs	r2, #3
 8001778:	701a      	strb	r2, [r3, #0]
		printf("right clicked\r\n");
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800177c:	f003 fe1c 	bl	80053b8 <puts>
}
 8001780:	e008      	b.n	8001794 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == MIDDLE_Pin){
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_EXTI_Callback+0x64>
		key = down;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x70>)
 800178a:	2204      	movs	r2, #4
 800178c:	701a      	strb	r2, [r3, #0]
		printf("down clicked\r\n");
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001790:	f003 fe12 	bl	80053b8 <puts>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	08006a34 	.word	0x08006a34
 80017a0:	20000270 	.word	0x20000270
 80017a4:	08006a40 	.word	0x08006a40
 80017a8:	08006a50 	.word	0x08006a50
 80017ac:	08006a5c 	.word	0x08006a5c
 80017b0:	08006a6c 	.word	0x08006a6c

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_MspInit+0x44>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_MspInit+0x44>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6193      	str	r3, [r2, #24]
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_MspInit+0x44>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x44>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x44>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x44>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_I2C_MspInit+0x7c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d127      	bne.n	800187a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_I2C_MspInit+0x80>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_I2C_MspInit+0x80>)
 8001830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001834:	6153      	str	r3, [r2, #20]
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_I2C_MspInit+0x80>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001842:	2303      	movs	r3, #3
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001846:	2312      	movs	r3, #18
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184a:	2301      	movs	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001852:	2304      	movs	r3, #4
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <HAL_I2C_MspInit+0x84>)
 800185e:	f000 fb71 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_I2C_MspInit+0x80>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_I2C_MspInit+0x80>)
 8001868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_I2C_MspInit+0x80>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40005800 	.word	0x40005800
 8001888:	40021000 	.word	0x40021000
 800188c:	48001400 	.word	0x48001400

08001890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_SPI_MspInit+0x7c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d128      	bne.n	8001904 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f4:	2305      	movs	r3, #5
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_SPI_MspInit+0x84>)
 8001900:	f000 fb20 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40003800 	.word	0x40003800
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400

08001918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a2f      	ldr	r2, [pc, #188]	; (80019f4 <HAL_UART_MspInit+0xdc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d129      	bne.n	800198e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	6153      	str	r3, [r2, #20]
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800196a:	230c      	movs	r3, #12
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197a:	2307      	movs	r3, #7
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001988:	f000 fadc 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800198c:	e02d      	b.n	80019ea <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_UART_MspInit+0xe4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d128      	bne.n	80019ea <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 800199e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a2:	61d3      	str	r3, [r2, #28]
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 80019b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ba:	6153      	str	r3, [r2, #20]
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_UART_MspInit+0xe0>)
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019da:	2307      	movs	r3, #7
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <HAL_UART_MspInit+0xe8>)
 80019e6:	f000 faad 	bl	8001f44 <HAL_GPIO_Init>
}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	; 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40004400 	.word	0x40004400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40004800 	.word	0x40004800
 8001a00:	48000400 	.word	0x48000400

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a50:	f000 f922 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f000 fbfb 	bl	8002258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8001a6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a6e:	f000 fbf3 	bl	8002258 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8001a72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a76:	f000 fbef 	bl	8002258 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8001a7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a7e:	f000 fbeb 	bl	8002258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e00a      	b.n	8001aae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a98:	f3af 8000 	nop.w
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60ba      	str	r2, [r7, #8]
 8001aa4:	b2ca      	uxtb	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbf0      	blt.n	8001a98 <_read+0x12>
  }

  return len;
 8001ab6:	687b      	ldr	r3, [r7, #4]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_isatty>:

int _isatty(int file)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f003 fb76 	bl	8005248 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20004000 	.word	0x20004000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	2000027c 	.word	0x2000027c
 8001b90:	20000298 	.word	0x20000298

08001b94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bbc:	f7ff ffea 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <LoopForever+0xe>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <LoopForever+0x16>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be6:	f003 fb35 	bl	8005254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bea:	f7ff fb29 	bl	8001240 <main>

08001bee <LoopForever>:

LoopForever:
    b LoopForever
 8001bee:	e7fe      	b.n	8001bee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bf0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001bfc:	08006bc8 	.word	0x08006bc8
  ldr r2, =_sbss
 8001c00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c04:	20000294 	.word	0x20000294

08001c08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f94f 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fdca 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f967 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f92f 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000008 	.word	0x20000008

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	20000280 	.word	0x20000280

08001cc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000280 	.word	0x20000280

08001cd8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000000c 	.word	0x2000000c

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff3e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff31 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e14e      	b.n	80021f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8140 	beq.w	80021ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x40>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 0201 	and.w	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d017      	beq.n	8002022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d123      	bne.n	8002076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0203 	and.w	r2, r3, #3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 809a 	beq.w	80021ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b8:	4b55      	ldr	r3, [pc, #340]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d0:	4a50      	ldr	r2, [pc, #320]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fa:	d013      	beq.n	8002124 <HAL_GPIO_Init+0x1e0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a46      	ldr	r2, [pc, #280]	; (8002218 <HAL_GPIO_Init+0x2d4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00d      	beq.n	8002120 <HAL_GPIO_Init+0x1dc>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a45      	ldr	r2, [pc, #276]	; (800221c <HAL_GPIO_Init+0x2d8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <HAL_GPIO_Init+0x1d8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a44      	ldr	r2, [pc, #272]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_GPIO_Init+0x1d4>
 8002114:	2303      	movs	r3, #3
 8002116:	e006      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002118:	2305      	movs	r3, #5
 800211a:	e004      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 800211c:	2302      	movs	r3, #2
 800211e:	e002      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002124:	2300      	movs	r3, #0
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	f002 0203 	and.w	r2, r2, #3
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	4093      	lsls	r3, r2
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002136:	4937      	ldr	r1, [pc, #220]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002144:	4b37      	ldr	r3, [pc, #220]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002168:	4a2e      	ldr	r2, [pc, #184]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002192:	4a24      	ldr	r2, [pc, #144]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f47f aea9 	bne.w	8001f54 <HAL_GPIO_Init+0x10>
  }
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000
 8002218:	48000400 	.word	0x48000400
 800221c:	48000800 	.word	0x48000800
 8002220:	48000c00 	.word	0x48000c00
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002244:	e002      	b.n	800224c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fa5a 	bl	8001730 <HAL_GPIO_EXTI_Callback>
  }
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e081      	b.n	800239e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff faaa 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	e006      	b.n	8002310 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800230e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d104      	bne.n	8002322 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002320:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002334:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002344:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69d9      	ldr	r1, [r3, #28]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	461a      	mov	r2, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	817b      	strh	r3, [r7, #10]
 80023ba:	460b      	mov	r3, r1
 80023bc:	813b      	strh	r3, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	f040 80f9 	bne.w	80025c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_I2C_Mem_Write+0x34>
 80023d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0ed      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Mem_Write+0x4e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0e6      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023fe:	f7ff fc5f 	bl	8001cc0 <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2319      	movs	r3, #25
 800240a:	2201      	movs	r2, #1
 800240c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fbcd 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0d1      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2221      	movs	r2, #33	; 0x21
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a3a      	ldr	r2, [r7, #32]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002448:	88f8      	ldrh	r0, [r7, #6]
 800244a:	893a      	ldrh	r2, [r7, #8]
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4603      	mov	r3, r0
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fadd 	bl	8002a18 <I2C_RequestMemoryWrite>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0a9      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	2bff      	cmp	r3, #255	; 0xff
 8002478:	d90e      	bls.n	8002498 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	b2da      	uxtb	r2, r3
 8002486:	8979      	ldrh	r1, [r7, #10]
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fd47 	bl	8002f24 <I2C_TransferConfig>
 8002496:	e00f      	b.n	80024b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fd36 	bl	8002f24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fbc6 	bl	8002c4e <I2C_WaitOnTXISFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e07b      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d034      	beq.n	8002570 <HAL_I2C_Mem_Write+0x1c8>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d130      	bne.n	8002570 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	2200      	movs	r2, #0
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fb49 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e04d      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2bff      	cmp	r3, #255	; 0xff
 8002530:	d90e      	bls.n	8002550 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	22ff      	movs	r2, #255	; 0xff
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	b2da      	uxtb	r2, r3
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fceb 	bl	8002f24 <I2C_TransferConfig>
 800254e:	e00f      	b.n	8002570 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	b2da      	uxtb	r2, r3
 8002560:	8979      	ldrh	r1, [r7, #10]
 8002562:	2300      	movs	r3, #0
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fcda 	bl	8002f24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d19e      	bne.n	80024b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fbac 	bl	8002cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01a      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_I2C_Mem_Write+0x224>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	fe00e800 	.word	0xfe00e800

080025d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 80fd 	bne.w	80027f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_I2C_Mem_Read+0x34>
 80025fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0f1      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_I2C_Mem_Read+0x4e>
 800261a:	2302      	movs	r3, #2
 800261c:	e0ea      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002626:	f7ff fb4b 	bl	8001cc0 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2319      	movs	r3, #25
 8002632:	2201      	movs	r2, #1
 8002634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fab9 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d5      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2222      	movs	r2, #34	; 0x22
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2240      	movs	r2, #64	; 0x40
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002670:	88f8      	ldrh	r0, [r7, #6]
 8002672:	893a      	ldrh	r2, [r7, #8]
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4603      	mov	r3, r0
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fa1d 	bl	8002ac0 <I2C_RequestMemoryRead>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0ad      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	d90e      	bls.n	80026c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	22ff      	movs	r2, #255	; 0xff
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	8979      	ldrh	r1, [r7, #10]
 80026b0:	4b52      	ldr	r3, [pc, #328]	; (80027fc <HAL_I2C_Mem_Read+0x22c>)
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fc33 	bl	8002f24 <I2C_TransferConfig>
 80026be:	e00f      	b.n	80026e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <HAL_I2C_Mem_Read+0x22c>)
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fc22 	bl	8002f24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	2200      	movs	r2, #0
 80026e8:	2104      	movs	r1, #4
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa60 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07c      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d034      	beq.n	80027a0 <HAL_I2C_Mem_Read+0x1d0>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d130      	bne.n	80027a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fa31 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e04d      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2bff      	cmp	r3, #255	; 0xff
 8002760:	d90e      	bls.n	8002780 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	b2da      	uxtb	r2, r3
 800276e:	8979      	ldrh	r1, [r7, #10]
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fbd3 	bl	8002f24 <I2C_TransferConfig>
 800277e:	e00f      	b.n	80027a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	b2da      	uxtb	r2, r3
 8002790:	8979      	ldrh	r1, [r7, #10]
 8002792:	2300      	movs	r3, #0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fbc2 	bl	8002f24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d19a      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fa94 	bl	8002cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e01a      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2220      	movs	r2, #32
 80027c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_I2C_Mem_Read+0x230>)
 80027d2:	400b      	ands	r3, r1
 80027d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	80002400 	.word	0x80002400
 8002800:	fe00e800 	.word	0xfe00e800

08002804 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b20      	cmp	r3, #32
 8002822:	f040 80f3 	bne.w	8002a0c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002834:	d101      	bne.n	800283a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	e0e9      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_I2C_IsDeviceReady+0x44>
 8002844:	2302      	movs	r3, #2
 8002846:	e0e2      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_I2C_IsDeviceReady+0x72>
 8002866:	897b      	ldrh	r3, [r7, #10]
 8002868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002874:	e006      	b.n	8002884 <HAL_I2C_IsDeviceReady+0x80>
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002880:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800288a:	f7ff fa19 	bl	8001cc0 <HAL_GetTick>
 800288e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028bc:	e034      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d01a      	beq.n	80028fc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7ff f9fb 	bl	8001cc0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <HAL_I2C_IsDeviceReady+0xd8>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e088      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b20      	cmp	r3, #32
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002928:	7ffb      	ldrb	r3, [r7, #31]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_I2C_IsDeviceReady+0x130>
 800292e:	7fbb      	ldrb	r3, [r7, #30]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0c4      	beq.n	80028be <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b10      	cmp	r3, #16
 8002940:	d01a      	beq.n	8002978 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	2120      	movs	r1, #32
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f92f 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e058      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2220      	movs	r2, #32
 8002962:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e04a      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	2120      	movs	r1, #32
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f914 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e03d      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2210      	movs	r2, #16
 8002998:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2220      	movs	r2, #32
 80029a0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d118      	bne.n	80029dc <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2120      	movs	r1, #32
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f8f3 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e01c      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2220      	movs	r2, #32
 80029da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	f63f af39 	bhi.w	800285e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	4608      	mov	r0, r1
 8002a22:	4611      	mov	r1, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	817b      	strh	r3, [r7, #10]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	813b      	strh	r3, [r7, #8]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	4b20      	ldr	r3, [pc, #128]	; (8002abc <I2C_RequestMemoryWrite+0xa4>)
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fa6f 	bl	8002f24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	69b9      	ldr	r1, [r7, #24]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8ff 	bl	8002c4e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02c      	b.n	8002ab4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
 8002a6a:	e015      	b.n	8002a98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f8e5 	bl	8002c4e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e012      	b.n	8002ab4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8e:	893b      	ldrh	r3, [r7, #8]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f884 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	80002000 	.word	0x80002000

08002ac0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	8979      	ldrh	r1, [r7, #10]
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <I2C_RequestMemoryRead+0xa4>)
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa1c 	bl	8002f24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f8ac 	bl	8002c4e <I2C_WaitOnTXISFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e02c      	b.n	8002b5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b06:	893b      	ldrh	r3, [r7, #8]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	e015      	b.n	8002b3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b12:	893b      	ldrh	r3, [r7, #8]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f892 	bl	8002c4e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e012      	b.n	8002b5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2140      	movs	r1, #64	; 0x40
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f831 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	80002000 	.word	0x80002000

08002b68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d103      	bne.n	8002b86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d007      	beq.n	8002ba4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	619a      	str	r2, [r3, #24]
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc0:	e031      	b.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d02d      	beq.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7ff f879 	bl	8001cc0 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d122      	bne.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d113      	bne.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d0be      	beq.n	8002bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c5a:	e033      	b.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f87f 	bl	8002d64 <I2C_IsErrorOccurred>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e031      	b.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c76:	d025      	beq.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c78:	f7ff f822 	bl	8001cc0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11a      	bne.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d013      	beq.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d1c4      	bne.n	8002c5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ce8:	e02f      	b.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f838 	bl	8002d64 <I2C_IsErrorOccurred>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e02d      	b.n	8002d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe ffdf 	bl	8001cc0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11a      	bne.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d013      	beq.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e007      	b.n	8002d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d1c8      	bne.n	8002cea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d068      	beq.n	8002e62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2210      	movs	r2, #16
 8002d96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d98:	e049      	b.n	8002e2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d045      	beq.n	8002e2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002da2:	f7fe ff8d 	bl	8001cc0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <I2C_IsErrorOccurred+0x54>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d13a      	bne.n	8002e2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dda:	d121      	bne.n	8002e20 <I2C_IsErrorOccurred+0xbc>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de2:	d01d      	beq.n	8002e20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d01a      	beq.n	8002e20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dfa:	f7fe ff61 	bl	8001cc0 <HAL_GetTick>
 8002dfe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e00:	e00e      	b.n	8002e20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e02:	f7fe ff5d 	bl	8001cc0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b19      	cmp	r3, #25
 8002e0e:	d907      	bls.n	8002e20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f043 0320 	orr.w	r3, r3, #32
 8002e16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e1e:	e006      	b.n	8002e2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d1e9      	bne.n	8002e02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d003      	beq.n	8002e44 <I2C_IsErrorOccurred+0xe0>
 8002e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0aa      	beq.n	8002d9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2220      	movs	r2, #32
 8002e52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f043 0304 	orr.w	r3, r3, #4
 8002e5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f043 0308 	orr.w	r3, r3, #8
 8002e9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01c      	beq.n	8002f12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fe45 	bl	8002b68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <I2C_IsErrorOccurred+0x1bc>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3728      	adds	r7, #40	; 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	fe00e800 	.word	0xfe00e800

08002f24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	817b      	strh	r3, [r7, #10]
 8002f32:	4613      	mov	r3, r2
 8002f34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f3c:	7a7b      	ldrb	r3, [r7, #9]
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	0d5b      	lsrs	r3, r3, #21
 8002f5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <I2C_TransferConfig+0x60>)
 8002f64:	430b      	orrs	r3, r1
 8002f66:	43db      	mvns	r3, r3
 8002f68:	ea02 0103 	and.w	r1, r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	03ff63ff 	.word	0x03ff63ff

08002f88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d138      	bne.n	8003010 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e032      	b.n	8003012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	d139      	bne.n	80030a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800303e:	2302      	movs	r3, #2
 8003040:	e033      	b.n	80030aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2224      	movs	r2, #36	; 0x24
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003070:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80030be:	af00      	add	r7, sp, #0
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f001 b823 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 817d 	beq.w	80033ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030f4:	4bbc      	ldr	r3, [pc, #752]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d00c      	beq.n	800311a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003100:	4bb9      	ldr	r3, [pc, #740]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d15c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x10e>
 800310c:	4bb6      	ldr	r3, [pc, #728]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d155      	bne.n	80031c6 <HAL_RCC_OscConfig+0x10e>
 800311a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800311e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800312e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_RCC_OscConfig+0x94>
 8003146:	4ba8      	ldr	r3, [pc, #672]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	e015      	b.n	8003178 <HAL_RCC_OscConfig+0xc0>
 800314c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003150:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003164:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003168:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003174:	4b9c      	ldr	r3, [pc, #624]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800317c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003180:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003184:	fa92 f2a2 	rbit	r2, r2
 8003188:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800318c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f002 021f 	and.w	r2, r2, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 811f 	beq.w	80033ec <HAL_RCC_OscConfig+0x334>
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 8116 	bne.w	80033ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f000 bfaf 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x12e>
 80031d8:	4b83      	ldr	r3, [pc, #524]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a82      	ldr	r2, [pc, #520]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e036      	b.n	8003254 <HAL_RCC_OscConfig+0x19c>
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x158>
 80031f6:	4b7c      	ldr	r3, [pc, #496]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7b      	ldr	r2, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b79      	ldr	r3, [pc, #484]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a78      	ldr	r2, [pc, #480]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e021      	b.n	8003254 <HAL_RCC_OscConfig+0x19c>
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x184>
 8003222:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a70      	ldr	r2, [pc, #448]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6d      	ldr	r2, [pc, #436]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e00b      	b.n	8003254 <HAL_RCC_OscConfig+0x19c>
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a69      	ldr	r2, [pc, #420]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b67      	ldr	r3, [pc, #412]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a66      	ldr	r2, [pc, #408]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003254:	4b64      	ldr	r3, [pc, #400]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f023 020f 	bic.w	r2, r3, #15
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	495f      	ldr	r1, [pc, #380]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 800326a:	4313      	orrs	r3, r2
 800326c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d059      	beq.n	8003332 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fd1f 	bl	8001cc0 <HAL_GetTick>
 8003282:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7fe fd1a 	bl	8001cc0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b64      	cmp	r3, #100	; 0x64
 8003296:	d902      	bls.n	800329e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	f000 bf43 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
 800329e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80032b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <HAL_RCC_OscConfig+0x218>
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	e015      	b.n	80032fc <HAL_RCC_OscConfig+0x244>
 80032d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80032f8:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003300:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003304:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003308:	fa92 f2a2 	rbit	r2, r2
 800330c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003310:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f042 0220 	orr.w	r2, r2, #32
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f002 021f 	and.w	r2, r2, #31
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f202 	lsl.w	r2, r1, r2
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ab      	beq.n	8003288 <HAL_RCC_OscConfig+0x1d0>
 8003330:	e05d      	b.n	80033ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fcc5 	bl	8001cc0 <HAL_GetTick>
 8003336:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800333c:	f7fe fcc0 	bl	8001cc0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d902      	bls.n	8003352 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	f000 bee9 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
 8003352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003356:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003366:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0x2cc>
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e015      	b.n	80033b0 <HAL_RCC_OscConfig+0x2f8>
 8003384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003388:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_RCC_OscConfig+0x330>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80033b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033bc:	fa92 f2a2 	rbit	r2, r2
 80033c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80033c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80033c8:	fab2 f282 	clz	r2, r2
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f042 0220 	orr.w	r2, r2, #32
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f002 021f 	and.w	r2, r2, #31
 80033d8:	2101      	movs	r1, #1
 80033da:	fa01 f202 	lsl.w	r2, r1, r2
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ab      	bne.n	800333c <HAL_RCC_OscConfig+0x284>
 80033e4:	e003      	b.n	80033ee <HAL_RCC_OscConfig+0x336>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 817d 	beq.w	80036fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003404:	4ba6      	ldr	r3, [pc, #664]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003410:	4ba3      	ldr	r3, [pc, #652]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d172      	bne.n	8003502 <HAL_RCC_OscConfig+0x44a>
 800341c:	4ba0      	ldr	r3, [pc, #640]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d16c      	bne.n	8003502 <HAL_RCC_OscConfig+0x44a>
 8003428:	2302      	movs	r3, #2
 800342a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800343a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0x3a0>
 8003452:	4b93      	ldr	r3, [pc, #588]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0x3c8>
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003470:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800347c:	4b88      	ldr	r3, [pc, #544]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2202      	movs	r2, #2
 8003482:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003486:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003492:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003496:	fab2 f282 	clz	r2, r2
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f042 0220 	orr.w	r2, r2, #32
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	f002 021f 	and.w	r2, r2, #31
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCC_OscConfig+0x410>
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f000 be2e 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b75      	ldr	r3, [pc, #468]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	21f8      	movs	r1, #248	; 0xf8
 80034de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034e6:	fa91 f1a1 	rbit	r1, r1
 80034ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80034ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80034f2:	fab1 f181 	clz	r1, r1
 80034f6:	b2c9      	uxtb	r1, r1
 80034f8:	408b      	lsls	r3, r1
 80034fa:	4969      	ldr	r1, [pc, #420]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003500:	e0fd      	b.n	80036fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8088 	beq.w	8003624 <HAL_RCC_OscConfig+0x56c>
 8003514:	2301      	movs	r3, #1
 8003516:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003526:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003534:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	461a      	mov	r2, r3
 800353c:	2301      	movs	r3, #1
 800353e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe fbbe 	bl	8001cc0 <HAL_GetTick>
 8003544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe fbb9 	bl	8001cc0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	f000 bde2 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
 8003560:	2302      	movs	r3, #2
 8003562:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003572:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d102      	bne.n	8003590 <HAL_RCC_OscConfig+0x4d8>
 800358a:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0x500>
 8003590:	2302      	movs	r3, #2
 8003592:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035a2:	2302      	movs	r3, #2
 80035a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035b4:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2202      	movs	r2, #2
 80035ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80035be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035c2:	fa92 f2a2 	rbit	r2, r2
 80035c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80035ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0af      	beq.n	800354a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	21f8      	movs	r1, #248	; 0xf8
 8003600:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003608:	fa91 f1a1 	rbit	r1, r1
 800360c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003610:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003614:	fab1 f181 	clz	r1, r1
 8003618:	b2c9      	uxtb	r1, r1
 800361a:	408b      	lsls	r3, r1
 800361c:	4920      	ldr	r1, [pc, #128]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
 8003622:	e06c      	b.n	80036fe <HAL_RCC_OscConfig+0x646>
 8003624:	2301      	movs	r3, #1
 8003626:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003636:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	461a      	mov	r2, r3
 800364c:	2300      	movs	r3, #0
 800364e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe fb36 	bl	8001cc0 <HAL_GetTick>
 8003654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fb31 	bl	8001cc0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d902      	bls.n	8003670 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	f000 bd5a 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
 8003670:	2302      	movs	r3, #2
 8003672:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d104      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5ec>
 800369a:	4b01      	ldr	r3, [pc, #4]	; (80036a0 <HAL_RCC_OscConfig+0x5e8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	e015      	b.n	80036cc <HAL_RCC_OscConfig+0x614>
 80036a0:	40021000 	.word	0x40021000
 80036a4:	2302      	movs	r3, #2
 80036a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036b6:	2302      	movs	r3, #2
 80036b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80036c8:	4bc8      	ldr	r3, [pc, #800]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2202      	movs	r2, #2
 80036ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80036d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036d6:	fa92 f2a2 	rbit	r2, r2
 80036da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80036de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f042 0220 	orr.w	r2, r2, #32
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f002 021f 	and.w	r2, r2, #31
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ad      	bne.n	800365a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8110 	beq.w	8003934 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d079      	beq.n	8003818 <HAL_RCC_OscConfig+0x760>
 8003724:	2301      	movs	r3, #1
 8003726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4bab      	ldr	r3, [pc, #684]	; (80039f0 <HAL_RCC_OscConfig+0x938>)
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	2301      	movs	r3, #1
 800374c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe fab7 	bl	8001cc0 <HAL_GetTick>
 8003752:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003758:	f7fe fab2 	bl	8001cc0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f000 bcdb 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003788:	2202      	movs	r2, #2
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	fa93 f2a3 	rbit	r2, r3
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ac:	2202      	movs	r2, #2
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	fa93 f2a3 	rbit	r2, r3
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c8:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 80037ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037d4:	2102      	movs	r1, #2
 80037d6:	6019      	str	r1, [r3, #0]
 80037d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	fa93 f1a3 	rbit	r1, r3
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037ee:	6019      	str	r1, [r3, #0]
  return result;
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0a0      	beq.n	8003758 <HAL_RCC_OscConfig+0x6a0>
 8003816:	e08d      	b.n	8003934 <HAL_RCC_OscConfig+0x87c>
 8003818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fa93 f2a3 	rbit	r2, r3
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800383a:	601a      	str	r2, [r3, #0]
  return result;
 800383c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003840:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003844:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_OscConfig+0x938>)
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	2300      	movs	r3, #0
 8003858:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fa31 	bl	8001cc0 <HAL_GetTick>
 800385e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003864:	f7fe fa2c 	bl	8001cc0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d902      	bls.n	800387a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	f000 bc55 	b.w	8004124 <HAL_RCC_OscConfig+0x106c>
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003882:	2202      	movs	r2, #2
 8003884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	fa93 f2a3 	rbit	r2, r3
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038a6:	2202      	movs	r2, #2
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ca:	2202      	movs	r2, #2
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	fa93 f2a3 	rbit	r2, r3
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 80038e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038f2:	2102      	movs	r1, #2
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fa93 f1a3 	rbit	r1, r3
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800390c:	6019      	str	r1, [r3, #0]
  return result;
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d197      	bne.n	8003864 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 81a1 	beq.w	8003c8c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d116      	bne.n	800398a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	61d3      	str	r3, [r2, #28]
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003974:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003982:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_RCC_OscConfig+0x93c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11a      	bne.n	80039cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_RCC_OscConfig+0x93c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_RCC_OscConfig+0x93c>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7fe f98d 	bl	8001cc0 <HAL_GetTick>
 80039a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	e009      	b.n	80039c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fe f988 	bl	8001cc0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b64      	cmp	r3, #100	; 0x64
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e3b1      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_RCC_OscConfig+0x93c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ef      	beq.n	80039ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10d      	bne.n	80039f8 <HAL_RCC_OscConfig+0x940>
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a02      	ldr	r2, [pc, #8]	; (80039ec <HAL_RCC_OscConfig+0x934>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	e03c      	b.n	8003a64 <HAL_RCC_OscConfig+0x9ac>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	10908120 	.word	0x10908120
 80039f4:	40007000 	.word	0x40007000
 80039f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCC_OscConfig+0x96a>
 8003a08:	4bc1      	ldr	r3, [pc, #772]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4ac0      	ldr	r2, [pc, #768]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	4bbe      	ldr	r3, [pc, #760]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4abd      	ldr	r2, [pc, #756]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e020      	b.n	8003a64 <HAL_RCC_OscConfig+0x9ac>
 8003a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x994>
 8003a32:	4bb7      	ldr	r3, [pc, #732]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	4ab6      	ldr	r2, [pc, #728]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6213      	str	r3, [r2, #32]
 8003a3e:	4bb4      	ldr	r3, [pc, #720]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4ab3      	ldr	r2, [pc, #716]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6213      	str	r3, [r2, #32]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0x9ac>
 8003a4c:	4bb0      	ldr	r3, [pc, #704]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4aaf      	ldr	r2, [pc, #700]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	4bad      	ldr	r3, [pc, #692]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4aac      	ldr	r2, [pc, #688]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8081 	beq.w	8003b78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe f923 	bl	8001cc0 <HAL_GetTick>
 8003a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fe f91e 	bl	8001cc0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e345      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	fa93 f2a3 	rbit	r2, r3
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003acc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	fa93 f2a3 	rbit	r2, r3
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ade:	601a      	str	r2, [r3, #0]
  return result;
 8003ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ae8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_OscConfig+0xa4c>
 8003afe:	4b84      	ldr	r3, [pc, #528]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	e013      	b.n	8003b2c <HAL_RCC_OscConfig+0xa74>
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	fa93 f2a3 	rbit	r2, r3
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	4b79      	ldr	r3, [pc, #484]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b34:	2102      	movs	r1, #2
 8003b36:	6011      	str	r1, [r2, #0]
 8003b38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	fa92 f1a2 	rbit	r1, r2
 8003b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b4e:	6011      	str	r1, [r2, #0]
  return result;
 8003b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b54:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	fab2 f282 	clz	r2, r2
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f002 021f 	and.w	r2, r2, #31
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d084      	beq.n	8003a80 <HAL_RCC_OscConfig+0x9c8>
 8003b76:	e07f      	b.n	8003c78 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fe f8a2 	bl	8001cc0 <HAL_GetTick>
 8003b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b80:	e00b      	b.n	8003b9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe f89d 	bl	8001cc0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e2c4      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
 8003b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	fa93 f2a3 	rbit	r2, r3
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fa93 f2a3 	rbit	r2, r3
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003be0:	601a      	str	r2, [r3, #0]
  return result;
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_OscConfig+0xb4e>
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	e013      	b.n	8003c2e <HAL_RCC_OscConfig+0xb76>
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c0e:	2202      	movs	r2, #2
 8003c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	fa93 f2a3 	rbit	r2, r3
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c36:	2102      	movs	r1, #2
 8003c38:	6011      	str	r1, [r2, #0]
 8003c3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	fa92 f1a2 	rbit	r1, r2
 8003c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c50:	6011      	str	r1, [r2, #0]
  return result;
 8003c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	fab2 f282 	clz	r2, r2
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	f002 021f 	and.w	r2, r2, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d184      	bne.n	8003b82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8242 	beq.w	8004122 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_RCC_OscConfig+0xc58>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	f000 8213 	beq.w	80040d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	f040 8162 	bne.w	8003f82 <HAL_RCC_OscConfig+0xeca>
 8003cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fa93 f2a3 	rbit	r2, r3
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ce2:	601a      	str	r2, [r3, #0]
  return result;
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd ffdc 	bl	8001cc0 <HAL_GetTick>
 8003d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCC_OscConfig+0xc70>
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd ffd4 	bl	8001cc0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1fd      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
 8003d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	fa93 f2a3 	rbit	r2, r3
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d4c:	601a      	str	r2, [r3, #0]
  return result;
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d102      	bne.n	8003d72 <HAL_RCC_OscConfig+0xcba>
 8003d6c:	4bb0      	ldr	r3, [pc, #704]	; (8004030 <HAL_RCC_OscConfig+0xf78>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	e027      	b.n	8003dc2 <HAL_RCC_OscConfig+0xd0a>
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d84:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	fa93 f2a3 	rbit	r2, r3
 8003d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d92:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003daa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	fa93 f2a3 	rbit	r2, r3
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	4b9c      	ldr	r3, [pc, #624]	; (8004030 <HAL_RCC_OscConfig+0xf78>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dc6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dce:	6011      	str	r1, [r2, #0]
 8003dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dd4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	fa92 f1a2 	rbit	r1, r2
 8003dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003de2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003de6:	6011      	str	r1, [r2, #0]
  return result;
 8003de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	fab2 f282 	clz	r2, r2
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	f042 0220 	orr.w	r2, r2, #32
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	f002 021f 	and.w	r2, r2, #31
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f202 	lsl.w	r2, r1, r2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d182      	bne.n	8003d14 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0e:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0xf78>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	497f      	ldr	r1, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0xf78>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
 8003e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f2a3 	rbit	r2, r3
 8003e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e5a:	601a      	str	r2, [r3, #0]
  return result;
 8003e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e64:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	461a      	mov	r2, r3
 8003e78:	2301      	movs	r3, #1
 8003e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ff20 	bl	8001cc0 <HAL_GetTick>
 8003e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e84:	e009      	b.n	8003e9a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd ff1b 	bl	8001cc0 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e144      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	fa93 f2a3 	rbit	r2, r3
 8003eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ebe:	601a      	str	r2, [r3, #0]
  return result;
 8003ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ec8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d102      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xe2c>
 8003ede:	4b54      	ldr	r3, [pc, #336]	; (8004030 <HAL_RCC_OscConfig+0xf78>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	e027      	b.n	8003f34 <HAL_RCC_OscConfig+0xe7c>
 8003ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	fa93 f2a3 	rbit	r2, r3
 8003f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b3f      	ldr	r3, [pc, #252]	; (8004030 <HAL_RCC_OscConfig+0xf78>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f38:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f40:	6011      	str	r1, [r2, #0]
 8003f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f46:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	fa92 f1a2 	rbit	r1, r2
 8003f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f58:	6011      	str	r1, [r2, #0]
  return result;
 8003f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f042 0220 	orr.w	r2, r2, #32
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f002 021f 	and.w	r2, r2, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d082      	beq.n	8003e86 <HAL_RCC_OscConfig+0xdce>
 8003f80:	e0cf      	b.n	8004122 <HAL_RCC_OscConfig+0x106a>
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f2a3 	rbit	r2, r3
 8003f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fa6:	601a      	str	r2, [r3, #0]
  return result;
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fb0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fe7a 	bl	8001cc0 <HAL_GetTick>
 8003fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd0:	e009      	b.n	8003fe6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fd fe75 	bl	8001cc0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e09e      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
 8003fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	fa93 f2a3 	rbit	r2, r3
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800400a:	601a      	str	r2, [r3, #0]
  return result;
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004014:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d104      	bne.n	8004034 <HAL_RCC_OscConfig+0xf7c>
 800402a:	4b01      	ldr	r3, [pc, #4]	; (8004030 <HAL_RCC_OscConfig+0xf78>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	e029      	b.n	8004084 <HAL_RCC_OscConfig+0xfcc>
 8004030:	40021000 	.word	0x40021000
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800403c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004046:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fa93 f2a3 	rbit	r2, r3
 8004050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004054:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_OscConfig+0x1078>)
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004088:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800408c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004096:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	fa92 f1a2 	rbit	r1, r2
 80040a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040a8:	6011      	str	r1, [r2, #0]
  return result;
 80040aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	fab2 f282 	clz	r2, r2
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	f042 0220 	orr.w	r2, r2, #32
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	f002 021f 	and.w	r2, r2, #31
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d180      	bne.n	8003fd2 <HAL_RCC_OscConfig+0xf1a>
 80040d0:	e027      	b.n	8004122 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e01e      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_OscConfig+0x1078>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	429a      	cmp	r2, r3
 8004104:	d10b      	bne.n	800411e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004106:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800410a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800411a:	429a      	cmp	r2, r3
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000

08004134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b09e      	sub	sp, #120	; 0x78
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e162      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d910      	bls.n	800417c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b8d      	ldr	r3, [pc, #564]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 0207 	bic.w	r2, r3, #7
 8004162:	498b      	ldr	r1, [pc, #556]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b89      	ldr	r3, [pc, #548]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e14a      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004188:	4b82      	ldr	r3, [pc, #520]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	497f      	ldr	r1, [pc, #508]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80dc 	beq.w	8004360 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d13c      	bne.n	800422a <HAL_RCC_ClockConfig+0xf6>
 80041b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d102      	bne.n	80041da <HAL_RCC_ClockConfig+0xa6>
 80041d4:	4b6f      	ldr	r3, [pc, #444]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	e00f      	b.n	80041fa <HAL_RCC_ClockConfig+0xc6>
 80041da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	667b      	str	r3, [r7, #100]	; 0x64
 80041e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ec:	663b      	str	r3, [r7, #96]	; 0x60
 80041ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f6:	4b67      	ldr	r3, [pc, #412]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004202:	fa92 f2a2 	rbit	r2, r2
 8004206:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800420a:	fab2 f282 	clz	r2, r2
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f042 0220 	orr.w	r2, r2, #32
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f002 021f 	and.w	r2, r2, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d17b      	bne.n	800431e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0f3      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d13c      	bne.n	80042ac <HAL_RCC_ClockConfig+0x178>
 8004232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004236:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_RCC_ClockConfig+0x128>
 8004256:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	e00f      	b.n	800427c <HAL_RCC_ClockConfig+0x148>
 800425c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
 800426a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426e:	643b      	str	r3, [r7, #64]	; 0x40
 8004270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004278:	4b46      	ldr	r3, [pc, #280]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004280:	63ba      	str	r2, [r7, #56]	; 0x38
 8004282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004284:	fa92 f2a2 	rbit	r2, r2
 8004288:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800428a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428c:	fab2 f282 	clz	r2, r2
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	f042 0220 	orr.w	r2, r2, #32
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f002 021f 	and.w	r2, r2, #31
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d13a      	bne.n	800431e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0b2      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
 80042ac:	2302      	movs	r3, #2
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x1a0>
 80042ce:	4b31      	ldr	r3, [pc, #196]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	e00d      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1bc>
 80042d4:	2302      	movs	r3, #2
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	2302      	movs	r3, #2
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	4b29      	ldr	r3, [pc, #164]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2202      	movs	r2, #2
 80042f2:	61ba      	str	r2, [r7, #24]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	fa92 f2a2 	rbit	r2, r2
 80042fa:	617a      	str	r2, [r7, #20]
  return result;
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	f042 0220 	orr.w	r2, r2, #32
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f002 021f 	and.w	r2, r2, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e079      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	491a      	ldr	r1, [pc, #104]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004330:	f7fd fcc6 	bl	8001cc0 <HAL_GetTick>
 8004334:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fd fcc2 	bl	8001cc0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e061      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d214      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	4906      	ldr	r1, [pc, #24]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e040      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
 8004390:	40022000 	.word	0x40022000
 8004394:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	491a      	ldr	r1, [pc, #104]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4912      	ldr	r1, [pc, #72]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043d6:	f000 f829 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043da:	4601      	mov	r1, r0
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e4:	22f0      	movs	r2, #240	; 0xf0
 80043e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	fa92 f2a2 	rbit	r2, r2
 80043ee:	60fa      	str	r2, [r7, #12]
  return result;
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	fab2 f282 	clz	r2, r2
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	40d3      	lsrs	r3, r2
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x2ec>)
 80043fc:	5cd3      	ldrb	r3, [r2, r3]
 80043fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004402:	4a08      	ldr	r2, [pc, #32]	; (8004424 <HAL_RCC_ClockConfig+0x2f0>)
 8004404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_RCC_ClockConfig+0x2f4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd fc14 	bl	8001c38 <HAL_InitTick>
  
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3778      	adds	r7, #120	; 0x78
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
 8004420:	08006a7c 	.word	0x08006a7c
 8004424:	20000004 	.word	0x20000004
 8004428:	20000008 	.word	0x20000008

0800442c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	b08b      	sub	sp, #44	; 0x2c
 8004430:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d002      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x30>
 8004456:	2b08      	cmp	r3, #8
 8004458:	d003      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x36>
 800445a:	e03c      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800445c:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800445e:	623b      	str	r3, [r7, #32]
      break;
 8004460:	e03c      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004468:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800446c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	fa92 f2a2 	rbit	r2, r2
 8004474:	607a      	str	r2, [r7, #4]
  return result;
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	40d3      	lsrs	r3, r2
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004486:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	220f      	movs	r2, #15
 8004490:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	fa92 f2a2 	rbit	r2, r2
 8004498:	60fa      	str	r2, [r7, #12]
  return result;
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	fab2 f282 	clz	r2, r2
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	40d3      	lsrs	r3, r2
 80044a4:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044a6:	5cd3      	ldrb	r3, [r2, r3]
 80044a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044b4:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e004      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	623b      	str	r3, [r7, #32]
      break;
 80044d4:	e002      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044d8:	623b      	str	r3, [r7, #32]
      break;
 80044da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044dc:	6a3b      	ldr	r3, [r7, #32]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	372c      	adds	r7, #44	; 0x2c
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	007a1200 	.word	0x007a1200
 80044f4:	08006a94 	.word	0x08006a94
 80044f8:	08006aa4 	.word	0x08006aa4
 80044fc:	003d0900 	.word	0x003d0900

08004500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCC_GetHCLKFreq+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800451e:	f7ff ffef 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004522:	4601      	mov	r1, r0
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800452c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004530:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	fa92 f2a2 	rbit	r2, r2
 8004538:	603a      	str	r2, [r7, #0]
  return result;
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	fab2 f282 	clz	r2, r2
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	40d3      	lsrs	r3, r2
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004546:	5cd3      	ldrb	r3, [r2, r3]
 8004548:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	08006a8c 	.word	0x08006a8c

0800455c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004562:	f7ff ffcd 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004570:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004574:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	603a      	str	r2, [r7, #0]
  return result;
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_RCC_GetPCLK2Freq+0x40>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	08006a8c 	.word	0x08006a8c

080045a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b092      	sub	sp, #72	; 0x48
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80d4 	beq.w	800476c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c4:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10e      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4a4a      	ldr	r2, [pc, #296]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045da:	61d3      	str	r3, [r2, #28]
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b45      	ldr	r3, [pc, #276]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fa:	4b42      	ldr	r3, [pc, #264]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a41      	ldr	r2, [pc, #260]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fd fb5b 	bl	8001cc0 <HAL_GetTick>
 800460a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fd fb57 	bl	8001cc0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b64      	cmp	r3, #100	; 0x64
 800461a:	d901      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e13c      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800462c:	4b34      	ldr	r3, [pc, #208]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8084 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004648:	429a      	cmp	r2, r3
 800464a:	d07c      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800464c:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	461a      	mov	r2, r3
 8004676:	2301      	movs	r3, #1
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	461a      	mov	r2, r3
 800469a:	2300      	movs	r3, #0
 800469c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04b      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ae:	f7fd fb07 	bl	8001cc0 <HAL_GetTick>
 80046b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	e00a      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fd fb03 	bl	8001cc0 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0e6      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80046cc:	2302      	movs	r3, #2
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	2302      	movs	r3, #2
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	61fb      	str	r3, [r7, #28]
  return result;
 80046e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	fab3 f383 	clz	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f043 0302 	orr.w	r3, r3, #2
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d108      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046fa:	4b01      	ldr	r3, [pc, #4]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	e00d      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
 8004708:	10908100 	.word	0x10908100
 800470c:	2302      	movs	r3, #2
 800470e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	2202      	movs	r2, #2
 800471e:	613a      	str	r2, [r7, #16]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	fa92 f2a2 	rbit	r2, r2
 8004726:	60fa      	str	r2, [r7, #12]
  return result;
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	fab2 f282 	clz	r2, r2
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	f002 021f 	and.w	r2, r2, #31
 800473a:	2101      	movs	r1, #1
 800473c:	fa01 f202 	lsl.w	r2, r1, r2
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0b7      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004746:	4b57      	ldr	r3, [pc, #348]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4954      	ldr	r1, [pc, #336]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004754:	4313      	orrs	r3, r2
 8004756:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004758:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800475c:	2b01      	cmp	r3, #1
 800475e:	d105      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004760:	4b50      	ldr	r3, [pc, #320]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4a4f      	ldr	r2, [pc, #316]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004778:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f023 0203 	bic.w	r2, r3, #3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4947      	ldr	r1, [pc, #284]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004786:	4313      	orrs	r3, r2
 8004788:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004796:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f023 0210 	bic.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4940      	ldr	r1, [pc, #256]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b4:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	f023 0220 	bic.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4938      	ldr	r1, [pc, #224]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d2:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	4931      	ldr	r1, [pc, #196]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4929      	ldr	r1, [pc, #164]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800480e:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	4922      	ldr	r1, [pc, #136]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800481c:	4313      	orrs	r3, r2
 800481e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	491a      	ldr	r1, [pc, #104]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800483a:	4313      	orrs	r3, r2
 800483c:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800484a:	4b16      	ldr	r3, [pc, #88]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	4913      	ldr	r1, [pc, #76]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004858:	4313      	orrs	r3, r2
 800485a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	490b      	ldr	r1, [pc, #44]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004876:	4313      	orrs	r3, r2
 8004878:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004886:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4904      	ldr	r1, [pc, #16]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004894:	4313      	orrs	r3, r2
 8004896:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3748      	adds	r7, #72	; 0x48
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000

080048a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e09d      	b.n	80049f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ca:	d009      	beq.n	80048e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
 80048d2:	e005      	b.n	80048e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc ffc8 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004916:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004920:	d902      	bls.n	8004928 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e002      	b.n	800492e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800492c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004936:	d007      	beq.n	8004948 <HAL_SPI_Init+0xa0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	ea42 0103 	orr.w	r1, r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	f003 0204 	and.w	r2, r3, #4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049c4:	ea42 0103 	orr.w	r1, r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e040      	b.n	8004a92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fc ff79 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2224      	movs	r2, #36	; 0x24
 8004a2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8b7 	bl	8004bb0 <UART_SetConfig>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e022      	b.n	8004a92 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f9e1 	bl	8004e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa68 	bl	8004f60 <UART_CheckIdleState>
 8004a90:	4603      	mov	r3, r0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08a      	sub	sp, #40	; 0x28
 8004a9e:	af02      	add	r7, sp, #8
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d178      	bne.n	8004ba4 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_UART_Transmit+0x24>
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e071      	b.n	8004ba6 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2221      	movs	r2, #33	; 0x21
 8004ace:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad0:	f7fd f8f6 	bl	8001cc0 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	88fa      	ldrh	r2, [r7, #6]
 8004ada:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	d108      	bne.n	8004b02 <HAL_UART_Transmit+0x68>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	e003      	b.n	8004b0a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b0a:	e030      	b.n	8004b6e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2180      	movs	r1, #128	; 0x80
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 faca 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e03c      	b.n	8004ba6 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b3e:	b292      	uxth	r2, r2
 8004b40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	3302      	adds	r3, #2
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e008      	b.n	8004b5c <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b292      	uxth	r2, r2
 8004b54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1c8      	bne.n	8004b0c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2140      	movs	r1, #64	; 0x40
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fa93 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e005      	b.n	8004ba6 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b8a      	ldr	r3, [pc, #552]	; (8004e04 <UART_SetConfig+0x254>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a78      	ldr	r2, [pc, #480]	; (8004e08 <UART_SetConfig+0x258>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d120      	bne.n	8004c6e <UART_SetConfig+0xbe>
 8004c2c:	4b77      	ldr	r3, [pc, #476]	; (8004e0c <UART_SetConfig+0x25c>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d817      	bhi.n	8004c68 <UART_SetConfig+0xb8>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <UART_SetConfig+0x90>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c5d 	.word	0x08004c5d
 8004c48:	08004c63 	.word	0x08004c63
 8004c4c:	08004c57 	.word	0x08004c57
 8004c50:	2300      	movs	r3, #0
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e01d      	b.n	8004c92 <UART_SetConfig+0xe2>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e01a      	b.n	8004c92 <UART_SetConfig+0xe2>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e017      	b.n	8004c92 <UART_SetConfig+0xe2>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e014      	b.n	8004c92 <UART_SetConfig+0xe2>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e011      	b.n	8004c92 <UART_SetConfig+0xe2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a67      	ldr	r2, [pc, #412]	; (8004e10 <UART_SetConfig+0x260>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d102      	bne.n	8004c7e <UART_SetConfig+0xce>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e009      	b.n	8004c92 <UART_SetConfig+0xe2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a64      	ldr	r2, [pc, #400]	; (8004e14 <UART_SetConfig+0x264>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d102      	bne.n	8004c8e <UART_SetConfig+0xde>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e001      	b.n	8004c92 <UART_SetConfig+0xe2>
 8004c8e:	2310      	movs	r3, #16
 8004c90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9a:	d15a      	bne.n	8004d52 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c9c:	7ffb      	ldrb	r3, [r7, #31]
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d827      	bhi.n	8004cf2 <UART_SetConfig+0x142>
 8004ca2:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0xf8>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004ce3 	.word	0x08004ce3
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004cf3 	.word	0x08004cf3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7ff fc24 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	61b8      	str	r0, [r7, #24]
        break;
 8004cd2:	e013      	b.n	8004cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7ff fc42 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8004cd8:	61b8      	str	r0, [r7, #24]
        break;
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b4e      	ldr	r3, [pc, #312]	; (8004e18 <UART_SetConfig+0x268>)
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	e00c      	b.n	8004cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7ff fba3 	bl	800442c <HAL_RCC_GetSysClockFreq>
 8004ce6:	61b8      	str	r0, [r7, #24]
        break;
 8004ce8:	e008      	b.n	8004cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e004      	b.n	8004cfc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d074      	beq.n	8004dec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	005a      	lsls	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b0f      	cmp	r3, #15
 8004d1c:	d916      	bls.n	8004d4c <UART_SetConfig+0x19c>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d212      	bcs.n	8004d4c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f023 030f 	bic.w	r3, r3, #15
 8004d2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	89fb      	ldrh	r3, [r7, #14]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	89fa      	ldrh	r2, [r7, #14]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e04f      	b.n	8004dec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77bb      	strb	r3, [r7, #30]
 8004d50:	e04c      	b.n	8004dec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d52:	7ffb      	ldrb	r3, [r7, #31]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d828      	bhi.n	8004daa <UART_SetConfig+0x1fa>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x1b0>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dab 	.word	0x08004dab
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	08004da3 	.word	0x08004da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7ff fbc8 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8004d88:	61b8      	str	r0, [r7, #24]
        break;
 8004d8a:	e013      	b.n	8004db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7ff fbe6 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8004d90:	61b8      	str	r0, [r7, #24]
        break;
 8004d92:	e00f      	b.n	8004db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d94:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <UART_SetConfig+0x268>)
 8004d96:	61bb      	str	r3, [r7, #24]
        break;
 8004d98:	e00c      	b.n	8004db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9a:	f7ff fb47 	bl	800442c <HAL_RCC_GetSysClockFreq>
 8004d9e:	61b8      	str	r0, [r7, #24]
        break;
 8004da0:	e008      	b.n	8004db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	61bb      	str	r3, [r7, #24]
        break;
 8004da8:	e004      	b.n	8004db4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	77bb      	strb	r3, [r7, #30]
        break;
 8004db2:	bf00      	nop
    }

    if (pclk != 0U)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d018      	beq.n	8004dec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	085a      	lsrs	r2, r3, #1
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d909      	bls.n	8004de8 <UART_SetConfig+0x238>
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d205      	bcs.n	8004de8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	e001      	b.n	8004dec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004df8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	efff69f3 	.word	0xefff69f3
 8004e08:	40013800 	.word	0x40013800
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40004400 	.word	0x40004400
 8004e14:	40004800 	.word	0x40004800
 8004e18:	007a1200 	.word	0x007a1200

08004e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f1a:	d10a      	bne.n	8004f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b098      	sub	sp, #96	; 0x60
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f70:	f7fc fea6 	bl	8001cc0 <HAL_GetTick>
 8004f74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d12e      	bne.n	8004fe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f88c 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d021      	beq.n	8004fe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fbe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e062      	b.n	80050a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d149      	bne.n	8005084 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f856 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d03c      	beq.n	8005084 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	623b      	str	r3, [r7, #32]
   return(result);
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
 800502a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800502e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e6      	bne.n	800500a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	60fb      	str	r3, [r7, #12]
   return(result);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	64bb      	str	r3, [r7, #72]	; 0x48
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800505c:	61fa      	str	r2, [r7, #28]
 800505e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	617b      	str	r3, [r7, #20]
   return(result);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e011      	b.n	80050a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3758      	adds	r7, #88	; 0x58
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c0:	e049      	b.n	8005156 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d045      	beq.n	8005156 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fc fdf9 	bl	8001cc0 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e048      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d031      	beq.n	8005156 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d110      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2208      	movs	r2, #8
 8005106:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f838 	bl	800517e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2208      	movs	r2, #8
 8005112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e029      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800512c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005130:	d111      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800513a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f81e 	bl	800517e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e00f      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d0a6      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800517e:	b480      	push	{r7}
 8005180:	b095      	sub	sp, #84	; 0x54
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
 80051a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e6      	bne.n	8005186 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d118      	bne.n	8005226 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	60bb      	str	r3, [r7, #8]
   return(result);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f023 0310 	bic.w	r3, r3, #16
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	613b      	str	r3, [r7, #16]
   return(result);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e6      	bne.n	80051f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	669a      	str	r2, [r3, #104]	; 0x68
}
 800523a:	bf00      	nop
 800523c:	3754      	adds	r7, #84	; 0x54
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <__errno>:
 8005248:	4b01      	ldr	r3, [pc, #4]	; (8005250 <__errno+0x8>)
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000010 	.word	0x20000010

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4d0d      	ldr	r5, [pc, #52]	; (800528c <__libc_init_array+0x38>)
 8005258:	4c0d      	ldr	r4, [pc, #52]	; (8005290 <__libc_init_array+0x3c>)
 800525a:	1b64      	subs	r4, r4, r5
 800525c:	10a4      	asrs	r4, r4, #2
 800525e:	2600      	movs	r6, #0
 8005260:	42a6      	cmp	r6, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	4d0b      	ldr	r5, [pc, #44]	; (8005294 <__libc_init_array+0x40>)
 8005266:	4c0c      	ldr	r4, [pc, #48]	; (8005298 <__libc_init_array+0x44>)
 8005268:	f001 fb78 	bl	800695c <_init>
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	2600      	movs	r6, #0
 8005272:	42a6      	cmp	r6, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	f855 3b04 	ldr.w	r3, [r5], #4
 800527c:	4798      	blx	r3
 800527e:	3601      	adds	r6, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	f855 3b04 	ldr.w	r3, [r5], #4
 8005286:	4798      	blx	r3
 8005288:	3601      	adds	r6, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	08006bc0 	.word	0x08006bc0
 8005290:	08006bc0 	.word	0x08006bc0
 8005294:	08006bc0 	.word	0x08006bc0
 8005298:	08006bc4 	.word	0x08006bc4

0800529c <memset>:
 800529c:	4402      	add	r2, r0
 800529e:	4603      	mov	r3, r0
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d100      	bne.n	80052a6 <memset+0xa>
 80052a4:	4770      	bx	lr
 80052a6:	f803 1b01 	strb.w	r1, [r3], #1
 80052aa:	e7f9      	b.n	80052a0 <memset+0x4>

080052ac <iprintf>:
 80052ac:	b40f      	push	{r0, r1, r2, r3}
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <iprintf+0x2c>)
 80052b0:	b513      	push	{r0, r1, r4, lr}
 80052b2:	681c      	ldr	r4, [r3, #0]
 80052b4:	b124      	cbz	r4, 80052c0 <iprintf+0x14>
 80052b6:	69a3      	ldr	r3, [r4, #24]
 80052b8:	b913      	cbnz	r3, 80052c0 <iprintf+0x14>
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 fa5e 	bl	800577c <__sinit>
 80052c0:	ab05      	add	r3, sp, #20
 80052c2:	9a04      	ldr	r2, [sp, #16]
 80052c4:	68a1      	ldr	r1, [r4, #8]
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 fc67 	bl	8005b9c <_vfiprintf_r>
 80052ce:	b002      	add	sp, #8
 80052d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d4:	b004      	add	sp, #16
 80052d6:	4770      	bx	lr
 80052d8:	20000010 	.word	0x20000010

080052dc <_puts_r>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	460e      	mov	r6, r1
 80052e0:	4605      	mov	r5, r0
 80052e2:	b118      	cbz	r0, 80052ec <_puts_r+0x10>
 80052e4:	6983      	ldr	r3, [r0, #24]
 80052e6:	b90b      	cbnz	r3, 80052ec <_puts_r+0x10>
 80052e8:	f000 fa48 	bl	800577c <__sinit>
 80052ec:	69ab      	ldr	r3, [r5, #24]
 80052ee:	68ac      	ldr	r4, [r5, #8]
 80052f0:	b913      	cbnz	r3, 80052f8 <_puts_r+0x1c>
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 fa42 	bl	800577c <__sinit>
 80052f8:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <_puts_r+0xd0>)
 80052fa:	429c      	cmp	r4, r3
 80052fc:	d120      	bne.n	8005340 <_puts_r+0x64>
 80052fe:	686c      	ldr	r4, [r5, #4]
 8005300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005302:	07db      	lsls	r3, r3, #31
 8005304:	d405      	bmi.n	8005312 <_puts_r+0x36>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	0598      	lsls	r0, r3, #22
 800530a:	d402      	bmi.n	8005312 <_puts_r+0x36>
 800530c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800530e:	f000 fad3 	bl	80058b8 <__retarget_lock_acquire_recursive>
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	0719      	lsls	r1, r3, #28
 8005316:	d51d      	bpl.n	8005354 <_puts_r+0x78>
 8005318:	6923      	ldr	r3, [r4, #16]
 800531a:	b1db      	cbz	r3, 8005354 <_puts_r+0x78>
 800531c:	3e01      	subs	r6, #1
 800531e:	68a3      	ldr	r3, [r4, #8]
 8005320:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005324:	3b01      	subs	r3, #1
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	bb39      	cbnz	r1, 800537a <_puts_r+0x9e>
 800532a:	2b00      	cmp	r3, #0
 800532c:	da38      	bge.n	80053a0 <_puts_r+0xc4>
 800532e:	4622      	mov	r2, r4
 8005330:	210a      	movs	r1, #10
 8005332:	4628      	mov	r0, r5
 8005334:	f000 f848 	bl	80053c8 <__swbuf_r>
 8005338:	3001      	adds	r0, #1
 800533a:	d011      	beq.n	8005360 <_puts_r+0x84>
 800533c:	250a      	movs	r5, #10
 800533e:	e011      	b.n	8005364 <_puts_r+0x88>
 8005340:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <_puts_r+0xd4>)
 8005342:	429c      	cmp	r4, r3
 8005344:	d101      	bne.n	800534a <_puts_r+0x6e>
 8005346:	68ac      	ldr	r4, [r5, #8]
 8005348:	e7da      	b.n	8005300 <_puts_r+0x24>
 800534a:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <_puts_r+0xd8>)
 800534c:	429c      	cmp	r4, r3
 800534e:	bf08      	it	eq
 8005350:	68ec      	ldreq	r4, [r5, #12]
 8005352:	e7d5      	b.n	8005300 <_puts_r+0x24>
 8005354:	4621      	mov	r1, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f888 	bl	800546c <__swsetup_r>
 800535c:	2800      	cmp	r0, #0
 800535e:	d0dd      	beq.n	800531c <_puts_r+0x40>
 8005360:	f04f 35ff 	mov.w	r5, #4294967295
 8005364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005366:	07da      	lsls	r2, r3, #31
 8005368:	d405      	bmi.n	8005376 <_puts_r+0x9a>
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	059b      	lsls	r3, r3, #22
 800536e:	d402      	bmi.n	8005376 <_puts_r+0x9a>
 8005370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005372:	f000 faa2 	bl	80058ba <__retarget_lock_release_recursive>
 8005376:	4628      	mov	r0, r5
 8005378:	bd70      	pop	{r4, r5, r6, pc}
 800537a:	2b00      	cmp	r3, #0
 800537c:	da04      	bge.n	8005388 <_puts_r+0xac>
 800537e:	69a2      	ldr	r2, [r4, #24]
 8005380:	429a      	cmp	r2, r3
 8005382:	dc06      	bgt.n	8005392 <_puts_r+0xb6>
 8005384:	290a      	cmp	r1, #10
 8005386:	d004      	beq.n	8005392 <_puts_r+0xb6>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	7019      	strb	r1, [r3, #0]
 8005390:	e7c5      	b.n	800531e <_puts_r+0x42>
 8005392:	4622      	mov	r2, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f817 	bl	80053c8 <__swbuf_r>
 800539a:	3001      	adds	r0, #1
 800539c:	d1bf      	bne.n	800531e <_puts_r+0x42>
 800539e:	e7df      	b.n	8005360 <_puts_r+0x84>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	250a      	movs	r5, #10
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	6022      	str	r2, [r4, #0]
 80053a8:	701d      	strb	r5, [r3, #0]
 80053aa:	e7db      	b.n	8005364 <_puts_r+0x88>
 80053ac:	08006ad8 	.word	0x08006ad8
 80053b0:	08006af8 	.word	0x08006af8
 80053b4:	08006ab8 	.word	0x08006ab8

080053b8 <puts>:
 80053b8:	4b02      	ldr	r3, [pc, #8]	; (80053c4 <puts+0xc>)
 80053ba:	4601      	mov	r1, r0
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	f7ff bf8d 	b.w	80052dc <_puts_r>
 80053c2:	bf00      	nop
 80053c4:	20000010 	.word	0x20000010

080053c8 <__swbuf_r>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	460e      	mov	r6, r1
 80053cc:	4614      	mov	r4, r2
 80053ce:	4605      	mov	r5, r0
 80053d0:	b118      	cbz	r0, 80053da <__swbuf_r+0x12>
 80053d2:	6983      	ldr	r3, [r0, #24]
 80053d4:	b90b      	cbnz	r3, 80053da <__swbuf_r+0x12>
 80053d6:	f000 f9d1 	bl	800577c <__sinit>
 80053da:	4b21      	ldr	r3, [pc, #132]	; (8005460 <__swbuf_r+0x98>)
 80053dc:	429c      	cmp	r4, r3
 80053de:	d12b      	bne.n	8005438 <__swbuf_r+0x70>
 80053e0:	686c      	ldr	r4, [r5, #4]
 80053e2:	69a3      	ldr	r3, [r4, #24]
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	071a      	lsls	r2, r3, #28
 80053ea:	d52f      	bpl.n	800544c <__swbuf_r+0x84>
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	b36b      	cbz	r3, 800544c <__swbuf_r+0x84>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	6820      	ldr	r0, [r4, #0]
 80053f4:	1ac0      	subs	r0, r0, r3
 80053f6:	6963      	ldr	r3, [r4, #20]
 80053f8:	b2f6      	uxtb	r6, r6
 80053fa:	4283      	cmp	r3, r0
 80053fc:	4637      	mov	r7, r6
 80053fe:	dc04      	bgt.n	800540a <__swbuf_r+0x42>
 8005400:	4621      	mov	r1, r4
 8005402:	4628      	mov	r0, r5
 8005404:	f000 f926 	bl	8005654 <_fflush_r>
 8005408:	bb30      	cbnz	r0, 8005458 <__swbuf_r+0x90>
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	3b01      	subs	r3, #1
 800540e:	60a3      	str	r3, [r4, #8]
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	6022      	str	r2, [r4, #0]
 8005416:	701e      	strb	r6, [r3, #0]
 8005418:	6963      	ldr	r3, [r4, #20]
 800541a:	3001      	adds	r0, #1
 800541c:	4283      	cmp	r3, r0
 800541e:	d004      	beq.n	800542a <__swbuf_r+0x62>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	07db      	lsls	r3, r3, #31
 8005424:	d506      	bpl.n	8005434 <__swbuf_r+0x6c>
 8005426:	2e0a      	cmp	r6, #10
 8005428:	d104      	bne.n	8005434 <__swbuf_r+0x6c>
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 f911 	bl	8005654 <_fflush_r>
 8005432:	b988      	cbnz	r0, 8005458 <__swbuf_r+0x90>
 8005434:	4638      	mov	r0, r7
 8005436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <__swbuf_r+0x9c>)
 800543a:	429c      	cmp	r4, r3
 800543c:	d101      	bne.n	8005442 <__swbuf_r+0x7a>
 800543e:	68ac      	ldr	r4, [r5, #8]
 8005440:	e7cf      	b.n	80053e2 <__swbuf_r+0x1a>
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <__swbuf_r+0xa0>)
 8005444:	429c      	cmp	r4, r3
 8005446:	bf08      	it	eq
 8005448:	68ec      	ldreq	r4, [r5, #12]
 800544a:	e7ca      	b.n	80053e2 <__swbuf_r+0x1a>
 800544c:	4621      	mov	r1, r4
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f80c 	bl	800546c <__swsetup_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	d0cb      	beq.n	80053f0 <__swbuf_r+0x28>
 8005458:	f04f 37ff 	mov.w	r7, #4294967295
 800545c:	e7ea      	b.n	8005434 <__swbuf_r+0x6c>
 800545e:	bf00      	nop
 8005460:	08006ad8 	.word	0x08006ad8
 8005464:	08006af8 	.word	0x08006af8
 8005468:	08006ab8 	.word	0x08006ab8

0800546c <__swsetup_r>:
 800546c:	4b32      	ldr	r3, [pc, #200]	; (8005538 <__swsetup_r+0xcc>)
 800546e:	b570      	push	{r4, r5, r6, lr}
 8005470:	681d      	ldr	r5, [r3, #0]
 8005472:	4606      	mov	r6, r0
 8005474:	460c      	mov	r4, r1
 8005476:	b125      	cbz	r5, 8005482 <__swsetup_r+0x16>
 8005478:	69ab      	ldr	r3, [r5, #24]
 800547a:	b913      	cbnz	r3, 8005482 <__swsetup_r+0x16>
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f97d 	bl	800577c <__sinit>
 8005482:	4b2e      	ldr	r3, [pc, #184]	; (800553c <__swsetup_r+0xd0>)
 8005484:	429c      	cmp	r4, r3
 8005486:	d10f      	bne.n	80054a8 <__swsetup_r+0x3c>
 8005488:	686c      	ldr	r4, [r5, #4]
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005490:	0719      	lsls	r1, r3, #28
 8005492:	d42c      	bmi.n	80054ee <__swsetup_r+0x82>
 8005494:	06dd      	lsls	r5, r3, #27
 8005496:	d411      	bmi.n	80054bc <__swsetup_r+0x50>
 8005498:	2309      	movs	r3, #9
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	e03e      	b.n	8005526 <__swsetup_r+0xba>
 80054a8:	4b25      	ldr	r3, [pc, #148]	; (8005540 <__swsetup_r+0xd4>)
 80054aa:	429c      	cmp	r4, r3
 80054ac:	d101      	bne.n	80054b2 <__swsetup_r+0x46>
 80054ae:	68ac      	ldr	r4, [r5, #8]
 80054b0:	e7eb      	b.n	800548a <__swsetup_r+0x1e>
 80054b2:	4b24      	ldr	r3, [pc, #144]	; (8005544 <__swsetup_r+0xd8>)
 80054b4:	429c      	cmp	r4, r3
 80054b6:	bf08      	it	eq
 80054b8:	68ec      	ldreq	r4, [r5, #12]
 80054ba:	e7e6      	b.n	800548a <__swsetup_r+0x1e>
 80054bc:	0758      	lsls	r0, r3, #29
 80054be:	d512      	bpl.n	80054e6 <__swsetup_r+0x7a>
 80054c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054c2:	b141      	cbz	r1, 80054d6 <__swsetup_r+0x6a>
 80054c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054c8:	4299      	cmp	r1, r3
 80054ca:	d002      	beq.n	80054d2 <__swsetup_r+0x66>
 80054cc:	4630      	mov	r0, r6
 80054ce:	f000 fa5b 	bl	8005988 <_free_r>
 80054d2:	2300      	movs	r3, #0
 80054d4:	6363      	str	r3, [r4, #52]	; 0x34
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	2300      	movs	r3, #0
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	b94b      	cbnz	r3, 8005506 <__swsetup_r+0x9a>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fc:	d003      	beq.n	8005506 <__swsetup_r+0x9a>
 80054fe:	4621      	mov	r1, r4
 8005500:	4630      	mov	r0, r6
 8005502:	f000 fa01 	bl	8005908 <__smakebuf_r>
 8005506:	89a0      	ldrh	r0, [r4, #12]
 8005508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800550c:	f010 0301 	ands.w	r3, r0, #1
 8005510:	d00a      	beq.n	8005528 <__swsetup_r+0xbc>
 8005512:	2300      	movs	r3, #0
 8005514:	60a3      	str	r3, [r4, #8]
 8005516:	6963      	ldr	r3, [r4, #20]
 8005518:	425b      	negs	r3, r3
 800551a:	61a3      	str	r3, [r4, #24]
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	b943      	cbnz	r3, 8005532 <__swsetup_r+0xc6>
 8005520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005524:	d1ba      	bne.n	800549c <__swsetup_r+0x30>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	0781      	lsls	r1, r0, #30
 800552a:	bf58      	it	pl
 800552c:	6963      	ldrpl	r3, [r4, #20]
 800552e:	60a3      	str	r3, [r4, #8]
 8005530:	e7f4      	b.n	800551c <__swsetup_r+0xb0>
 8005532:	2000      	movs	r0, #0
 8005534:	e7f7      	b.n	8005526 <__swsetup_r+0xba>
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010
 800553c:	08006ad8 	.word	0x08006ad8
 8005540:	08006af8 	.word	0x08006af8
 8005544:	08006ab8 	.word	0x08006ab8

08005548 <__sflush_r>:
 8005548:	898a      	ldrh	r2, [r1, #12]
 800554a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554e:	4605      	mov	r5, r0
 8005550:	0710      	lsls	r0, r2, #28
 8005552:	460c      	mov	r4, r1
 8005554:	d458      	bmi.n	8005608 <__sflush_r+0xc0>
 8005556:	684b      	ldr	r3, [r1, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	dc05      	bgt.n	8005568 <__sflush_r+0x20>
 800555c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	dc02      	bgt.n	8005568 <__sflush_r+0x20>
 8005562:	2000      	movs	r0, #0
 8005564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800556a:	2e00      	cmp	r6, #0
 800556c:	d0f9      	beq.n	8005562 <__sflush_r+0x1a>
 800556e:	2300      	movs	r3, #0
 8005570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005574:	682f      	ldr	r7, [r5, #0]
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	d032      	beq.n	80055e0 <__sflush_r+0x98>
 800557a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	075a      	lsls	r2, r3, #29
 8005580:	d505      	bpl.n	800558e <__sflush_r+0x46>
 8005582:	6863      	ldr	r3, [r4, #4]
 8005584:	1ac0      	subs	r0, r0, r3
 8005586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005588:	b10b      	cbz	r3, 800558e <__sflush_r+0x46>
 800558a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800558c:	1ac0      	subs	r0, r0, r3
 800558e:	2300      	movs	r3, #0
 8005590:	4602      	mov	r2, r0
 8005592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005594:	6a21      	ldr	r1, [r4, #32]
 8005596:	4628      	mov	r0, r5
 8005598:	47b0      	blx	r6
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	d106      	bne.n	80055ae <__sflush_r+0x66>
 80055a0:	6829      	ldr	r1, [r5, #0]
 80055a2:	291d      	cmp	r1, #29
 80055a4:	d82c      	bhi.n	8005600 <__sflush_r+0xb8>
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <__sflush_r+0x108>)
 80055a8:	40ca      	lsrs	r2, r1
 80055aa:	07d6      	lsls	r6, r2, #31
 80055ac:	d528      	bpl.n	8005600 <__sflush_r+0xb8>
 80055ae:	2200      	movs	r2, #0
 80055b0:	6062      	str	r2, [r4, #4]
 80055b2:	04d9      	lsls	r1, r3, #19
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	d504      	bpl.n	80055c4 <__sflush_r+0x7c>
 80055ba:	1c42      	adds	r2, r0, #1
 80055bc:	d101      	bne.n	80055c2 <__sflush_r+0x7a>
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	b903      	cbnz	r3, 80055c4 <__sflush_r+0x7c>
 80055c2:	6560      	str	r0, [r4, #84]	; 0x54
 80055c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c6:	602f      	str	r7, [r5, #0]
 80055c8:	2900      	cmp	r1, #0
 80055ca:	d0ca      	beq.n	8005562 <__sflush_r+0x1a>
 80055cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055d0:	4299      	cmp	r1, r3
 80055d2:	d002      	beq.n	80055da <__sflush_r+0x92>
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 f9d7 	bl	8005988 <_free_r>
 80055da:	2000      	movs	r0, #0
 80055dc:	6360      	str	r0, [r4, #52]	; 0x34
 80055de:	e7c1      	b.n	8005564 <__sflush_r+0x1c>
 80055e0:	6a21      	ldr	r1, [r4, #32]
 80055e2:	2301      	movs	r3, #1
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b0      	blx	r6
 80055e8:	1c41      	adds	r1, r0, #1
 80055ea:	d1c7      	bne.n	800557c <__sflush_r+0x34>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0c4      	beq.n	800557c <__sflush_r+0x34>
 80055f2:	2b1d      	cmp	r3, #29
 80055f4:	d001      	beq.n	80055fa <__sflush_r+0xb2>
 80055f6:	2b16      	cmp	r3, #22
 80055f8:	d101      	bne.n	80055fe <__sflush_r+0xb6>
 80055fa:	602f      	str	r7, [r5, #0]
 80055fc:	e7b1      	b.n	8005562 <__sflush_r+0x1a>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	e7ad      	b.n	8005564 <__sflush_r+0x1c>
 8005608:	690f      	ldr	r7, [r1, #16]
 800560a:	2f00      	cmp	r7, #0
 800560c:	d0a9      	beq.n	8005562 <__sflush_r+0x1a>
 800560e:	0793      	lsls	r3, r2, #30
 8005610:	680e      	ldr	r6, [r1, #0]
 8005612:	bf08      	it	eq
 8005614:	694b      	ldreq	r3, [r1, #20]
 8005616:	600f      	str	r7, [r1, #0]
 8005618:	bf18      	it	ne
 800561a:	2300      	movne	r3, #0
 800561c:	eba6 0807 	sub.w	r8, r6, r7
 8005620:	608b      	str	r3, [r1, #8]
 8005622:	f1b8 0f00 	cmp.w	r8, #0
 8005626:	dd9c      	ble.n	8005562 <__sflush_r+0x1a>
 8005628:	6a21      	ldr	r1, [r4, #32]
 800562a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800562c:	4643      	mov	r3, r8
 800562e:	463a      	mov	r2, r7
 8005630:	4628      	mov	r0, r5
 8005632:	47b0      	blx	r6
 8005634:	2800      	cmp	r0, #0
 8005636:	dc06      	bgt.n	8005646 <__sflush_r+0xfe>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e78e      	b.n	8005564 <__sflush_r+0x1c>
 8005646:	4407      	add	r7, r0
 8005648:	eba8 0800 	sub.w	r8, r8, r0
 800564c:	e7e9      	b.n	8005622 <__sflush_r+0xda>
 800564e:	bf00      	nop
 8005650:	20400001 	.word	0x20400001

08005654 <_fflush_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	b913      	cbnz	r3, 8005664 <_fflush_r+0x10>
 800565e:	2500      	movs	r5, #0
 8005660:	4628      	mov	r0, r5
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	b118      	cbz	r0, 800566e <_fflush_r+0x1a>
 8005666:	6983      	ldr	r3, [r0, #24]
 8005668:	b90b      	cbnz	r3, 800566e <_fflush_r+0x1a>
 800566a:	f000 f887 	bl	800577c <__sinit>
 800566e:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <_fflush_r+0x6c>)
 8005670:	429c      	cmp	r4, r3
 8005672:	d11b      	bne.n	80056ac <_fflush_r+0x58>
 8005674:	686c      	ldr	r4, [r5, #4]
 8005676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ef      	beq.n	800565e <_fflush_r+0xa>
 800567e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005680:	07d0      	lsls	r0, r2, #31
 8005682:	d404      	bmi.n	800568e <_fflush_r+0x3a>
 8005684:	0599      	lsls	r1, r3, #22
 8005686:	d402      	bmi.n	800568e <_fflush_r+0x3a>
 8005688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800568a:	f000 f915 	bl	80058b8 <__retarget_lock_acquire_recursive>
 800568e:	4628      	mov	r0, r5
 8005690:	4621      	mov	r1, r4
 8005692:	f7ff ff59 	bl	8005548 <__sflush_r>
 8005696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005698:	07da      	lsls	r2, r3, #31
 800569a:	4605      	mov	r5, r0
 800569c:	d4e0      	bmi.n	8005660 <_fflush_r+0xc>
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	059b      	lsls	r3, r3, #22
 80056a2:	d4dd      	bmi.n	8005660 <_fflush_r+0xc>
 80056a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a6:	f000 f908 	bl	80058ba <__retarget_lock_release_recursive>
 80056aa:	e7d9      	b.n	8005660 <_fflush_r+0xc>
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <_fflush_r+0x70>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d101      	bne.n	80056b6 <_fflush_r+0x62>
 80056b2:	68ac      	ldr	r4, [r5, #8]
 80056b4:	e7df      	b.n	8005676 <_fflush_r+0x22>
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <_fflush_r+0x74>)
 80056b8:	429c      	cmp	r4, r3
 80056ba:	bf08      	it	eq
 80056bc:	68ec      	ldreq	r4, [r5, #12]
 80056be:	e7da      	b.n	8005676 <_fflush_r+0x22>
 80056c0:	08006ad8 	.word	0x08006ad8
 80056c4:	08006af8 	.word	0x08006af8
 80056c8:	08006ab8 	.word	0x08006ab8

080056cc <std>:
 80056cc:	2300      	movs	r3, #0
 80056ce:	b510      	push	{r4, lr}
 80056d0:	4604      	mov	r4, r0
 80056d2:	e9c0 3300 	strd	r3, r3, [r0]
 80056d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056da:	6083      	str	r3, [r0, #8]
 80056dc:	8181      	strh	r1, [r0, #12]
 80056de:	6643      	str	r3, [r0, #100]	; 0x64
 80056e0:	81c2      	strh	r2, [r0, #14]
 80056e2:	6183      	str	r3, [r0, #24]
 80056e4:	4619      	mov	r1, r3
 80056e6:	2208      	movs	r2, #8
 80056e8:	305c      	adds	r0, #92	; 0x5c
 80056ea:	f7ff fdd7 	bl	800529c <memset>
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <std+0x38>)
 80056f0:	6263      	str	r3, [r4, #36]	; 0x24
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <std+0x3c>)
 80056f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <std+0x40>)
 80056f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <std+0x44>)
 80056fc:	6224      	str	r4, [r4, #32]
 80056fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	08006145 	.word	0x08006145
 8005708:	08006167 	.word	0x08006167
 800570c:	0800619f 	.word	0x0800619f
 8005710:	080061c3 	.word	0x080061c3

08005714 <_cleanup_r>:
 8005714:	4901      	ldr	r1, [pc, #4]	; (800571c <_cleanup_r+0x8>)
 8005716:	f000 b8af 	b.w	8005878 <_fwalk_reent>
 800571a:	bf00      	nop
 800571c:	08005655 	.word	0x08005655

08005720 <__sfmoreglue>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	2268      	movs	r2, #104	; 0x68
 8005724:	1e4d      	subs	r5, r1, #1
 8005726:	4355      	muls	r5, r2
 8005728:	460e      	mov	r6, r1
 800572a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800572e:	f000 f997 	bl	8005a60 <_malloc_r>
 8005732:	4604      	mov	r4, r0
 8005734:	b140      	cbz	r0, 8005748 <__sfmoreglue+0x28>
 8005736:	2100      	movs	r1, #0
 8005738:	e9c0 1600 	strd	r1, r6, [r0]
 800573c:	300c      	adds	r0, #12
 800573e:	60a0      	str	r0, [r4, #8]
 8005740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005744:	f7ff fdaa 	bl	800529c <memset>
 8005748:	4620      	mov	r0, r4
 800574a:	bd70      	pop	{r4, r5, r6, pc}

0800574c <__sfp_lock_acquire>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__sfp_lock_acquire+0x8>)
 800574e:	f000 b8b3 	b.w	80058b8 <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	20000285 	.word	0x20000285

08005758 <__sfp_lock_release>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__sfp_lock_release+0x8>)
 800575a:	f000 b8ae 	b.w	80058ba <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	20000285 	.word	0x20000285

08005764 <__sinit_lock_acquire>:
 8005764:	4801      	ldr	r0, [pc, #4]	; (800576c <__sinit_lock_acquire+0x8>)
 8005766:	f000 b8a7 	b.w	80058b8 <__retarget_lock_acquire_recursive>
 800576a:	bf00      	nop
 800576c:	20000286 	.word	0x20000286

08005770 <__sinit_lock_release>:
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <__sinit_lock_release+0x8>)
 8005772:	f000 b8a2 	b.w	80058ba <__retarget_lock_release_recursive>
 8005776:	bf00      	nop
 8005778:	20000286 	.word	0x20000286

0800577c <__sinit>:
 800577c:	b510      	push	{r4, lr}
 800577e:	4604      	mov	r4, r0
 8005780:	f7ff fff0 	bl	8005764 <__sinit_lock_acquire>
 8005784:	69a3      	ldr	r3, [r4, #24]
 8005786:	b11b      	cbz	r3, 8005790 <__sinit+0x14>
 8005788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800578c:	f7ff bff0 	b.w	8005770 <__sinit_lock_release>
 8005790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005794:	6523      	str	r3, [r4, #80]	; 0x50
 8005796:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <__sinit+0x68>)
 8005798:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <__sinit+0x6c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	62a2      	str	r2, [r4, #40]	; 0x28
 800579e:	42a3      	cmp	r3, r4
 80057a0:	bf04      	itt	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	61a3      	streq	r3, [r4, #24]
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 f820 	bl	80057ec <__sfp>
 80057ac:	6060      	str	r0, [r4, #4]
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 f81c 	bl	80057ec <__sfp>
 80057b4:	60a0      	str	r0, [r4, #8]
 80057b6:	4620      	mov	r0, r4
 80057b8:	f000 f818 	bl	80057ec <__sfp>
 80057bc:	2200      	movs	r2, #0
 80057be:	60e0      	str	r0, [r4, #12]
 80057c0:	2104      	movs	r1, #4
 80057c2:	6860      	ldr	r0, [r4, #4]
 80057c4:	f7ff ff82 	bl	80056cc <std>
 80057c8:	68a0      	ldr	r0, [r4, #8]
 80057ca:	2201      	movs	r2, #1
 80057cc:	2109      	movs	r1, #9
 80057ce:	f7ff ff7d 	bl	80056cc <std>
 80057d2:	68e0      	ldr	r0, [r4, #12]
 80057d4:	2202      	movs	r2, #2
 80057d6:	2112      	movs	r1, #18
 80057d8:	f7ff ff78 	bl	80056cc <std>
 80057dc:	2301      	movs	r3, #1
 80057de:	61a3      	str	r3, [r4, #24]
 80057e0:	e7d2      	b.n	8005788 <__sinit+0xc>
 80057e2:	bf00      	nop
 80057e4:	08006ab4 	.word	0x08006ab4
 80057e8:	08005715 	.word	0x08005715

080057ec <__sfp>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	4607      	mov	r7, r0
 80057f0:	f7ff ffac 	bl	800574c <__sfp_lock_acquire>
 80057f4:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <__sfp+0x84>)
 80057f6:	681e      	ldr	r6, [r3, #0]
 80057f8:	69b3      	ldr	r3, [r6, #24]
 80057fa:	b913      	cbnz	r3, 8005802 <__sfp+0x16>
 80057fc:	4630      	mov	r0, r6
 80057fe:	f7ff ffbd 	bl	800577c <__sinit>
 8005802:	3648      	adds	r6, #72	; 0x48
 8005804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005808:	3b01      	subs	r3, #1
 800580a:	d503      	bpl.n	8005814 <__sfp+0x28>
 800580c:	6833      	ldr	r3, [r6, #0]
 800580e:	b30b      	cbz	r3, 8005854 <__sfp+0x68>
 8005810:	6836      	ldr	r6, [r6, #0]
 8005812:	e7f7      	b.n	8005804 <__sfp+0x18>
 8005814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005818:	b9d5      	cbnz	r5, 8005850 <__sfp+0x64>
 800581a:	4b16      	ldr	r3, [pc, #88]	; (8005874 <__sfp+0x88>)
 800581c:	60e3      	str	r3, [r4, #12]
 800581e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005822:	6665      	str	r5, [r4, #100]	; 0x64
 8005824:	f000 f847 	bl	80058b6 <__retarget_lock_init_recursive>
 8005828:	f7ff ff96 	bl	8005758 <__sfp_lock_release>
 800582c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005834:	6025      	str	r5, [r4, #0]
 8005836:	61a5      	str	r5, [r4, #24]
 8005838:	2208      	movs	r2, #8
 800583a:	4629      	mov	r1, r5
 800583c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005840:	f7ff fd2c 	bl	800529c <memset>
 8005844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800584c:	4620      	mov	r0, r4
 800584e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005850:	3468      	adds	r4, #104	; 0x68
 8005852:	e7d9      	b.n	8005808 <__sfp+0x1c>
 8005854:	2104      	movs	r1, #4
 8005856:	4638      	mov	r0, r7
 8005858:	f7ff ff62 	bl	8005720 <__sfmoreglue>
 800585c:	4604      	mov	r4, r0
 800585e:	6030      	str	r0, [r6, #0]
 8005860:	2800      	cmp	r0, #0
 8005862:	d1d5      	bne.n	8005810 <__sfp+0x24>
 8005864:	f7ff ff78 	bl	8005758 <__sfp_lock_release>
 8005868:	230c      	movs	r3, #12
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	e7ee      	b.n	800584c <__sfp+0x60>
 800586e:	bf00      	nop
 8005870:	08006ab4 	.word	0x08006ab4
 8005874:	ffff0001 	.word	0xffff0001

08005878 <_fwalk_reent>:
 8005878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800587c:	4606      	mov	r6, r0
 800587e:	4688      	mov	r8, r1
 8005880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005884:	2700      	movs	r7, #0
 8005886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800588a:	f1b9 0901 	subs.w	r9, r9, #1
 800588e:	d505      	bpl.n	800589c <_fwalk_reent+0x24>
 8005890:	6824      	ldr	r4, [r4, #0]
 8005892:	2c00      	cmp	r4, #0
 8005894:	d1f7      	bne.n	8005886 <_fwalk_reent+0xe>
 8005896:	4638      	mov	r0, r7
 8005898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589c:	89ab      	ldrh	r3, [r5, #12]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d907      	bls.n	80058b2 <_fwalk_reent+0x3a>
 80058a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058a6:	3301      	adds	r3, #1
 80058a8:	d003      	beq.n	80058b2 <_fwalk_reent+0x3a>
 80058aa:	4629      	mov	r1, r5
 80058ac:	4630      	mov	r0, r6
 80058ae:	47c0      	blx	r8
 80058b0:	4307      	orrs	r7, r0
 80058b2:	3568      	adds	r5, #104	; 0x68
 80058b4:	e7e9      	b.n	800588a <_fwalk_reent+0x12>

080058b6 <__retarget_lock_init_recursive>:
 80058b6:	4770      	bx	lr

080058b8 <__retarget_lock_acquire_recursive>:
 80058b8:	4770      	bx	lr

080058ba <__retarget_lock_release_recursive>:
 80058ba:	4770      	bx	lr

080058bc <__swhatbuf_r>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	460e      	mov	r6, r1
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	2900      	cmp	r1, #0
 80058c6:	b096      	sub	sp, #88	; 0x58
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	da08      	bge.n	80058e0 <__swhatbuf_r+0x24>
 80058ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	602a      	str	r2, [r5, #0]
 80058d6:	061a      	lsls	r2, r3, #24
 80058d8:	d410      	bmi.n	80058fc <__swhatbuf_r+0x40>
 80058da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058de:	e00e      	b.n	80058fe <__swhatbuf_r+0x42>
 80058e0:	466a      	mov	r2, sp
 80058e2:	f000 fc95 	bl	8006210 <_fstat_r>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	dbf1      	blt.n	80058ce <__swhatbuf_r+0x12>
 80058ea:	9a01      	ldr	r2, [sp, #4]
 80058ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058f4:	425a      	negs	r2, r3
 80058f6:	415a      	adcs	r2, r3
 80058f8:	602a      	str	r2, [r5, #0]
 80058fa:	e7ee      	b.n	80058da <__swhatbuf_r+0x1e>
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	2000      	movs	r0, #0
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	b016      	add	sp, #88	; 0x58
 8005904:	bd70      	pop	{r4, r5, r6, pc}
	...

08005908 <__smakebuf_r>:
 8005908:	898b      	ldrh	r3, [r1, #12]
 800590a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800590c:	079d      	lsls	r5, r3, #30
 800590e:	4606      	mov	r6, r0
 8005910:	460c      	mov	r4, r1
 8005912:	d507      	bpl.n	8005924 <__smakebuf_r+0x1c>
 8005914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	2301      	movs	r3, #1
 800591e:	6163      	str	r3, [r4, #20]
 8005920:	b002      	add	sp, #8
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	ab01      	add	r3, sp, #4
 8005926:	466a      	mov	r2, sp
 8005928:	f7ff ffc8 	bl	80058bc <__swhatbuf_r>
 800592c:	9900      	ldr	r1, [sp, #0]
 800592e:	4605      	mov	r5, r0
 8005930:	4630      	mov	r0, r6
 8005932:	f000 f895 	bl	8005a60 <_malloc_r>
 8005936:	b948      	cbnz	r0, 800594c <__smakebuf_r+0x44>
 8005938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593c:	059a      	lsls	r2, r3, #22
 800593e:	d4ef      	bmi.n	8005920 <__smakebuf_r+0x18>
 8005940:	f023 0303 	bic.w	r3, r3, #3
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	e7e3      	b.n	8005914 <__smakebuf_r+0xc>
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <__smakebuf_r+0x7c>)
 800594e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	6020      	str	r0, [r4, #0]
 8005954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	9b00      	ldr	r3, [sp, #0]
 800595c:	6163      	str	r3, [r4, #20]
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	6120      	str	r0, [r4, #16]
 8005962:	b15b      	cbz	r3, 800597c <__smakebuf_r+0x74>
 8005964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005968:	4630      	mov	r0, r6
 800596a:	f000 fc63 	bl	8006234 <_isatty_r>
 800596e:	b128      	cbz	r0, 800597c <__smakebuf_r+0x74>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	89a0      	ldrh	r0, [r4, #12]
 800597e:	4305      	orrs	r5, r0
 8005980:	81a5      	strh	r5, [r4, #12]
 8005982:	e7cd      	b.n	8005920 <__smakebuf_r+0x18>
 8005984:	08005715 	.word	0x08005715

08005988 <_free_r>:
 8005988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800598a:	2900      	cmp	r1, #0
 800598c:	d044      	beq.n	8005a18 <_free_r+0x90>
 800598e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005992:	9001      	str	r0, [sp, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f1a1 0404 	sub.w	r4, r1, #4
 800599a:	bfb8      	it	lt
 800599c:	18e4      	addlt	r4, r4, r3
 800599e:	f000 fc6b 	bl	8006278 <__malloc_lock>
 80059a2:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <_free_r+0x94>)
 80059a4:	9801      	ldr	r0, [sp, #4]
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	b933      	cbnz	r3, 80059b8 <_free_r+0x30>
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	6014      	str	r4, [r2, #0]
 80059ae:	b003      	add	sp, #12
 80059b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059b4:	f000 bc66 	b.w	8006284 <__malloc_unlock>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d908      	bls.n	80059ce <_free_r+0x46>
 80059bc:	6825      	ldr	r5, [r4, #0]
 80059be:	1961      	adds	r1, r4, r5
 80059c0:	428b      	cmp	r3, r1
 80059c2:	bf01      	itttt	eq
 80059c4:	6819      	ldreq	r1, [r3, #0]
 80059c6:	685b      	ldreq	r3, [r3, #4]
 80059c8:	1949      	addeq	r1, r1, r5
 80059ca:	6021      	streq	r1, [r4, #0]
 80059cc:	e7ed      	b.n	80059aa <_free_r+0x22>
 80059ce:	461a      	mov	r2, r3
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	b10b      	cbz	r3, 80059d8 <_free_r+0x50>
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	d9fa      	bls.n	80059ce <_free_r+0x46>
 80059d8:	6811      	ldr	r1, [r2, #0]
 80059da:	1855      	adds	r5, r2, r1
 80059dc:	42a5      	cmp	r5, r4
 80059de:	d10b      	bne.n	80059f8 <_free_r+0x70>
 80059e0:	6824      	ldr	r4, [r4, #0]
 80059e2:	4421      	add	r1, r4
 80059e4:	1854      	adds	r4, r2, r1
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	d1e0      	bne.n	80059ae <_free_r+0x26>
 80059ec:	681c      	ldr	r4, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	6053      	str	r3, [r2, #4]
 80059f2:	4421      	add	r1, r4
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	e7da      	b.n	80059ae <_free_r+0x26>
 80059f8:	d902      	bls.n	8005a00 <_free_r+0x78>
 80059fa:	230c      	movs	r3, #12
 80059fc:	6003      	str	r3, [r0, #0]
 80059fe:	e7d6      	b.n	80059ae <_free_r+0x26>
 8005a00:	6825      	ldr	r5, [r4, #0]
 8005a02:	1961      	adds	r1, r4, r5
 8005a04:	428b      	cmp	r3, r1
 8005a06:	bf04      	itt	eq
 8005a08:	6819      	ldreq	r1, [r3, #0]
 8005a0a:	685b      	ldreq	r3, [r3, #4]
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	bf04      	itt	eq
 8005a10:	1949      	addeq	r1, r1, r5
 8005a12:	6021      	streq	r1, [r4, #0]
 8005a14:	6054      	str	r4, [r2, #4]
 8005a16:	e7ca      	b.n	80059ae <_free_r+0x26>
 8005a18:	b003      	add	sp, #12
 8005a1a:	bd30      	pop	{r4, r5, pc}
 8005a1c:	20000288 	.word	0x20000288

08005a20 <sbrk_aligned>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4e0e      	ldr	r6, [pc, #56]	; (8005a5c <sbrk_aligned+0x3c>)
 8005a24:	460c      	mov	r4, r1
 8005a26:	6831      	ldr	r1, [r6, #0]
 8005a28:	4605      	mov	r5, r0
 8005a2a:	b911      	cbnz	r1, 8005a32 <sbrk_aligned+0x12>
 8005a2c:	f000 fb7a 	bl	8006124 <_sbrk_r>
 8005a30:	6030      	str	r0, [r6, #0]
 8005a32:	4621      	mov	r1, r4
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 fb75 	bl	8006124 <_sbrk_r>
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	d00a      	beq.n	8005a54 <sbrk_aligned+0x34>
 8005a3e:	1cc4      	adds	r4, r0, #3
 8005a40:	f024 0403 	bic.w	r4, r4, #3
 8005a44:	42a0      	cmp	r0, r4
 8005a46:	d007      	beq.n	8005a58 <sbrk_aligned+0x38>
 8005a48:	1a21      	subs	r1, r4, r0
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 fb6a 	bl	8006124 <_sbrk_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d101      	bne.n	8005a58 <sbrk_aligned+0x38>
 8005a54:	f04f 34ff 	mov.w	r4, #4294967295
 8005a58:	4620      	mov	r0, r4
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
 8005a5c:	2000028c 	.word	0x2000028c

08005a60 <_malloc_r>:
 8005a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	1ccd      	adds	r5, r1, #3
 8005a66:	f025 0503 	bic.w	r5, r5, #3
 8005a6a:	3508      	adds	r5, #8
 8005a6c:	2d0c      	cmp	r5, #12
 8005a6e:	bf38      	it	cc
 8005a70:	250c      	movcc	r5, #12
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	4607      	mov	r7, r0
 8005a76:	db01      	blt.n	8005a7c <_malloc_r+0x1c>
 8005a78:	42a9      	cmp	r1, r5
 8005a7a:	d905      	bls.n	8005a88 <_malloc_r+0x28>
 8005a7c:	230c      	movs	r3, #12
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	2600      	movs	r6, #0
 8005a82:	4630      	mov	r0, r6
 8005a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a88:	4e2e      	ldr	r6, [pc, #184]	; (8005b44 <_malloc_r+0xe4>)
 8005a8a:	f000 fbf5 	bl	8006278 <__malloc_lock>
 8005a8e:	6833      	ldr	r3, [r6, #0]
 8005a90:	461c      	mov	r4, r3
 8005a92:	bb34      	cbnz	r4, 8005ae2 <_malloc_r+0x82>
 8005a94:	4629      	mov	r1, r5
 8005a96:	4638      	mov	r0, r7
 8005a98:	f7ff ffc2 	bl	8005a20 <sbrk_aligned>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	d14d      	bne.n	8005b3e <_malloc_r+0xde>
 8005aa2:	6834      	ldr	r4, [r6, #0]
 8005aa4:	4626      	mov	r6, r4
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	d140      	bne.n	8005b2c <_malloc_r+0xcc>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	4631      	mov	r1, r6
 8005aae:	4638      	mov	r0, r7
 8005ab0:	eb04 0803 	add.w	r8, r4, r3
 8005ab4:	f000 fb36 	bl	8006124 <_sbrk_r>
 8005ab8:	4580      	cmp	r8, r0
 8005aba:	d13a      	bne.n	8005b32 <_malloc_r+0xd2>
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	3503      	adds	r5, #3
 8005ac0:	1a6d      	subs	r5, r5, r1
 8005ac2:	f025 0503 	bic.w	r5, r5, #3
 8005ac6:	3508      	adds	r5, #8
 8005ac8:	2d0c      	cmp	r5, #12
 8005aca:	bf38      	it	cc
 8005acc:	250c      	movcc	r5, #12
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff ffa5 	bl	8005a20 <sbrk_aligned>
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d02b      	beq.n	8005b32 <_malloc_r+0xd2>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	442b      	add	r3, r5
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	e00e      	b.n	8005b00 <_malloc_r+0xa0>
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	1b52      	subs	r2, r2, r5
 8005ae6:	d41e      	bmi.n	8005b26 <_malloc_r+0xc6>
 8005ae8:	2a0b      	cmp	r2, #11
 8005aea:	d916      	bls.n	8005b1a <_malloc_r+0xba>
 8005aec:	1961      	adds	r1, r4, r5
 8005aee:	42a3      	cmp	r3, r4
 8005af0:	6025      	str	r5, [r4, #0]
 8005af2:	bf18      	it	ne
 8005af4:	6059      	strne	r1, [r3, #4]
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	bf08      	it	eq
 8005afa:	6031      	streq	r1, [r6, #0]
 8005afc:	5162      	str	r2, [r4, r5]
 8005afe:	604b      	str	r3, [r1, #4]
 8005b00:	4638      	mov	r0, r7
 8005b02:	f104 060b 	add.w	r6, r4, #11
 8005b06:	f000 fbbd 	bl	8006284 <__malloc_unlock>
 8005b0a:	f026 0607 	bic.w	r6, r6, #7
 8005b0e:	1d23      	adds	r3, r4, #4
 8005b10:	1af2      	subs	r2, r6, r3
 8005b12:	d0b6      	beq.n	8005a82 <_malloc_r+0x22>
 8005b14:	1b9b      	subs	r3, r3, r6
 8005b16:	50a3      	str	r3, [r4, r2]
 8005b18:	e7b3      	b.n	8005a82 <_malloc_r+0x22>
 8005b1a:	6862      	ldr	r2, [r4, #4]
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	bf0c      	ite	eq
 8005b20:	6032      	streq	r2, [r6, #0]
 8005b22:	605a      	strne	r2, [r3, #4]
 8005b24:	e7ec      	b.n	8005b00 <_malloc_r+0xa0>
 8005b26:	4623      	mov	r3, r4
 8005b28:	6864      	ldr	r4, [r4, #4]
 8005b2a:	e7b2      	b.n	8005a92 <_malloc_r+0x32>
 8005b2c:	4634      	mov	r4, r6
 8005b2e:	6876      	ldr	r6, [r6, #4]
 8005b30:	e7b9      	b.n	8005aa6 <_malloc_r+0x46>
 8005b32:	230c      	movs	r3, #12
 8005b34:	603b      	str	r3, [r7, #0]
 8005b36:	4638      	mov	r0, r7
 8005b38:	f000 fba4 	bl	8006284 <__malloc_unlock>
 8005b3c:	e7a1      	b.n	8005a82 <_malloc_r+0x22>
 8005b3e:	6025      	str	r5, [r4, #0]
 8005b40:	e7de      	b.n	8005b00 <_malloc_r+0xa0>
 8005b42:	bf00      	nop
 8005b44:	20000288 	.word	0x20000288

08005b48 <__sfputc_r>:
 8005b48:	6893      	ldr	r3, [r2, #8]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	b410      	push	{r4}
 8005b50:	6093      	str	r3, [r2, #8]
 8005b52:	da08      	bge.n	8005b66 <__sfputc_r+0x1e>
 8005b54:	6994      	ldr	r4, [r2, #24]
 8005b56:	42a3      	cmp	r3, r4
 8005b58:	db01      	blt.n	8005b5e <__sfputc_r+0x16>
 8005b5a:	290a      	cmp	r1, #10
 8005b5c:	d103      	bne.n	8005b66 <__sfputc_r+0x1e>
 8005b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b62:	f7ff bc31 	b.w	80053c8 <__swbuf_r>
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	1c58      	adds	r0, r3, #1
 8005b6a:	6010      	str	r0, [r2, #0]
 8005b6c:	7019      	strb	r1, [r3, #0]
 8005b6e:	4608      	mov	r0, r1
 8005b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <__sfputs_r>:
 8005b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b78:	4606      	mov	r6, r0
 8005b7a:	460f      	mov	r7, r1
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	18d5      	adds	r5, r2, r3
 8005b80:	42ac      	cmp	r4, r5
 8005b82:	d101      	bne.n	8005b88 <__sfputs_r+0x12>
 8005b84:	2000      	movs	r0, #0
 8005b86:	e007      	b.n	8005b98 <__sfputs_r+0x22>
 8005b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b8c:	463a      	mov	r2, r7
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7ff ffda 	bl	8005b48 <__sfputc_r>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d1f3      	bne.n	8005b80 <__sfputs_r+0xa>
 8005b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b9c <_vfiprintf_r>:
 8005b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba0:	460d      	mov	r5, r1
 8005ba2:	b09d      	sub	sp, #116	; 0x74
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	4698      	mov	r8, r3
 8005ba8:	4606      	mov	r6, r0
 8005baa:	b118      	cbz	r0, 8005bb4 <_vfiprintf_r+0x18>
 8005bac:	6983      	ldr	r3, [r0, #24]
 8005bae:	b90b      	cbnz	r3, 8005bb4 <_vfiprintf_r+0x18>
 8005bb0:	f7ff fde4 	bl	800577c <__sinit>
 8005bb4:	4b89      	ldr	r3, [pc, #548]	; (8005ddc <_vfiprintf_r+0x240>)
 8005bb6:	429d      	cmp	r5, r3
 8005bb8:	d11b      	bne.n	8005bf2 <_vfiprintf_r+0x56>
 8005bba:	6875      	ldr	r5, [r6, #4]
 8005bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bbe:	07d9      	lsls	r1, r3, #31
 8005bc0:	d405      	bmi.n	8005bce <_vfiprintf_r+0x32>
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	059a      	lsls	r2, r3, #22
 8005bc6:	d402      	bmi.n	8005bce <_vfiprintf_r+0x32>
 8005bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bca:	f7ff fe75 	bl	80058b8 <__retarget_lock_acquire_recursive>
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	071b      	lsls	r3, r3, #28
 8005bd2:	d501      	bpl.n	8005bd8 <_vfiprintf_r+0x3c>
 8005bd4:	692b      	ldr	r3, [r5, #16]
 8005bd6:	b9eb      	cbnz	r3, 8005c14 <_vfiprintf_r+0x78>
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff fc46 	bl	800546c <__swsetup_r>
 8005be0:	b1c0      	cbz	r0, 8005c14 <_vfiprintf_r+0x78>
 8005be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005be4:	07dc      	lsls	r4, r3, #31
 8005be6:	d50e      	bpl.n	8005c06 <_vfiprintf_r+0x6a>
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	b01d      	add	sp, #116	; 0x74
 8005bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf2:	4b7b      	ldr	r3, [pc, #492]	; (8005de0 <_vfiprintf_r+0x244>)
 8005bf4:	429d      	cmp	r5, r3
 8005bf6:	d101      	bne.n	8005bfc <_vfiprintf_r+0x60>
 8005bf8:	68b5      	ldr	r5, [r6, #8]
 8005bfa:	e7df      	b.n	8005bbc <_vfiprintf_r+0x20>
 8005bfc:	4b79      	ldr	r3, [pc, #484]	; (8005de4 <_vfiprintf_r+0x248>)
 8005bfe:	429d      	cmp	r5, r3
 8005c00:	bf08      	it	eq
 8005c02:	68f5      	ldreq	r5, [r6, #12]
 8005c04:	e7da      	b.n	8005bbc <_vfiprintf_r+0x20>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	0598      	lsls	r0, r3, #22
 8005c0a:	d4ed      	bmi.n	8005be8 <_vfiprintf_r+0x4c>
 8005c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0e:	f7ff fe54 	bl	80058ba <__retarget_lock_release_recursive>
 8005c12:	e7e9      	b.n	8005be8 <_vfiprintf_r+0x4c>
 8005c14:	2300      	movs	r3, #0
 8005c16:	9309      	str	r3, [sp, #36]	; 0x24
 8005c18:	2320      	movs	r3, #32
 8005c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c22:	2330      	movs	r3, #48	; 0x30
 8005c24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005de8 <_vfiprintf_r+0x24c>
 8005c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c2c:	f04f 0901 	mov.w	r9, #1
 8005c30:	4623      	mov	r3, r4
 8005c32:	469a      	mov	sl, r3
 8005c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c38:	b10a      	cbz	r2, 8005c3e <_vfiprintf_r+0xa2>
 8005c3a:	2a25      	cmp	r2, #37	; 0x25
 8005c3c:	d1f9      	bne.n	8005c32 <_vfiprintf_r+0x96>
 8005c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c42:	d00b      	beq.n	8005c5c <_vfiprintf_r+0xc0>
 8005c44:	465b      	mov	r3, fp
 8005c46:	4622      	mov	r2, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ff93 	bl	8005b76 <__sfputs_r>
 8005c50:	3001      	adds	r0, #1
 8005c52:	f000 80aa 	beq.w	8005daa <_vfiprintf_r+0x20e>
 8005c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c58:	445a      	add	r2, fp
 8005c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80a2 	beq.w	8005daa <_vfiprintf_r+0x20e>
 8005c66:	2300      	movs	r3, #0
 8005c68:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c70:	f10a 0a01 	add.w	sl, sl, #1
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	9307      	str	r3, [sp, #28]
 8005c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c7e:	4654      	mov	r4, sl
 8005c80:	2205      	movs	r2, #5
 8005c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c86:	4858      	ldr	r0, [pc, #352]	; (8005de8 <_vfiprintf_r+0x24c>)
 8005c88:	f7fa faa2 	bl	80001d0 <memchr>
 8005c8c:	9a04      	ldr	r2, [sp, #16]
 8005c8e:	b9d8      	cbnz	r0, 8005cc8 <_vfiprintf_r+0x12c>
 8005c90:	06d1      	lsls	r1, r2, #27
 8005c92:	bf44      	itt	mi
 8005c94:	2320      	movmi	r3, #32
 8005c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9a:	0713      	lsls	r3, r2, #28
 8005c9c:	bf44      	itt	mi
 8005c9e:	232b      	movmi	r3, #43	; 0x2b
 8005ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8005caa:	d015      	beq.n	8005cd8 <_vfiprintf_r+0x13c>
 8005cac:	9a07      	ldr	r2, [sp, #28]
 8005cae:	4654      	mov	r4, sl
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cbc:	3b30      	subs	r3, #48	; 0x30
 8005cbe:	2b09      	cmp	r3, #9
 8005cc0:	d94e      	bls.n	8005d60 <_vfiprintf_r+0x1c4>
 8005cc2:	b1b0      	cbz	r0, 8005cf2 <_vfiprintf_r+0x156>
 8005cc4:	9207      	str	r2, [sp, #28]
 8005cc6:	e014      	b.n	8005cf2 <_vfiprintf_r+0x156>
 8005cc8:	eba0 0308 	sub.w	r3, r0, r8
 8005ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	9304      	str	r3, [sp, #16]
 8005cd4:	46a2      	mov	sl, r4
 8005cd6:	e7d2      	b.n	8005c7e <_vfiprintf_r+0xe2>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	1d19      	adds	r1, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	9103      	str	r1, [sp, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bfbb      	ittet	lt
 8005ce4:	425b      	neglt	r3, r3
 8005ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8005cea:	9307      	strge	r3, [sp, #28]
 8005cec:	9307      	strlt	r3, [sp, #28]
 8005cee:	bfb8      	it	lt
 8005cf0:	9204      	strlt	r2, [sp, #16]
 8005cf2:	7823      	ldrb	r3, [r4, #0]
 8005cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf6:	d10c      	bne.n	8005d12 <_vfiprintf_r+0x176>
 8005cf8:	7863      	ldrb	r3, [r4, #1]
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d135      	bne.n	8005d6a <_vfiprintf_r+0x1ce>
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	1d1a      	adds	r2, r3, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	9203      	str	r2, [sp, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bfb8      	it	lt
 8005d0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d0e:	3402      	adds	r4, #2
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005df8 <_vfiprintf_r+0x25c>
 8005d16:	7821      	ldrb	r1, [r4, #0]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	f7fa fa58 	bl	80001d0 <memchr>
 8005d20:	b140      	cbz	r0, 8005d34 <_vfiprintf_r+0x198>
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	eba0 000a 	sub.w	r0, r0, sl
 8005d28:	fa03 f000 	lsl.w	r0, r3, r0
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	4303      	orrs	r3, r0
 8005d30:	3401      	adds	r4, #1
 8005d32:	9304      	str	r3, [sp, #16]
 8005d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d38:	482c      	ldr	r0, [pc, #176]	; (8005dec <_vfiprintf_r+0x250>)
 8005d3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d3e:	2206      	movs	r2, #6
 8005d40:	f7fa fa46 	bl	80001d0 <memchr>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d03f      	beq.n	8005dc8 <_vfiprintf_r+0x22c>
 8005d48:	4b29      	ldr	r3, [pc, #164]	; (8005df0 <_vfiprintf_r+0x254>)
 8005d4a:	bb1b      	cbnz	r3, 8005d94 <_vfiprintf_r+0x1f8>
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	3307      	adds	r3, #7
 8005d50:	f023 0307 	bic.w	r3, r3, #7
 8005d54:	3308      	adds	r3, #8
 8005d56:	9303      	str	r3, [sp, #12]
 8005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5a:	443b      	add	r3, r7
 8005d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5e:	e767      	b.n	8005c30 <_vfiprintf_r+0x94>
 8005d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d64:	460c      	mov	r4, r1
 8005d66:	2001      	movs	r0, #1
 8005d68:	e7a5      	b.n	8005cb6 <_vfiprintf_r+0x11a>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	3401      	adds	r4, #1
 8005d6e:	9305      	str	r3, [sp, #20]
 8005d70:	4619      	mov	r1, r3
 8005d72:	f04f 0c0a 	mov.w	ip, #10
 8005d76:	4620      	mov	r0, r4
 8005d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d7c:	3a30      	subs	r2, #48	; 0x30
 8005d7e:	2a09      	cmp	r2, #9
 8005d80:	d903      	bls.n	8005d8a <_vfiprintf_r+0x1ee>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0c5      	beq.n	8005d12 <_vfiprintf_r+0x176>
 8005d86:	9105      	str	r1, [sp, #20]
 8005d88:	e7c3      	b.n	8005d12 <_vfiprintf_r+0x176>
 8005d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d8e:	4604      	mov	r4, r0
 8005d90:	2301      	movs	r3, #1
 8005d92:	e7f0      	b.n	8005d76 <_vfiprintf_r+0x1da>
 8005d94:	ab03      	add	r3, sp, #12
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	462a      	mov	r2, r5
 8005d9a:	4b16      	ldr	r3, [pc, #88]	; (8005df4 <_vfiprintf_r+0x258>)
 8005d9c:	a904      	add	r1, sp, #16
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f3af 8000 	nop.w
 8005da4:	4607      	mov	r7, r0
 8005da6:	1c78      	adds	r0, r7, #1
 8005da8:	d1d6      	bne.n	8005d58 <_vfiprintf_r+0x1bc>
 8005daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dac:	07d9      	lsls	r1, r3, #31
 8005dae:	d405      	bmi.n	8005dbc <_vfiprintf_r+0x220>
 8005db0:	89ab      	ldrh	r3, [r5, #12]
 8005db2:	059a      	lsls	r2, r3, #22
 8005db4:	d402      	bmi.n	8005dbc <_vfiprintf_r+0x220>
 8005db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db8:	f7ff fd7f 	bl	80058ba <__retarget_lock_release_recursive>
 8005dbc:	89ab      	ldrh	r3, [r5, #12]
 8005dbe:	065b      	lsls	r3, r3, #25
 8005dc0:	f53f af12 	bmi.w	8005be8 <_vfiprintf_r+0x4c>
 8005dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dc6:	e711      	b.n	8005bec <_vfiprintf_r+0x50>
 8005dc8:	ab03      	add	r3, sp, #12
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	462a      	mov	r2, r5
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <_vfiprintf_r+0x258>)
 8005dd0:	a904      	add	r1, sp, #16
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f000 f880 	bl	8005ed8 <_printf_i>
 8005dd8:	e7e4      	b.n	8005da4 <_vfiprintf_r+0x208>
 8005dda:	bf00      	nop
 8005ddc:	08006ad8 	.word	0x08006ad8
 8005de0:	08006af8 	.word	0x08006af8
 8005de4:	08006ab8 	.word	0x08006ab8
 8005de8:	08006b18 	.word	0x08006b18
 8005dec:	08006b22 	.word	0x08006b22
 8005df0:	00000000 	.word	0x00000000
 8005df4:	08005b77 	.word	0x08005b77
 8005df8:	08006b1e 	.word	0x08006b1e

08005dfc <_printf_common>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	4616      	mov	r6, r2
 8005e02:	4699      	mov	r9, r3
 8005e04:	688a      	ldr	r2, [r1, #8]
 8005e06:	690b      	ldr	r3, [r1, #16]
 8005e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bfb8      	it	lt
 8005e10:	4613      	movlt	r3, r2
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e18:	4607      	mov	r7, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	b10a      	cbz	r2, 8005e22 <_printf_common+0x26>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	6033      	str	r3, [r6, #0]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	0699      	lsls	r1, r3, #26
 8005e26:	bf42      	ittt	mi
 8005e28:	6833      	ldrmi	r3, [r6, #0]
 8005e2a:	3302      	addmi	r3, #2
 8005e2c:	6033      	strmi	r3, [r6, #0]
 8005e2e:	6825      	ldr	r5, [r4, #0]
 8005e30:	f015 0506 	ands.w	r5, r5, #6
 8005e34:	d106      	bne.n	8005e44 <_printf_common+0x48>
 8005e36:	f104 0a19 	add.w	sl, r4, #25
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	6832      	ldr	r2, [r6, #0]
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dc26      	bgt.n	8005e92 <_printf_common+0x96>
 8005e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e48:	1e13      	subs	r3, r2, #0
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	bf18      	it	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	0692      	lsls	r2, r2, #26
 8005e52:	d42b      	bmi.n	8005eac <_printf_common+0xb0>
 8005e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e58:	4649      	mov	r1, r9
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	47c0      	blx	r8
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d01e      	beq.n	8005ea0 <_printf_common+0xa4>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	68e5      	ldr	r5, [r4, #12]
 8005e66:	6832      	ldr	r2, [r6, #0]
 8005e68:	f003 0306 	and.w	r3, r3, #6
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	bf08      	it	eq
 8005e70:	1aad      	subeq	r5, r5, r2
 8005e72:	68a3      	ldr	r3, [r4, #8]
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	bf0c      	ite	eq
 8005e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e7c:	2500      	movne	r5, #0
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	bfc4      	itt	gt
 8005e82:	1a9b      	subgt	r3, r3, r2
 8005e84:	18ed      	addgt	r5, r5, r3
 8005e86:	2600      	movs	r6, #0
 8005e88:	341a      	adds	r4, #26
 8005e8a:	42b5      	cmp	r5, r6
 8005e8c:	d11a      	bne.n	8005ec4 <_printf_common+0xc8>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	e008      	b.n	8005ea4 <_printf_common+0xa8>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4652      	mov	r2, sl
 8005e96:	4649      	mov	r1, r9
 8005e98:	4638      	mov	r0, r7
 8005e9a:	47c0      	blx	r8
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d103      	bne.n	8005ea8 <_printf_common+0xac>
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea8:	3501      	adds	r5, #1
 8005eaa:	e7c6      	b.n	8005e3a <_printf_common+0x3e>
 8005eac:	18e1      	adds	r1, r4, r3
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	2030      	movs	r0, #48	; 0x30
 8005eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eb6:	4422      	add	r2, r4
 8005eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	e7c7      	b.n	8005e54 <_printf_common+0x58>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4649      	mov	r1, r9
 8005eca:	4638      	mov	r0, r7
 8005ecc:	47c0      	blx	r8
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d0e6      	beq.n	8005ea0 <_printf_common+0xa4>
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7d9      	b.n	8005e8a <_printf_common+0x8e>
	...

08005ed8 <_printf_i>:
 8005ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	7e0f      	ldrb	r7, [r1, #24]
 8005ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ee0:	2f78      	cmp	r7, #120	; 0x78
 8005ee2:	4691      	mov	r9, r2
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	469a      	mov	sl, r3
 8005eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eee:	d807      	bhi.n	8005f00 <_printf_i+0x28>
 8005ef0:	2f62      	cmp	r7, #98	; 0x62
 8005ef2:	d80a      	bhi.n	8005f0a <_printf_i+0x32>
 8005ef4:	2f00      	cmp	r7, #0
 8005ef6:	f000 80d8 	beq.w	80060aa <_printf_i+0x1d2>
 8005efa:	2f58      	cmp	r7, #88	; 0x58
 8005efc:	f000 80a3 	beq.w	8006046 <_printf_i+0x16e>
 8005f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f08:	e03a      	b.n	8005f80 <_printf_i+0xa8>
 8005f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f0e:	2b15      	cmp	r3, #21
 8005f10:	d8f6      	bhi.n	8005f00 <_printf_i+0x28>
 8005f12:	a101      	add	r1, pc, #4	; (adr r1, 8005f18 <_printf_i+0x40>)
 8005f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f85 	.word	0x08005f85
 8005f20:	08005f01 	.word	0x08005f01
 8005f24:	08005f01 	.word	0x08005f01
 8005f28:	08005f01 	.word	0x08005f01
 8005f2c:	08005f01 	.word	0x08005f01
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005f01 	.word	0x08005f01
 8005f38:	08005f01 	.word	0x08005f01
 8005f3c:	08005f01 	.word	0x08005f01
 8005f40:	08005f01 	.word	0x08005f01
 8005f44:	08006091 	.word	0x08006091
 8005f48:	08005fb5 	.word	0x08005fb5
 8005f4c:	08006073 	.word	0x08006073
 8005f50:	08005f01 	.word	0x08005f01
 8005f54:	08005f01 	.word	0x08005f01
 8005f58:	080060b3 	.word	0x080060b3
 8005f5c:	08005f01 	.word	0x08005f01
 8005f60:	08005fb5 	.word	0x08005fb5
 8005f64:	08005f01 	.word	0x08005f01
 8005f68:	08005f01 	.word	0x08005f01
 8005f6c:	0800607b 	.word	0x0800607b
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	602a      	str	r2, [r5, #0]
 8005f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0a3      	b.n	80060cc <_printf_i+0x1f4>
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	6829      	ldr	r1, [r5, #0]
 8005f88:	0606      	lsls	r6, r0, #24
 8005f8a:	f101 0304 	add.w	r3, r1, #4
 8005f8e:	d50a      	bpl.n	8005fa6 <_printf_i+0xce>
 8005f90:	680e      	ldr	r6, [r1, #0]
 8005f92:	602b      	str	r3, [r5, #0]
 8005f94:	2e00      	cmp	r6, #0
 8005f96:	da03      	bge.n	8005fa0 <_printf_i+0xc8>
 8005f98:	232d      	movs	r3, #45	; 0x2d
 8005f9a:	4276      	negs	r6, r6
 8005f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa0:	485e      	ldr	r0, [pc, #376]	; (800611c <_printf_i+0x244>)
 8005fa2:	230a      	movs	r3, #10
 8005fa4:	e019      	b.n	8005fda <_printf_i+0x102>
 8005fa6:	680e      	ldr	r6, [r1, #0]
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fae:	bf18      	it	ne
 8005fb0:	b236      	sxthne	r6, r6
 8005fb2:	e7ef      	b.n	8005f94 <_printf_i+0xbc>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	6820      	ldr	r0, [r4, #0]
 8005fb8:	1d19      	adds	r1, r3, #4
 8005fba:	6029      	str	r1, [r5, #0]
 8005fbc:	0601      	lsls	r1, r0, #24
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_i+0xec>
 8005fc0:	681e      	ldr	r6, [r3, #0]
 8005fc2:	e002      	b.n	8005fca <_printf_i+0xf2>
 8005fc4:	0646      	lsls	r6, r0, #25
 8005fc6:	d5fb      	bpl.n	8005fc0 <_printf_i+0xe8>
 8005fc8:	881e      	ldrh	r6, [r3, #0]
 8005fca:	4854      	ldr	r0, [pc, #336]	; (800611c <_printf_i+0x244>)
 8005fcc:	2f6f      	cmp	r7, #111	; 0x6f
 8005fce:	bf0c      	ite	eq
 8005fd0:	2308      	moveq	r3, #8
 8005fd2:	230a      	movne	r3, #10
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fda:	6865      	ldr	r5, [r4, #4]
 8005fdc:	60a5      	str	r5, [r4, #8]
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	bfa2      	ittt	ge
 8005fe2:	6821      	ldrge	r1, [r4, #0]
 8005fe4:	f021 0104 	bicge.w	r1, r1, #4
 8005fe8:	6021      	strge	r1, [r4, #0]
 8005fea:	b90e      	cbnz	r6, 8005ff0 <_printf_i+0x118>
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	d04d      	beq.n	800608c <_printf_i+0x1b4>
 8005ff0:	4615      	mov	r5, r2
 8005ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8005ffa:	5dc7      	ldrb	r7, [r0, r7]
 8005ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006000:	4637      	mov	r7, r6
 8006002:	42bb      	cmp	r3, r7
 8006004:	460e      	mov	r6, r1
 8006006:	d9f4      	bls.n	8005ff2 <_printf_i+0x11a>
 8006008:	2b08      	cmp	r3, #8
 800600a:	d10b      	bne.n	8006024 <_printf_i+0x14c>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	07de      	lsls	r6, r3, #31
 8006010:	d508      	bpl.n	8006024 <_printf_i+0x14c>
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	6861      	ldr	r1, [r4, #4]
 8006016:	4299      	cmp	r1, r3
 8006018:	bfde      	ittt	le
 800601a:	2330      	movle	r3, #48	; 0x30
 800601c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006024:	1b52      	subs	r2, r2, r5
 8006026:	6122      	str	r2, [r4, #16]
 8006028:	f8cd a000 	str.w	sl, [sp]
 800602c:	464b      	mov	r3, r9
 800602e:	aa03      	add	r2, sp, #12
 8006030:	4621      	mov	r1, r4
 8006032:	4640      	mov	r0, r8
 8006034:	f7ff fee2 	bl	8005dfc <_printf_common>
 8006038:	3001      	adds	r0, #1
 800603a:	d14c      	bne.n	80060d6 <_printf_i+0x1fe>
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	b004      	add	sp, #16
 8006042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006046:	4835      	ldr	r0, [pc, #212]	; (800611c <_printf_i+0x244>)
 8006048:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800604c:	6829      	ldr	r1, [r5, #0]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f851 6b04 	ldr.w	r6, [r1], #4
 8006054:	6029      	str	r1, [r5, #0]
 8006056:	061d      	lsls	r5, r3, #24
 8006058:	d514      	bpl.n	8006084 <_printf_i+0x1ac>
 800605a:	07df      	lsls	r7, r3, #31
 800605c:	bf44      	itt	mi
 800605e:	f043 0320 	orrmi.w	r3, r3, #32
 8006062:	6023      	strmi	r3, [r4, #0]
 8006064:	b91e      	cbnz	r6, 800606e <_printf_i+0x196>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f023 0320 	bic.w	r3, r3, #32
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	2310      	movs	r3, #16
 8006070:	e7b0      	b.n	8005fd4 <_printf_i+0xfc>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f043 0320 	orr.w	r3, r3, #32
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	2378      	movs	r3, #120	; 0x78
 800607c:	4828      	ldr	r0, [pc, #160]	; (8006120 <_printf_i+0x248>)
 800607e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006082:	e7e3      	b.n	800604c <_printf_i+0x174>
 8006084:	0659      	lsls	r1, r3, #25
 8006086:	bf48      	it	mi
 8006088:	b2b6      	uxthmi	r6, r6
 800608a:	e7e6      	b.n	800605a <_printf_i+0x182>
 800608c:	4615      	mov	r5, r2
 800608e:	e7bb      	b.n	8006008 <_printf_i+0x130>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	6826      	ldr	r6, [r4, #0]
 8006094:	6961      	ldr	r1, [r4, #20]
 8006096:	1d18      	adds	r0, r3, #4
 8006098:	6028      	str	r0, [r5, #0]
 800609a:	0635      	lsls	r5, r6, #24
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	d501      	bpl.n	80060a4 <_printf_i+0x1cc>
 80060a0:	6019      	str	r1, [r3, #0]
 80060a2:	e002      	b.n	80060aa <_printf_i+0x1d2>
 80060a4:	0670      	lsls	r0, r6, #25
 80060a6:	d5fb      	bpl.n	80060a0 <_printf_i+0x1c8>
 80060a8:	8019      	strh	r1, [r3, #0]
 80060aa:	2300      	movs	r3, #0
 80060ac:	6123      	str	r3, [r4, #16]
 80060ae:	4615      	mov	r5, r2
 80060b0:	e7ba      	b.n	8006028 <_printf_i+0x150>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	602a      	str	r2, [r5, #0]
 80060b8:	681d      	ldr	r5, [r3, #0]
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	2100      	movs	r1, #0
 80060be:	4628      	mov	r0, r5
 80060c0:	f7fa f886 	bl	80001d0 <memchr>
 80060c4:	b108      	cbz	r0, 80060ca <_printf_i+0x1f2>
 80060c6:	1b40      	subs	r0, r0, r5
 80060c8:	6060      	str	r0, [r4, #4]
 80060ca:	6863      	ldr	r3, [r4, #4]
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	2300      	movs	r3, #0
 80060d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d4:	e7a8      	b.n	8006028 <_printf_i+0x150>
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	462a      	mov	r2, r5
 80060da:	4649      	mov	r1, r9
 80060dc:	4640      	mov	r0, r8
 80060de:	47d0      	blx	sl
 80060e0:	3001      	adds	r0, #1
 80060e2:	d0ab      	beq.n	800603c <_printf_i+0x164>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	079b      	lsls	r3, r3, #30
 80060e8:	d413      	bmi.n	8006112 <_printf_i+0x23a>
 80060ea:	68e0      	ldr	r0, [r4, #12]
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	4298      	cmp	r0, r3
 80060f0:	bfb8      	it	lt
 80060f2:	4618      	movlt	r0, r3
 80060f4:	e7a4      	b.n	8006040 <_printf_i+0x168>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4632      	mov	r2, r6
 80060fa:	4649      	mov	r1, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	47d0      	blx	sl
 8006100:	3001      	adds	r0, #1
 8006102:	d09b      	beq.n	800603c <_printf_i+0x164>
 8006104:	3501      	adds	r5, #1
 8006106:	68e3      	ldr	r3, [r4, #12]
 8006108:	9903      	ldr	r1, [sp, #12]
 800610a:	1a5b      	subs	r3, r3, r1
 800610c:	42ab      	cmp	r3, r5
 800610e:	dcf2      	bgt.n	80060f6 <_printf_i+0x21e>
 8006110:	e7eb      	b.n	80060ea <_printf_i+0x212>
 8006112:	2500      	movs	r5, #0
 8006114:	f104 0619 	add.w	r6, r4, #25
 8006118:	e7f5      	b.n	8006106 <_printf_i+0x22e>
 800611a:	bf00      	nop
 800611c:	08006b29 	.word	0x08006b29
 8006120:	08006b3a 	.word	0x08006b3a

08006124 <_sbrk_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4d06      	ldr	r5, [pc, #24]	; (8006140 <_sbrk_r+0x1c>)
 8006128:	2300      	movs	r3, #0
 800612a:	4604      	mov	r4, r0
 800612c:	4608      	mov	r0, r1
 800612e:	602b      	str	r3, [r5, #0]
 8006130:	f7fb fcfa 	bl	8001b28 <_sbrk>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d102      	bne.n	800613e <_sbrk_r+0x1a>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b103      	cbz	r3, 800613e <_sbrk_r+0x1a>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	20000290 	.word	0x20000290

08006144 <__sread>:
 8006144:	b510      	push	{r4, lr}
 8006146:	460c      	mov	r4, r1
 8006148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614c:	f000 f8a0 	bl	8006290 <_read_r>
 8006150:	2800      	cmp	r0, #0
 8006152:	bfab      	itete	ge
 8006154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006156:	89a3      	ldrhlt	r3, [r4, #12]
 8006158:	181b      	addge	r3, r3, r0
 800615a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800615e:	bfac      	ite	ge
 8006160:	6563      	strge	r3, [r4, #84]	; 0x54
 8006162:	81a3      	strhlt	r3, [r4, #12]
 8006164:	bd10      	pop	{r4, pc}

08006166 <__swrite>:
 8006166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616a:	461f      	mov	r7, r3
 800616c:	898b      	ldrh	r3, [r1, #12]
 800616e:	05db      	lsls	r3, r3, #23
 8006170:	4605      	mov	r5, r0
 8006172:	460c      	mov	r4, r1
 8006174:	4616      	mov	r6, r2
 8006176:	d505      	bpl.n	8006184 <__swrite+0x1e>
 8006178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617c:	2302      	movs	r3, #2
 800617e:	2200      	movs	r2, #0
 8006180:	f000 f868 	bl	8006254 <_lseek_r>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	4632      	mov	r2, r6
 8006192:	463b      	mov	r3, r7
 8006194:	4628      	mov	r0, r5
 8006196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619a:	f000 b817 	b.w	80061cc <_write_r>

0800619e <__sseek>:
 800619e:	b510      	push	{r4, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a6:	f000 f855 	bl	8006254 <_lseek_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	bf15      	itete	ne
 80061b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ba:	81a3      	strheq	r3, [r4, #12]
 80061bc:	bf18      	it	ne
 80061be:	81a3      	strhne	r3, [r4, #12]
 80061c0:	bd10      	pop	{r4, pc}

080061c2 <__sclose>:
 80061c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c6:	f000 b813 	b.w	80061f0 <_close_r>
	...

080061cc <_write_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	; (80061ec <_write_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fa fd04 	bl	8000be8 <_write>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_write_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_write_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000290 	.word	0x20000290

080061f0 <_close_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d06      	ldr	r5, [pc, #24]	; (800620c <_close_r+0x1c>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	f7fb fc60 	bl	8001ac0 <_close>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_close_r+0x1a>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_close_r+0x1a>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	20000290 	.word	0x20000290

08006210 <_fstat_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d07      	ldr	r5, [pc, #28]	; (8006230 <_fstat_r+0x20>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	4611      	mov	r1, r2
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	f7fb fc5b 	bl	8001ad8 <_fstat>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d102      	bne.n	800622c <_fstat_r+0x1c>
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	b103      	cbz	r3, 800622c <_fstat_r+0x1c>
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	bd38      	pop	{r3, r4, r5, pc}
 800622e:	bf00      	nop
 8006230:	20000290 	.word	0x20000290

08006234 <_isatty_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d06      	ldr	r5, [pc, #24]	; (8006250 <_isatty_r+0x1c>)
 8006238:	2300      	movs	r3, #0
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	f7fb fc5a 	bl	8001af8 <_isatty>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_isatty_r+0x1a>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b103      	cbz	r3, 800624e <_isatty_r+0x1a>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	20000290 	.word	0x20000290

08006254 <_lseek_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d07      	ldr	r5, [pc, #28]	; (8006274 <_lseek_r+0x20>)
 8006258:	4604      	mov	r4, r0
 800625a:	4608      	mov	r0, r1
 800625c:	4611      	mov	r1, r2
 800625e:	2200      	movs	r2, #0
 8006260:	602a      	str	r2, [r5, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	f7fb fc53 	bl	8001b0e <_lseek>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_lseek_r+0x1e>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_lseek_r+0x1e>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	20000290 	.word	0x20000290

08006278 <__malloc_lock>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__malloc_lock+0x8>)
 800627a:	f7ff bb1d 	b.w	80058b8 <__retarget_lock_acquire_recursive>
 800627e:	bf00      	nop
 8006280:	20000284 	.word	0x20000284

08006284 <__malloc_unlock>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__malloc_unlock+0x8>)
 8006286:	f7ff bb18 	b.w	80058ba <__retarget_lock_release_recursive>
 800628a:	bf00      	nop
 800628c:	20000284 	.word	0x20000284

08006290 <_read_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	; (80062b0 <_read_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fb fbf1 	bl	8001a86 <_read>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_read_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_read_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000290 	.word	0x20000290

080062b4 <atan2>:
 80062b4:	f000 b82c 	b.w	8006310 <__ieee754_atan2>

080062b8 <sqrt>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	ed2d 8b02 	vpush	{d8}
 80062be:	ec55 4b10 	vmov	r4, r5, d0
 80062c2:	f000 f8ef 	bl	80064a4 <__ieee754_sqrt>
 80062c6:	4622      	mov	r2, r4
 80062c8:	462b      	mov	r3, r5
 80062ca:	4620      	mov	r0, r4
 80062cc:	4629      	mov	r1, r5
 80062ce:	eeb0 8a40 	vmov.f32	s16, s0
 80062d2:	eef0 8a60 	vmov.f32	s17, s1
 80062d6:	f7fa fc21 	bl	8000b1c <__aeabi_dcmpun>
 80062da:	b990      	cbnz	r0, 8006302 <sqrt+0x4a>
 80062dc:	2200      	movs	r2, #0
 80062de:	2300      	movs	r3, #0
 80062e0:	4620      	mov	r0, r4
 80062e2:	4629      	mov	r1, r5
 80062e4:	f7fa fbf2 	bl	8000acc <__aeabi_dcmplt>
 80062e8:	b158      	cbz	r0, 8006302 <sqrt+0x4a>
 80062ea:	f7fe ffad 	bl	8005248 <__errno>
 80062ee:	2321      	movs	r3, #33	; 0x21
 80062f0:	6003      	str	r3, [r0, #0]
 80062f2:	2200      	movs	r2, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	4610      	mov	r0, r2
 80062f8:	4619      	mov	r1, r3
 80062fa:	f7fa fa9f 	bl	800083c <__aeabi_ddiv>
 80062fe:	ec41 0b18 	vmov	d8, r0, r1
 8006302:	eeb0 0a48 	vmov.f32	s0, s16
 8006306:	eef0 0a68 	vmov.f32	s1, s17
 800630a:	ecbd 8b02 	vpop	{d8}
 800630e:	bd38      	pop	{r3, r4, r5, pc}

08006310 <__ieee754_atan2>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	ec57 6b11 	vmov	r6, r7, d1
 8006318:	4273      	negs	r3, r6
 800631a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80064a0 <__ieee754_atan2+0x190>
 800631e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006322:	4333      	orrs	r3, r6
 8006324:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006328:	4573      	cmp	r3, lr
 800632a:	ec51 0b10 	vmov	r0, r1, d0
 800632e:	ee11 8a10 	vmov	r8, s2
 8006332:	d80a      	bhi.n	800634a <__ieee754_atan2+0x3a>
 8006334:	4244      	negs	r4, r0
 8006336:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800633a:	4304      	orrs	r4, r0
 800633c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006340:	4574      	cmp	r4, lr
 8006342:	ee10 9a10 	vmov	r9, s0
 8006346:	468c      	mov	ip, r1
 8006348:	d907      	bls.n	800635a <__ieee754_atan2+0x4a>
 800634a:	4632      	mov	r2, r6
 800634c:	463b      	mov	r3, r7
 800634e:	f7f9 ff95 	bl	800027c <__adddf3>
 8006352:	ec41 0b10 	vmov	d0, r0, r1
 8006356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800635a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800635e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006362:	4334      	orrs	r4, r6
 8006364:	d103      	bne.n	800636e <__ieee754_atan2+0x5e>
 8006366:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636a:	f000 b94d 	b.w	8006608 <atan>
 800636e:	17bc      	asrs	r4, r7, #30
 8006370:	f004 0402 	and.w	r4, r4, #2
 8006374:	ea53 0909 	orrs.w	r9, r3, r9
 8006378:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800637c:	d107      	bne.n	800638e <__ieee754_atan2+0x7e>
 800637e:	2c02      	cmp	r4, #2
 8006380:	d060      	beq.n	8006444 <__ieee754_atan2+0x134>
 8006382:	2c03      	cmp	r4, #3
 8006384:	d1e5      	bne.n	8006352 <__ieee754_atan2+0x42>
 8006386:	a142      	add	r1, pc, #264	; (adr r1, 8006490 <__ieee754_atan2+0x180>)
 8006388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638c:	e7e1      	b.n	8006352 <__ieee754_atan2+0x42>
 800638e:	ea52 0808 	orrs.w	r8, r2, r8
 8006392:	d106      	bne.n	80063a2 <__ieee754_atan2+0x92>
 8006394:	f1bc 0f00 	cmp.w	ip, #0
 8006398:	da5f      	bge.n	800645a <__ieee754_atan2+0x14a>
 800639a:	a13f      	add	r1, pc, #252	; (adr r1, 8006498 <__ieee754_atan2+0x188>)
 800639c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a0:	e7d7      	b.n	8006352 <__ieee754_atan2+0x42>
 80063a2:	4572      	cmp	r2, lr
 80063a4:	d10f      	bne.n	80063c6 <__ieee754_atan2+0xb6>
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f104 34ff 	add.w	r4, r4, #4294967295
 80063ac:	d107      	bne.n	80063be <__ieee754_atan2+0xae>
 80063ae:	2c02      	cmp	r4, #2
 80063b0:	d84c      	bhi.n	800644c <__ieee754_atan2+0x13c>
 80063b2:	4b35      	ldr	r3, [pc, #212]	; (8006488 <__ieee754_atan2+0x178>)
 80063b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80063b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80063bc:	e7c9      	b.n	8006352 <__ieee754_atan2+0x42>
 80063be:	2c02      	cmp	r4, #2
 80063c0:	d848      	bhi.n	8006454 <__ieee754_atan2+0x144>
 80063c2:	4b32      	ldr	r3, [pc, #200]	; (800648c <__ieee754_atan2+0x17c>)
 80063c4:	e7f6      	b.n	80063b4 <__ieee754_atan2+0xa4>
 80063c6:	4573      	cmp	r3, lr
 80063c8:	d0e4      	beq.n	8006394 <__ieee754_atan2+0x84>
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80063d0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063d4:	da1e      	bge.n	8006414 <__ieee754_atan2+0x104>
 80063d6:	2f00      	cmp	r7, #0
 80063d8:	da01      	bge.n	80063de <__ieee754_atan2+0xce>
 80063da:	323c      	adds	r2, #60	; 0x3c
 80063dc:	db1e      	blt.n	800641c <__ieee754_atan2+0x10c>
 80063de:	4632      	mov	r2, r6
 80063e0:	463b      	mov	r3, r7
 80063e2:	f7fa fa2b 	bl	800083c <__aeabi_ddiv>
 80063e6:	ec41 0b10 	vmov	d0, r0, r1
 80063ea:	f000 faad 	bl	8006948 <fabs>
 80063ee:	f000 f90b 	bl	8006608 <atan>
 80063f2:	ec51 0b10 	vmov	r0, r1, d0
 80063f6:	2c01      	cmp	r4, #1
 80063f8:	d013      	beq.n	8006422 <__ieee754_atan2+0x112>
 80063fa:	2c02      	cmp	r4, #2
 80063fc:	d015      	beq.n	800642a <__ieee754_atan2+0x11a>
 80063fe:	2c00      	cmp	r4, #0
 8006400:	d0a7      	beq.n	8006352 <__ieee754_atan2+0x42>
 8006402:	a319      	add	r3, pc, #100	; (adr r3, 8006468 <__ieee754_atan2+0x158>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7f9 ff36 	bl	8000278 <__aeabi_dsub>
 800640c:	a318      	add	r3, pc, #96	; (adr r3, 8006470 <__ieee754_atan2+0x160>)
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	e014      	b.n	800643e <__ieee754_atan2+0x12e>
 8006414:	a118      	add	r1, pc, #96	; (adr r1, 8006478 <__ieee754_atan2+0x168>)
 8006416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800641a:	e7ec      	b.n	80063f6 <__ieee754_atan2+0xe6>
 800641c:	2000      	movs	r0, #0
 800641e:	2100      	movs	r1, #0
 8006420:	e7e9      	b.n	80063f6 <__ieee754_atan2+0xe6>
 8006422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006426:	4619      	mov	r1, r3
 8006428:	e793      	b.n	8006352 <__ieee754_atan2+0x42>
 800642a:	a30f      	add	r3, pc, #60	; (adr r3, 8006468 <__ieee754_atan2+0x158>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7f9 ff22 	bl	8000278 <__aeabi_dsub>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	a10d      	add	r1, pc, #52	; (adr r1, 8006470 <__ieee754_atan2+0x160>)
 800643a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800643e:	f7f9 ff1b 	bl	8000278 <__aeabi_dsub>
 8006442:	e786      	b.n	8006352 <__ieee754_atan2+0x42>
 8006444:	a10a      	add	r1, pc, #40	; (adr r1, 8006470 <__ieee754_atan2+0x160>)
 8006446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800644a:	e782      	b.n	8006352 <__ieee754_atan2+0x42>
 800644c:	a10c      	add	r1, pc, #48	; (adr r1, 8006480 <__ieee754_atan2+0x170>)
 800644e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006452:	e77e      	b.n	8006352 <__ieee754_atan2+0x42>
 8006454:	2000      	movs	r0, #0
 8006456:	2100      	movs	r1, #0
 8006458:	e77b      	b.n	8006352 <__ieee754_atan2+0x42>
 800645a:	a107      	add	r1, pc, #28	; (adr r1, 8006478 <__ieee754_atan2+0x168>)
 800645c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006460:	e777      	b.n	8006352 <__ieee754_atan2+0x42>
 8006462:	bf00      	nop
 8006464:	f3af 8000 	nop.w
 8006468:	33145c07 	.word	0x33145c07
 800646c:	3ca1a626 	.word	0x3ca1a626
 8006470:	54442d18 	.word	0x54442d18
 8006474:	400921fb 	.word	0x400921fb
 8006478:	54442d18 	.word	0x54442d18
 800647c:	3ff921fb 	.word	0x3ff921fb
 8006480:	54442d18 	.word	0x54442d18
 8006484:	3fe921fb 	.word	0x3fe921fb
 8006488:	08006b50 	.word	0x08006b50
 800648c:	08006b68 	.word	0x08006b68
 8006490:	54442d18 	.word	0x54442d18
 8006494:	c00921fb 	.word	0xc00921fb
 8006498:	54442d18 	.word	0x54442d18
 800649c:	bff921fb 	.word	0xbff921fb
 80064a0:	7ff00000 	.word	0x7ff00000

080064a4 <__ieee754_sqrt>:
 80064a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a8:	ec55 4b10 	vmov	r4, r5, d0
 80064ac:	4e55      	ldr	r6, [pc, #340]	; (8006604 <__ieee754_sqrt+0x160>)
 80064ae:	43ae      	bics	r6, r5
 80064b0:	ee10 0a10 	vmov	r0, s0
 80064b4:	ee10 3a10 	vmov	r3, s0
 80064b8:	462a      	mov	r2, r5
 80064ba:	4629      	mov	r1, r5
 80064bc:	d110      	bne.n	80064e0 <__ieee754_sqrt+0x3c>
 80064be:	ee10 2a10 	vmov	r2, s0
 80064c2:	462b      	mov	r3, r5
 80064c4:	f7fa f890 	bl	80005e8 <__aeabi_dmul>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4620      	mov	r0, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	f7f9 fed4 	bl	800027c <__adddf3>
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	ec45 4b10 	vmov	d0, r4, r5
 80064dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	dc10      	bgt.n	8006506 <__ieee754_sqrt+0x62>
 80064e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80064e8:	4330      	orrs	r0, r6
 80064ea:	d0f5      	beq.n	80064d8 <__ieee754_sqrt+0x34>
 80064ec:	b15d      	cbz	r5, 8006506 <__ieee754_sqrt+0x62>
 80064ee:	ee10 2a10 	vmov	r2, s0
 80064f2:	462b      	mov	r3, r5
 80064f4:	ee10 0a10 	vmov	r0, s0
 80064f8:	f7f9 febe 	bl	8000278 <__aeabi_dsub>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	f7fa f99c 	bl	800083c <__aeabi_ddiv>
 8006504:	e7e6      	b.n	80064d4 <__ieee754_sqrt+0x30>
 8006506:	1512      	asrs	r2, r2, #20
 8006508:	d074      	beq.n	80065f4 <__ieee754_sqrt+0x150>
 800650a:	07d4      	lsls	r4, r2, #31
 800650c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006510:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006518:	bf5e      	ittt	pl
 800651a:	0fda      	lsrpl	r2, r3, #31
 800651c:	005b      	lslpl	r3, r3, #1
 800651e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006522:	2400      	movs	r4, #0
 8006524:	0fda      	lsrs	r2, r3, #31
 8006526:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800652a:	107f      	asrs	r7, r7, #1
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	2516      	movs	r5, #22
 8006530:	4620      	mov	r0, r4
 8006532:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006536:	1886      	adds	r6, r0, r2
 8006538:	428e      	cmp	r6, r1
 800653a:	bfde      	ittt	le
 800653c:	1b89      	suble	r1, r1, r6
 800653e:	18b0      	addle	r0, r6, r2
 8006540:	18a4      	addle	r4, r4, r2
 8006542:	0049      	lsls	r1, r1, #1
 8006544:	3d01      	subs	r5, #1
 8006546:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800654a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800654e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006552:	d1f0      	bne.n	8006536 <__ieee754_sqrt+0x92>
 8006554:	462a      	mov	r2, r5
 8006556:	f04f 0e20 	mov.w	lr, #32
 800655a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800655e:	4281      	cmp	r1, r0
 8006560:	eb06 0c05 	add.w	ip, r6, r5
 8006564:	dc02      	bgt.n	800656c <__ieee754_sqrt+0xc8>
 8006566:	d113      	bne.n	8006590 <__ieee754_sqrt+0xec>
 8006568:	459c      	cmp	ip, r3
 800656a:	d811      	bhi.n	8006590 <__ieee754_sqrt+0xec>
 800656c:	f1bc 0f00 	cmp.w	ip, #0
 8006570:	eb0c 0506 	add.w	r5, ip, r6
 8006574:	da43      	bge.n	80065fe <__ieee754_sqrt+0x15a>
 8006576:	2d00      	cmp	r5, #0
 8006578:	db41      	blt.n	80065fe <__ieee754_sqrt+0x15a>
 800657a:	f100 0801 	add.w	r8, r0, #1
 800657e:	1a09      	subs	r1, r1, r0
 8006580:	459c      	cmp	ip, r3
 8006582:	bf88      	it	hi
 8006584:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006588:	eba3 030c 	sub.w	r3, r3, ip
 800658c:	4432      	add	r2, r6
 800658e:	4640      	mov	r0, r8
 8006590:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006594:	f1be 0e01 	subs.w	lr, lr, #1
 8006598:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800659c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80065a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80065a4:	d1db      	bne.n	800655e <__ieee754_sqrt+0xba>
 80065a6:	430b      	orrs	r3, r1
 80065a8:	d006      	beq.n	80065b8 <__ieee754_sqrt+0x114>
 80065aa:	1c50      	adds	r0, r2, #1
 80065ac:	bf13      	iteet	ne
 80065ae:	3201      	addne	r2, #1
 80065b0:	3401      	addeq	r4, #1
 80065b2:	4672      	moveq	r2, lr
 80065b4:	f022 0201 	bicne.w	r2, r2, #1
 80065b8:	1063      	asrs	r3, r4, #1
 80065ba:	0852      	lsrs	r2, r2, #1
 80065bc:	07e1      	lsls	r1, r4, #31
 80065be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80065c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80065c6:	bf48      	it	mi
 80065c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80065cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80065d0:	4614      	mov	r4, r2
 80065d2:	e781      	b.n	80064d8 <__ieee754_sqrt+0x34>
 80065d4:	0ad9      	lsrs	r1, r3, #11
 80065d6:	3815      	subs	r0, #21
 80065d8:	055b      	lsls	r3, r3, #21
 80065da:	2900      	cmp	r1, #0
 80065dc:	d0fa      	beq.n	80065d4 <__ieee754_sqrt+0x130>
 80065de:	02cd      	lsls	r5, r1, #11
 80065e0:	d50a      	bpl.n	80065f8 <__ieee754_sqrt+0x154>
 80065e2:	f1c2 0420 	rsb	r4, r2, #32
 80065e6:	fa23 f404 	lsr.w	r4, r3, r4
 80065ea:	1e55      	subs	r5, r2, #1
 80065ec:	4093      	lsls	r3, r2
 80065ee:	4321      	orrs	r1, r4
 80065f0:	1b42      	subs	r2, r0, r5
 80065f2:	e78a      	b.n	800650a <__ieee754_sqrt+0x66>
 80065f4:	4610      	mov	r0, r2
 80065f6:	e7f0      	b.n	80065da <__ieee754_sqrt+0x136>
 80065f8:	0049      	lsls	r1, r1, #1
 80065fa:	3201      	adds	r2, #1
 80065fc:	e7ef      	b.n	80065de <__ieee754_sqrt+0x13a>
 80065fe:	4680      	mov	r8, r0
 8006600:	e7bd      	b.n	800657e <__ieee754_sqrt+0xda>
 8006602:	bf00      	nop
 8006604:	7ff00000 	.word	0x7ff00000

08006608 <atan>:
 8006608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	ec55 4b10 	vmov	r4, r5, d0
 8006610:	4bc3      	ldr	r3, [pc, #780]	; (8006920 <atan+0x318>)
 8006612:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006616:	429e      	cmp	r6, r3
 8006618:	46ab      	mov	fp, r5
 800661a:	dd18      	ble.n	800664e <atan+0x46>
 800661c:	4bc1      	ldr	r3, [pc, #772]	; (8006924 <atan+0x31c>)
 800661e:	429e      	cmp	r6, r3
 8006620:	dc01      	bgt.n	8006626 <atan+0x1e>
 8006622:	d109      	bne.n	8006638 <atan+0x30>
 8006624:	b144      	cbz	r4, 8006638 <atan+0x30>
 8006626:	4622      	mov	r2, r4
 8006628:	462b      	mov	r3, r5
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7f9 fe25 	bl	800027c <__adddf3>
 8006632:	4604      	mov	r4, r0
 8006634:	460d      	mov	r5, r1
 8006636:	e006      	b.n	8006646 <atan+0x3e>
 8006638:	f1bb 0f00 	cmp.w	fp, #0
 800663c:	f300 8131 	bgt.w	80068a2 <atan+0x29a>
 8006640:	a59b      	add	r5, pc, #620	; (adr r5, 80068b0 <atan+0x2a8>)
 8006642:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006646:	ec45 4b10 	vmov	d0, r4, r5
 800664a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664e:	4bb6      	ldr	r3, [pc, #728]	; (8006928 <atan+0x320>)
 8006650:	429e      	cmp	r6, r3
 8006652:	dc14      	bgt.n	800667e <atan+0x76>
 8006654:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006658:	429e      	cmp	r6, r3
 800665a:	dc0d      	bgt.n	8006678 <atan+0x70>
 800665c:	a396      	add	r3, pc, #600	; (adr r3, 80068b8 <atan+0x2b0>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	ee10 0a10 	vmov	r0, s0
 8006666:	4629      	mov	r1, r5
 8006668:	f7f9 fe08 	bl	800027c <__adddf3>
 800666c:	4baf      	ldr	r3, [pc, #700]	; (800692c <atan+0x324>)
 800666e:	2200      	movs	r2, #0
 8006670:	f7fa fa4a 	bl	8000b08 <__aeabi_dcmpgt>
 8006674:	2800      	cmp	r0, #0
 8006676:	d1e6      	bne.n	8006646 <atan+0x3e>
 8006678:	f04f 3aff 	mov.w	sl, #4294967295
 800667c:	e02b      	b.n	80066d6 <atan+0xce>
 800667e:	f000 f963 	bl	8006948 <fabs>
 8006682:	4bab      	ldr	r3, [pc, #684]	; (8006930 <atan+0x328>)
 8006684:	429e      	cmp	r6, r3
 8006686:	ec55 4b10 	vmov	r4, r5, d0
 800668a:	f300 80bf 	bgt.w	800680c <atan+0x204>
 800668e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006692:	429e      	cmp	r6, r3
 8006694:	f300 80a0 	bgt.w	80067d8 <atan+0x1d0>
 8006698:	ee10 2a10 	vmov	r2, s0
 800669c:	ee10 0a10 	vmov	r0, s0
 80066a0:	462b      	mov	r3, r5
 80066a2:	4629      	mov	r1, r5
 80066a4:	f7f9 fdea 	bl	800027c <__adddf3>
 80066a8:	4ba0      	ldr	r3, [pc, #640]	; (800692c <atan+0x324>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	f7f9 fde4 	bl	8000278 <__aeabi_dsub>
 80066b0:	2200      	movs	r2, #0
 80066b2:	4606      	mov	r6, r0
 80066b4:	460f      	mov	r7, r1
 80066b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	f7f9 fddd 	bl	800027c <__adddf3>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7fa f8b7 	bl	800083c <__aeabi_ddiv>
 80066ce:	f04f 0a00 	mov.w	sl, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	460d      	mov	r5, r1
 80066d6:	4622      	mov	r2, r4
 80066d8:	462b      	mov	r3, r5
 80066da:	4620      	mov	r0, r4
 80066dc:	4629      	mov	r1, r5
 80066de:	f7f9 ff83 	bl	80005e8 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4680      	mov	r8, r0
 80066e8:	4689      	mov	r9, r1
 80066ea:	f7f9 ff7d 	bl	80005e8 <__aeabi_dmul>
 80066ee:	a374      	add	r3, pc, #464	; (adr r3, 80068c0 <atan+0x2b8>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	f7f9 ff76 	bl	80005e8 <__aeabi_dmul>
 80066fc:	a372      	add	r3, pc, #456	; (adr r3, 80068c8 <atan+0x2c0>)
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f7f9 fdbb 	bl	800027c <__adddf3>
 8006706:	4632      	mov	r2, r6
 8006708:	463b      	mov	r3, r7
 800670a:	f7f9 ff6d 	bl	80005e8 <__aeabi_dmul>
 800670e:	a370      	add	r3, pc, #448	; (adr r3, 80068d0 <atan+0x2c8>)
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f7f9 fdb2 	bl	800027c <__adddf3>
 8006718:	4632      	mov	r2, r6
 800671a:	463b      	mov	r3, r7
 800671c:	f7f9 ff64 	bl	80005e8 <__aeabi_dmul>
 8006720:	a36d      	add	r3, pc, #436	; (adr r3, 80068d8 <atan+0x2d0>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f7f9 fda9 	bl	800027c <__adddf3>
 800672a:	4632      	mov	r2, r6
 800672c:	463b      	mov	r3, r7
 800672e:	f7f9 ff5b 	bl	80005e8 <__aeabi_dmul>
 8006732:	a36b      	add	r3, pc, #428	; (adr r3, 80068e0 <atan+0x2d8>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7f9 fda0 	bl	800027c <__adddf3>
 800673c:	4632      	mov	r2, r6
 800673e:	463b      	mov	r3, r7
 8006740:	f7f9 ff52 	bl	80005e8 <__aeabi_dmul>
 8006744:	a368      	add	r3, pc, #416	; (adr r3, 80068e8 <atan+0x2e0>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f7f9 fd97 	bl	800027c <__adddf3>
 800674e:	4642      	mov	r2, r8
 8006750:	464b      	mov	r3, r9
 8006752:	f7f9 ff49 	bl	80005e8 <__aeabi_dmul>
 8006756:	a366      	add	r3, pc, #408	; (adr r3, 80068f0 <atan+0x2e8>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	4680      	mov	r8, r0
 800675e:	4689      	mov	r9, r1
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7f9 ff40 	bl	80005e8 <__aeabi_dmul>
 8006768:	a363      	add	r3, pc, #396	; (adr r3, 80068f8 <atan+0x2f0>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f7f9 fd83 	bl	8000278 <__aeabi_dsub>
 8006772:	4632      	mov	r2, r6
 8006774:	463b      	mov	r3, r7
 8006776:	f7f9 ff37 	bl	80005e8 <__aeabi_dmul>
 800677a:	a361      	add	r3, pc, #388	; (adr r3, 8006900 <atan+0x2f8>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7f9 fd7a 	bl	8000278 <__aeabi_dsub>
 8006784:	4632      	mov	r2, r6
 8006786:	463b      	mov	r3, r7
 8006788:	f7f9 ff2e 	bl	80005e8 <__aeabi_dmul>
 800678c:	a35e      	add	r3, pc, #376	; (adr r3, 8006908 <atan+0x300>)
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f7f9 fd71 	bl	8000278 <__aeabi_dsub>
 8006796:	4632      	mov	r2, r6
 8006798:	463b      	mov	r3, r7
 800679a:	f7f9 ff25 	bl	80005e8 <__aeabi_dmul>
 800679e:	a35c      	add	r3, pc, #368	; (adr r3, 8006910 <atan+0x308>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f7f9 fd68 	bl	8000278 <__aeabi_dsub>
 80067a8:	4632      	mov	r2, r6
 80067aa:	463b      	mov	r3, r7
 80067ac:	f7f9 ff1c 	bl	80005e8 <__aeabi_dmul>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4640      	mov	r0, r8
 80067b6:	4649      	mov	r1, r9
 80067b8:	f7f9 fd60 	bl	800027c <__adddf3>
 80067bc:	4622      	mov	r2, r4
 80067be:	462b      	mov	r3, r5
 80067c0:	f7f9 ff12 	bl	80005e8 <__aeabi_dmul>
 80067c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	d14b      	bne.n	8006866 <atan+0x25e>
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 fd51 	bl	8000278 <__aeabi_dsub>
 80067d6:	e72c      	b.n	8006632 <atan+0x2a>
 80067d8:	ee10 0a10 	vmov	r0, s0
 80067dc:	4b53      	ldr	r3, [pc, #332]	; (800692c <atan+0x324>)
 80067de:	2200      	movs	r2, #0
 80067e0:	4629      	mov	r1, r5
 80067e2:	f7f9 fd49 	bl	8000278 <__aeabi_dsub>
 80067e6:	4b51      	ldr	r3, [pc, #324]	; (800692c <atan+0x324>)
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	2200      	movs	r2, #0
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7f9 fd43 	bl	800027c <__adddf3>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4630      	mov	r0, r6
 80067fc:	4639      	mov	r1, r7
 80067fe:	f7fa f81d 	bl	800083c <__aeabi_ddiv>
 8006802:	f04f 0a01 	mov.w	sl, #1
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
 800680a:	e764      	b.n	80066d6 <atan+0xce>
 800680c:	4b49      	ldr	r3, [pc, #292]	; (8006934 <atan+0x32c>)
 800680e:	429e      	cmp	r6, r3
 8006810:	da1d      	bge.n	800684e <atan+0x246>
 8006812:	ee10 0a10 	vmov	r0, s0
 8006816:	4b48      	ldr	r3, [pc, #288]	; (8006938 <atan+0x330>)
 8006818:	2200      	movs	r2, #0
 800681a:	4629      	mov	r1, r5
 800681c:	f7f9 fd2c 	bl	8000278 <__aeabi_dsub>
 8006820:	4b45      	ldr	r3, [pc, #276]	; (8006938 <atan+0x330>)
 8006822:	4606      	mov	r6, r0
 8006824:	460f      	mov	r7, r1
 8006826:	2200      	movs	r2, #0
 8006828:	4620      	mov	r0, r4
 800682a:	4629      	mov	r1, r5
 800682c:	f7f9 fedc 	bl	80005e8 <__aeabi_dmul>
 8006830:	4b3e      	ldr	r3, [pc, #248]	; (800692c <atan+0x324>)
 8006832:	2200      	movs	r2, #0
 8006834:	f7f9 fd22 	bl	800027c <__adddf3>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7f9 fffc 	bl	800083c <__aeabi_ddiv>
 8006844:	f04f 0a02 	mov.w	sl, #2
 8006848:	4604      	mov	r4, r0
 800684a:	460d      	mov	r5, r1
 800684c:	e743      	b.n	80066d6 <atan+0xce>
 800684e:	462b      	mov	r3, r5
 8006850:	ee10 2a10 	vmov	r2, s0
 8006854:	4939      	ldr	r1, [pc, #228]	; (800693c <atan+0x334>)
 8006856:	2000      	movs	r0, #0
 8006858:	f7f9 fff0 	bl	800083c <__aeabi_ddiv>
 800685c:	f04f 0a03 	mov.w	sl, #3
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	e737      	b.n	80066d6 <atan+0xce>
 8006866:	4b36      	ldr	r3, [pc, #216]	; (8006940 <atan+0x338>)
 8006868:	4e36      	ldr	r6, [pc, #216]	; (8006944 <atan+0x33c>)
 800686a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800686e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006872:	e9da 2300 	ldrd	r2, r3, [sl]
 8006876:	f7f9 fcff 	bl	8000278 <__aeabi_dsub>
 800687a:	4622      	mov	r2, r4
 800687c:	462b      	mov	r3, r5
 800687e:	f7f9 fcfb 	bl	8000278 <__aeabi_dsub>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	e9d6 0100 	ldrd	r0, r1, [r6]
 800688a:	f7f9 fcf5 	bl	8000278 <__aeabi_dsub>
 800688e:	f1bb 0f00 	cmp.w	fp, #0
 8006892:	4604      	mov	r4, r0
 8006894:	460d      	mov	r5, r1
 8006896:	f6bf aed6 	bge.w	8006646 <atan+0x3e>
 800689a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800689e:	461d      	mov	r5, r3
 80068a0:	e6d1      	b.n	8006646 <atan+0x3e>
 80068a2:	a51d      	add	r5, pc, #116	; (adr r5, 8006918 <atan+0x310>)
 80068a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80068a8:	e6cd      	b.n	8006646 <atan+0x3e>
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w
 80068b0:	54442d18 	.word	0x54442d18
 80068b4:	bff921fb 	.word	0xbff921fb
 80068b8:	8800759c 	.word	0x8800759c
 80068bc:	7e37e43c 	.word	0x7e37e43c
 80068c0:	e322da11 	.word	0xe322da11
 80068c4:	3f90ad3a 	.word	0x3f90ad3a
 80068c8:	24760deb 	.word	0x24760deb
 80068cc:	3fa97b4b 	.word	0x3fa97b4b
 80068d0:	a0d03d51 	.word	0xa0d03d51
 80068d4:	3fb10d66 	.word	0x3fb10d66
 80068d8:	c54c206e 	.word	0xc54c206e
 80068dc:	3fb745cd 	.word	0x3fb745cd
 80068e0:	920083ff 	.word	0x920083ff
 80068e4:	3fc24924 	.word	0x3fc24924
 80068e8:	5555550d 	.word	0x5555550d
 80068ec:	3fd55555 	.word	0x3fd55555
 80068f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80068f4:	bfa2b444 	.word	0xbfa2b444
 80068f8:	52defd9a 	.word	0x52defd9a
 80068fc:	3fadde2d 	.word	0x3fadde2d
 8006900:	af749a6d 	.word	0xaf749a6d
 8006904:	3fb3b0f2 	.word	0x3fb3b0f2
 8006908:	fe231671 	.word	0xfe231671
 800690c:	3fbc71c6 	.word	0x3fbc71c6
 8006910:	9998ebc4 	.word	0x9998ebc4
 8006914:	3fc99999 	.word	0x3fc99999
 8006918:	54442d18 	.word	0x54442d18
 800691c:	3ff921fb 	.word	0x3ff921fb
 8006920:	440fffff 	.word	0x440fffff
 8006924:	7ff00000 	.word	0x7ff00000
 8006928:	3fdbffff 	.word	0x3fdbffff
 800692c:	3ff00000 	.word	0x3ff00000
 8006930:	3ff2ffff 	.word	0x3ff2ffff
 8006934:	40038000 	.word	0x40038000
 8006938:	3ff80000 	.word	0x3ff80000
 800693c:	bff00000 	.word	0xbff00000
 8006940:	08006ba0 	.word	0x08006ba0
 8006944:	08006b80 	.word	0x08006b80

08006948 <fabs>:
 8006948:	ec51 0b10 	vmov	r0, r1, d0
 800694c:	ee10 2a10 	vmov	r2, s0
 8006950:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006954:	ec43 2b10 	vmov	d0, r2, r3
 8006958:	4770      	bx	lr
	...

0800695c <_init>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr

08006968 <_fini>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	bf00      	nop
 800696c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696e:	bc08      	pop	{r3}
 8006970:	469e      	mov	lr, r3
 8006972:	4770      	bx	lr
