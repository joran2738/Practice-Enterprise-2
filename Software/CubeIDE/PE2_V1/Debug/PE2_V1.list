
PE2_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006234  08006234  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006234  08006234  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006234  08006234  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800623c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000078  080062b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080062b4  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b01  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c0  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00032f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00033d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001685c  00000000  00000000  00034a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012972  00000000  00000000  0004b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008578c  00000000  00000000  0005dc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e33a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c8  00000000  00000000  000e33f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060ac 	.word	0x080060ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080060ac 	.word	0x080060ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:
uint8_t key = 0;
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;

int _write(int file, char *ptr, int len) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d003      	beq.n	800028a <_write+0x1a>
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b02      	cmp	r3, #2
 8000286:	d015      	beq.n	80002b4 <_write+0x44>
 8000288:	e029      	b.n	80002de <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	b29a      	uxth	r2, r3
 800028e:	f04f 33ff 	mov.w	r3, #4294967295
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	481a      	ldr	r0, [pc, #104]	; (8000300 <_write+0x90>)
 8000296:	f004 fafd 	bl	8004894 <HAL_UART_Transmit>
 800029a:	4603      	mov	r3, r0
 800029c:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800029e:	7dfb      	ldrb	r3, [r7, #23]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d024      	beq.n	80002ee <_write+0x7e>
			errno = EIO;
 80002a4:	f004 fecc 	bl	8005040 <__errno>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2205      	movs	r2, #5
 80002ac:	601a      	str	r2, [r3, #0]
			return -1;
 80002ae:	f04f 33ff 	mov.w	r3, #4294967295
 80002b2:	e020      	b.n	80002f6 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295
 80002bc:	68b9      	ldr	r1, [r7, #8]
 80002be:	4810      	ldr	r0, [pc, #64]	; (8000300 <_write+0x90>)
 80002c0:	f004 fae8 	bl	8004894 <HAL_UART_Transmit>
 80002c4:	4603      	mov	r3, r0
 80002c6:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80002c8:	7dfb      	ldrb	r3, [r7, #23]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d011      	beq.n	80002f2 <_write+0x82>
			errno = EIO;
 80002ce:	f004 feb7 	bl	8005040 <__errno>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2205      	movs	r2, #5
 80002d6:	601a      	str	r2, [r3, #0]
			return -1;
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	e00b      	b.n	80002f6 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80002de:	f004 feaf 	bl	8005040 <__errno>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2209      	movs	r2, #9
 80002e6:	601a      	str	r2, [r3, #0]
        return -1;
 80002e8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ec:	e003      	b.n	80002f6 <_write+0x86>
        break;
 80002ee:	bf00      	nop
 80002f0:	e000      	b.n	80002f4 <_write+0x84>
        break;
 80002f2:	bf00      	nop
    }
    return len;
 80002f4:	687b      	ldr	r3, [r7, #4]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200001d4 	.word	0x200001d4

08000304 <write_MPU_mem>:
	else{
		printf("mem not read\r\n");
	}
}

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af04      	add	r7, sp, #16
 800030a:	4603      	mov	r3, r0
 800030c:	460a      	mov	r2, r1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	4613      	mov	r3, r2
 8000312:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	b29a      	uxth	r2, r3
 8000318:	2364      	movs	r3, #100	; 0x64
 800031a:	9302      	str	r3, [sp, #8]
 800031c:	2301      	movs	r3, #1
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	1dbb      	adds	r3, r7, #6
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2301      	movs	r3, #1
 8000326:	21d1      	movs	r1, #209	; 0xd1
 8000328:	4806      	ldr	r0, [pc, #24]	; (8000344 <write_MPU_mem+0x40>)
 800032a:	f001 fc53 	bl	8001bd4 <HAL_I2C_Mem_Write>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <write_MPU_mem+0x44>)
 8000336:	f004 ff3b 	bl	80051b0 <puts>
    }
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000094 	.word	0x20000094
 8000348:	080060d4 	.word	0x080060d4

0800034c <init_MPU>:

	angleX = wrap(0.98*(angleAccX + wrap(angleX + gx*dt - angleAccX,180)) + (1.0 - 0.98)*angleAccX,180);
	angleY = wrap(0.98*(angleAccY + wrap(angleY + sgZ*gy*dt - angleAccY, 90)) + (1.0 - 0.98)*angleAccY, 90);
	angleZ += gz*dt;
}
void init_MPU(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8000350:	2100      	movs	r1, #0
 8000352:	206b      	movs	r0, #107	; 0x6b
 8000354:	f7ff ffd6 	bl	8000304 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8000358:	2107      	movs	r1, #7
 800035a:	2019      	movs	r0, #25
 800035c:	f7ff ffd2 	bl	8000304 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8000360:	2100      	movs	r1, #0
 8000362:	201b      	movs	r0, #27
 8000364:	f7ff ffce 	bl	8000304 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 8000368:	2100      	movs	r1, #0
 800036a:	201c      	movs	r0, #28
 800036c:	f7ff ffca 	bl	8000304 <write_MPU_mem>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037a:	f000 ffb9 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037e:	f000 f8a7 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000382:	f000 f9d9 	bl	8000738 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000386:	f000 f8f9 	bl	800057c <MX_I2C2_Init>
  MX_SPI2_Init();
 800038a:	f000 f937 	bl	80005fc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800038e:	f000 f973 	bl	8000678 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000392:	f000 f9a1 	bl	80006d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8000396:	2364      	movs	r3, #100	; 0x64
 8000398:	2201      	movs	r2, #1
 800039a:	21d0      	movs	r1, #208	; 0xd0
 800039c:	4849      	ldr	r0, [pc, #292]	; (80004c4 <main+0x150>)
 800039e:	f001 fd2d 	bl	8001dfc <HAL_I2C_IsDeviceReady>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d105      	bne.n	80003b4 <main+0x40>
	  printf("succesfully communicated\n\r");
 80003a8:	4847      	ldr	r0, [pc, #284]	; (80004c8 <main+0x154>)
 80003aa:	f004 fe7b 	bl	80050a4 <iprintf>
	  init_MPU();
 80003ae:	f7ff ffcd 	bl	800034c <init_MPU>
 80003b2:	e002      	b.n	80003ba <main+0x46>
  }
  else{
	  printf("i2C not found\n\r");
 80003b4:	4845      	ldr	r0, [pc, #276]	; (80004cc <main+0x158>)
 80003b6:	f004 fe75 	bl	80050a4 <iprintf>
  }
  float factor = 1;
 80003ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80003be:	607b      	str	r3, [r7, #4]

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fdcf 	bl	8000f64 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 ff4c 	bl	8001264 <Displ_CLS>



  for (int y = 0; y < 10; y++) {
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
 80003d0:	e054      	b.n	800047c <main+0x108>
      for (int x = 0; x < 10; x++) {
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
 80003d6:	e04b      	b.n	8000470 <main+0xfc>
          for (int j = 0; j < 10; j++) {
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e042      	b.n	8000464 <main+0xf0>
              for (int i = 0; i < 32; i++) {
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
 80003e2:	e039      	b.n	8000458 <main+0xe4>
                  if (i < 2 || j < 2) {
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	dd02      	ble.n	80003f0 <main+0x7c>
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	dc18      	bgt.n	8000422 <main+0xae>
                      Displ_Pixel((x*32) + i, (y*10) + j, D_GREEN);
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	015b      	lsls	r3, r3, #5
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4413      	add	r3, r2
 80003fe:	b298      	uxth	r0, r3
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	b29b      	uxth	r3, r3
 8000404:	461a      	mov	r2, r3
 8000406:	0092      	lsls	r2, r2, #2
 8000408:	4413      	add	r3, r2
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	b29a      	uxth	r2, r3
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	b29b      	uxth	r3, r3
 8000412:	4413      	add	r3, r2
 8000414:	b29b      	uxth	r3, r3
 8000416:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800041a:	4619      	mov	r1, r3
 800041c:	f000 fefc 	bl	8001218 <Displ_Pixel>
 8000420:	e017      	b.n	8000452 <main+0xde>
                  } else {
                      Displ_Pixel((x*32) + i, (y*10) + j, GREEN);
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	b29b      	uxth	r3, r3
 8000426:	015b      	lsls	r3, r3, #5
 8000428:	b29a      	uxth	r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	b29b      	uxth	r3, r3
 800042e:	4413      	add	r3, r2
 8000430:	b298      	uxth	r0, r3
 8000432:	69fb      	ldr	r3, [r7, #28]
 8000434:	b29b      	uxth	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	0092      	lsls	r2, r2, #2
 800043a:	4413      	add	r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	b29a      	uxth	r2, r3
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	b29b      	uxth	r3, r3
 8000444:	4413      	add	r3, r2
 8000446:	b29b      	uxth	r3, r3
 8000448:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800044c:	4619      	mov	r1, r3
 800044e:	f000 fee3 	bl	8001218 <Displ_Pixel>
              for (int i = 0; i < 32; i++) {
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	3301      	adds	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	2b1f      	cmp	r3, #31
 800045c:	ddc2      	ble.n	80003e4 <main+0x70>
          for (int j = 0; j < 10; j++) {
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	3301      	adds	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	2b09      	cmp	r3, #9
 8000468:	ddb9      	ble.n	80003de <main+0x6a>
      for (int x = 0; x < 10; x++) {
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	3301      	adds	r3, #1
 800046e:	61bb      	str	r3, [r7, #24]
 8000470:	69bb      	ldr	r3, [r7, #24]
 8000472:	2b09      	cmp	r3, #9
 8000474:	ddb0      	ble.n	80003d8 <main+0x64>
  for (int y = 0; y < 10; y++) {
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	3301      	adds	r3, #1
 800047a:	61fb      	str	r3, [r7, #28]
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	2b09      	cmp	r3, #9
 8000480:	dda7      	ble.n	80003d2 <main+0x5e>
          }
      }

  }

  for (int j = 0; j < 3; j++) {
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	e018      	b.n	80004ba <main+0x146>
      for (int i = 0; i < 90; i++) {
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	e00f      	b.n	80004ae <main+0x13a>
          Displ_Pixel((320/2) - 45 + i, 240 - 5 + j, RED);
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	b29b      	uxth	r3, r3
 8000492:	3373      	adds	r3, #115	; 0x73
 8000494:	b298      	uxth	r0, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	b29b      	uxth	r3, r3
 800049a:	33eb      	adds	r3, #235	; 0xeb
 800049c:	b29b      	uxth	r3, r3
 800049e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80004a2:	4619      	mov	r1, r3
 80004a4:	f000 feb8 	bl	8001218 <Displ_Pixel>
      for (int i = 0; i < 90; i++) {
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	2b59      	cmp	r3, #89	; 0x59
 80004b2:	ddec      	ble.n	800048e <main+0x11a>
  for (int j = 0; j < 3; j++) {
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	dde3      	ble.n	8000488 <main+0x114>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <main+0x14c>
 80004c2:	bf00      	nop
 80004c4:	20000094 	.word	0x20000094
 80004c8:	080060e8 	.word	0x080060e8
 80004cc:	08006104 	.word	0x08006104

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09c      	sub	sp, #112	; 0x70
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f004 fdd8 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fdca 	bl	8005094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000500:	2302      	movs	r3, #2
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000504:	2301      	movs	r3, #1
 8000506:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000508:	2310      	movs	r3, #16
 800050a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000510:	2300      	movs	r3, #0
 8000512:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000514:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000518:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f872 	bl	8002608 <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800052a:	f000 f9e5 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	230f      	movs	r3, #15
 8000530:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000532:	2302      	movs	r3, #2
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000544:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f003 f89a 	bl	8003684 <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000556:	f000 f9cf 	bl	80008f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800055a:	2340      	movs	r3, #64	; 0x40
 800055c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fac3 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000570:	f000 f9c2 	bl	80008f8 <Error_Handler>
  }
}
 8000574:	bf00      	nop
 8000576:	3770      	adds	r7, #112	; 0x70
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_I2C2_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_I2C2_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_I2C2_Init+0x74>)
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <MX_I2C2_Init+0x7c>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_I2C2_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_I2C2_Init+0x74>)
 8000594:	2201      	movs	r2, #1
 8000596:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_I2C2_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_I2C2_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_I2C2_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_I2C2_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_I2C2_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <MX_I2C2_Init+0x74>)
 80005b8:	f001 fa7c 	bl	8001ab4 <HAL_I2C_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005c2:	f000 f999 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <MX_I2C2_Init+0x74>)
 80005ca:	f001 ff85 	bl	80024d8 <HAL_I2CEx_ConfigAnalogFilter>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80005d4:	f000 f990 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005d8:	2100      	movs	r1, #0
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_I2C2_Init+0x74>)
 80005dc:	f001 ffc7 	bl	800256e <HAL_I2CEx_ConfigDigitalFilter>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 f987 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000094 	.word	0x20000094
 80005f4:	40005800 	.word	0x40005800
 80005f8:	2000090e 	.word	0x2000090e

080005fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_SPI2_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_SPI2_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_SPI2_Init+0x74>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI2_Init+0x74>)
 8000616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800061a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_SPI2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI2_Init+0x74>)
 800062a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI2_Init+0x74>)
 8000632:	2208      	movs	r2, #8
 8000634:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI2_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SPI2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI2_Init+0x74>)
 800064a:	2207      	movs	r2, #7
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SPI2_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI2_Init+0x74>)
 8000656:	2208      	movs	r2, #8
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_SPI2_Init+0x74>)
 800065c:	f003 fbcc 	bl	8003df8 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 f947 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000e8 	.word	0x200000e8
 8000674:	40003800 	.word	0x40003800

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	f004 f89c 	bl	80047f8 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f917 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000014c 	.word	0x2000014c
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USART3_UART_Init+0x58>)
 80006de:	4a15      	ldr	r2, [pc, #84]	; (8000734 <MX_USART3_UART_Init+0x5c>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_USART3_UART_Init+0x58>)
 80006e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART3_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_USART3_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART3_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART3_UART_Init+0x58>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART3_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART3_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART3_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART3_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART3_UART_Init+0x58>)
 800071c:	f004 f86c 	bl	80047f8 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000726:	f000 f8e7 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001d4 	.word	0x200001d4
 8000734:	40004800 	.word	0x40004800

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <MX_GPIO_Init+0x130>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a45      	ldr	r2, [pc, #276]	; (8000868 <MX_GPIO_Init+0x130>)
 8000754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b43      	ldr	r3, [pc, #268]	; (8000868 <MX_GPIO_Init+0x130>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	4b40      	ldr	r3, [pc, #256]	; (8000868 <MX_GPIO_Init+0x130>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a3f      	ldr	r2, [pc, #252]	; (8000868 <MX_GPIO_Init+0x130>)
 800076c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <MX_GPIO_Init+0x130>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_GPIO_Init+0x130>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a39      	ldr	r2, [pc, #228]	; (8000868 <MX_GPIO_Init+0x130>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_GPIO_Init+0x130>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <MX_GPIO_Init+0x130>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a33      	ldr	r2, [pc, #204]	; (8000868 <MX_GPIO_Init+0x130>)
 800079c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <MX_GPIO_Init+0x130>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	482d      	ldr	r0, [pc, #180]	; (800086c <MX_GPIO_Init+0x134>)
 80007b6:	f001 f94d 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f001 f946 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 80007c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4824      	ldr	r0, [pc, #144]	; (8000870 <MX_GPIO_Init+0x138>)
 80007e0:	f000 ffae 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 ffa0 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0x134>)
 800081a:	f000 ff91 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 800081e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 ff81 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2006      	movs	r0, #6
 8000844:	f000 feb9 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000848:	2006      	movs	r0, #6
 800084a:	f000 fed2 	bl	80015f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2028      	movs	r0, #40	; 0x28
 8000854:	f000 feb1 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000858:	2028      	movs	r0, #40	; 0x28
 800085a:	f000 feca 	bl	80015f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400
 8000870:	48000800 	.word	0x48000800

08000874 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	printf("interupt!\r\n");
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000880:	f004 fc96 	bl	80051b0 <puts>
	if(GPIO_Pin == LEFT_Pin){
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800088a:	d106      	bne.n	800089a <HAL_GPIO_EXTI_Callback+0x26>
		key = left;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x70>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
		printf("left clicked\r\n");
 8000892:	4815      	ldr	r0, [pc, #84]	; (80008e8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000894:	f004 fc8c 	bl	80051b0 <puts>
	}
	else if(GPIO_Pin == MIDDLE_Pin){
		key = down;
		printf("down clicked\r\n");
	}
}
 8000898:	e01e      	b.n	80008d8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == TOP_Pin){
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a0:	d106      	bne.n	80008b0 <HAL_GPIO_EXTI_Callback+0x3c>
		key = up;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x70>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	701a      	strb	r2, [r3, #0]
		printf("up clicked\r\n");
 80008a8:	4810      	ldr	r0, [pc, #64]	; (80008ec <HAL_GPIO_EXTI_Callback+0x78>)
 80008aa:	f004 fc81 	bl	80051b0 <puts>
}
 80008ae:	e013      	b.n	80008d8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == RIGHT_Pin){
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008b6:	d106      	bne.n	80008c6 <HAL_GPIO_EXTI_Callback+0x52>
		key = right;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x70>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	701a      	strb	r2, [r3, #0]
		printf("right clicked\r\n");
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008c0:	f004 fc76 	bl	80051b0 <puts>
}
 80008c4:	e008      	b.n	80008d8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == MIDDLE_Pin){
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d105      	bne.n	80008d8 <HAL_GPIO_EXTI_Callback+0x64>
		key = down;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x70>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	701a      	strb	r2, [r3, #0]
		printf("down clicked\r\n");
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80008d4:	f004 fc6c 	bl	80051b0 <puts>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08006114 	.word	0x08006114
 80008e4:	2000025c 	.word	0x2000025c
 80008e8:	08006120 	.word	0x08006120
 80008ec:	08006130 	.word	0x08006130
 80008f0:	0800613c 	.word	0x0800613c
 80008f4:	0800614c 	.word	0x0800614c

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x44>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_MspInit+0x44>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x44>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x44>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x44>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <HAL_I2C_MspInit+0x7c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d127      	bne.n	80009be <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_I2C_MspInit+0x80>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <HAL_I2C_MspInit+0x80>)
 8000974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_I2C_MspInit+0x80>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000986:	2303      	movs	r3, #3
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098a:	2312      	movs	r3, #18
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098e:	2301      	movs	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000996:	2304      	movs	r3, #4
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <HAL_I2C_MspInit+0x84>)
 80009a2:	f000 fecd 	bl	8001740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_I2C_MspInit+0x80>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_I2C_MspInit+0x80>)
 80009ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b0:	61d3      	str	r3, [r2, #28]
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_I2C_MspInit+0x80>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40005800 	.word	0x40005800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48001400 	.word	0x48001400

080009d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_SPI_MspInit+0x7c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d128      	bne.n	8000a48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_SPI_MspInit+0x80>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <HAL_SPI_MspInit+0x80>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_SPI_MspInit+0x80>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_SPI_MspInit+0x80>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_SPI_MspInit+0x80>)
 8000a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_SPI_MspInit+0x80>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8000a26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_SPI_MspInit+0x84>)
 8000a44:	f000 fe7c 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40003800 	.word	0x40003800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000400 	.word	0x48000400

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <HAL_UART_MspInit+0xdc>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d129      	bne.n	8000ad2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fe38 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ad0:	e02d      	b.n	8000b2e <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <HAL_UART_MspInit+0xe4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d128      	bne.n	8000b2e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae6:	61d3      	str	r3, [r2, #28]
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afe:	6153      	str	r3, [r2, #20]
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0xe0>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_UART_MspInit+0xe8>)
 8000b2a:	f000 fe09 	bl	8001740 <HAL_GPIO_Init>
}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	; 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40004800 	.word	0x40004800
 8000b44:	48000400 	.word	0x48000400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 fbf2 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 ff6f 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8000bae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bb2:	f000 ff67 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8000bb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bba:	f000 ff63 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8000bbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bc2:	f000 ff5f 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e00a      	b.n	8000bf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bdc:	f3af 8000 	nop.w
 8000be0:	4601      	mov	r1, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	60ba      	str	r2, [r7, #8]
 8000be8:	b2ca      	uxtb	r2, r1
 8000bea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dbf0      	blt.n	8000bdc <_read+0x12>
  }

  return len;
 8000bfa:	687b      	ldr	r3, [r7, #4]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_isatty>:

int _isatty(int file)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f004 f9d0 	bl	8005040 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20004000 	.word	0x20004000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000260 	.word	0x20000260
 8000cd4:	200002a8 	.word	0x200002a8

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8000d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fe8c 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d017      	beq.n	8000d42 <Displ_Select+0x46>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <Displ_Select+0x4c>)
 8000d1a:	f000 fe9b 	bl	8001a54 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <Displ_Select+0x50>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	490a      	ldr	r1, [pc, #40]	; (8000d4c <Displ_Select+0x50>)
 8000d24:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8000d28:	4013      	ands	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <Displ_Select+0x50>)
 8000d2e:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <Displ_Select+0x50>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f000 fe89 	bl	8001a54 <HAL_GPIO_WritePin>
		}
	}
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	40003800 	.word	0x40003800

08000d50 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6039      	str	r1, [r7, #0]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	460b      	mov	r3, r1
 8000d62:	80bb      	strh	r3, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8000d68:	bf00      	nop
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <Displ_Transmit+0xa8>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0fa      	beq.n	8000d6a <Displ_Transmit+0x1a>

	Displ_Select();
 8000d74:	f7ff ffc2 	bl	8000cfc <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f000 fe66 	bl	8001a54 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d016      	beq.n	8000dbc <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e00b      	b.n	8000db4 <Displ_Transmit+0x64>
			*data32=__REV16(*data32);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	ba5b      	rev16	r3, r3
 8000da6:	60bb      	str	r3, [r7, #8]
  return result;
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3304      	adds	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d3ef      	bcc.n	8000d9c <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	2b13      	cmp	r3, #19
 8000dc0:	d80d      	bhi.n	8000dde <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <Displ_Transmit+0xa8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8000dc8:	88ba      	ldrh	r2, [r7, #4]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <Displ_Transmit+0xac>)
 8000dd2:	f003 f8bc 	bl	8003f4e <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <Displ_Transmit+0xa8>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8000ddc:	e008      	b.n	8000df0 <Displ_Transmit+0xa0>
			Displ_SpiAvailable=0;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <Displ_Transmit+0xa8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	461a      	mov	r2, r3
 8000de8:	6839      	ldr	r1, [r7, #0]
 8000dea:	4804      	ldr	r0, [pc, #16]	; (8000dfc <Displ_Transmit+0xac>)
 8000dec:	f003 fa24 	bl	8004238 <HAL_SPI_Transmit_DMA>
	}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	200000e8 	.word	0x200000e8

08000e00 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8000e0a:	1df9      	adds	r1, r7, #7
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff ff9d 	bl	8000d50 <Displ_Transmit>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff ff88 	bl	8000d50 <Displ_Transmit>
 8000e40:	e000      	b.n	8000e44 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8000e42:	bf00      	nop
}
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	Displ_Select();
 8000e50:	f7ff ff54 	bl	8000cfc <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f000 fdf9 	bl	8001a54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 faaa 	bl	80013bc <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f000 fdef 	bl	8001a54 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000e76:	2096      	movs	r0, #150	; 0x96
 8000e78:	f000 faa0 	bl	80013bc <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8000e7c:	203a      	movs	r0, #58	; 0x3a
 8000e7e:	f7ff ffbf 	bl	8000e00 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8000e82:	2200      	movs	r2, #0
 8000e84:	2101      	movs	r1, #1
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <ILI9XXX_Init+0x7c>)
 8000e88:	f7ff ffc9 	bl	8000e1e <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8000e8c:	20b0      	movs	r0, #176	; 0xb0
 8000e8e:	f7ff ffb7 	bl	8000e00 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <ILI9XXX_Init+0x80>)
 8000e98:	f7ff ffc1 	bl	8000e1e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8000e9c:	20b0      	movs	r0, #176	; 0xb0
 8000e9e:	f7ff ffaf 	bl	8000e00 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <ILI9XXX_Init+0x80>)
 8000ea8:	f7ff ffb9 	bl	8000e1e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8000eac:	2011      	movs	r0, #17
 8000eae:	f7ff ffa7 	bl	8000e00 <Displ_WriteCommand>
	HAL_Delay(120);
 8000eb2:	2078      	movs	r0, #120	; 0x78
 8000eb4:	f000 fa82 	bl	80013bc <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8000eb8:	2029      	movs	r0, #41	; 0x29
 8000eba:	f7ff ffa1 	bl	8000e00 <Displ_WriteCommand>
	HAL_Delay(5);
 8000ebe:	2005      	movs	r0, #5
 8000ec0:	f000 fa7c 	bl	80013bc <HAL_Delay>

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	0800615c 	.word	0x0800615c
 8000ecc:	08006160 	.word	0x08006160

08000ed0 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	80fb      	strh	r3, [r7, #6]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80bb      	strh	r3, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	807b      	strh	r3, [r7, #2]
 8000eea:	4613      	mov	r3, r2
 8000eec:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	061a      	lsls	r2, r3, #24
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000efa:	431a      	orrs	r2, r3
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	0a12      	lsrs	r2, r2, #8
 8000f08:	b292      	uxth	r2, r2
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <Displ_SetAddressWindow+0x90>)
 8000f0e:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8000f10:	202a      	movs	r0, #42	; 0x2a
 8000f12:	f7ff ff75 	bl	8000e00 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <Displ_SetAddressWindow+0x90>)
 8000f1c:	f7ff ff7f 	bl	8000e1e <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8000f20:	883b      	ldrh	r3, [r7, #0]
 8000f22:	061a      	lsls	r2, r3, #24
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	88ba      	ldrh	r2, [r7, #4]
 8000f38:	0a12      	lsrs	r2, r2, #8
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <Displ_SetAddressWindow+0x90>)
 8000f40:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8000f42:	202b      	movs	r0, #43	; 0x2b
 8000f44:	f7ff ff5c 	bl	8000e00 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <Displ_SetAddressWindow+0x90>)
 8000f4e:	f7ff ff66 	bl	8000e1e <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8000f52:	202c      	movs	r0, #44	; 0x2c
 8000f54:	f7ff ff54 	bl	8000e00 <Displ_WriteCommand>
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	2000028c 	.word	0x2000028c

08000f64 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f000 fd6c 	bl	8001a54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <Displ_Init+0x38>)
 8000f84:	f000 fd66 	bl	8001a54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8000f88:	f7ff ff60 	bl	8000e4c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f806 	bl	8000fa0 <Displ_Orientation>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	48000400 	.word	0x48000400

08000fa0 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d837      	bhi.n	8001020 <Displ_Orientation+0x80>
 8000fb0:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <Displ_Orientation+0x18>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fdf 	.word	0x08000fdf
 8000fc0:	08000ff5 	.word	0x08000ff5
 8000fc4:	0800100b 	.word	0x0800100b
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <Displ_Orientation+0xa0>)
 8000fca:	2288      	movs	r2, #136	; 0x88
 8000fcc:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <Displ_Orientation+0xa4>)
 8000fd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fd4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <Displ_Orientation+0xa8>)
 8000fd8:	22f0      	movs	r2, #240	; 0xf0
 8000fda:	801a      	strh	r2, [r3, #0]
			break;
 8000fdc:	e020      	b.n	8001020 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <Displ_Orientation+0xa0>)
 8000fe0:	22e8      	movs	r2, #232	; 0xe8
 8000fe2:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <Displ_Orientation+0xa4>)
 8000fe6:	22f0      	movs	r2, #240	; 0xf0
 8000fe8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <Displ_Orientation+0xa8>)
 8000fec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ff0:	801a      	strh	r2, [r3, #0]
			break;
 8000ff2:	e015      	b.n	8001020 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <Displ_Orientation+0xa0>)
 8000ff6:	2248      	movs	r2, #72	; 0x48
 8000ff8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <Displ_Orientation+0xa4>)
 8000ffc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001000:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <Displ_Orientation+0xa8>)
 8001004:	22f0      	movs	r2, #240	; 0xf0
 8001006:	801a      	strh	r2, [r3, #0]
			break;
 8001008:	e00a      	b.n	8001020 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <Displ_Orientation+0xa0>)
 800100c:	2228      	movs	r2, #40	; 0x28
 800100e:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <Displ_Orientation+0xa4>)
 8001012:	22f0      	movs	r2, #240	; 0xf0
 8001014:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <Displ_Orientation+0xa8>)
 8001018:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800101c:	801a      	strh	r2, [r3, #0]
			break;
 800101e:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8001020:	2036      	movs	r0, #54	; 0x36
 8001022:	f7ff feed 	bl	8000e00 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <Displ_Orientation+0xa0>)
 800102c:	f7ff fef7 	bl	8000e1e <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <Displ_Orientation+0xac>)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	7013      	strb	r3, [r2, #0]
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000290 	.word	0x20000290
 8001044:	20000268 	.word	0x20000268
 8001048:	20000266 	.word	0x20000266
 800104c:	20000264 	.word	0x20000264

08001050 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <HAL_SPI_ErrorCallback+0x24>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d102      	bne.n	8001068 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_SPI_ErrorCallback+0x28>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
	}
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40003800 	.word	0x40003800
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <HAL_SPI_TxCpltCallback+0x24>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d102      	bne.n	8001094 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_SPI_TxCpltCallback+0x28>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40003800 	.word	0x40003800
 80010a4:	20000004 	.word	0x20000004

080010a8 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4604      	mov	r4, r0
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4623      	mov	r3, r4
 80010b8:	80fb      	strh	r3, [r7, #6]
 80010ba:	4603      	mov	r3, r0
 80010bc:	80bb      	strh	r3, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	807b      	strh	r3, [r7, #2]
 80010c2:	4613      	mov	r3, r2
 80010c4:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <Displ_FillArea+0x15c>)
 80010ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010ce:	4293      	cmp	r3, r2
 80010d0:	f280 8093 	bge.w	80011fa <Displ_FillArea+0x152>
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <Displ_FillArea+0x160>)
 80010d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010dc:	4293      	cmp	r3, r2
 80010de:	f280 808c 	bge.w	80011fa <Displ_FillArea+0x152>
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8088 	beq.w	80011fa <Displ_FillArea+0x152>
 80010ea:	883b      	ldrh	r3, [r7, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8084 	beq.w	80011fa <Displ_FillArea+0x152>

	x1=x + w - 1;
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	4413      	add	r3, r2
 80010f8:	3b01      	subs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <Displ_FillArea+0x15c>)
 80010fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001102:	461a      	mov	r2, r3
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	4293      	cmp	r3, r2
 8001108:	d903      	bls.n	8001112 <Displ_FillArea+0x6a>
		x1=_width;
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <Displ_FillArea+0x15c>)
 800110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001110:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8001112:	88ba      	ldrh	r2, [r7, #4]
 8001114:	883b      	ldrh	r3, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	3b01      	subs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <Displ_FillArea+0x160>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	461a      	mov	r2, r3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	4293      	cmp	r3, r2
 8001128:	d903      	bls.n	8001132 <Displ_FillArea+0x8a>
		y1=_height;
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <Displ_FillArea+0x160>)
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8001132:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b29b      	uxth	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	431a      	orrs	r2, r3
 8001140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	3301      	adds	r3, #1
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	6a39      	ldr	r1, [r7, #32]
 8001154:	1a8a      	subs	r2, r1, r2
 8001156:	3201      	adds	r2, #1
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <Displ_FillArea+0x164>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b07      	cmp	r3, #7
 8001168:	d804      	bhi.n	8001174 <Displ_FillArea+0xcc>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	085b      	lsrs	r3, r3, #1
 800116e:	3301      	adds	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	e001      	b.n	8001178 <Displ_FillArea+0xd0>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8001174:	2304      	movs	r3, #4
 8001176:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
 800117c:	e007      	b.n	800118e <Displ_FillArea+0xe6>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	1d1a      	adds	r2, r3, #4
 8001182:	617a      	str	r2, [r7, #20]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	3301      	adds	r3, #1
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3f3      	bcc.n	800117e <Displ_FillArea+0xd6>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	b29a      	uxth	r2, r3
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	b29b      	uxth	r3, r3
 800119e:	88b9      	ldrh	r1, [r7, #4]
 80011a0:	88f8      	ldrh	r0, [r7, #6]
 80011a2:	f7ff fe95 	bl	8000ed0 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
 80011b0:	e009      	b.n	80011c6 <Displ_FillArea+0x11e>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <Displ_FillArea+0x164>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2200      	movs	r2, #0
 80011b8:	2110      	movs	r1, #16
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fe2f 	bl	8000e1e <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	3301      	adds	r3, #1
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
 80011c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3f1      	bcc.n	80011b2 <Displ_FillArea+0x10a>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <Displ_FillArea+0x164>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	005a      	lsls	r2, r3, #1
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fe1d 	bl	8000e1e <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <Displ_FillArea+0x164>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <Displ_FillArea+0x168>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <Displ_FillArea+0x14a>
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <Displ_FillArea+0x16c>)
 80011f0:	e000      	b.n	80011f4 <Displ_FillArea+0x14c>
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <Displ_FillArea+0x168>)
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <Displ_FillArea+0x164>)
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	e000      	b.n	80011fc <Displ_FillArea+0x154>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80011fa:	bf00      	nop

}
 80011fc:	372c      	adds	r7, #44	; 0x2c
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	bf00      	nop
 8001204:	20000266 	.word	0x20000266
 8001208:	20000268 	.word	0x20000268
 800120c:	20000008 	.word	0x20000008
 8001210:	2000026c 	.word	0x2000026c
 8001214:	2000027c 	.word	0x2000027c

08001218 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
 8001222:	460b      	mov	r3, r1
 8001224:	80bb      	strh	r3, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <Displ_Pixel+0x44>)
 800122e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001232:	4293      	cmp	r3, r2
 8001234:	da0e      	bge.n	8001254 <Displ_Pixel+0x3c>
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <Displ_Pixel+0x48>)
 800123a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800123e:	4293      	cmp	r3, r2
 8001240:	da08      	bge.n	8001254 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8001242:	88b9      	ldrh	r1, [r7, #4]
 8001244:	88f8      	ldrh	r0, [r7, #6]
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	2201      	movs	r2, #1
 800124e:	f7ff ff2b 	bl	80010a8 <Displ_FillArea>
 8001252:	e000      	b.n	8001256 <Displ_Pixel+0x3e>
        return;
 8001254:	bf00      	nop

}
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000266 	.word	0x20000266
 8001260:	20000268 	.word	0x20000268

08001264 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af02      	add	r7, sp, #8
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <Displ_CLS+0x30>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <Displ_CLS+0x34>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	b299      	uxth	r1, r3
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	460b      	mov	r3, r1
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ff0e 	bl	80010a8 <Displ_FillArea>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000266 	.word	0x20000266
 8001298:	20000268 	.word	0x20000268

0800129c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a0:	f7ff fd1a 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LoopForever+0xe>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <LoopForever+0x16>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f003 febf 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ce:	f7ff f851 	bl	8000374 <main>

080012d2 <LoopForever>:

LoopForever:
    b LoopForever
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012d4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012e0:	0800623c 	.word	0x0800623c
  ldr r2, =_sbss
 80012e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012e8:	200002a8 	.word	0x200002a8

080012ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f94f 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	200f      	movs	r0, #15
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fafa 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f967 	bl	800160e <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f92f 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20000010 	.word	0x20000010
 8001378:	2000000c 	.word	0x2000000c

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000010 	.word	0x20000010
 80013a0:	20000294 	.word	0x20000294

080013a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000294 	.word	0x20000294

080013bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000010 	.word	0x20000010

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_DMA_Start_IT+0x20>
 8001642:	2302      	movs	r3, #2
 8001644:	e04a      	b.n	80016dc <HAL_DMA_Start_IT+0xb6>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001654:	2b01      	cmp	r3, #1
 8001656:	d13a      	bne.n	80016ce <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f831 	bl	80016e4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 020e 	orr.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00f      	b.n	80016bc <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 020a 	orr.w	r2, r2, #10
 80016aa:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0204 	bic.w	r2, r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e005      	b.n	80016da <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80016da:	7dfb      	ldrb	r3, [r7, #23]
} 
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d108      	bne.n	8001724 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001722:	e007      	b.n	8001734 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174e:	e14e      	b.n	80019ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8140 	beq.w	80019e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d005      	beq.n	8001780 <HAL_GPIO_Init+0x40>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d017      	beq.n	800181e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d123      	bne.n	8001872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0203 	and.w	r2, r3, #3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 809a 	beq.w	80019e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018cc:	4a50      	ldr	r2, [pc, #320]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018f6:	d013      	beq.n	8001920 <HAL_GPIO_Init+0x1e0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a46      	ldr	r2, [pc, #280]	; (8001a14 <HAL_GPIO_Init+0x2d4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00d      	beq.n	800191c <HAL_GPIO_Init+0x1dc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a45      	ldr	r2, [pc, #276]	; (8001a18 <HAL_GPIO_Init+0x2d8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_Init+0x1d8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <HAL_GPIO_Init+0x2dc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d101      	bne.n	8001914 <HAL_GPIO_Init+0x1d4>
 8001910:	2303      	movs	r3, #3
 8001912:	e006      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001914:	2305      	movs	r3, #5
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001918:	2302      	movs	r3, #2
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001920:	2300      	movs	r3, #0
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001932:	4937      	ldr	r1, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001964:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800198e:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f aea9 	bne.w	8001750 <HAL_GPIO_Init+0x10>
  }
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	48000400 	.word	0x48000400
 8001a18:	48000800 	.word	0x48000800
 8001a1c:	48000c00 	.word	0x48000c00
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fee6 	bl	8000874 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e081      	b.n	8001bca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7fe ff36 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d104      	bne.n	8001b4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69d9      	ldr	r1, [r3, #28]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	817b      	strh	r3, [r7, #10]
 8001be6:	460b      	mov	r3, r1
 8001be8:	813b      	strh	r3, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	f040 80f9 	bne.w	8001dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x34>
 8001c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0ed      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Mem_Write+0x4e>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e0e6      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c2a:	f7ff fbbb 	bl	80013a4 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2319      	movs	r3, #25
 8001c36:	2201      	movs	r2, #1
 8001c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fa5f 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0d1      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2221      	movs	r2, #33	; 0x21
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a3a      	ldr	r2, [r7, #32]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c74:	88f8      	ldrh	r0, [r7, #6]
 8001c76:	893a      	ldrh	r2, [r7, #8]
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4603      	mov	r3, r0
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f9c3 	bl	8002010 <I2C_RequestMemoryWrite>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0a9      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d90e      	bls.n	8001cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	22ff      	movs	r2, #255	; 0xff
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fbd9 	bl	8002474 <I2C_TransferConfig>
 8001cc2:	e00f      	b.n	8001ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	8979      	ldrh	r1, [r7, #10]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fbc8 	bl	8002474 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fa58 	bl	800219e <I2C_WaitOnTXISFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e07b      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d034      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x1c8>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d130      	bne.n	8001d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	2200      	movs	r2, #0
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f9db 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e04d      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d90e      	bls.n	8001d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	22ff      	movs	r2, #255	; 0xff
 8001d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	8979      	ldrh	r1, [r7, #10]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fb7d 	bl	8002474 <I2C_TransferConfig>
 8001d7a:	e00f      	b.n	8001d9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	8979      	ldrh	r1, [r7, #10]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fb6c 	bl	8002474 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d19e      	bne.n	8001ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fa3e 	bl	800222c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e01a      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_I2C_Mem_Write+0x224>)
 8001dce:	400b      	ands	r3, r1
 8001dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	fe00e800 	.word	0xfe00e800

08001dfc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	f040 80f3 	bne.w	8002004 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0e9      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_I2C_IsDeviceReady+0x44>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0e2      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2224      	movs	r2, #36	; 0x24
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_I2C_IsDeviceReady+0x72>
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e6c:	e006      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x80>
 8001e6e:	897b      	ldrh	r3, [r7, #10]
 8001e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e78:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa8f 	bl	80013a4 <HAL_GetTick>
 8001e86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001eb4:	e034      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d01a      	beq.n	8001ef4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ebe:	f7ff fa71 	bl	80013a4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <HAL_I2C_IsDeviceReady+0xd8>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e088      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	bf0c      	ite	eq
 8001f02:	2301      	moveq	r3, #1
 8001f04:	2300      	movne	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f20:	7ffb      	ldrb	r3, [r7, #31]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d102      	bne.n	8001f2c <HAL_I2C_IsDeviceReady+0x130>
 8001f26:	7fbb      	ldrb	r3, [r7, #30]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0c4      	beq.n	8001eb6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d01a      	beq.n	8001f70 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	2120      	movs	r1, #32
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f8db 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e058      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e04a      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	2120      	movs	r1, #32
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f8c0 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e03d      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2210      	movs	r2, #16
 8001f90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2220      	movs	r2, #32
 8001f98:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d118      	bne.n	8001fd4 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fb0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2120      	movs	r1, #32
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f89f 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e01c      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	f63f af39 	bhi.w	8001e56 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002004:	2302      	movs	r3, #2
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	460b      	mov	r3, r1
 8002024:	813b      	strh	r3, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <I2C_RequestMemoryWrite+0xa4>)
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fa1b 	bl	8002474 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	69b9      	ldr	r1, [r7, #24]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f8ab 	bl	800219e <I2C_WaitOnTXISFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e02c      	b.n	80020ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002058:	893b      	ldrh	r3, [r7, #8]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
 8002062:	e015      	b.n	8002090 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002064:	893b      	ldrh	r3, [r7, #8]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29b      	uxth	r3, r3
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	69b9      	ldr	r1, [r7, #24]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f891 	bl	800219e <I2C_WaitOnTXISFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e012      	b.n	80020ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002086:	893b      	ldrh	r3, [r7, #8]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2200      	movs	r2, #0
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f830 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	80002000 	.word	0x80002000

080020b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d103      	bne.n	80020d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d007      	beq.n	80020f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	619a      	str	r2, [r3, #24]
  }
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002110:	e031      	b.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d02d      	beq.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211a:	f7ff f943 	bl	80013a4 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d122      	bne.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	429a      	cmp	r2, r3
 800214c:	d113      	bne.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4013      	ands	r3, r2
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	429a      	cmp	r2, r3
 8002184:	bf0c      	ite	eq
 8002186:	2301      	moveq	r3, #1
 8002188:	2300      	movne	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	429a      	cmp	r2, r3
 8002192:	d0be      	beq.n	8002112 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021aa:	e033      	b.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f87f 	bl	80022b4 <I2C_IsErrorOccurred>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e031      	b.n	8002224 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d025      	beq.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c8:	f7ff f8ec 	bl	80013a4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d302      	bcc.n	80021de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11a      	bne.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d013      	beq.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e007      	b.n	8002224 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d1c4      	bne.n	80021ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002238:	e02f      	b.n	800229a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f838 	bl	80022b4 <I2C_IsErrorOccurred>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e02d      	b.n	80022aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7ff f8a9 	bl	80013a4 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11a      	bne.n	800229a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d013      	beq.n	800229a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e007      	b.n	80022aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d1c8      	bne.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d068      	beq.n	80023b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022e8:	e049      	b.n	800237e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d045      	beq.n	800237e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7ff f857 	bl	80013a4 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_IsErrorOccurred+0x54>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d13a      	bne.n	800237e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800231a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232a:	d121      	bne.n	8002370 <I2C_IsErrorOccurred+0xbc>
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002332:	d01d      	beq.n	8002370 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b20      	cmp	r3, #32
 8002338:	d01a      	beq.n	8002370 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002348:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800234a:	f7ff f82b 	bl	80013a4 <HAL_GetTick>
 800234e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	e00e      	b.n	8002370 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002352:	f7ff f827 	bl	80013a4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b19      	cmp	r3, #25
 800235e:	d907      	bls.n	8002370 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800236e:	e006      	b.n	800237e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	d1e9      	bne.n	8002352 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b20      	cmp	r3, #32
 800238a:	d003      	beq.n	8002394 <I2C_IsErrorOccurred+0xe0>
 800238c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0aa      	beq.n	80022ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2220      	movs	r2, #32
 80023a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002418:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01c      	beq.n	8002462 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff fe45 	bl	80020b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <I2C_IsErrorOccurred+0x1bc>)
 800243a:	400b      	ands	r3, r1
 800243c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002466:	4618      	mov	r0, r3
 8002468:	3728      	adds	r7, #40	; 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	fe00e800 	.word	0xfe00e800

08002474 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	817b      	strh	r3, [r7, #10]
 8002482:	4613      	mov	r3, r2
 8002484:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002486:	897b      	ldrh	r3, [r7, #10]
 8002488:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800248c:	7a7b      	ldrb	r3, [r7, #9]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002494:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	4313      	orrs	r3, r2
 800249e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	0d5b      	lsrs	r3, r3, #21
 80024ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <I2C_TransferConfig+0x60>)
 80024b4:	430b      	orrs	r3, r1
 80024b6:	43db      	mvns	r3, r3
 80024b8:	ea02 0103 	and.w	r1, r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	03ff63ff 	.word	0x03ff63ff

080024d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d138      	bne.n	8002560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e032      	b.n	8002562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800252a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e000      	b.n	8002562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b20      	cmp	r3, #32
 8002582:	d139      	bne.n	80025f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258e:	2302      	movs	r3, #2
 8002590:	e033      	b.n	80025fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2224      	movs	r2, #36	; 0x24
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800260e:	af00      	add	r7, sp, #0
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f001 b823 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 817d 	beq.w	800293e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002644:	4bbc      	ldr	r3, [pc, #752]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002650:	4bb9      	ldr	r3, [pc, #740]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d15c      	bne.n	8002716 <HAL_RCC_OscConfig+0x10e>
 800265c:	4bb6      	ldr	r3, [pc, #728]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002668:	d155      	bne.n	8002716 <HAL_RCC_OscConfig+0x10e>
 800266a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800267e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_RCC_OscConfig+0x94>
 8002696:	4ba8      	ldr	r3, [pc, #672]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 800269c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026c4:	4b9c      	ldr	r3, [pc, #624]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 811f 	beq.w	800293c <HAL_RCC_OscConfig+0x334>
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8116 	bne.w	800293c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f000 bfaf 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x12e>
 8002728:	4b83      	ldr	r3, [pc, #524]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a82      	ldr	r2, [pc, #520]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e036      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x158>
 8002746:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7b      	ldr	r2, [pc, #492]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b79      	ldr	r3, [pc, #484]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a78      	ldr	r2, [pc, #480]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e021      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x184>
 8002772:	4b71      	ldr	r3, [pc, #452]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a70      	ldr	r2, [pc, #448]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6d      	ldr	r2, [pc, #436]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 800278c:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a69      	ldr	r2, [pc, #420]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a66      	ldr	r2, [pc, #408]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f023 020f 	bic.w	r2, r3, #15
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	495f      	ldr	r1, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d059      	beq.n	8002882 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fde9 	bl	80013a4 <HAL_GetTick>
 80027d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fde4 	bl	80013a4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	d902      	bls.n	80027ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	f000 bf43 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 80027ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002802:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x218>
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0x244>
 8002820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002824:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800283c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002850:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002854:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002860:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ab      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1d0>
 8002880:	e05d      	b.n	800293e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fd8f 	bl	80013a4 <HAL_GetTick>
 8002886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fd8a 	bl	80013a4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d902      	bls.n	80028a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	f000 bee9 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 80028a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2cc>
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e015      	b.n	8002900 <HAL_RCC_OscConfig+0x2f8>
 80028d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002904:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002908:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002914:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002918:	fab2 f282 	clz	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f042 0220 	orr.w	r2, r2, #32
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f002 021f 	and.w	r2, r2, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ab      	bne.n	800288c <HAL_RCC_OscConfig+0x284>
 8002934:	e003      	b.n	800293e <HAL_RCC_OscConfig+0x336>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 817d 	beq.w	8002c4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002954:	4ba6      	ldr	r3, [pc, #664]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002960:	4ba3      	ldr	r3, [pc, #652]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d172      	bne.n	8002a52 <HAL_RCC_OscConfig+0x44a>
 800296c:	4ba0      	ldr	r3, [pc, #640]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d16c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x44a>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800298a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3a0>
 80029a2:	4b93      	ldr	r3, [pc, #588]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e013      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c8>
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029ba:	2302      	movs	r3, #2
 80029bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029cc:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2202      	movs	r2, #2
 80029d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029da:	fa92 f2a2 	rbit	r2, r2
 80029de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f042 0220 	orr.w	r2, r2, #32
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f002 021f 	and.w	r2, r2, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f202 	lsl.w	r2, r1, r2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCC_OscConfig+0x410>
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f000 be2e 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b75      	ldr	r3, [pc, #468]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	21f8      	movs	r1, #248	; 0xf8
 8002a2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a36:	fa91 f1a1 	rbit	r1, r1
 8002a3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a42:	fab1 f181 	clz	r1, r1
 8002a46:	b2c9      	uxtb	r1, r1
 8002a48:	408b      	lsls	r3, r1
 8002a4a:	4969      	ldr	r1, [pc, #420]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a50:	e0fd      	b.n	8002c4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8088 	beq.w	8002b74 <HAL_RCC_OscConfig+0x56c>
 8002a64:	2301      	movs	r3, #1
 8002a66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fc88 	bl	80013a4 <HAL_GetTick>
 8002a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fc83 	bl	80013a4 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d902      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	f000 bde2 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ac2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4d8>
 8002ada:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	e013      	b.n	8002b08 <HAL_RCC_OscConfig+0x500>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002af2:	2302      	movs	r3, #2
 8002af4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002af8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b12:	fa92 f2a2 	rbit	r2, r2
 8002b16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0af      	beq.n	8002a9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	21f8      	movs	r1, #248	; 0xf8
 8002b50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b58:	fa91 f1a1 	rbit	r1, r1
 8002b5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b64:	fab1 f181 	clz	r1, r1
 8002b68:	b2c9      	uxtb	r1, r1
 8002b6a:	408b      	lsls	r3, r1
 8002b6c:	4920      	ldr	r1, [pc, #128]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
 8002b72:	e06c      	b.n	8002c4e <HAL_RCC_OscConfig+0x646>
 8002b74:	2301      	movs	r3, #1
 8002b76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fc00 	bl	80013a4 <HAL_GetTick>
 8002ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fbfb 	bl	80013a4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	f000 bd5a 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d104      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5ec>
 8002bea:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e015      	b.n	8002c1c <HAL_RCC_OscConfig+0x614>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c18:	4bc8      	ldr	r3, [pc, #800]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ad      	bne.n	8002baa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8110 	beq.w	8002e84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d079      	beq.n	8002d68 <HAL_RCC_OscConfig+0x760>
 8002c74:	2301      	movs	r3, #1
 8002c76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	4bab      	ldr	r3, [pc, #684]	; (8002f40 <HAL_RCC_OscConfig+0x938>)
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fb81 	bl	80013a4 <HAL_GetTick>
 8002ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe fb7c 	bl	80013a4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d902      	bls.n	8002cbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f000 bcdb 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d18:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d24:	2102      	movs	r1, #2
 8002d26:	6019      	str	r1, [r3, #0]
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f1a3 	rbit	r1, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d3e:	6019      	str	r1, [r3, #0]
  return result;
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0a0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x6a0>
 8002d66:	e08d      	b.n	8002e84 <HAL_RCC_OscConfig+0x87c>
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x938>)
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	461a      	mov	r2, r3
 8002da6:	2300      	movs	r3, #0
 8002da8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fafb 	bl	80013a4 <HAL_GetTick>
 8002dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe faf6 	bl	80013a4 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d902      	bls.n	8002dca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	f000 bc55 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002df6:	2202      	movs	r2, #2
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e42:	2102      	movs	r1, #2
 8002e44:	6019      	str	r1, [r3, #0]
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f1a3 	rbit	r1, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e5c:	6019      	str	r1, [r3, #0]
  return result;
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d197      	bne.n	8002db4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 81a1 	beq.w	80031dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea0:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ed2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11a      	bne.n	8002f1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fa57 	bl	80013a4 <HAL_GetTick>
 8002ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	e009      	b.n	8002f10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe fa52 	bl	80013a4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e3b1      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCC_OscConfig+0x940>
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a02      	ldr	r2, [pc, #8]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e03c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	10908120 	.word	0x10908120
 8002f44:	40007000 	.word	0x40007000
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x96a>
 8002f58:	4bc1      	ldr	r3, [pc, #772]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4ac0      	ldr	r2, [pc, #768]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	4bbe      	ldr	r3, [pc, #760]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4abd      	ldr	r2, [pc, #756]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e020      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x994>
 8002f82:	4bb7      	ldr	r3, [pc, #732]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4ab6      	ldr	r2, [pc, #728]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	4bb4      	ldr	r3, [pc, #720]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4ab3      	ldr	r2, [pc, #716]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6213      	str	r3, [r2, #32]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f9c:	4bb0      	ldr	r3, [pc, #704]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4aaf      	ldr	r2, [pc, #700]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	4bad      	ldr	r3, [pc, #692]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4aac      	ldr	r2, [pc, #688]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002fae:	f023 0304 	bic.w	r3, r3, #4
 8002fb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8081 	beq.w	80030c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe f9ed 	bl	80013a4 <HAL_GetTick>
 8002fca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f9e8 	bl	80013a4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e345      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003038:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0xa4c>
 800304e:	4b84      	ldr	r3, [pc, #528]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	e013      	b.n	800307c <HAL_RCC_OscConfig+0xa74>
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800305c:	2202      	movs	r2, #2
 800305e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003080:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003084:	2102      	movs	r1, #2
 8003086:	6011      	str	r1, [r2, #0]
 8003088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	fa92 f1a2 	rbit	r1, r2
 8003096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800309e:	6011      	str	r1, [r2, #0]
  return result;
 80030a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f002 021f 	and.w	r2, r2, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d084      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x9c8>
 80030c6:	e07f      	b.n	80031c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe f96c 	bl	80013a4 <HAL_GetTick>
 80030cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe f967 	bl	80013a4 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e2c4      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003116:	2202      	movs	r2, #2
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003130:	601a      	str	r2, [r3, #0]
  return result;
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800313a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d102      	bne.n	8003156 <HAL_RCC_OscConfig+0xb4e>
 8003150:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	e013      	b.n	800317e <HAL_RCC_OscConfig+0xb76>
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003182:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003186:	2102      	movs	r1, #2
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800318e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	fa92 f1a2 	rbit	r1, r2
 8003198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800319c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031a0:	6011      	str	r1, [r2, #0]
  return result;
 80031a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	fab2 f282 	clz	r2, r2
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f002 021f 	and.w	r2, r2, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f202 	lsl.w	r2, r1, r2
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d184      	bne.n	80030d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4a22      	ldr	r2, [pc, #136]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8242 	beq.w	8003672 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	f000 8213 	beq.w	8003622 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b02      	cmp	r3, #2
 800320a:	f040 8162 	bne.w	80034d2 <HAL_RCC_OscConfig+0xeca>
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003216:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800321a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003232:	601a      	str	r2, [r3, #0]
  return result;
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800323c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	461a      	mov	r2, r3
 8003250:	2300      	movs	r3, #0
 8003252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe f8a6 	bl	80013a4 <HAL_GetTick>
 8003258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325c:	e00c      	b.n	8003278 <HAL_RCC_OscConfig+0xc70>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe f89e 	bl	80013a4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1fd      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0xcba>
 80032bc:	4bb0      	ldr	r3, [pc, #704]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	e027      	b.n	8003312 <HAL_RCC_OscConfig+0xd0a>
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	4b9c      	ldr	r3, [pc, #624]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003316:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800331a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800331e:	6011      	str	r1, [r2, #0]
 8003320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003324:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	fa92 f1a2 	rbit	r1, r2
 800332e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003332:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003336:	6011      	str	r1, [r2, #0]
  return result;
 8003338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800333c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	fab2 f282 	clz	r2, r2
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	f042 0220 	orr.w	r2, r2, #32
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f002 021f 	and.w	r2, r2, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d182      	bne.n	8003264 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	430b      	orrs	r3, r1
 8003380:	497f      	ldr	r1, [pc, #508]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800338e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033aa:	601a      	str	r2, [r3, #0]
  return result;
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	2301      	movs	r3, #1
 80033ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fd ffea 	bl	80013a4 <HAL_GetTick>
 80033d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d4:	e009      	b.n	80033ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd ffe5 	bl	80013a4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e144      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800340e:	601a      	str	r2, [r3, #0]
  return result;
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003418:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d102      	bne.n	8003434 <HAL_RCC_OscConfig+0xe2c>
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	e027      	b.n	8003484 <HAL_RCC_OscConfig+0xe7c>
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800343c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003488:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800348c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003496:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	fa92 f1a2 	rbit	r1, r2
 80034a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034a8:	6011      	str	r1, [r2, #0]
  return result;
 80034aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f002 021f 	and.w	r2, r2, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d082      	beq.n	80033d6 <HAL_RCC_OscConfig+0xdce>
 80034d0:	e0cf      	b.n	8003672 <HAL_RCC_OscConfig+0x106a>
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034f6:	601a      	str	r2, [r3, #0]
  return result;
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003500:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800350c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	2300      	movs	r3, #0
 8003516:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd ff44 	bl	80013a4 <HAL_GetTick>
 800351c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	e009      	b.n	8003536 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003522:	f7fd ff3f 	bl	80013a4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e09e      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800353e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003564:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d104      	bne.n	8003584 <HAL_RCC_OscConfig+0xf7c>
 800357a:	4b01      	ldr	r3, [pc, #4]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	e029      	b.n	80035d4 <HAL_RCC_OscConfig+0xfcc>
 8003580:	40021000 	.word	0x40021000
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800358c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003596:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_OscConfig+0x1078>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	fa92 f1a2 	rbit	r1, r2
 80035f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035f8:	6011      	str	r1, [r2, #0]
  return result;
 80035fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f002 021f 	and.w	r2, r2, #31
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d180      	bne.n	8003522 <HAL_RCC_OscConfig+0xf1a>
 8003620:	e027      	b.n	8003672 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e01e      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_OscConfig+0x1078>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800363e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003642:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	429a      	cmp	r2, r3
 8003654:	d10b      	bne.n	800366e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003656:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800365a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b09e      	sub	sp, #120	; 0x78
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e162      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b90      	ldr	r3, [pc, #576]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d910      	bls.n	80036cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b8d      	ldr	r3, [pc, #564]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	498b      	ldr	r1, [pc, #556]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e14a      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	4b82      	ldr	r3, [pc, #520]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	497f      	ldr	r1, [pc, #508]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80dc 	beq.w	80038b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d13c      	bne.n	800377a <HAL_RCC_ClockConfig+0xf6>
 8003700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003704:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d102      	bne.n	800372a <HAL_RCC_ClockConfig+0xa6>
 8003724:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	e00f      	b.n	800374a <HAL_RCC_ClockConfig+0xc6>
 800372a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800372e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	667b      	str	r3, [r7, #100]	; 0x64
 8003738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
 800373e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003746:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800374e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003752:	fa92 f2a2 	rbit	r2, r2
 8003756:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f042 0220 	orr.w	r2, r2, #32
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f002 021f 	and.w	r2, r2, #31
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d17b      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0f3      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d13c      	bne.n	80037fc <HAL_RCC_ClockConfig+0x178>
 8003782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003786:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_RCC_ClockConfig+0x128>
 80037a6:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	e00f      	b.n	80037cc <HAL_RCC_ClockConfig+0x148>
 80037ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
 80037c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c8:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80037d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0220 	orr.w	r2, r2, #32
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d13a      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b2      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
 80037fc:	2302      	movs	r3, #2
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_RCC_ClockConfig+0x1a0>
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	e00d      	b.n	8003840 <HAL_RCC_ClockConfig+0x1bc>
 8003824:	2302      	movs	r3, #2
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	2302      	movs	r3, #2
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2202      	movs	r2, #2
 8003842:	61ba      	str	r2, [r7, #24]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	fa92 f2a2 	rbit	r2, r2
 800384a:	617a      	str	r2, [r7, #20]
  return result;
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f042 0220 	orr.w	r2, r2, #32
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	f002 021f 	and.w	r2, r2, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e079      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	491a      	ldr	r1, [pc, #104]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fd fd90 	bl	80013a4 <HAL_GetTick>
 8003884:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fd fd8c 	bl	80013a4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e061      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d214      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	4906      	ldr	r1, [pc, #24]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e040      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	491a      	ldr	r1, [pc, #104]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003926:	f000 f829 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800392a:	4601      	mov	r1, r0
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003934:	22f0      	movs	r2, #240	; 0xf0
 8003936:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	fa92 f2a2 	rbit	r2, r2
 800393e:	60fa      	str	r2, [r7, #12]
  return result;
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	fab2 f282 	clz	r2, r2
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	40d3      	lsrs	r3, r2
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x2ec>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	fa21 f303 	lsr.w	r3, r1, r3
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_RCC_ClockConfig+0x2f0>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCC_ClockConfig+0x2f4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fcde 	bl	800131c <HAL_InitTick>
  
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3778      	adds	r7, #120	; 0x78
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	08006164 	.word	0x08006164
 8003974:	20000000 	.word	0x20000000
 8003978:	2000000c 	.word	0x2000000c

0800397c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b08b      	sub	sp, #44	; 0x2c
 8003980:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x30>
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x36>
 80039aa:	e03c      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ac:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039ae:	623b      	str	r3, [r7, #32]
      break;
 80039b0:	e03c      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	607a      	str	r2, [r7, #4]
  return result;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	40d3      	lsrs	r3, r2
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039d6:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	220f      	movs	r2, #15
 80039e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	60fa      	str	r2, [r7, #12]
  return result;
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	40d3      	lsrs	r3, r2
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a04:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e004      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	623b      	str	r3, [r7, #32]
      break;
 8003a24:	e002      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a28:	623b      	str	r3, [r7, #32]
      break;
 8003a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	372c      	adds	r7, #44	; 0x2c
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	0800617c 	.word	0x0800617c
 8003a48:	0800618c 	.word	0x0800618c
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000000 	.word	0x20000000

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a6e:	f7ff ffef 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	fa92 f2a2 	rbit	r2, r2
 8003a88:	603a      	str	r2, [r7, #0]
  return result;
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	40d3      	lsrs	r3, r2
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08006174 	.word	0x08006174

08003aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ab2:	f7ff ffcd 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ac0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ac4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	fa92 f2a2 	rbit	r2, r2
 8003acc:	603a      	str	r2, [r7, #0]
  return result;
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	fab2 f282 	clz	r2, r2
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	40d3      	lsrs	r3, r2
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08006174 	.word	0x08006174

08003af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b092      	sub	sp, #72	; 0x48
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80d4 	beq.w	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b14:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10e      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	61d3      	str	r3, [r2, #28]
 8003b2c:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d118      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4a:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a41      	ldr	r2, [pc, #260]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b56:	f7fd fc25 	bl	80013a4 <HAL_GetTick>
 8003b5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7fd fc21 	bl	80013a4 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	; 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e13c      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b7c:	4b34      	ldr	r3, [pc, #208]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8084 	beq.w	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d07c      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	461a      	mov	r2, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04b      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fbd1 	bl	80013a4 <HAL_GetTick>
 8003c02:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd fbcd 	bl	80013a4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0e6      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
 8003c28:	2302      	movs	r3, #2
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	61fb      	str	r3, [r7, #28]
  return result;
 8003c34:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d108      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c4a:	4b01      	ldr	r3, [pc, #4]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	e00d      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	10908100 	.word	0x10908100
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	613a      	str	r2, [r7, #16]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	fa92 f2a2 	rbit	r2, r2
 8003c76:	60fa      	str	r2, [r7, #12]
  return result;
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f002 021f 	and.w	r2, r2, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0b7      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c96:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4954      	ldr	r1, [pc, #336]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ca8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4a4f      	ldr	r2, [pc, #316]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc8:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	f023 0203 	bic.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4947      	ldr	r1, [pc, #284]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce6:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f023 0210 	bic.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4940      	ldr	r1, [pc, #256]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d04:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	f023 0220 	bic.w	r2, r3, #32
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	4938      	ldr	r1, [pc, #224]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d22:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	4931      	ldr	r1, [pc, #196]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d40:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4929      	ldr	r1, [pc, #164]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003d5e:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	4922      	ldr	r1, [pc, #136]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	491a      	ldr	r1, [pc, #104]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	4913      	ldr	r1, [pc, #76]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	490b      	ldr	r1, [pc, #44]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	4904      	ldr	r1, [pc, #16]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3748      	adds	r7, #72	; 0x48
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000

08003df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e09d      	b.n	8003f46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d108      	bne.n	8003e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1a:	d009      	beq.n	8003e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	61da      	str	r2, [r3, #28]
 8003e22:	e005      	b.n	8003e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fc fdc2 	bl	80009d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e70:	d902      	bls.n	8003e78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e002      	b.n	8003e7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e86:	d007      	beq.n	8003e98 <HAL_SPI_Init+0xa0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	ea42 0103 	orr.w	r1, r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	0c1b      	lsrs	r3, r3, #16
 8003ef4:	f003 0204 	and.w	r2, r3, #4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f14:	ea42 0103 	orr.w	r1, r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b088      	sub	sp, #32
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_SPI_Transmit+0x22>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e15f      	b.n	8004230 <HAL_SPI_Transmit+0x2e2>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f78:	f7fd fa14 	bl	80013a4 <HAL_GetTick>
 8003f7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f92:	e148      	b.n	8004226 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x52>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa4:	e13f      	b.n	8004226 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff0:	d10f      	bne.n	8004012 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004000:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004010:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d007      	beq.n	8004030 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004038:	d94f      	bls.n	80040da <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_SPI_Transmit+0xfa>
 8004042:	8afb      	ldrh	r3, [r7, #22]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d142      	bne.n	80040ce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800406c:	e02f      	b.n	80040ce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d112      	bne.n	80040a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	881a      	ldrh	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040a0:	e015      	b.n	80040ce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a2:	f7fd f97f 	bl	80013a4 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d803      	bhi.n	80040ba <HAL_SPI_Transmit+0x16c>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d102      	bne.n	80040c0 <HAL_SPI_Transmit+0x172>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80040cc:	e0ab      	b.n	8004226 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ca      	bne.n	800406e <HAL_SPI_Transmit+0x120>
 80040d8:	e080      	b.n	80041dc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_Transmit+0x19a>
 80040e2:	8afb      	ldrh	r3, [r7, #22]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d174      	bne.n	80041d2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d912      	bls.n	8004118 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b02      	subs	r3, #2
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004116:	e05c      	b.n	80041d2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800413e:	e048      	b.n	80041d2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d12b      	bne.n	80041a6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d912      	bls.n	800417e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b02      	subs	r3, #2
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800417c:	e029      	b.n	80041d2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041a4:	e015      	b.n	80041d2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a6:	f7fd f8fd 	bl	80013a4 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d803      	bhi.n	80041be <HAL_SPI_Transmit+0x270>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d102      	bne.n	80041c4 <HAL_SPI_Transmit+0x276>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80041d0:	e029      	b.n	8004226 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1b1      	bne.n	8004140 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fac3 	bl	800476c <SPI_EndRxTxTransaction>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e003      	b.n	8004226 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800422e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_SPI_Transmit_DMA+0x20>
 8004254:	2302      	movs	r3, #2
 8004256:	e0d4      	b.n	8004402 <HAL_SPI_Transmit_DMA+0x1ca>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d002      	beq.n	8004272 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800426c:	2302      	movs	r3, #2
 800426e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004270:	e0c2      	b.n	80043f8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_SPI_Transmit_DMA+0x46>
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004282:	e0b9      	b.n	80043f8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	88fa      	ldrh	r2, [r7, #6]
 80042a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ce:	d10f      	bne.n	80042f0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	4a45      	ldr	r2, [pc, #276]	; (800440c <HAL_SPI_Transmit_DMA+0x1d4>)
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	4a44      	ldr	r2, [pc, #272]	; (8004410 <HAL_SPI_Transmit_DMA+0x1d8>)
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	4a43      	ldr	r2, [pc, #268]	; (8004414 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004306:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	2200      	movs	r2, #0
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800431e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004328:	d82d      	bhi.n	8004386 <HAL_SPI_Transmit_DMA+0x14e>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d127      	bne.n	8004386 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10f      	bne.n	8004364 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004352:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004362:	e010      	b.n	8004386 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004372:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	3301      	adds	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	4619      	mov	r1, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800439e:	f7fd f942 	bl	8001626 <HAL_DMA_Start_IT>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ac:	f043 0210 	orr.w	r2, r3, #16
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75fb      	strb	r3, [r7, #23]

    goto error;
 80043b8:	e01e      	b.n	80043f8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d007      	beq.n	80043d8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0220 	orr.w	r2, r2, #32
 80043e6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0202 	orr.w	r2, r2, #2
 80043f6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	080044d3 	.word	0x080044d3
 8004410:	0800442d 	.word	0x0800442d
 8004414:	080044ef 	.word	0x080044ef

08004418 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800443a:	f7fc ffb3 	bl	80013a4 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b20      	cmp	r3, #32
 800444c:	d03b      	beq.n	80044c6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0220 	bic.w	r2, r2, #32
 800445c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0202 	bic.w	r2, r2, #2
 800446c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	2164      	movs	r1, #100	; 0x64
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	f000 f97a 	bl	800476c <SPI_EndRxTxTransaction>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	f7fc fdc6 	bl	8001050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80044c4:	e002      	b.n	80044cc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80044c6:	6978      	ldr	r0, [r7, #20]
 80044c8:	f7fc fdd8 	bl	800107c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ff99 	bl	8004418 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0203 	bic.w	r2, r2, #3
 800450a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	f043 0210 	orr.w	r2, r3, #16
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7fc fd95 	bl	8001050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004540:	f7fc ff30 	bl	80013a4 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	4413      	add	r3, r2
 800454e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004550:	f7fc ff28 	bl	80013a4 <HAL_GetTick>
 8004554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	015b      	lsls	r3, r3, #5
 800455c:	0d1b      	lsrs	r3, r3, #20
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	fb02 f303 	mul.w	r3, r2, r3
 8004564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004566:	e054      	b.n	8004612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d050      	beq.n	8004612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004570:	f7fc ff18 	bl	80013a4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	429a      	cmp	r2, r3
 800457e:	d902      	bls.n	8004586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d13d      	bne.n	8004602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800459e:	d111      	bne.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a8:	d004      	beq.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b2:	d107      	bne.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045cc:	d10f      	bne.n	80045ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e017      	b.n	8004632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	3b01      	subs	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	429a      	cmp	r2, r3
 800462e:	d19b      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000000 	.word	0x20000000

08004640 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004652:	f7fc fea7 	bl	80013a4 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	4413      	add	r3, r2
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004662:	f7fc fe9f 	bl	80013a4 <HAL_GetTick>
 8004666:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004670:	4b3d      	ldr	r3, [pc, #244]	; (8004768 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	0d1b      	lsrs	r3, r3, #20
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004688:	e060      	b.n	800474c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004690:	d107      	bne.n	80046a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d050      	beq.n	800474c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046aa:	f7fc fe7b 	bl	80013a4 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d902      	bls.n	80046c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d13d      	bne.n	800473c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d8:	d111      	bne.n	80046fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e2:	d004      	beq.n	80046ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ec:	d107      	bne.n	80046fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004706:	d10f      	bne.n	8004728 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004726:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e010      	b.n	800475e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	3b01      	subs	r3, #1
 800474a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d196      	bne.n	800468a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3728      	adds	r7, #40	; 0x28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000000 	.word	0x20000000

0800476c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff ff5b 	bl	8004640 <SPI_WaitFifoStateUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e027      	b.n	80047f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2200      	movs	r2, #0
 80047a8:	2180      	movs	r1, #128	; 0x80
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff fec0 	bl	8004530 <SPI_WaitFlagStateUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e014      	b.n	80047f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff ff34 	bl	8004640 <SPI_WaitFifoStateUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e000      	b.n	80047f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e040      	b.n	800488c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc f91e 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8b6 	bl	80049a8 <UART_SetConfig>
 800483c:	4603      	mov	r3, r0
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e022      	b.n	800488c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9e0 	bl	8004c14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fa67 	bl	8004d58 <UART_CheckIdleState>
 800488a:	4603      	mov	r3, r0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d178      	bne.n	800499e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_UART_Transmit+0x24>
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e071      	b.n	80049a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2221      	movs	r2, #33	; 0x21
 80048c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ca:	f7fc fd6b 	bl	80013a4 <HAL_GetTick>
 80048ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e8:	d108      	bne.n	80048fc <HAL_UART_Transmit+0x68>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e003      	b.n	8004904 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004904:	e030      	b.n	8004968 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fac9 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d004      	beq.n	8004926 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e03c      	b.n	80049a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004938:	b292      	uxth	r2, r2
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	3302      	adds	r3, #2
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e008      	b.n	8004956 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	b292      	uxth	r2, r2
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	3301      	adds	r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1c8      	bne.n	8004906 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	2140      	movs	r1, #64	; 0x40
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa92 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d004      	beq.n	8004994 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e005      	b.n	80049a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b8a      	ldr	r3, [pc, #552]	; (8004bfc <UART_SetConfig+0x254>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	6979      	ldr	r1, [r7, #20]
 80049dc:	430b      	orrs	r3, r1
 80049de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a78      	ldr	r2, [pc, #480]	; (8004c00 <UART_SetConfig+0x258>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d120      	bne.n	8004a66 <UART_SetConfig+0xbe>
 8004a24:	4b77      	ldr	r3, [pc, #476]	; (8004c04 <UART_SetConfig+0x25c>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d817      	bhi.n	8004a60 <UART_SetConfig+0xb8>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <UART_SetConfig+0x90>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a55 	.word	0x08004a55
 8004a40:	08004a5b 	.word	0x08004a5b
 8004a44:	08004a4f 	.word	0x08004a4f
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e01d      	b.n	8004a8a <UART_SetConfig+0xe2>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e01a      	b.n	8004a8a <UART_SetConfig+0xe2>
 8004a54:	2304      	movs	r3, #4
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e017      	b.n	8004a8a <UART_SetConfig+0xe2>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e014      	b.n	8004a8a <UART_SetConfig+0xe2>
 8004a60:	2310      	movs	r3, #16
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e011      	b.n	8004a8a <UART_SetConfig+0xe2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a67      	ldr	r2, [pc, #412]	; (8004c08 <UART_SetConfig+0x260>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d102      	bne.n	8004a76 <UART_SetConfig+0xce>
 8004a70:	2300      	movs	r3, #0
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e009      	b.n	8004a8a <UART_SetConfig+0xe2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <UART_SetConfig+0x264>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d102      	bne.n	8004a86 <UART_SetConfig+0xde>
 8004a80:	2300      	movs	r3, #0
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e001      	b.n	8004a8a <UART_SetConfig+0xe2>
 8004a86:	2310      	movs	r3, #16
 8004a88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a92:	d15a      	bne.n	8004b4a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004a94:	7ffb      	ldrb	r3, [r7, #31]
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d827      	bhi.n	8004aea <UART_SetConfig+0x142>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0xf8>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004adb 	.word	0x08004adb
 8004ab4:	08004aeb 	.word	0x08004aeb
 8004ab8:	08004aeb 	.word	0x08004aeb
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f7fe ffd0 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	61b8      	str	r0, [r7, #24]
        break;
 8004aca:	e013      	b.n	8004af4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7fe ffee 	bl	8003aac <HAL_RCC_GetPCLK2Freq>
 8004ad0:	61b8      	str	r0, [r7, #24]
        break;
 8004ad2:	e00f      	b.n	8004af4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <UART_SetConfig+0x268>)
 8004ad6:	61bb      	str	r3, [r7, #24]
        break;
 8004ad8:	e00c      	b.n	8004af4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fe ff4f 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8004ade:	61b8      	str	r0, [r7, #24]
        break;
 8004ae0:	e008      	b.n	8004af4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	61bb      	str	r3, [r7, #24]
        break;
 8004ae8:	e004      	b.n	8004af4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	77bb      	strb	r3, [r7, #30]
        break;
 8004af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d074      	beq.n	8004be4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	005a      	lsls	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	441a      	add	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b0f      	cmp	r3, #15
 8004b14:	d916      	bls.n	8004b44 <UART_SetConfig+0x19c>
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1c:	d212      	bcs.n	8004b44 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f023 030f 	bic.w	r3, r3, #15
 8004b26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	89fa      	ldrh	r2, [r7, #14]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	e04f      	b.n	8004be4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	77bb      	strb	r3, [r7, #30]
 8004b48:	e04c      	b.n	8004be4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4a:	7ffb      	ldrb	r3, [r7, #31]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d828      	bhi.n	8004ba2 <UART_SetConfig+0x1fa>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x1b0>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004ba3 	.word	0x08004ba3
 8004b68:	08004b93 	.word	0x08004b93
 8004b6c:	08004ba3 	.word	0x08004ba3
 8004b70:	08004ba3 	.word	0x08004ba3
 8004b74:	08004ba3 	.word	0x08004ba3
 8004b78:	08004b9b 	.word	0x08004b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fe ff74 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8004b80:	61b8      	str	r0, [r7, #24]
        break;
 8004b82:	e013      	b.n	8004bac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b84:	f7fe ff92 	bl	8003aac <HAL_RCC_GetPCLK2Freq>
 8004b88:	61b8      	str	r0, [r7, #24]
        break;
 8004b8a:	e00f      	b.n	8004bac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b8c:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <UART_SetConfig+0x268>)
 8004b8e:	61bb      	str	r3, [r7, #24]
        break;
 8004b90:	e00c      	b.n	8004bac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b92:	f7fe fef3 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8004b96:	61b8      	str	r0, [r7, #24]
        break;
 8004b98:	e008      	b.n	8004bac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ba0:	e004      	b.n	8004bac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8004baa:	bf00      	nop
    }

    if (pclk != 0U)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d018      	beq.n	8004be4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	085a      	lsrs	r2, r3, #1
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d909      	bls.n	8004be0 <UART_SetConfig+0x238>
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd2:	d205      	bcs.n	8004be0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	e001      	b.n	8004be4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	efff69f3 	.word	0xefff69f3
 8004c00:	40013800 	.word	0x40013800
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40004400 	.word	0x40004400
 8004c0c:	40004800 	.word	0x40004800
 8004c10:	007a1200 	.word	0x007a1200

08004c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d12:	d10a      	bne.n	8004d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b098      	sub	sp, #96	; 0x60
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d68:	f7fc fb1c 	bl	80013a4 <HAL_GetTick>
 8004d6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d12e      	bne.n	8004dda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d84:	2200      	movs	r2, #0
 8004d86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f88c 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d021      	beq.n	8004dda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004daa:	653b      	str	r3, [r7, #80]	; 0x50
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
 8004db6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e6      	bne.n	8004d96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e062      	b.n	8004ea0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d149      	bne.n	8004e7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f856 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03c      	beq.n	8004e7c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e20:	633b      	str	r3, [r7, #48]	; 0x30
 8004e22:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e54:	61fa      	str	r2, [r7, #28]
 8004e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	69b9      	ldr	r1, [r7, #24]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	617b      	str	r3, [r7, #20]
   return(result);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e011      	b.n	8004ea0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3758      	adds	r7, #88	; 0x58
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb8:	e049      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d045      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fc fa6f 	bl	80013a4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e048      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d031      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d110      	bne.n	8004f1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2208      	movs	r2, #8
 8004efe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f838 	bl	8004f76 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2208      	movs	r2, #8
 8004f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e029      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f28:	d111      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f81e 	bl	8004f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e00f      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d0a6      	beq.n	8004eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b095      	sub	sp, #84	; 0x54
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e6      	bne.n	8004f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d118      	bne.n	800501e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	613b      	str	r3, [r7, #16]
   return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005032:	bf00      	nop
 8005034:	3754      	adds	r7, #84	; 0x54
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <__errno>:
 8005040:	4b01      	ldr	r3, [pc, #4]	; (8005048 <__errno+0x8>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000014 	.word	0x20000014

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4d0d      	ldr	r5, [pc, #52]	; (8005084 <__libc_init_array+0x38>)
 8005050:	4c0d      	ldr	r4, [pc, #52]	; (8005088 <__libc_init_array+0x3c>)
 8005052:	1b64      	subs	r4, r4, r5
 8005054:	10a4      	asrs	r4, r4, #2
 8005056:	2600      	movs	r6, #0
 8005058:	42a6      	cmp	r6, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	4d0b      	ldr	r5, [pc, #44]	; (800508c <__libc_init_array+0x40>)
 800505e:	4c0c      	ldr	r4, [pc, #48]	; (8005090 <__libc_init_array+0x44>)
 8005060:	f001 f824 	bl	80060ac <_init>
 8005064:	1b64      	subs	r4, r4, r5
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	2600      	movs	r6, #0
 800506a:	42a6      	cmp	r6, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	f855 3b04 	ldr.w	r3, [r5], #4
 8005074:	4798      	blx	r3
 8005076:	3601      	adds	r6, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	f855 3b04 	ldr.w	r3, [r5], #4
 800507e:	4798      	blx	r3
 8005080:	3601      	adds	r6, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	08006234 	.word	0x08006234
 8005088:	08006234 	.word	0x08006234
 800508c:	08006234 	.word	0x08006234
 8005090:	08006238 	.word	0x08006238

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <iprintf>:
 80050a4:	b40f      	push	{r0, r1, r2, r3}
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <iprintf+0x2c>)
 80050a8:	b513      	push	{r0, r1, r4, lr}
 80050aa:	681c      	ldr	r4, [r3, #0]
 80050ac:	b124      	cbz	r4, 80050b8 <iprintf+0x14>
 80050ae:	69a3      	ldr	r3, [r4, #24]
 80050b0:	b913      	cbnz	r3, 80050b8 <iprintf+0x14>
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 fa5e 	bl	8005574 <__sinit>
 80050b8:	ab05      	add	r3, sp, #20
 80050ba:	9a04      	ldr	r2, [sp, #16]
 80050bc:	68a1      	ldr	r1, [r4, #8]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 fc67 	bl	8005994 <_vfiprintf_r>
 80050c6:	b002      	add	sp, #8
 80050c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050cc:	b004      	add	sp, #16
 80050ce:	4770      	bx	lr
 80050d0:	20000014 	.word	0x20000014

080050d4 <_puts_r>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	460e      	mov	r6, r1
 80050d8:	4605      	mov	r5, r0
 80050da:	b118      	cbz	r0, 80050e4 <_puts_r+0x10>
 80050dc:	6983      	ldr	r3, [r0, #24]
 80050de:	b90b      	cbnz	r3, 80050e4 <_puts_r+0x10>
 80050e0:	f000 fa48 	bl	8005574 <__sinit>
 80050e4:	69ab      	ldr	r3, [r5, #24]
 80050e6:	68ac      	ldr	r4, [r5, #8]
 80050e8:	b913      	cbnz	r3, 80050f0 <_puts_r+0x1c>
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 fa42 	bl	8005574 <__sinit>
 80050f0:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <_puts_r+0xd0>)
 80050f2:	429c      	cmp	r4, r3
 80050f4:	d120      	bne.n	8005138 <_puts_r+0x64>
 80050f6:	686c      	ldr	r4, [r5, #4]
 80050f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050fa:	07db      	lsls	r3, r3, #31
 80050fc:	d405      	bmi.n	800510a <_puts_r+0x36>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	0598      	lsls	r0, r3, #22
 8005102:	d402      	bmi.n	800510a <_puts_r+0x36>
 8005104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005106:	f000 fad3 	bl	80056b0 <__retarget_lock_acquire_recursive>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	0719      	lsls	r1, r3, #28
 800510e:	d51d      	bpl.n	800514c <_puts_r+0x78>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	b1db      	cbz	r3, 800514c <_puts_r+0x78>
 8005114:	3e01      	subs	r6, #1
 8005116:	68a3      	ldr	r3, [r4, #8]
 8005118:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800511c:	3b01      	subs	r3, #1
 800511e:	60a3      	str	r3, [r4, #8]
 8005120:	bb39      	cbnz	r1, 8005172 <_puts_r+0x9e>
 8005122:	2b00      	cmp	r3, #0
 8005124:	da38      	bge.n	8005198 <_puts_r+0xc4>
 8005126:	4622      	mov	r2, r4
 8005128:	210a      	movs	r1, #10
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f848 	bl	80051c0 <__swbuf_r>
 8005130:	3001      	adds	r0, #1
 8005132:	d011      	beq.n	8005158 <_puts_r+0x84>
 8005134:	250a      	movs	r5, #10
 8005136:	e011      	b.n	800515c <_puts_r+0x88>
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <_puts_r+0xd4>)
 800513a:	429c      	cmp	r4, r3
 800513c:	d101      	bne.n	8005142 <_puts_r+0x6e>
 800513e:	68ac      	ldr	r4, [r5, #8]
 8005140:	e7da      	b.n	80050f8 <_puts_r+0x24>
 8005142:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <_puts_r+0xd8>)
 8005144:	429c      	cmp	r4, r3
 8005146:	bf08      	it	eq
 8005148:	68ec      	ldreq	r4, [r5, #12]
 800514a:	e7d5      	b.n	80050f8 <_puts_r+0x24>
 800514c:	4621      	mov	r1, r4
 800514e:	4628      	mov	r0, r5
 8005150:	f000 f888 	bl	8005264 <__swsetup_r>
 8005154:	2800      	cmp	r0, #0
 8005156:	d0dd      	beq.n	8005114 <_puts_r+0x40>
 8005158:	f04f 35ff 	mov.w	r5, #4294967295
 800515c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800515e:	07da      	lsls	r2, r3, #31
 8005160:	d405      	bmi.n	800516e <_puts_r+0x9a>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	059b      	lsls	r3, r3, #22
 8005166:	d402      	bmi.n	800516e <_puts_r+0x9a>
 8005168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516a:	f000 faa2 	bl	80056b2 <__retarget_lock_release_recursive>
 800516e:	4628      	mov	r0, r5
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	2b00      	cmp	r3, #0
 8005174:	da04      	bge.n	8005180 <_puts_r+0xac>
 8005176:	69a2      	ldr	r2, [r4, #24]
 8005178:	429a      	cmp	r2, r3
 800517a:	dc06      	bgt.n	800518a <_puts_r+0xb6>
 800517c:	290a      	cmp	r1, #10
 800517e:	d004      	beq.n	800518a <_puts_r+0xb6>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	6022      	str	r2, [r4, #0]
 8005186:	7019      	strb	r1, [r3, #0]
 8005188:	e7c5      	b.n	8005116 <_puts_r+0x42>
 800518a:	4622      	mov	r2, r4
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f817 	bl	80051c0 <__swbuf_r>
 8005192:	3001      	adds	r0, #1
 8005194:	d1bf      	bne.n	8005116 <_puts_r+0x42>
 8005196:	e7df      	b.n	8005158 <_puts_r+0x84>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	250a      	movs	r5, #10
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	6022      	str	r2, [r4, #0]
 80051a0:	701d      	strb	r5, [r3, #0]
 80051a2:	e7db      	b.n	800515c <_puts_r+0x88>
 80051a4:	080061c0 	.word	0x080061c0
 80051a8:	080061e0 	.word	0x080061e0
 80051ac:	080061a0 	.word	0x080061a0

080051b0 <puts>:
 80051b0:	4b02      	ldr	r3, [pc, #8]	; (80051bc <puts+0xc>)
 80051b2:	4601      	mov	r1, r0
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f7ff bf8d 	b.w	80050d4 <_puts_r>
 80051ba:	bf00      	nop
 80051bc:	20000014 	.word	0x20000014

080051c0 <__swbuf_r>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	460e      	mov	r6, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	4605      	mov	r5, r0
 80051c8:	b118      	cbz	r0, 80051d2 <__swbuf_r+0x12>
 80051ca:	6983      	ldr	r3, [r0, #24]
 80051cc:	b90b      	cbnz	r3, 80051d2 <__swbuf_r+0x12>
 80051ce:	f000 f9d1 	bl	8005574 <__sinit>
 80051d2:	4b21      	ldr	r3, [pc, #132]	; (8005258 <__swbuf_r+0x98>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d12b      	bne.n	8005230 <__swbuf_r+0x70>
 80051d8:	686c      	ldr	r4, [r5, #4]
 80051da:	69a3      	ldr	r3, [r4, #24]
 80051dc:	60a3      	str	r3, [r4, #8]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	071a      	lsls	r2, r3, #28
 80051e2:	d52f      	bpl.n	8005244 <__swbuf_r+0x84>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	b36b      	cbz	r3, 8005244 <__swbuf_r+0x84>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	1ac0      	subs	r0, r0, r3
 80051ee:	6963      	ldr	r3, [r4, #20]
 80051f0:	b2f6      	uxtb	r6, r6
 80051f2:	4283      	cmp	r3, r0
 80051f4:	4637      	mov	r7, r6
 80051f6:	dc04      	bgt.n	8005202 <__swbuf_r+0x42>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 f926 	bl	800544c <_fflush_r>
 8005200:	bb30      	cbnz	r0, 8005250 <__swbuf_r+0x90>
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	3b01      	subs	r3, #1
 8005206:	60a3      	str	r3, [r4, #8]
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	701e      	strb	r6, [r3, #0]
 8005210:	6963      	ldr	r3, [r4, #20]
 8005212:	3001      	adds	r0, #1
 8005214:	4283      	cmp	r3, r0
 8005216:	d004      	beq.n	8005222 <__swbuf_r+0x62>
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	07db      	lsls	r3, r3, #31
 800521c:	d506      	bpl.n	800522c <__swbuf_r+0x6c>
 800521e:	2e0a      	cmp	r6, #10
 8005220:	d104      	bne.n	800522c <__swbuf_r+0x6c>
 8005222:	4621      	mov	r1, r4
 8005224:	4628      	mov	r0, r5
 8005226:	f000 f911 	bl	800544c <_fflush_r>
 800522a:	b988      	cbnz	r0, 8005250 <__swbuf_r+0x90>
 800522c:	4638      	mov	r0, r7
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <__swbuf_r+0x9c>)
 8005232:	429c      	cmp	r4, r3
 8005234:	d101      	bne.n	800523a <__swbuf_r+0x7a>
 8005236:	68ac      	ldr	r4, [r5, #8]
 8005238:	e7cf      	b.n	80051da <__swbuf_r+0x1a>
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <__swbuf_r+0xa0>)
 800523c:	429c      	cmp	r4, r3
 800523e:	bf08      	it	eq
 8005240:	68ec      	ldreq	r4, [r5, #12]
 8005242:	e7ca      	b.n	80051da <__swbuf_r+0x1a>
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f80c 	bl	8005264 <__swsetup_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	d0cb      	beq.n	80051e8 <__swbuf_r+0x28>
 8005250:	f04f 37ff 	mov.w	r7, #4294967295
 8005254:	e7ea      	b.n	800522c <__swbuf_r+0x6c>
 8005256:	bf00      	nop
 8005258:	080061c0 	.word	0x080061c0
 800525c:	080061e0 	.word	0x080061e0
 8005260:	080061a0 	.word	0x080061a0

08005264 <__swsetup_r>:
 8005264:	4b32      	ldr	r3, [pc, #200]	; (8005330 <__swsetup_r+0xcc>)
 8005266:	b570      	push	{r4, r5, r6, lr}
 8005268:	681d      	ldr	r5, [r3, #0]
 800526a:	4606      	mov	r6, r0
 800526c:	460c      	mov	r4, r1
 800526e:	b125      	cbz	r5, 800527a <__swsetup_r+0x16>
 8005270:	69ab      	ldr	r3, [r5, #24]
 8005272:	b913      	cbnz	r3, 800527a <__swsetup_r+0x16>
 8005274:	4628      	mov	r0, r5
 8005276:	f000 f97d 	bl	8005574 <__sinit>
 800527a:	4b2e      	ldr	r3, [pc, #184]	; (8005334 <__swsetup_r+0xd0>)
 800527c:	429c      	cmp	r4, r3
 800527e:	d10f      	bne.n	80052a0 <__swsetup_r+0x3c>
 8005280:	686c      	ldr	r4, [r5, #4]
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005288:	0719      	lsls	r1, r3, #28
 800528a:	d42c      	bmi.n	80052e6 <__swsetup_r+0x82>
 800528c:	06dd      	lsls	r5, r3, #27
 800528e:	d411      	bmi.n	80052b4 <__swsetup_r+0x50>
 8005290:	2309      	movs	r3, #9
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	f04f 30ff 	mov.w	r0, #4294967295
 800529e:	e03e      	b.n	800531e <__swsetup_r+0xba>
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <__swsetup_r+0xd4>)
 80052a2:	429c      	cmp	r4, r3
 80052a4:	d101      	bne.n	80052aa <__swsetup_r+0x46>
 80052a6:	68ac      	ldr	r4, [r5, #8]
 80052a8:	e7eb      	b.n	8005282 <__swsetup_r+0x1e>
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <__swsetup_r+0xd8>)
 80052ac:	429c      	cmp	r4, r3
 80052ae:	bf08      	it	eq
 80052b0:	68ec      	ldreq	r4, [r5, #12]
 80052b2:	e7e6      	b.n	8005282 <__swsetup_r+0x1e>
 80052b4:	0758      	lsls	r0, r3, #29
 80052b6:	d512      	bpl.n	80052de <__swsetup_r+0x7a>
 80052b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ba:	b141      	cbz	r1, 80052ce <__swsetup_r+0x6a>
 80052bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052c0:	4299      	cmp	r1, r3
 80052c2:	d002      	beq.n	80052ca <__swsetup_r+0x66>
 80052c4:	4630      	mov	r0, r6
 80052c6:	f000 fa5b 	bl	8005780 <_free_r>
 80052ca:	2300      	movs	r3, #0
 80052cc:	6363      	str	r3, [r4, #52]	; 0x34
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	2300      	movs	r3, #0
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f043 0308 	orr.w	r3, r3, #8
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	b94b      	cbnz	r3, 80052fe <__swsetup_r+0x9a>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d003      	beq.n	80052fe <__swsetup_r+0x9a>
 80052f6:	4621      	mov	r1, r4
 80052f8:	4630      	mov	r0, r6
 80052fa:	f000 fa01 	bl	8005700 <__smakebuf_r>
 80052fe:	89a0      	ldrh	r0, [r4, #12]
 8005300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005304:	f010 0301 	ands.w	r3, r0, #1
 8005308:	d00a      	beq.n	8005320 <__swsetup_r+0xbc>
 800530a:	2300      	movs	r3, #0
 800530c:	60a3      	str	r3, [r4, #8]
 800530e:	6963      	ldr	r3, [r4, #20]
 8005310:	425b      	negs	r3, r3
 8005312:	61a3      	str	r3, [r4, #24]
 8005314:	6923      	ldr	r3, [r4, #16]
 8005316:	b943      	cbnz	r3, 800532a <__swsetup_r+0xc6>
 8005318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800531c:	d1ba      	bne.n	8005294 <__swsetup_r+0x30>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	0781      	lsls	r1, r0, #30
 8005322:	bf58      	it	pl
 8005324:	6963      	ldrpl	r3, [r4, #20]
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	e7f4      	b.n	8005314 <__swsetup_r+0xb0>
 800532a:	2000      	movs	r0, #0
 800532c:	e7f7      	b.n	800531e <__swsetup_r+0xba>
 800532e:	bf00      	nop
 8005330:	20000014 	.word	0x20000014
 8005334:	080061c0 	.word	0x080061c0
 8005338:	080061e0 	.word	0x080061e0
 800533c:	080061a0 	.word	0x080061a0

08005340 <__sflush_r>:
 8005340:	898a      	ldrh	r2, [r1, #12]
 8005342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	4605      	mov	r5, r0
 8005348:	0710      	lsls	r0, r2, #28
 800534a:	460c      	mov	r4, r1
 800534c:	d458      	bmi.n	8005400 <__sflush_r+0xc0>
 800534e:	684b      	ldr	r3, [r1, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	dc05      	bgt.n	8005360 <__sflush_r+0x20>
 8005354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	dc02      	bgt.n	8005360 <__sflush_r+0x20>
 800535a:	2000      	movs	r0, #0
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005362:	2e00      	cmp	r6, #0
 8005364:	d0f9      	beq.n	800535a <__sflush_r+0x1a>
 8005366:	2300      	movs	r3, #0
 8005368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800536c:	682f      	ldr	r7, [r5, #0]
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	d032      	beq.n	80053d8 <__sflush_r+0x98>
 8005372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	075a      	lsls	r2, r3, #29
 8005378:	d505      	bpl.n	8005386 <__sflush_r+0x46>
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	1ac0      	subs	r0, r0, r3
 800537e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005380:	b10b      	cbz	r3, 8005386 <__sflush_r+0x46>
 8005382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005384:	1ac0      	subs	r0, r0, r3
 8005386:	2300      	movs	r3, #0
 8005388:	4602      	mov	r2, r0
 800538a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800538c:	6a21      	ldr	r1, [r4, #32]
 800538e:	4628      	mov	r0, r5
 8005390:	47b0      	blx	r6
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	d106      	bne.n	80053a6 <__sflush_r+0x66>
 8005398:	6829      	ldr	r1, [r5, #0]
 800539a:	291d      	cmp	r1, #29
 800539c:	d82c      	bhi.n	80053f8 <__sflush_r+0xb8>
 800539e:	4a2a      	ldr	r2, [pc, #168]	; (8005448 <__sflush_r+0x108>)
 80053a0:	40ca      	lsrs	r2, r1
 80053a2:	07d6      	lsls	r6, r2, #31
 80053a4:	d528      	bpl.n	80053f8 <__sflush_r+0xb8>
 80053a6:	2200      	movs	r2, #0
 80053a8:	6062      	str	r2, [r4, #4]
 80053aa:	04d9      	lsls	r1, r3, #19
 80053ac:	6922      	ldr	r2, [r4, #16]
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	d504      	bpl.n	80053bc <__sflush_r+0x7c>
 80053b2:	1c42      	adds	r2, r0, #1
 80053b4:	d101      	bne.n	80053ba <__sflush_r+0x7a>
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	b903      	cbnz	r3, 80053bc <__sflush_r+0x7c>
 80053ba:	6560      	str	r0, [r4, #84]	; 0x54
 80053bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053be:	602f      	str	r7, [r5, #0]
 80053c0:	2900      	cmp	r1, #0
 80053c2:	d0ca      	beq.n	800535a <__sflush_r+0x1a>
 80053c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c8:	4299      	cmp	r1, r3
 80053ca:	d002      	beq.n	80053d2 <__sflush_r+0x92>
 80053cc:	4628      	mov	r0, r5
 80053ce:	f000 f9d7 	bl	8005780 <_free_r>
 80053d2:	2000      	movs	r0, #0
 80053d4:	6360      	str	r0, [r4, #52]	; 0x34
 80053d6:	e7c1      	b.n	800535c <__sflush_r+0x1c>
 80053d8:	6a21      	ldr	r1, [r4, #32]
 80053da:	2301      	movs	r3, #1
 80053dc:	4628      	mov	r0, r5
 80053de:	47b0      	blx	r6
 80053e0:	1c41      	adds	r1, r0, #1
 80053e2:	d1c7      	bne.n	8005374 <__sflush_r+0x34>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0c4      	beq.n	8005374 <__sflush_r+0x34>
 80053ea:	2b1d      	cmp	r3, #29
 80053ec:	d001      	beq.n	80053f2 <__sflush_r+0xb2>
 80053ee:	2b16      	cmp	r3, #22
 80053f0:	d101      	bne.n	80053f6 <__sflush_r+0xb6>
 80053f2:	602f      	str	r7, [r5, #0]
 80053f4:	e7b1      	b.n	800535a <__sflush_r+0x1a>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	e7ad      	b.n	800535c <__sflush_r+0x1c>
 8005400:	690f      	ldr	r7, [r1, #16]
 8005402:	2f00      	cmp	r7, #0
 8005404:	d0a9      	beq.n	800535a <__sflush_r+0x1a>
 8005406:	0793      	lsls	r3, r2, #30
 8005408:	680e      	ldr	r6, [r1, #0]
 800540a:	bf08      	it	eq
 800540c:	694b      	ldreq	r3, [r1, #20]
 800540e:	600f      	str	r7, [r1, #0]
 8005410:	bf18      	it	ne
 8005412:	2300      	movne	r3, #0
 8005414:	eba6 0807 	sub.w	r8, r6, r7
 8005418:	608b      	str	r3, [r1, #8]
 800541a:	f1b8 0f00 	cmp.w	r8, #0
 800541e:	dd9c      	ble.n	800535a <__sflush_r+0x1a>
 8005420:	6a21      	ldr	r1, [r4, #32]
 8005422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005424:	4643      	mov	r3, r8
 8005426:	463a      	mov	r2, r7
 8005428:	4628      	mov	r0, r5
 800542a:	47b0      	blx	r6
 800542c:	2800      	cmp	r0, #0
 800542e:	dc06      	bgt.n	800543e <__sflush_r+0xfe>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e78e      	b.n	800535c <__sflush_r+0x1c>
 800543e:	4407      	add	r7, r0
 8005440:	eba8 0800 	sub.w	r8, r8, r0
 8005444:	e7e9      	b.n	800541a <__sflush_r+0xda>
 8005446:	bf00      	nop
 8005448:	20400001 	.word	0x20400001

0800544c <_fflush_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	690b      	ldr	r3, [r1, #16]
 8005450:	4605      	mov	r5, r0
 8005452:	460c      	mov	r4, r1
 8005454:	b913      	cbnz	r3, 800545c <_fflush_r+0x10>
 8005456:	2500      	movs	r5, #0
 8005458:	4628      	mov	r0, r5
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	b118      	cbz	r0, 8005466 <_fflush_r+0x1a>
 800545e:	6983      	ldr	r3, [r0, #24]
 8005460:	b90b      	cbnz	r3, 8005466 <_fflush_r+0x1a>
 8005462:	f000 f887 	bl	8005574 <__sinit>
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <_fflush_r+0x6c>)
 8005468:	429c      	cmp	r4, r3
 800546a:	d11b      	bne.n	80054a4 <_fflush_r+0x58>
 800546c:	686c      	ldr	r4, [r5, #4]
 800546e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ef      	beq.n	8005456 <_fflush_r+0xa>
 8005476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005478:	07d0      	lsls	r0, r2, #31
 800547a:	d404      	bmi.n	8005486 <_fflush_r+0x3a>
 800547c:	0599      	lsls	r1, r3, #22
 800547e:	d402      	bmi.n	8005486 <_fflush_r+0x3a>
 8005480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005482:	f000 f915 	bl	80056b0 <__retarget_lock_acquire_recursive>
 8005486:	4628      	mov	r0, r5
 8005488:	4621      	mov	r1, r4
 800548a:	f7ff ff59 	bl	8005340 <__sflush_r>
 800548e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005490:	07da      	lsls	r2, r3, #31
 8005492:	4605      	mov	r5, r0
 8005494:	d4e0      	bmi.n	8005458 <_fflush_r+0xc>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	059b      	lsls	r3, r3, #22
 800549a:	d4dd      	bmi.n	8005458 <_fflush_r+0xc>
 800549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549e:	f000 f908 	bl	80056b2 <__retarget_lock_release_recursive>
 80054a2:	e7d9      	b.n	8005458 <_fflush_r+0xc>
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <_fflush_r+0x70>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <_fflush_r+0x62>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7df      	b.n	800546e <_fflush_r+0x22>
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <_fflush_r+0x74>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7da      	b.n	800546e <_fflush_r+0x22>
 80054b8:	080061c0 	.word	0x080061c0
 80054bc:	080061e0 	.word	0x080061e0
 80054c0:	080061a0 	.word	0x080061a0

080054c4 <std>:
 80054c4:	2300      	movs	r3, #0
 80054c6:	b510      	push	{r4, lr}
 80054c8:	4604      	mov	r4, r0
 80054ca:	e9c0 3300 	strd	r3, r3, [r0]
 80054ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054d2:	6083      	str	r3, [r0, #8]
 80054d4:	8181      	strh	r1, [r0, #12]
 80054d6:	6643      	str	r3, [r0, #100]	; 0x64
 80054d8:	81c2      	strh	r2, [r0, #14]
 80054da:	6183      	str	r3, [r0, #24]
 80054dc:	4619      	mov	r1, r3
 80054de:	2208      	movs	r2, #8
 80054e0:	305c      	adds	r0, #92	; 0x5c
 80054e2:	f7ff fdd7 	bl	8005094 <memset>
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <std+0x38>)
 80054e8:	6263      	str	r3, [r4, #36]	; 0x24
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <std+0x3c>)
 80054ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <std+0x40>)
 80054f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <std+0x44>)
 80054f4:	6224      	str	r4, [r4, #32]
 80054f6:	6323      	str	r3, [r4, #48]	; 0x30
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	bf00      	nop
 80054fc:	08005f3d 	.word	0x08005f3d
 8005500:	08005f5f 	.word	0x08005f5f
 8005504:	08005f97 	.word	0x08005f97
 8005508:	08005fbb 	.word	0x08005fbb

0800550c <_cleanup_r>:
 800550c:	4901      	ldr	r1, [pc, #4]	; (8005514 <_cleanup_r+0x8>)
 800550e:	f000 b8af 	b.w	8005670 <_fwalk_reent>
 8005512:	bf00      	nop
 8005514:	0800544d 	.word	0x0800544d

08005518 <__sfmoreglue>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	2268      	movs	r2, #104	; 0x68
 800551c:	1e4d      	subs	r5, r1, #1
 800551e:	4355      	muls	r5, r2
 8005520:	460e      	mov	r6, r1
 8005522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005526:	f000 f997 	bl	8005858 <_malloc_r>
 800552a:	4604      	mov	r4, r0
 800552c:	b140      	cbz	r0, 8005540 <__sfmoreglue+0x28>
 800552e:	2100      	movs	r1, #0
 8005530:	e9c0 1600 	strd	r1, r6, [r0]
 8005534:	300c      	adds	r0, #12
 8005536:	60a0      	str	r0, [r4, #8]
 8005538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800553c:	f7ff fdaa 	bl	8005094 <memset>
 8005540:	4620      	mov	r0, r4
 8005542:	bd70      	pop	{r4, r5, r6, pc}

08005544 <__sfp_lock_acquire>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__sfp_lock_acquire+0x8>)
 8005546:	f000 b8b3 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 800554a:	bf00      	nop
 800554c:	20000299 	.word	0x20000299

08005550 <__sfp_lock_release>:
 8005550:	4801      	ldr	r0, [pc, #4]	; (8005558 <__sfp_lock_release+0x8>)
 8005552:	f000 b8ae 	b.w	80056b2 <__retarget_lock_release_recursive>
 8005556:	bf00      	nop
 8005558:	20000299 	.word	0x20000299

0800555c <__sinit_lock_acquire>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__sinit_lock_acquire+0x8>)
 800555e:	f000 b8a7 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 8005562:	bf00      	nop
 8005564:	2000029a 	.word	0x2000029a

08005568 <__sinit_lock_release>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__sinit_lock_release+0x8>)
 800556a:	f000 b8a2 	b.w	80056b2 <__retarget_lock_release_recursive>
 800556e:	bf00      	nop
 8005570:	2000029a 	.word	0x2000029a

08005574 <__sinit>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4604      	mov	r4, r0
 8005578:	f7ff fff0 	bl	800555c <__sinit_lock_acquire>
 800557c:	69a3      	ldr	r3, [r4, #24]
 800557e:	b11b      	cbz	r3, 8005588 <__sinit+0x14>
 8005580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005584:	f7ff bff0 	b.w	8005568 <__sinit_lock_release>
 8005588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800558c:	6523      	str	r3, [r4, #80]	; 0x50
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <__sinit+0x68>)
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <__sinit+0x6c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	62a2      	str	r2, [r4, #40]	; 0x28
 8005596:	42a3      	cmp	r3, r4
 8005598:	bf04      	itt	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	61a3      	streq	r3, [r4, #24]
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 f820 	bl	80055e4 <__sfp>
 80055a4:	6060      	str	r0, [r4, #4]
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f81c 	bl	80055e4 <__sfp>
 80055ac:	60a0      	str	r0, [r4, #8]
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 f818 	bl	80055e4 <__sfp>
 80055b4:	2200      	movs	r2, #0
 80055b6:	60e0      	str	r0, [r4, #12]
 80055b8:	2104      	movs	r1, #4
 80055ba:	6860      	ldr	r0, [r4, #4]
 80055bc:	f7ff ff82 	bl	80054c4 <std>
 80055c0:	68a0      	ldr	r0, [r4, #8]
 80055c2:	2201      	movs	r2, #1
 80055c4:	2109      	movs	r1, #9
 80055c6:	f7ff ff7d 	bl	80054c4 <std>
 80055ca:	68e0      	ldr	r0, [r4, #12]
 80055cc:	2202      	movs	r2, #2
 80055ce:	2112      	movs	r1, #18
 80055d0:	f7ff ff78 	bl	80054c4 <std>
 80055d4:	2301      	movs	r3, #1
 80055d6:	61a3      	str	r3, [r4, #24]
 80055d8:	e7d2      	b.n	8005580 <__sinit+0xc>
 80055da:	bf00      	nop
 80055dc:	0800619c 	.word	0x0800619c
 80055e0:	0800550d 	.word	0x0800550d

080055e4 <__sfp>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	4607      	mov	r7, r0
 80055e8:	f7ff ffac 	bl	8005544 <__sfp_lock_acquire>
 80055ec:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <__sfp+0x84>)
 80055ee:	681e      	ldr	r6, [r3, #0]
 80055f0:	69b3      	ldr	r3, [r6, #24]
 80055f2:	b913      	cbnz	r3, 80055fa <__sfp+0x16>
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7ff ffbd 	bl	8005574 <__sinit>
 80055fa:	3648      	adds	r6, #72	; 0x48
 80055fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005600:	3b01      	subs	r3, #1
 8005602:	d503      	bpl.n	800560c <__sfp+0x28>
 8005604:	6833      	ldr	r3, [r6, #0]
 8005606:	b30b      	cbz	r3, 800564c <__sfp+0x68>
 8005608:	6836      	ldr	r6, [r6, #0]
 800560a:	e7f7      	b.n	80055fc <__sfp+0x18>
 800560c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005610:	b9d5      	cbnz	r5, 8005648 <__sfp+0x64>
 8005612:	4b16      	ldr	r3, [pc, #88]	; (800566c <__sfp+0x88>)
 8005614:	60e3      	str	r3, [r4, #12]
 8005616:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800561a:	6665      	str	r5, [r4, #100]	; 0x64
 800561c:	f000 f847 	bl	80056ae <__retarget_lock_init_recursive>
 8005620:	f7ff ff96 	bl	8005550 <__sfp_lock_release>
 8005624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800562c:	6025      	str	r5, [r4, #0]
 800562e:	61a5      	str	r5, [r4, #24]
 8005630:	2208      	movs	r2, #8
 8005632:	4629      	mov	r1, r5
 8005634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005638:	f7ff fd2c 	bl	8005094 <memset>
 800563c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005644:	4620      	mov	r0, r4
 8005646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005648:	3468      	adds	r4, #104	; 0x68
 800564a:	e7d9      	b.n	8005600 <__sfp+0x1c>
 800564c:	2104      	movs	r1, #4
 800564e:	4638      	mov	r0, r7
 8005650:	f7ff ff62 	bl	8005518 <__sfmoreglue>
 8005654:	4604      	mov	r4, r0
 8005656:	6030      	str	r0, [r6, #0]
 8005658:	2800      	cmp	r0, #0
 800565a:	d1d5      	bne.n	8005608 <__sfp+0x24>
 800565c:	f7ff ff78 	bl	8005550 <__sfp_lock_release>
 8005660:	230c      	movs	r3, #12
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	e7ee      	b.n	8005644 <__sfp+0x60>
 8005666:	bf00      	nop
 8005668:	0800619c 	.word	0x0800619c
 800566c:	ffff0001 	.word	0xffff0001

08005670 <_fwalk_reent>:
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	4606      	mov	r6, r0
 8005676:	4688      	mov	r8, r1
 8005678:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800567c:	2700      	movs	r7, #0
 800567e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005682:	f1b9 0901 	subs.w	r9, r9, #1
 8005686:	d505      	bpl.n	8005694 <_fwalk_reent+0x24>
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	2c00      	cmp	r4, #0
 800568c:	d1f7      	bne.n	800567e <_fwalk_reent+0xe>
 800568e:	4638      	mov	r0, r7
 8005690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005694:	89ab      	ldrh	r3, [r5, #12]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d907      	bls.n	80056aa <_fwalk_reent+0x3a>
 800569a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800569e:	3301      	adds	r3, #1
 80056a0:	d003      	beq.n	80056aa <_fwalk_reent+0x3a>
 80056a2:	4629      	mov	r1, r5
 80056a4:	4630      	mov	r0, r6
 80056a6:	47c0      	blx	r8
 80056a8:	4307      	orrs	r7, r0
 80056aa:	3568      	adds	r5, #104	; 0x68
 80056ac:	e7e9      	b.n	8005682 <_fwalk_reent+0x12>

080056ae <__retarget_lock_init_recursive>:
 80056ae:	4770      	bx	lr

080056b0 <__retarget_lock_acquire_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_release_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <__swhatbuf_r>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	460e      	mov	r6, r1
 80056b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056bc:	2900      	cmp	r1, #0
 80056be:	b096      	sub	sp, #88	; 0x58
 80056c0:	4614      	mov	r4, r2
 80056c2:	461d      	mov	r5, r3
 80056c4:	da08      	bge.n	80056d8 <__swhatbuf_r+0x24>
 80056c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	602a      	str	r2, [r5, #0]
 80056ce:	061a      	lsls	r2, r3, #24
 80056d0:	d410      	bmi.n	80056f4 <__swhatbuf_r+0x40>
 80056d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d6:	e00e      	b.n	80056f6 <__swhatbuf_r+0x42>
 80056d8:	466a      	mov	r2, sp
 80056da:	f000 fc95 	bl	8006008 <_fstat_r>
 80056de:	2800      	cmp	r0, #0
 80056e0:	dbf1      	blt.n	80056c6 <__swhatbuf_r+0x12>
 80056e2:	9a01      	ldr	r2, [sp, #4]
 80056e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056ec:	425a      	negs	r2, r3
 80056ee:	415a      	adcs	r2, r3
 80056f0:	602a      	str	r2, [r5, #0]
 80056f2:	e7ee      	b.n	80056d2 <__swhatbuf_r+0x1e>
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	2000      	movs	r0, #0
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	b016      	add	sp, #88	; 0x58
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005700 <__smakebuf_r>:
 8005700:	898b      	ldrh	r3, [r1, #12]
 8005702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005704:	079d      	lsls	r5, r3, #30
 8005706:	4606      	mov	r6, r0
 8005708:	460c      	mov	r4, r1
 800570a:	d507      	bpl.n	800571c <__smakebuf_r+0x1c>
 800570c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	2301      	movs	r3, #1
 8005716:	6163      	str	r3, [r4, #20]
 8005718:	b002      	add	sp, #8
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	ab01      	add	r3, sp, #4
 800571e:	466a      	mov	r2, sp
 8005720:	f7ff ffc8 	bl	80056b4 <__swhatbuf_r>
 8005724:	9900      	ldr	r1, [sp, #0]
 8005726:	4605      	mov	r5, r0
 8005728:	4630      	mov	r0, r6
 800572a:	f000 f895 	bl	8005858 <_malloc_r>
 800572e:	b948      	cbnz	r0, 8005744 <__smakebuf_r+0x44>
 8005730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005734:	059a      	lsls	r2, r3, #22
 8005736:	d4ef      	bmi.n	8005718 <__smakebuf_r+0x18>
 8005738:	f023 0303 	bic.w	r3, r3, #3
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	e7e3      	b.n	800570c <__smakebuf_r+0xc>
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <__smakebuf_r+0x7c>)
 8005746:	62b3      	str	r3, [r6, #40]	; 0x28
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	6020      	str	r0, [r4, #0]
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	9b00      	ldr	r3, [sp, #0]
 8005754:	6163      	str	r3, [r4, #20]
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	6120      	str	r0, [r4, #16]
 800575a:	b15b      	cbz	r3, 8005774 <__smakebuf_r+0x74>
 800575c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005760:	4630      	mov	r0, r6
 8005762:	f000 fc63 	bl	800602c <_isatty_r>
 8005766:	b128      	cbz	r0, 8005774 <__smakebuf_r+0x74>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	81a3      	strh	r3, [r4, #12]
 8005774:	89a0      	ldrh	r0, [r4, #12]
 8005776:	4305      	orrs	r5, r0
 8005778:	81a5      	strh	r5, [r4, #12]
 800577a:	e7cd      	b.n	8005718 <__smakebuf_r+0x18>
 800577c:	0800550d 	.word	0x0800550d

08005780 <_free_r>:
 8005780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	d044      	beq.n	8005810 <_free_r+0x90>
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	9001      	str	r0, [sp, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f1a1 0404 	sub.w	r4, r1, #4
 8005792:	bfb8      	it	lt
 8005794:	18e4      	addlt	r4, r4, r3
 8005796:	f000 fc6b 	bl	8006070 <__malloc_lock>
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <_free_r+0x94>)
 800579c:	9801      	ldr	r0, [sp, #4]
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	b933      	cbnz	r3, 80057b0 <_free_r+0x30>
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6014      	str	r4, [r2, #0]
 80057a6:	b003      	add	sp, #12
 80057a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ac:	f000 bc66 	b.w	800607c <__malloc_unlock>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d908      	bls.n	80057c6 <_free_r+0x46>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf01      	itttt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	1949      	addeq	r1, r1, r5
 80057c2:	6021      	streq	r1, [r4, #0]
 80057c4:	e7ed      	b.n	80057a2 <_free_r+0x22>
 80057c6:	461a      	mov	r2, r3
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b10b      	cbz	r3, 80057d0 <_free_r+0x50>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x46>
 80057d0:	6811      	ldr	r1, [r2, #0]
 80057d2:	1855      	adds	r5, r2, r1
 80057d4:	42a5      	cmp	r5, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x70>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	4421      	add	r1, r4
 80057dc:	1854      	adds	r4, r2, r1
 80057de:	42a3      	cmp	r3, r4
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	d1e0      	bne.n	80057a6 <_free_r+0x26>
 80057e4:	681c      	ldr	r4, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	4421      	add	r1, r4
 80057ec:	6011      	str	r1, [r2, #0]
 80057ee:	e7da      	b.n	80057a6 <_free_r+0x26>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x78>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6003      	str	r3, [r0, #0]
 80057f6:	e7d6      	b.n	80057a6 <_free_r+0x26>
 80057f8:	6825      	ldr	r5, [r4, #0]
 80057fa:	1961      	adds	r1, r4, r5
 80057fc:	428b      	cmp	r3, r1
 80057fe:	bf04      	itt	eq
 8005800:	6819      	ldreq	r1, [r3, #0]
 8005802:	685b      	ldreq	r3, [r3, #4]
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	bf04      	itt	eq
 8005808:	1949      	addeq	r1, r1, r5
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	6054      	str	r4, [r2, #4]
 800580e:	e7ca      	b.n	80057a6 <_free_r+0x26>
 8005810:	b003      	add	sp, #12
 8005812:	bd30      	pop	{r4, r5, pc}
 8005814:	2000029c 	.word	0x2000029c

08005818 <sbrk_aligned>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4e0e      	ldr	r6, [pc, #56]	; (8005854 <sbrk_aligned+0x3c>)
 800581c:	460c      	mov	r4, r1
 800581e:	6831      	ldr	r1, [r6, #0]
 8005820:	4605      	mov	r5, r0
 8005822:	b911      	cbnz	r1, 800582a <sbrk_aligned+0x12>
 8005824:	f000 fb7a 	bl	8005f1c <_sbrk_r>
 8005828:	6030      	str	r0, [r6, #0]
 800582a:	4621      	mov	r1, r4
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fb75 	bl	8005f1c <_sbrk_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d00a      	beq.n	800584c <sbrk_aligned+0x34>
 8005836:	1cc4      	adds	r4, r0, #3
 8005838:	f024 0403 	bic.w	r4, r4, #3
 800583c:	42a0      	cmp	r0, r4
 800583e:	d007      	beq.n	8005850 <sbrk_aligned+0x38>
 8005840:	1a21      	subs	r1, r4, r0
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fb6a 	bl	8005f1c <_sbrk_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d101      	bne.n	8005850 <sbrk_aligned+0x38>
 800584c:	f04f 34ff 	mov.w	r4, #4294967295
 8005850:	4620      	mov	r0, r4
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	200002a0 	.word	0x200002a0

08005858 <_malloc_r>:
 8005858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585c:	1ccd      	adds	r5, r1, #3
 800585e:	f025 0503 	bic.w	r5, r5, #3
 8005862:	3508      	adds	r5, #8
 8005864:	2d0c      	cmp	r5, #12
 8005866:	bf38      	it	cc
 8005868:	250c      	movcc	r5, #12
 800586a:	2d00      	cmp	r5, #0
 800586c:	4607      	mov	r7, r0
 800586e:	db01      	blt.n	8005874 <_malloc_r+0x1c>
 8005870:	42a9      	cmp	r1, r5
 8005872:	d905      	bls.n	8005880 <_malloc_r+0x28>
 8005874:	230c      	movs	r3, #12
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	2600      	movs	r6, #0
 800587a:	4630      	mov	r0, r6
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	4e2e      	ldr	r6, [pc, #184]	; (800593c <_malloc_r+0xe4>)
 8005882:	f000 fbf5 	bl	8006070 <__malloc_lock>
 8005886:	6833      	ldr	r3, [r6, #0]
 8005888:	461c      	mov	r4, r3
 800588a:	bb34      	cbnz	r4, 80058da <_malloc_r+0x82>
 800588c:	4629      	mov	r1, r5
 800588e:	4638      	mov	r0, r7
 8005890:	f7ff ffc2 	bl	8005818 <sbrk_aligned>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	4604      	mov	r4, r0
 8005898:	d14d      	bne.n	8005936 <_malloc_r+0xde>
 800589a:	6834      	ldr	r4, [r6, #0]
 800589c:	4626      	mov	r6, r4
 800589e:	2e00      	cmp	r6, #0
 80058a0:	d140      	bne.n	8005924 <_malloc_r+0xcc>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	4631      	mov	r1, r6
 80058a6:	4638      	mov	r0, r7
 80058a8:	eb04 0803 	add.w	r8, r4, r3
 80058ac:	f000 fb36 	bl	8005f1c <_sbrk_r>
 80058b0:	4580      	cmp	r8, r0
 80058b2:	d13a      	bne.n	800592a <_malloc_r+0xd2>
 80058b4:	6821      	ldr	r1, [r4, #0]
 80058b6:	3503      	adds	r5, #3
 80058b8:	1a6d      	subs	r5, r5, r1
 80058ba:	f025 0503 	bic.w	r5, r5, #3
 80058be:	3508      	adds	r5, #8
 80058c0:	2d0c      	cmp	r5, #12
 80058c2:	bf38      	it	cc
 80058c4:	250c      	movcc	r5, #12
 80058c6:	4629      	mov	r1, r5
 80058c8:	4638      	mov	r0, r7
 80058ca:	f7ff ffa5 	bl	8005818 <sbrk_aligned>
 80058ce:	3001      	adds	r0, #1
 80058d0:	d02b      	beq.n	800592a <_malloc_r+0xd2>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	442b      	add	r3, r5
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	e00e      	b.n	80058f8 <_malloc_r+0xa0>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	1b52      	subs	r2, r2, r5
 80058de:	d41e      	bmi.n	800591e <_malloc_r+0xc6>
 80058e0:	2a0b      	cmp	r2, #11
 80058e2:	d916      	bls.n	8005912 <_malloc_r+0xba>
 80058e4:	1961      	adds	r1, r4, r5
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	6025      	str	r5, [r4, #0]
 80058ea:	bf18      	it	ne
 80058ec:	6059      	strne	r1, [r3, #4]
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	bf08      	it	eq
 80058f2:	6031      	streq	r1, [r6, #0]
 80058f4:	5162      	str	r2, [r4, r5]
 80058f6:	604b      	str	r3, [r1, #4]
 80058f8:	4638      	mov	r0, r7
 80058fa:	f104 060b 	add.w	r6, r4, #11
 80058fe:	f000 fbbd 	bl	800607c <__malloc_unlock>
 8005902:	f026 0607 	bic.w	r6, r6, #7
 8005906:	1d23      	adds	r3, r4, #4
 8005908:	1af2      	subs	r2, r6, r3
 800590a:	d0b6      	beq.n	800587a <_malloc_r+0x22>
 800590c:	1b9b      	subs	r3, r3, r6
 800590e:	50a3      	str	r3, [r4, r2]
 8005910:	e7b3      	b.n	800587a <_malloc_r+0x22>
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	42a3      	cmp	r3, r4
 8005916:	bf0c      	ite	eq
 8005918:	6032      	streq	r2, [r6, #0]
 800591a:	605a      	strne	r2, [r3, #4]
 800591c:	e7ec      	b.n	80058f8 <_malloc_r+0xa0>
 800591e:	4623      	mov	r3, r4
 8005920:	6864      	ldr	r4, [r4, #4]
 8005922:	e7b2      	b.n	800588a <_malloc_r+0x32>
 8005924:	4634      	mov	r4, r6
 8005926:	6876      	ldr	r6, [r6, #4]
 8005928:	e7b9      	b.n	800589e <_malloc_r+0x46>
 800592a:	230c      	movs	r3, #12
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4638      	mov	r0, r7
 8005930:	f000 fba4 	bl	800607c <__malloc_unlock>
 8005934:	e7a1      	b.n	800587a <_malloc_r+0x22>
 8005936:	6025      	str	r5, [r4, #0]
 8005938:	e7de      	b.n	80058f8 <_malloc_r+0xa0>
 800593a:	bf00      	nop
 800593c:	2000029c 	.word	0x2000029c

08005940 <__sfputc_r>:
 8005940:	6893      	ldr	r3, [r2, #8]
 8005942:	3b01      	subs	r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	b410      	push	{r4}
 8005948:	6093      	str	r3, [r2, #8]
 800594a:	da08      	bge.n	800595e <__sfputc_r+0x1e>
 800594c:	6994      	ldr	r4, [r2, #24]
 800594e:	42a3      	cmp	r3, r4
 8005950:	db01      	blt.n	8005956 <__sfputc_r+0x16>
 8005952:	290a      	cmp	r1, #10
 8005954:	d103      	bne.n	800595e <__sfputc_r+0x1e>
 8005956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800595a:	f7ff bc31 	b.w	80051c0 <__swbuf_r>
 800595e:	6813      	ldr	r3, [r2, #0]
 8005960:	1c58      	adds	r0, r3, #1
 8005962:	6010      	str	r0, [r2, #0]
 8005964:	7019      	strb	r1, [r3, #0]
 8005966:	4608      	mov	r0, r1
 8005968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800596c:	4770      	bx	lr

0800596e <__sfputs_r>:
 800596e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005970:	4606      	mov	r6, r0
 8005972:	460f      	mov	r7, r1
 8005974:	4614      	mov	r4, r2
 8005976:	18d5      	adds	r5, r2, r3
 8005978:	42ac      	cmp	r4, r5
 800597a:	d101      	bne.n	8005980 <__sfputs_r+0x12>
 800597c:	2000      	movs	r0, #0
 800597e:	e007      	b.n	8005990 <__sfputs_r+0x22>
 8005980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005984:	463a      	mov	r2, r7
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff ffda 	bl	8005940 <__sfputc_r>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d1f3      	bne.n	8005978 <__sfputs_r+0xa>
 8005990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005994 <_vfiprintf_r>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	460d      	mov	r5, r1
 800599a:	b09d      	sub	sp, #116	; 0x74
 800599c:	4614      	mov	r4, r2
 800599e:	4698      	mov	r8, r3
 80059a0:	4606      	mov	r6, r0
 80059a2:	b118      	cbz	r0, 80059ac <_vfiprintf_r+0x18>
 80059a4:	6983      	ldr	r3, [r0, #24]
 80059a6:	b90b      	cbnz	r3, 80059ac <_vfiprintf_r+0x18>
 80059a8:	f7ff fde4 	bl	8005574 <__sinit>
 80059ac:	4b89      	ldr	r3, [pc, #548]	; (8005bd4 <_vfiprintf_r+0x240>)
 80059ae:	429d      	cmp	r5, r3
 80059b0:	d11b      	bne.n	80059ea <_vfiprintf_r+0x56>
 80059b2:	6875      	ldr	r5, [r6, #4]
 80059b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b6:	07d9      	lsls	r1, r3, #31
 80059b8:	d405      	bmi.n	80059c6 <_vfiprintf_r+0x32>
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	059a      	lsls	r2, r3, #22
 80059be:	d402      	bmi.n	80059c6 <_vfiprintf_r+0x32>
 80059c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059c2:	f7ff fe75 	bl	80056b0 <__retarget_lock_acquire_recursive>
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	071b      	lsls	r3, r3, #28
 80059ca:	d501      	bpl.n	80059d0 <_vfiprintf_r+0x3c>
 80059cc:	692b      	ldr	r3, [r5, #16]
 80059ce:	b9eb      	cbnz	r3, 8005a0c <_vfiprintf_r+0x78>
 80059d0:	4629      	mov	r1, r5
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7ff fc46 	bl	8005264 <__swsetup_r>
 80059d8:	b1c0      	cbz	r0, 8005a0c <_vfiprintf_r+0x78>
 80059da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059dc:	07dc      	lsls	r4, r3, #31
 80059de:	d50e      	bpl.n	80059fe <_vfiprintf_r+0x6a>
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	b01d      	add	sp, #116	; 0x74
 80059e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ea:	4b7b      	ldr	r3, [pc, #492]	; (8005bd8 <_vfiprintf_r+0x244>)
 80059ec:	429d      	cmp	r5, r3
 80059ee:	d101      	bne.n	80059f4 <_vfiprintf_r+0x60>
 80059f0:	68b5      	ldr	r5, [r6, #8]
 80059f2:	e7df      	b.n	80059b4 <_vfiprintf_r+0x20>
 80059f4:	4b79      	ldr	r3, [pc, #484]	; (8005bdc <_vfiprintf_r+0x248>)
 80059f6:	429d      	cmp	r5, r3
 80059f8:	bf08      	it	eq
 80059fa:	68f5      	ldreq	r5, [r6, #12]
 80059fc:	e7da      	b.n	80059b4 <_vfiprintf_r+0x20>
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	0598      	lsls	r0, r3, #22
 8005a02:	d4ed      	bmi.n	80059e0 <_vfiprintf_r+0x4c>
 8005a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a06:	f7ff fe54 	bl	80056b2 <__retarget_lock_release_recursive>
 8005a0a:	e7e9      	b.n	80059e0 <_vfiprintf_r+0x4c>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a10:	2320      	movs	r3, #32
 8005a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a1a:	2330      	movs	r3, #48	; 0x30
 8005a1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005be0 <_vfiprintf_r+0x24c>
 8005a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a24:	f04f 0901 	mov.w	r9, #1
 8005a28:	4623      	mov	r3, r4
 8005a2a:	469a      	mov	sl, r3
 8005a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a30:	b10a      	cbz	r2, 8005a36 <_vfiprintf_r+0xa2>
 8005a32:	2a25      	cmp	r2, #37	; 0x25
 8005a34:	d1f9      	bne.n	8005a2a <_vfiprintf_r+0x96>
 8005a36:	ebba 0b04 	subs.w	fp, sl, r4
 8005a3a:	d00b      	beq.n	8005a54 <_vfiprintf_r+0xc0>
 8005a3c:	465b      	mov	r3, fp
 8005a3e:	4622      	mov	r2, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff ff93 	bl	800596e <__sfputs_r>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f000 80aa 	beq.w	8005ba2 <_vfiprintf_r+0x20e>
 8005a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a50:	445a      	add	r2, fp
 8005a52:	9209      	str	r2, [sp, #36]	; 0x24
 8005a54:	f89a 3000 	ldrb.w	r3, [sl]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a2 	beq.w	8005ba2 <_vfiprintf_r+0x20e>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295
 8005a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a68:	f10a 0a01 	add.w	sl, sl, #1
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	9307      	str	r3, [sp, #28]
 8005a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a74:	931a      	str	r3, [sp, #104]	; 0x68
 8005a76:	4654      	mov	r4, sl
 8005a78:	2205      	movs	r2, #5
 8005a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7e:	4858      	ldr	r0, [pc, #352]	; (8005be0 <_vfiprintf_r+0x24c>)
 8005a80:	f7fa fba6 	bl	80001d0 <memchr>
 8005a84:	9a04      	ldr	r2, [sp, #16]
 8005a86:	b9d8      	cbnz	r0, 8005ac0 <_vfiprintf_r+0x12c>
 8005a88:	06d1      	lsls	r1, r2, #27
 8005a8a:	bf44      	itt	mi
 8005a8c:	2320      	movmi	r3, #32
 8005a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a92:	0713      	lsls	r3, r2, #28
 8005a94:	bf44      	itt	mi
 8005a96:	232b      	movmi	r3, #43	; 0x2b
 8005a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa2:	d015      	beq.n	8005ad0 <_vfiprintf_r+0x13c>
 8005aa4:	9a07      	ldr	r2, [sp, #28]
 8005aa6:	4654      	mov	r4, sl
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f04f 0c0a 	mov.w	ip, #10
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ab4:	3b30      	subs	r3, #48	; 0x30
 8005ab6:	2b09      	cmp	r3, #9
 8005ab8:	d94e      	bls.n	8005b58 <_vfiprintf_r+0x1c4>
 8005aba:	b1b0      	cbz	r0, 8005aea <_vfiprintf_r+0x156>
 8005abc:	9207      	str	r2, [sp, #28]
 8005abe:	e014      	b.n	8005aea <_vfiprintf_r+0x156>
 8005ac0:	eba0 0308 	sub.w	r3, r0, r8
 8005ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	9304      	str	r3, [sp, #16]
 8005acc:	46a2      	mov	sl, r4
 8005ace:	e7d2      	b.n	8005a76 <_vfiprintf_r+0xe2>
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	1d19      	adds	r1, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	9103      	str	r1, [sp, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bfbb      	ittet	lt
 8005adc:	425b      	neglt	r3, r3
 8005ade:	f042 0202 	orrlt.w	r2, r2, #2
 8005ae2:	9307      	strge	r3, [sp, #28]
 8005ae4:	9307      	strlt	r3, [sp, #28]
 8005ae6:	bfb8      	it	lt
 8005ae8:	9204      	strlt	r2, [sp, #16]
 8005aea:	7823      	ldrb	r3, [r4, #0]
 8005aec:	2b2e      	cmp	r3, #46	; 0x2e
 8005aee:	d10c      	bne.n	8005b0a <_vfiprintf_r+0x176>
 8005af0:	7863      	ldrb	r3, [r4, #1]
 8005af2:	2b2a      	cmp	r3, #42	; 0x2a
 8005af4:	d135      	bne.n	8005b62 <_vfiprintf_r+0x1ce>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	1d1a      	adds	r2, r3, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	9203      	str	r2, [sp, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bfb8      	it	lt
 8005b02:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b06:	3402      	adds	r4, #2
 8005b08:	9305      	str	r3, [sp, #20]
 8005b0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bf0 <_vfiprintf_r+0x25c>
 8005b0e:	7821      	ldrb	r1, [r4, #0]
 8005b10:	2203      	movs	r2, #3
 8005b12:	4650      	mov	r0, sl
 8005b14:	f7fa fb5c 	bl	80001d0 <memchr>
 8005b18:	b140      	cbz	r0, 8005b2c <_vfiprintf_r+0x198>
 8005b1a:	2340      	movs	r3, #64	; 0x40
 8005b1c:	eba0 000a 	sub.w	r0, r0, sl
 8005b20:	fa03 f000 	lsl.w	r0, r3, r0
 8005b24:	9b04      	ldr	r3, [sp, #16]
 8005b26:	4303      	orrs	r3, r0
 8005b28:	3401      	adds	r4, #1
 8005b2a:	9304      	str	r3, [sp, #16]
 8005b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b30:	482c      	ldr	r0, [pc, #176]	; (8005be4 <_vfiprintf_r+0x250>)
 8005b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b36:	2206      	movs	r2, #6
 8005b38:	f7fa fb4a 	bl	80001d0 <memchr>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d03f      	beq.n	8005bc0 <_vfiprintf_r+0x22c>
 8005b40:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <_vfiprintf_r+0x254>)
 8005b42:	bb1b      	cbnz	r3, 8005b8c <_vfiprintf_r+0x1f8>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	3307      	adds	r3, #7
 8005b48:	f023 0307 	bic.w	r3, r3, #7
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b52:	443b      	add	r3, r7
 8005b54:	9309      	str	r3, [sp, #36]	; 0x24
 8005b56:	e767      	b.n	8005a28 <_vfiprintf_r+0x94>
 8005b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	2001      	movs	r0, #1
 8005b60:	e7a5      	b.n	8005aae <_vfiprintf_r+0x11a>
 8005b62:	2300      	movs	r3, #0
 8005b64:	3401      	adds	r4, #1
 8005b66:	9305      	str	r3, [sp, #20]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f04f 0c0a 	mov.w	ip, #10
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b74:	3a30      	subs	r2, #48	; 0x30
 8005b76:	2a09      	cmp	r2, #9
 8005b78:	d903      	bls.n	8005b82 <_vfiprintf_r+0x1ee>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0c5      	beq.n	8005b0a <_vfiprintf_r+0x176>
 8005b7e:	9105      	str	r1, [sp, #20]
 8005b80:	e7c3      	b.n	8005b0a <_vfiprintf_r+0x176>
 8005b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b86:	4604      	mov	r4, r0
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e7f0      	b.n	8005b6e <_vfiprintf_r+0x1da>
 8005b8c:	ab03      	add	r3, sp, #12
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	462a      	mov	r2, r5
 8005b92:	4b16      	ldr	r3, [pc, #88]	; (8005bec <_vfiprintf_r+0x258>)
 8005b94:	a904      	add	r1, sp, #16
 8005b96:	4630      	mov	r0, r6
 8005b98:	f3af 8000 	nop.w
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	1c78      	adds	r0, r7, #1
 8005ba0:	d1d6      	bne.n	8005b50 <_vfiprintf_r+0x1bc>
 8005ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ba4:	07d9      	lsls	r1, r3, #31
 8005ba6:	d405      	bmi.n	8005bb4 <_vfiprintf_r+0x220>
 8005ba8:	89ab      	ldrh	r3, [r5, #12]
 8005baa:	059a      	lsls	r2, r3, #22
 8005bac:	d402      	bmi.n	8005bb4 <_vfiprintf_r+0x220>
 8005bae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bb0:	f7ff fd7f 	bl	80056b2 <__retarget_lock_release_recursive>
 8005bb4:	89ab      	ldrh	r3, [r5, #12]
 8005bb6:	065b      	lsls	r3, r3, #25
 8005bb8:	f53f af12 	bmi.w	80059e0 <_vfiprintf_r+0x4c>
 8005bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bbe:	e711      	b.n	80059e4 <_vfiprintf_r+0x50>
 8005bc0:	ab03      	add	r3, sp, #12
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	462a      	mov	r2, r5
 8005bc6:	4b09      	ldr	r3, [pc, #36]	; (8005bec <_vfiprintf_r+0x258>)
 8005bc8:	a904      	add	r1, sp, #16
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 f880 	bl	8005cd0 <_printf_i>
 8005bd0:	e7e4      	b.n	8005b9c <_vfiprintf_r+0x208>
 8005bd2:	bf00      	nop
 8005bd4:	080061c0 	.word	0x080061c0
 8005bd8:	080061e0 	.word	0x080061e0
 8005bdc:	080061a0 	.word	0x080061a0
 8005be0:	08006200 	.word	0x08006200
 8005be4:	0800620a 	.word	0x0800620a
 8005be8:	00000000 	.word	0x00000000
 8005bec:	0800596f 	.word	0x0800596f
 8005bf0:	08006206 	.word	0x08006206

08005bf4 <_printf_common>:
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	4699      	mov	r9, r3
 8005bfc:	688a      	ldr	r2, [r1, #8]
 8005bfe:	690b      	ldr	r3, [r1, #16]
 8005c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bfb8      	it	lt
 8005c08:	4613      	movlt	r3, r2
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c10:	4607      	mov	r7, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b10a      	cbz	r2, 8005c1a <_printf_common+0x26>
 8005c16:	3301      	adds	r3, #1
 8005c18:	6033      	str	r3, [r6, #0]
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	0699      	lsls	r1, r3, #26
 8005c1e:	bf42      	ittt	mi
 8005c20:	6833      	ldrmi	r3, [r6, #0]
 8005c22:	3302      	addmi	r3, #2
 8005c24:	6033      	strmi	r3, [r6, #0]
 8005c26:	6825      	ldr	r5, [r4, #0]
 8005c28:	f015 0506 	ands.w	r5, r5, #6
 8005c2c:	d106      	bne.n	8005c3c <_printf_common+0x48>
 8005c2e:	f104 0a19 	add.w	sl, r4, #25
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	6832      	ldr	r2, [r6, #0]
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	42ab      	cmp	r3, r5
 8005c3a:	dc26      	bgt.n	8005c8a <_printf_common+0x96>
 8005c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c40:	1e13      	subs	r3, r2, #0
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	bf18      	it	ne
 8005c46:	2301      	movne	r3, #1
 8005c48:	0692      	lsls	r2, r2, #26
 8005c4a:	d42b      	bmi.n	8005ca4 <_printf_common+0xb0>
 8005c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c50:	4649      	mov	r1, r9
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c0      	blx	r8
 8005c56:	3001      	adds	r0, #1
 8005c58:	d01e      	beq.n	8005c98 <_printf_common+0xa4>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	68e5      	ldr	r5, [r4, #12]
 8005c5e:	6832      	ldr	r2, [r6, #0]
 8005c60:	f003 0306 	and.w	r3, r3, #6
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	bf08      	it	eq
 8005c68:	1aad      	subeq	r5, r5, r2
 8005c6a:	68a3      	ldr	r3, [r4, #8]
 8005c6c:	6922      	ldr	r2, [r4, #16]
 8005c6e:	bf0c      	ite	eq
 8005c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c74:	2500      	movne	r5, #0
 8005c76:	4293      	cmp	r3, r2
 8005c78:	bfc4      	itt	gt
 8005c7a:	1a9b      	subgt	r3, r3, r2
 8005c7c:	18ed      	addgt	r5, r5, r3
 8005c7e:	2600      	movs	r6, #0
 8005c80:	341a      	adds	r4, #26
 8005c82:	42b5      	cmp	r5, r6
 8005c84:	d11a      	bne.n	8005cbc <_printf_common+0xc8>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e008      	b.n	8005c9c <_printf_common+0xa8>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4638      	mov	r0, r7
 8005c92:	47c0      	blx	r8
 8005c94:	3001      	adds	r0, #1
 8005c96:	d103      	bne.n	8005ca0 <_printf_common+0xac>
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca0:	3501      	adds	r5, #1
 8005ca2:	e7c6      	b.n	8005c32 <_printf_common+0x3e>
 8005ca4:	18e1      	adds	r1, r4, r3
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	2030      	movs	r0, #48	; 0x30
 8005caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cae:	4422      	add	r2, r4
 8005cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb8:	3302      	adds	r3, #2
 8005cba:	e7c7      	b.n	8005c4c <_printf_common+0x58>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c0      	blx	r8
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d0e6      	beq.n	8005c98 <_printf_common+0xa4>
 8005cca:	3601      	adds	r6, #1
 8005ccc:	e7d9      	b.n	8005c82 <_printf_common+0x8e>
	...

08005cd0 <_printf_i>:
 8005cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	7e0f      	ldrb	r7, [r1, #24]
 8005cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cd8:	2f78      	cmp	r7, #120	; 0x78
 8005cda:	4691      	mov	r9, r2
 8005cdc:	4680      	mov	r8, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	469a      	mov	sl, r3
 8005ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ce6:	d807      	bhi.n	8005cf8 <_printf_i+0x28>
 8005ce8:	2f62      	cmp	r7, #98	; 0x62
 8005cea:	d80a      	bhi.n	8005d02 <_printf_i+0x32>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	f000 80d8 	beq.w	8005ea2 <_printf_i+0x1d2>
 8005cf2:	2f58      	cmp	r7, #88	; 0x58
 8005cf4:	f000 80a3 	beq.w	8005e3e <_printf_i+0x16e>
 8005cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d00:	e03a      	b.n	8005d78 <_printf_i+0xa8>
 8005d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d06:	2b15      	cmp	r3, #21
 8005d08:	d8f6      	bhi.n	8005cf8 <_printf_i+0x28>
 8005d0a:	a101      	add	r1, pc, #4	; (adr r1, 8005d10 <_printf_i+0x40>)
 8005d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005cf9 	.word	0x08005cf9
 8005d1c:	08005cf9 	.word	0x08005cf9
 8005d20:	08005cf9 	.word	0x08005cf9
 8005d24:	08005cf9 	.word	0x08005cf9
 8005d28:	08005d7d 	.word	0x08005d7d
 8005d2c:	08005cf9 	.word	0x08005cf9
 8005d30:	08005cf9 	.word	0x08005cf9
 8005d34:	08005cf9 	.word	0x08005cf9
 8005d38:	08005cf9 	.word	0x08005cf9
 8005d3c:	08005e89 	.word	0x08005e89
 8005d40:	08005dad 	.word	0x08005dad
 8005d44:	08005e6b 	.word	0x08005e6b
 8005d48:	08005cf9 	.word	0x08005cf9
 8005d4c:	08005cf9 	.word	0x08005cf9
 8005d50:	08005eab 	.word	0x08005eab
 8005d54:	08005cf9 	.word	0x08005cf9
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005cf9 	.word	0x08005cf9
 8005d60:	08005cf9 	.word	0x08005cf9
 8005d64:	08005e73 	.word	0x08005e73
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	602a      	str	r2, [r5, #0]
 8005d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0a3      	b.n	8005ec4 <_printf_i+0x1f4>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	6829      	ldr	r1, [r5, #0]
 8005d80:	0606      	lsls	r6, r0, #24
 8005d82:	f101 0304 	add.w	r3, r1, #4
 8005d86:	d50a      	bpl.n	8005d9e <_printf_i+0xce>
 8005d88:	680e      	ldr	r6, [r1, #0]
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	2e00      	cmp	r6, #0
 8005d8e:	da03      	bge.n	8005d98 <_printf_i+0xc8>
 8005d90:	232d      	movs	r3, #45	; 0x2d
 8005d92:	4276      	negs	r6, r6
 8005d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d98:	485e      	ldr	r0, [pc, #376]	; (8005f14 <_printf_i+0x244>)
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	e019      	b.n	8005dd2 <_printf_i+0x102>
 8005d9e:	680e      	ldr	r6, [r1, #0]
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005da6:	bf18      	it	ne
 8005da8:	b236      	sxthne	r6, r6
 8005daa:	e7ef      	b.n	8005d8c <_printf_i+0xbc>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	6820      	ldr	r0, [r4, #0]
 8005db0:	1d19      	adds	r1, r3, #4
 8005db2:	6029      	str	r1, [r5, #0]
 8005db4:	0601      	lsls	r1, r0, #24
 8005db6:	d501      	bpl.n	8005dbc <_printf_i+0xec>
 8005db8:	681e      	ldr	r6, [r3, #0]
 8005dba:	e002      	b.n	8005dc2 <_printf_i+0xf2>
 8005dbc:	0646      	lsls	r6, r0, #25
 8005dbe:	d5fb      	bpl.n	8005db8 <_printf_i+0xe8>
 8005dc0:	881e      	ldrh	r6, [r3, #0]
 8005dc2:	4854      	ldr	r0, [pc, #336]	; (8005f14 <_printf_i+0x244>)
 8005dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2308      	moveq	r3, #8
 8005dca:	230a      	movne	r3, #10
 8005dcc:	2100      	movs	r1, #0
 8005dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dd2:	6865      	ldr	r5, [r4, #4]
 8005dd4:	60a5      	str	r5, [r4, #8]
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	bfa2      	ittt	ge
 8005dda:	6821      	ldrge	r1, [r4, #0]
 8005ddc:	f021 0104 	bicge.w	r1, r1, #4
 8005de0:	6021      	strge	r1, [r4, #0]
 8005de2:	b90e      	cbnz	r6, 8005de8 <_printf_i+0x118>
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	d04d      	beq.n	8005e84 <_printf_i+0x1b4>
 8005de8:	4615      	mov	r5, r2
 8005dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dee:	fb03 6711 	mls	r7, r3, r1, r6
 8005df2:	5dc7      	ldrb	r7, [r0, r7]
 8005df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005df8:	4637      	mov	r7, r6
 8005dfa:	42bb      	cmp	r3, r7
 8005dfc:	460e      	mov	r6, r1
 8005dfe:	d9f4      	bls.n	8005dea <_printf_i+0x11a>
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d10b      	bne.n	8005e1c <_printf_i+0x14c>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	07de      	lsls	r6, r3, #31
 8005e08:	d508      	bpl.n	8005e1c <_printf_i+0x14c>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	6861      	ldr	r1, [r4, #4]
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	bfde      	ittt	le
 8005e12:	2330      	movle	r3, #48	; 0x30
 8005e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e1c:	1b52      	subs	r2, r2, r5
 8005e1e:	6122      	str	r2, [r4, #16]
 8005e20:	f8cd a000 	str.w	sl, [sp]
 8005e24:	464b      	mov	r3, r9
 8005e26:	aa03      	add	r2, sp, #12
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7ff fee2 	bl	8005bf4 <_printf_common>
 8005e30:	3001      	adds	r0, #1
 8005e32:	d14c      	bne.n	8005ece <_printf_i+0x1fe>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	b004      	add	sp, #16
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	4835      	ldr	r0, [pc, #212]	; (8005f14 <_printf_i+0x244>)
 8005e40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e44:	6829      	ldr	r1, [r5, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e4c:	6029      	str	r1, [r5, #0]
 8005e4e:	061d      	lsls	r5, r3, #24
 8005e50:	d514      	bpl.n	8005e7c <_printf_i+0x1ac>
 8005e52:	07df      	lsls	r7, r3, #31
 8005e54:	bf44      	itt	mi
 8005e56:	f043 0320 	orrmi.w	r3, r3, #32
 8005e5a:	6023      	strmi	r3, [r4, #0]
 8005e5c:	b91e      	cbnz	r6, 8005e66 <_printf_i+0x196>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	f023 0320 	bic.w	r3, r3, #32
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	2310      	movs	r3, #16
 8005e68:	e7b0      	b.n	8005dcc <_printf_i+0xfc>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	f043 0320 	orr.w	r3, r3, #32
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	2378      	movs	r3, #120	; 0x78
 8005e74:	4828      	ldr	r0, [pc, #160]	; (8005f18 <_printf_i+0x248>)
 8005e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e7a:	e7e3      	b.n	8005e44 <_printf_i+0x174>
 8005e7c:	0659      	lsls	r1, r3, #25
 8005e7e:	bf48      	it	mi
 8005e80:	b2b6      	uxthmi	r6, r6
 8005e82:	e7e6      	b.n	8005e52 <_printf_i+0x182>
 8005e84:	4615      	mov	r5, r2
 8005e86:	e7bb      	b.n	8005e00 <_printf_i+0x130>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	6826      	ldr	r6, [r4, #0]
 8005e8c:	6961      	ldr	r1, [r4, #20]
 8005e8e:	1d18      	adds	r0, r3, #4
 8005e90:	6028      	str	r0, [r5, #0]
 8005e92:	0635      	lsls	r5, r6, #24
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	d501      	bpl.n	8005e9c <_printf_i+0x1cc>
 8005e98:	6019      	str	r1, [r3, #0]
 8005e9a:	e002      	b.n	8005ea2 <_printf_i+0x1d2>
 8005e9c:	0670      	lsls	r0, r6, #25
 8005e9e:	d5fb      	bpl.n	8005e98 <_printf_i+0x1c8>
 8005ea0:	8019      	strh	r1, [r3, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	e7ba      	b.n	8005e20 <_printf_i+0x150>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	1d1a      	adds	r2, r3, #4
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	681d      	ldr	r5, [r3, #0]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f7fa f98a 	bl	80001d0 <memchr>
 8005ebc:	b108      	cbz	r0, 8005ec2 <_printf_i+0x1f2>
 8005ebe:	1b40      	subs	r0, r0, r5
 8005ec0:	6060      	str	r0, [r4, #4]
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ecc:	e7a8      	b.n	8005e20 <_printf_i+0x150>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	47d0      	blx	sl
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d0ab      	beq.n	8005e34 <_printf_i+0x164>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	d413      	bmi.n	8005f0a <_printf_i+0x23a>
 8005ee2:	68e0      	ldr	r0, [r4, #12]
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	bfb8      	it	lt
 8005eea:	4618      	movlt	r0, r3
 8005eec:	e7a4      	b.n	8005e38 <_printf_i+0x168>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	47d0      	blx	sl
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d09b      	beq.n	8005e34 <_printf_i+0x164>
 8005efc:	3501      	adds	r5, #1
 8005efe:	68e3      	ldr	r3, [r4, #12]
 8005f00:	9903      	ldr	r1, [sp, #12]
 8005f02:	1a5b      	subs	r3, r3, r1
 8005f04:	42ab      	cmp	r3, r5
 8005f06:	dcf2      	bgt.n	8005eee <_printf_i+0x21e>
 8005f08:	e7eb      	b.n	8005ee2 <_printf_i+0x212>
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	f104 0619 	add.w	r6, r4, #25
 8005f10:	e7f5      	b.n	8005efe <_printf_i+0x22e>
 8005f12:	bf00      	nop
 8005f14:	08006211 	.word	0x08006211
 8005f18:	08006222 	.word	0x08006222

08005f1c <_sbrk_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	; (8005f38 <_sbrk_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fa fea0 	bl	8000c6c <_sbrk>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_sbrk_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_sbrk_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	200002a4 	.word	0x200002a4

08005f3c <__sread>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	460c      	mov	r4, r1
 8005f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f44:	f000 f8a0 	bl	8006088 <_read_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	bfab      	itete	ge
 8005f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f50:	181b      	addge	r3, r3, r0
 8005f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f56:	bfac      	ite	ge
 8005f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f5a:	81a3      	strhlt	r3, [r4, #12]
 8005f5c:	bd10      	pop	{r4, pc}

08005f5e <__swrite>:
 8005f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f62:	461f      	mov	r7, r3
 8005f64:	898b      	ldrh	r3, [r1, #12]
 8005f66:	05db      	lsls	r3, r3, #23
 8005f68:	4605      	mov	r5, r0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	d505      	bpl.n	8005f7c <__swrite+0x1e>
 8005f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f74:	2302      	movs	r3, #2
 8005f76:	2200      	movs	r2, #0
 8005f78:	f000 f868 	bl	800604c <_lseek_r>
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	4632      	mov	r2, r6
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f92:	f000 b817 	b.w	8005fc4 <_write_r>

08005f96 <__sseek>:
 8005f96:	b510      	push	{r4, lr}
 8005f98:	460c      	mov	r4, r1
 8005f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9e:	f000 f855 	bl	800604c <_lseek_r>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	bf15      	itete	ne
 8005fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fb2:	81a3      	strheq	r3, [r4, #12]
 8005fb4:	bf18      	it	ne
 8005fb6:	81a3      	strhne	r3, [r4, #12]
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <__sclose>:
 8005fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbe:	f000 b813 	b.w	8005fe8 <_close_r>
	...

08005fc4 <_write_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	; (8005fe4 <_write_r+0x20>)
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fa f94c 	bl	8000270 <_write>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_write_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_write_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	200002a4 	.word	0x200002a4

08005fe8 <_close_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d06      	ldr	r5, [pc, #24]	; (8006004 <_close_r+0x1c>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fa fe06 	bl	8000c04 <_close>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_close_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_close_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	200002a4 	.word	0x200002a4

08006008 <_fstat_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d07      	ldr	r5, [pc, #28]	; (8006028 <_fstat_r+0x20>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	602b      	str	r3, [r5, #0]
 8006016:	f7fa fe01 	bl	8000c1c <_fstat>
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	d102      	bne.n	8006024 <_fstat_r+0x1c>
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	b103      	cbz	r3, 8006024 <_fstat_r+0x1c>
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	bd38      	pop	{r3, r4, r5, pc}
 8006026:	bf00      	nop
 8006028:	200002a4 	.word	0x200002a4

0800602c <_isatty_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d06      	ldr	r5, [pc, #24]	; (8006048 <_isatty_r+0x1c>)
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	f7fa fe00 	bl	8000c3c <_isatty>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_isatty_r+0x1a>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_isatty_r+0x1a>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	200002a4 	.word	0x200002a4

0800604c <_lseek_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_lseek_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fa fdf9 	bl	8000c52 <_lseek>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_lseek_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_lseek_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	200002a4 	.word	0x200002a4

08006070 <__malloc_lock>:
 8006070:	4801      	ldr	r0, [pc, #4]	; (8006078 <__malloc_lock+0x8>)
 8006072:	f7ff bb1d 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 8006076:	bf00      	nop
 8006078:	20000298 	.word	0x20000298

0800607c <__malloc_unlock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_unlock+0x8>)
 800607e:	f7ff bb18 	b.w	80056b2 <__retarget_lock_release_recursive>
 8006082:	bf00      	nop
 8006084:	20000298 	.word	0x20000298

08006088 <_read_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	; (80060a8 <_read_r+0x20>)
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fa fd97 	bl	8000bca <_read>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_read_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_read_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	200002a4 	.word	0x200002a4

080060ac <_init>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr

080060b8 <_fini>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr
