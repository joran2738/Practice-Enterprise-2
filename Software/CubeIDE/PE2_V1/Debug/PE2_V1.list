
PE2_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000676c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006900  08006900  00016900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b00  08006b00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006b00  08006b00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b00  08006b00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08006b78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08006b78  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea8c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea6  00000000  00000000  0002eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000309d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159ff  00000000  00000000  000321b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010397  00000000  00000000  00047baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083fb7  00000000  00000000  00057f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e2c  00000000  00000000  000dbf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068e4 	.word	0x080068e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080068e4 	.word	0x080068e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <_write>:
uint8_t key = 0;
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;

int _write(int file, char *ptr, int len) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d003      	beq.n	8000c02 <_write+0x1a>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d015      	beq.n	8000c2c <_write+0x44>
 8000c00:	e029      	b.n	8000c56 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <_write+0x90>)
 8000c0e:	f003 ff06 	bl	8004a1e <HAL_UART_Transmit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d024      	beq.n	8000c66 <_write+0x7e>
			errno = EIO;
 8000c1c:	f004 fad6 	bl	80051cc <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2205      	movs	r2, #5
 8000c24:	601a      	str	r2, [r3, #0]
			return -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e020      	b.n	8000c6e <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <_write+0x90>)
 8000c38:	f003 fef1 	bl	8004a1e <HAL_UART_Transmit>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d011      	beq.n	8000c6a <_write+0x82>
			errno = EIO;
 8000c46:	f004 fac1 	bl	80051cc <__errno>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	601a      	str	r2, [r3, #0]
			return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e00b      	b.n	8000c6e <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8000c56:	f004 fab9 	bl	80051cc <__errno>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	601a      	str	r2, [r3, #0]
        return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e003      	b.n	8000c6e <_write+0x86>
        break;
 8000c66:	bf00      	nop
 8000c68:	e000      	b.n	8000c6c <_write+0x84>
        break;
 8000c6a:	bf00      	nop
    }
    return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001cc 	.word	0x200001cc

08000c7c <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	f107 030f 	add.w	r3, r7, #15
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	21d0      	movs	r1, #208	; 0xd0
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <read_MPU_mem+0x40>)
 8000c9e:	f001 fc59 	bl	8002554 <HAL_I2C_Mem_Read>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <read_MPU_mem+0x30>
		return data;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	e002      	b.n	8000cb2 <read_MPU_mem+0x36>
	}
	else{
		printf("mem not read\r\n");
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <read_MPU_mem+0x44>)
 8000cae:	f004 fb45 	bl	800533c <puts>
	}
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000008c 	.word	0x2000008c
 8000cc0:	08006900 	.word	0x08006900

08000cc4 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	21d1      	movs	r1, #209	; 0xd1
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <write_MPU_mem+0x40>)
 8000cea:	f001 fb1f 	bl	800232c <HAL_I2C_Mem_Write>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <write_MPU_mem+0x36>
		printf("mem not written\r\n");
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <write_MPU_mem+0x44>)
 8000cf6:	f004 fb21 	bl	800533c <puts>
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000008c 	.word	0x2000008c
 8000d08:	08006910 	.word	0x08006910

08000d0c <read_MPU>:

void read_MPU(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint8_t LSByte = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = 1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	71bb      	strb	r3, [r7, #6]

	MSByte = read_MPU_mem(REG_GYRO_XOUT158);
 8000d1a:	2043      	movs	r0, #67	; 0x43
 8000d1c:	f7ff ffae 	bl	8000c7c <read_MPU_mem>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_XOUT70);
 8000d24:	2044      	movs	r0, #68	; 0x44
 8000d26:	f7ff ffa9 	bl	8000c7c <read_MPU_mem>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]

	gx = ((int16_t)((MSByte << 8) | LSByte)) / 131 + 3;
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <read_MPU+0x160>)
 8000d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d42:	1152      	asrs	r2, r2, #5
 8000d44:	17db      	asrs	r3, r3, #31
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <read_MPU+0x164>)
 8000d54:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_GYRO_YOUT158);
 8000d56:	2045      	movs	r0, #69	; 0x45
 8000d58:	f7ff ff90 	bl	8000c7c <read_MPU_mem>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_YOUT70);
 8000d60:	2046      	movs	r0, #70	; 0x46
 8000d62:	f7ff ff8b 	bl	8000c7c <read_MPU_mem>
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]

	gy = ((int16_t)((MSByte << 8) | LSByte)) / 131;
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <read_MPU+0x160>)
 8000d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7e:	1152      	asrs	r2, r2, #5
 8000d80:	17db      	asrs	r3, r3, #31
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <read_MPU+0x168>)
 8000d88:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_GYRO_ZOUT158);
 8000d8a:	2047      	movs	r0, #71	; 0x47
 8000d8c:	f7ff ff76 	bl	8000c7c <read_MPU_mem>
 8000d90:	4603      	mov	r3, r0
 8000d92:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_ZOUT70);
 8000d94:	2048      	movs	r0, #72	; 0x48
 8000d96:	f7ff ff71 	bl	8000c7c <read_MPU_mem>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]

	gz = ((int16_t)((MSByte << 8) | LSByte)) / 131 + 1;
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <read_MPU+0x160>)
 8000dae:	fb82 1203 	smull	r1, r2, r2, r3
 8000db2:	1152      	asrs	r2, r2, #5
 8000db4:	17db      	asrs	r3, r3, #31
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <read_MPU+0x16c>)
 8000dc4:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_XOUT158);
 8000dc6:	203b      	movs	r0, #59	; 0x3b
 8000dc8:	f7ff ff58 	bl	8000c7c <read_MPU_mem>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_XOUT70);
 8000dd0:	203c      	movs	r0, #60	; 0x3c
 8000dd2:	f7ff ff53 	bl	8000c7c <read_MPU_mem>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]

	ax = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da02      	bge.n	8000df2 <read_MPU+0xe6>
 8000dec:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000df0:	333f      	adds	r3, #63	; 0x3f
 8000df2:	139b      	asrs	r3, r3, #14
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <read_MPU+0x170>)
 8000df8:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8000dfa:	203d      	movs	r0, #61	; 0x3d
 8000dfc:	f7ff ff3e 	bl	8000c7c <read_MPU_mem>
 8000e00:	4603      	mov	r3, r0
 8000e02:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8000e04:	203e      	movs	r0, #62	; 0x3e
 8000e06:	f7ff ff39 	bl	8000c7c <read_MPU_mem>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]

	ay = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da02      	bge.n	8000e26 <read_MPU+0x11a>
 8000e20:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e24:	333f      	adds	r3, #63	; 0x3f
 8000e26:	139b      	asrs	r3, r3, #14
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <read_MPU+0x174>)
 8000e2c:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_ZOUT158);
 8000e2e:	203f      	movs	r0, #63	; 0x3f
 8000e30:	f7ff ff24 	bl	8000c7c <read_MPU_mem>
 8000e34:	4603      	mov	r3, r0
 8000e36:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_ZOUT70);
 8000e38:	2040      	movs	r0, #64	; 0x40
 8000e3a:	f7ff ff1f 	bl	8000c7c <read_MPU_mem>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]

	az = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da02      	bge.n	8000e5a <read_MPU+0x14e>
 8000e54:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e58:	333f      	adds	r3, #63	; 0x3f
 8000e5a:	139b      	asrs	r3, r3, #14
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <read_MPU+0x178>)
 8000e60:	801a      	strh	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	3e88cb3d 	.word	0x3e88cb3d
 8000e70:	20000254 	.word	0x20000254
 8000e74:	20000258 	.word	0x20000258
 8000e78:	2000025c 	.word	0x2000025c
 8000e7c:	20000256 	.word	0x20000256
 8000e80:	2000025a 	.word	0x2000025a
 8000e84:	2000025e 	.word	0x2000025e

08000e88 <wrap>:

static float wrap(float angle,float limit){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e92:	edc7 0a00 	vstr	s1, [r7]
  while (angle >  limit) angle -= 2*limit;
 8000e96:	e009      	b.n	8000eac <wrap+0x24>
 8000e98:	edd7 7a00 	vldr	s15, [r7]
 8000e9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ea0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000eac:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eb0:	edd7 7a00 	vldr	s15, [r7]
 8000eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	dcec      	bgt.n	8000e98 <wrap+0x10>
  while (angle < -limit) angle += 2*limit;
 8000ebe:	e009      	b.n	8000ed4 <wrap+0x4c>
 8000ec0:	edd7 7a00 	vldr	s15, [r7]
 8000ec4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ec8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ed4:	edd7 7a00 	vldr	s15, [r7]
 8000ed8:	eef1 7a67 	vneg.f32	s15, s15
 8000edc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	d4ea      	bmi.n	8000ec0 <wrap+0x38>
  return angle;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	ee07 3a90 	vmov	s15, r3
}
 8000ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <update_MPU_vars>:


void update_MPU_vars(){
 8000f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
	read_MPU();
 8000f08:	f7ff ff00 	bl	8000d0c <read_MPU>

	float sgZ = az<0 ? -1 : 1; // allow one angle to go from -180 to +180 degrees
 8000f0c:	4bbe      	ldr	r3, [pc, #760]	; (8001208 <update_MPU_vars+0x308>)
 8000f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da01      	bge.n	8000f1a <update_MPU_vars+0x1a>
 8000f16:	4bbd      	ldr	r3, [pc, #756]	; (800120c <update_MPU_vars+0x30c>)
 8000f18:	e001      	b.n	8000f1e <update_MPU_vars+0x1e>
 8000f1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f1e:	617b      	str	r3, [r7, #20]
	float angleAccX =   atan2(ay, sgZ*sqrt(az*az + ax*ax)) * 57.29578 ; // [-180,+180] deg
 8000f20:	4bbb      	ldr	r3, [pc, #748]	; (8001210 <update_MPU_vars+0x310>)
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_i2d>
 8000f2c:	4682      	mov	sl, r0
 8000f2e:	468b      	mov	fp, r1
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f7ff fb01 	bl	8000538 <__aeabi_f2d>
 8000f36:	4680      	mov	r8, r0
 8000f38:	4689      	mov	r9, r1
 8000f3a:	4bb3      	ldr	r3, [pc, #716]	; (8001208 <update_MPU_vars+0x308>)
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4bb1      	ldr	r3, [pc, #708]	; (8001208 <update_MPU_vars+0x308>)
 8000f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f48:	fb03 f202 	mul.w	r2, r3, r2
 8000f4c:	4bb1      	ldr	r3, [pc, #708]	; (8001214 <update_MPU_vars+0x314>)
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	4619      	mov	r1, r3
 8000f54:	4baf      	ldr	r3, [pc, #700]	; (8001214 <update_MPU_vars+0x314>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	fb01 f303 	mul.w	r3, r1, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fad7 	bl	8000514 <__aeabi_i2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	ec43 2b10 	vmov	d0, r2, r3
 8000f6e:	f005 f965 	bl	800623c <sqrt>
 8000f72:	ec53 2b10 	vmov	r2, r3, d0
 8000f76:	4640      	mov	r0, r8
 8000f78:	4649      	mov	r1, r9
 8000f7a:	f7ff fb35 	bl	80005e8 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	ec43 2b17 	vmov	d7, r2, r3
 8000f86:	eeb0 1a47 	vmov.f32	s2, s14
 8000f8a:	eef0 1a67 	vmov.f32	s3, s15
 8000f8e:	ec4b ab10 	vmov	d0, sl, fp
 8000f92:	f005 f951 	bl	8006238 <atan2>
 8000f96:	ec51 0b10 	vmov	r0, r1, d0
 8000f9a:	a393      	add	r3, pc, #588	; (adr r3, 80011e8 <update_MPU_vars+0x2e8>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fb22 	bl	80005e8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fdcc 	bl	8000b48 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	613b      	str	r3, [r7, #16]
	float angleAccY = - atan2(ax,     sqrt(az*az + ax*ay)) * 57.29578 ; // [- 90,+ 90] deg
 8000fb4:	4b97      	ldr	r3, [pc, #604]	; (8001214 <update_MPU_vars+0x314>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff faaa 	bl	8000514 <__aeabi_i2d>
 8000fc0:	4680      	mov	r8, r0
 8000fc2:	4689      	mov	r9, r1
 8000fc4:	4b90      	ldr	r3, [pc, #576]	; (8001208 <update_MPU_vars+0x308>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <update_MPU_vars+0x308>)
 8000fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd2:	fb03 f202 	mul.w	r2, r3, r2
 8000fd6:	4b8f      	ldr	r3, [pc, #572]	; (8001214 <update_MPU_vars+0x314>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <update_MPU_vars+0x310>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	4413      	add	r3, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa92 	bl	8000514 <__aeabi_i2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	ec43 2b10 	vmov	d0, r2, r3
 8000ff8:	f005 f920 	bl	800623c <sqrt>
 8000ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8001000:	eef0 7a60 	vmov.f32	s15, s1
 8001004:	eeb0 1a47 	vmov.f32	s2, s14
 8001008:	eef0 1a67 	vmov.f32	s3, s15
 800100c:	ec49 8b10 	vmov	d0, r8, r9
 8001010:	f005 f912 	bl	8006238 <atan2>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	4614      	mov	r4, r2
 800101a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800101e:	a372      	add	r3, pc, #456	; (adr r3, 80011e8 <update_MPU_vars+0x2e8>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff fade 	bl	80005e8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd88 	bl	8000b48 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	60fb      	str	r3, [r7, #12]

	uint32_t mil = millis = HAL_GetTick();;
 800103c:	f000 fe02 	bl	8001c44 <HAL_GetTick>
 8001040:	4603      	mov	r3, r0
 8001042:	4a75      	ldr	r2, [pc, #468]	; (8001218 <update_MPU_vars+0x318>)
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b74      	ldr	r3, [pc, #464]	; (8001218 <update_MPU_vars+0x318>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60bb      	str	r3, [r7, #8]
	float dt = (mil - premillis) * 1e-3;
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <update_MPU_vars+0x31c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa4d 	bl	80004f4 <__aeabi_ui2d>
 800105a:	a365      	add	r3, pc, #404	; (adr r3, 80011f0 <update_MPU_vars+0x2f0>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fac2 	bl	80005e8 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd6c 	bl	8000b48 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
	premillis = mil;
 8001074:	4a69      	ldr	r2, [pc, #420]	; (800121c <update_MPU_vars+0x31c>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6013      	str	r3, [r2, #0]

	angleX = wrap(0.98*(angleAccX + wrap(angleX + gx*dt - angleAccX,180)) + (1.0 - 0.98)*angleAccX,180);
 800107a:	4b69      	ldr	r3, [pc, #420]	; (8001220 <update_MPU_vars+0x320>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001088:	edd7 7a01 	vldr	s15, [r7, #4]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4b64      	ldr	r3, [pc, #400]	; (8001224 <update_MPU_vars+0x324>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109a:	edd7 7a04 	vldr	s15, [r7, #16]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a2:	eddf 0a61 	vldr	s1, [pc, #388]	; 8001228 <update_MPU_vars+0x328>
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f7ff feed 	bl	8000e88 <wrap>
 80010ae:	eeb0 7a40 	vmov.f32	s14, s0
 80010b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa3b 	bl	8000538 <__aeabi_f2d>
 80010c2:	a34d      	add	r3, pc, #308	; (adr r3, 80011f8 <update_MPU_vars+0x2f8>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fa8e 	bl	80005e8 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	461d      	mov	r5, r3
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f7ff fa2f 	bl	8000538 <__aeabi_f2d>
 80010da:	a349      	add	r3, pc, #292	; (adr r3, 8001200 <update_MPU_vars+0x300>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fa82 	bl	80005e8 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff f8c6 	bl	800027c <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd26 	bl	8000b48 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8001228 <update_MPU_vars+0x328>
 8001102:	ee00 3a10 	vmov	s0, r3
 8001106:	f7ff febf 	bl	8000e88 <wrap>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	4b45      	ldr	r3, [pc, #276]	; (8001224 <update_MPU_vars+0x324>)
 8001110:	edc3 7a00 	vstr	s15, [r3]
	angleY = wrap(0.98*(angleAccY + wrap(angleY + sgZ*gy*dt - angleAccY, 90)) + (1.0 - 0.98)*angleAccY, 90);
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <update_MPU_vars+0x32c>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001122:	edd7 7a05 	vldr	s15, [r7, #20]
 8001126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112a:	edd7 7a01 	vldr	s15, [r7, #4]
 800112e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <update_MPU_vars+0x330>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800113c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001234 <update_MPU_vars+0x334>
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	f7ff fe9c 	bl	8000e88 <wrap>
 8001150:	eeb0 7a40 	vmov.f32	s14, s0
 8001154:	edd7 7a03 	vldr	s15, [r7, #12]
 8001158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115c:	ee17 0a90 	vmov	r0, s15
 8001160:	f7ff f9ea 	bl	8000538 <__aeabi_f2d>
 8001164:	a324      	add	r3, pc, #144	; (adr r3, 80011f8 <update_MPU_vars+0x2f8>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa3d 	bl	80005e8 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4614      	mov	r4, r2
 8001174:	461d      	mov	r5, r3
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff f9de 	bl	8000538 <__aeabi_f2d>
 800117c:	a320      	add	r3, pc, #128	; (adr r3, 8001200 <update_MPU_vars+0x300>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa31 	bl	80005e8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff f875 	bl	800027c <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fcd5 	bl	8000b48 <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001234 <update_MPU_vars+0x334>
 80011a4:	ee00 3a10 	vmov	s0, r3
 80011a8:	f7ff fe6e 	bl	8000e88 <wrap>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <update_MPU_vars+0x330>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
	angleZ += gz*dt;
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <update_MPU_vars+0x338>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <update_MPU_vars+0x33c>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <update_MPU_vars+0x33c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011e6:	bf00      	nop
 80011e8:	1e7967cb 	.word	0x1e7967cb
 80011ec:	404ca5dc 	.word	0x404ca5dc
 80011f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011f4:	3f50624d 	.word	0x3f50624d
 80011f8:	f5c28f5c 	.word	0xf5c28f5c
 80011fc:	3fef5c28 	.word	0x3fef5c28
 8001200:	47ae1480 	.word	0x47ae1480
 8001204:	3f947ae1 	.word	0x3f947ae1
 8001208:	2000025e 	.word	0x2000025e
 800120c:	bf800000 	.word	0xbf800000
 8001210:	2000025a 	.word	0x2000025a
 8001214:	20000256 	.word	0x20000256
 8001218:	20000270 	.word	0x20000270
 800121c:	20000274 	.word	0x20000274
 8001220:	20000254 	.word	0x20000254
 8001224:	20000260 	.word	0x20000260
 8001228:	43340000 	.word	0x43340000
 800122c:	20000258 	.word	0x20000258
 8001230:	20000264 	.word	0x20000264
 8001234:	42b40000 	.word	0x42b40000
 8001238:	2000025c 	.word	0x2000025c
 800123c:	20000268 	.word	0x20000268

08001240 <init_MPU>:

void init_MPU(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8001244:	2100      	movs	r1, #0
 8001246:	206b      	movs	r0, #107	; 0x6b
 8001248:	f7ff fd3c 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 800124c:	2107      	movs	r1, #7
 800124e:	2019      	movs	r0, #25
 8001250:	f7ff fd38 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8001254:	2100      	movs	r1, #0
 8001256:	201b      	movs	r0, #27
 8001258:	f7ff fd34 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	201c      	movs	r0, #28
 8001260:	f7ff fd30 	bl	8000cc4 <write_MPU_mem>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fc8f 	bl	8001b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f853 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 f97f 	bl	8001578 <MX_GPIO_Init>
  MX_I2C2_Init();
 800127a:	f000 f89f 	bl	80013bc <MX_I2C2_Init>
  MX_SPI2_Init();
 800127e:	f000 f8dd 	bl	800143c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001282:	f000 f919 	bl	80014b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001286:	f000 f947 	bl	8001518 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	2201      	movs	r2, #1
 800128e:	21d0      	movs	r1, #208	; 0xd0
 8001290:	481b      	ldr	r0, [pc, #108]	; (8001300 <main+0x98>)
 8001292:	f001 fa79 	bl	8002788 <HAL_I2C_IsDeviceReady>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <main+0x40>
	  printf("succesfully communicated\n\r");
 800129c:	4819      	ldr	r0, [pc, #100]	; (8001304 <main+0x9c>)
 800129e:	f003 ffc7 	bl	8005230 <iprintf>
	  init_MPU();
 80012a2:	f7ff ffcd 	bl	8001240 <init_MPU>
 80012a6:	e002      	b.n	80012ae <main+0x46>
  }
  else{
	  printf("i2C not found\n\r");
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <main+0xa0>)
 80012aa:	f003 ffc1 	bl	8005230 <iprintf>
  }
  float factor = 1;
 80012ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012b2:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //key = loop(key);
	  HAL_Delay(100);
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f000 fcd1 	bl	8001c5c <HAL_Delay>
	  //printf("doing code\r\n");
	  //printf("whoami: 0x%x\r\n\n",read_MPU_mem(REG_WHOAMI));

	  update_MPU_vars();
 80012ba:	f7ff fe21 	bl	8000f00 <update_MPU_vars>
	  //printf("angleX:%d, angleY:%d, angleZ:%d\n\r",(int16_t)angleX,(int16_t)angleY,(int16_t)angleZ);
	  if ((int16_t)angleX > 20){
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <main+0xa4>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c8:	ee17 3a90 	vmov	r3, s15
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	2b14      	cmp	r3, #20
 80012d0:	dd03      	ble.n	80012da <main+0x72>
		  printf("going right\r\n");
 80012d2:	480f      	ldr	r0, [pc, #60]	; (8001310 <main+0xa8>)
 80012d4:	f004 f832 	bl	800533c <puts>
 80012d8:	e7ec      	b.n	80012b4 <main+0x4c>
	  }
	  else if ((int16_t)angleX < -20){
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <main+0xa4>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e4:	ee17 3a90 	vmov	r3, s15
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	f113 0f14 	cmn.w	r3, #20
 80012ee:	da03      	bge.n	80012f8 <main+0x90>
		  printf("going left\r\n");
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <main+0xac>)
 80012f2:	f004 f823 	bl	800533c <puts>
 80012f6:	e7dd      	b.n	80012b4 <main+0x4c>
	  }
	  else{
		  printf("level\r\n");
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <main+0xb0>)
 80012fa:	f004 f81f 	bl	800533c <puts>
	  HAL_Delay(100);
 80012fe:	e7d9      	b.n	80012b4 <main+0x4c>
 8001300:	2000008c 	.word	0x2000008c
 8001304:	08006924 	.word	0x08006924
 8001308:	08006940 	.word	0x08006940
 800130c:	20000260 	.word	0x20000260
 8001310:	08006950 	.word	0x08006950
 8001314:	08006960 	.word	0x08006960
 8001318:	0800696c 	.word	0x0800696c

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09c      	sub	sp, #112	; 0x70
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001326:	2228      	movs	r2, #40	; 0x28
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f003 ff78 	bl	8005220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2230      	movs	r2, #48	; 0x30
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f003 ff6a 	bl	8005220 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001354:	2310      	movs	r3, #16
 8001356:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001358:	2300      	movs	r3, #0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fe6b 	bl	800303c <HAL_RCC_OscConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800136c:	f000 f9e4 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001374:	2300      	movs	r3, #0
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001384:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fe94 	bl	80040b8 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001396:	f000 f9cf 	bl	8001738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800139a:	2340      	movs	r3, #64	; 0x40
 800139c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 f8bd 	bl	8004524 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013b0:	f000 f9c2 	bl	8001738 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3770      	adds	r7, #112	; 0x70
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_I2C2_Init+0x74>)
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <MX_I2C2_Init+0x78>)
 80013c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_I2C2_Init+0x74>)
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <MX_I2C2_Init+0x7c>)
 80013ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_I2C2_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_I2C2_Init+0x74>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_I2C2_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_I2C2_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_I2C2_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_I2C2_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_I2C2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <MX_I2C2_Init+0x74>)
 80013f8:	f000 ff08 	bl	800220c <HAL_I2C_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001402:	f000 f999 	bl	8001738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <MX_I2C2_Init+0x74>)
 800140a:	f001 fd7f 	bl	8002f0c <HAL_I2CEx_ConfigAnalogFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001414:	f000 f990 	bl	8001738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_I2C2_Init+0x74>)
 800141c:	f001 fdc1 	bl	8002fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 f987 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000008c 	.word	0x2000008c
 8001434:	40005800 	.word	0x40005800
 8001438:	2000090e 	.word	0x2000090e

0800143c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_SPI2_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001456:	f44f 7240 	mov.w	r2, #768	; 0x300
 800145a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_SPI2_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_SPI2_Init+0x74>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_SPI2_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_SPI2_Init+0x74>)
 800148a:	2207      	movs	r2, #7
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_SPI2_Init+0x74>)
 8001496:	2208      	movs	r2, #8
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_SPI2_Init+0x74>)
 800149c:	f003 f9c6 	bl	800482c <HAL_SPI_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 f947 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000e0 	.word	0x200000e0
 80014b4:	40003800 	.word	0x40003800

080014b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <MX_USART2_UART_Init+0x5c>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014fc:	f003 fa41 	bl	8004982 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001506:	f000 f917 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000144 	.word	0x20000144
 8001514:	40004400 	.word	0x40004400

08001518 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_USART3_UART_Init+0x58>)
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <MX_USART3_UART_Init+0x5c>)
 8001520:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_USART3_UART_Init+0x58>)
 8001524:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001528:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART3_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_USART3_UART_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART3_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART3_UART_Init+0x58>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART3_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART3_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART3_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART3_UART_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART3_UART_Init+0x58>)
 800155c:	f003 fa11 	bl	8004982 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001566:	f000 f8e7 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200001cc 	.word	0x200001cc
 8001574:	40004800 	.word	0x40004800

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <MX_GPIO_Init+0x130>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a45      	ldr	r2, [pc, #276]	; (80016a8 <MX_GPIO_Init+0x130>)
 8001594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <MX_GPIO_Init+0x130>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b0:	6153      	str	r3, [r2, #20]
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <MX_GPIO_Init+0x130>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_T_CS_GPIO_Port, SPI2_T_CS_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f4:	482d      	ldr	r0, [pc, #180]	; (80016ac <MX_GPIO_Init+0x134>)
 80015f6:	f000 fdd9 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin|SPI2_RESET_Pin|SPI2_DC_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f000 fdd2 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8001608:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001614:	2301      	movs	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4824      	ldr	r0, [pc, #144]	; (80016b0 <MX_GPIO_Init+0x138>)
 8001620:	f000 fc52 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8001624:	2301      	movs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001628:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162e:	2301      	movs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 fc44 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_T_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_T_CS_Pin;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_T_CS_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4814      	ldr	r0, [pc, #80]	; (80016ac <MX_GPIO_Init+0x134>)
 800165a:	f000 fc35 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI2_RESET_Pin SPI2_DC_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_RESET_Pin|SPI2_DC_Pin;
 800165e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f000 fc25 	bl	8001ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	2006      	movs	r0, #6
 8001684:	f000 fbe9 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001688:	2006      	movs	r0, #6
 800168a:	f000 fc02 	bl	8001e92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2028      	movs	r0, #40	; 0x28
 8001694:	f000 fbe1 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001698:	2028      	movs	r0, #40	; 0x28
 800169a:	f000 fbfa 	bl	8001e92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800

080016b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
	printf("interupt!\r\n");
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <HAL_GPIO_EXTI_Callback+0x6c>)
 80016c0:	f003 fe3c 	bl	800533c <puts>
	if(GPIO_Pin == LEFT_Pin){
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ca:	d106      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x26>
		key = left;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_GPIO_EXTI_Callback+0x70>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
		printf("left clicked\r\n");
 80016d2:	4815      	ldr	r0, [pc, #84]	; (8001728 <HAL_GPIO_EXTI_Callback+0x74>)
 80016d4:	f003 fe32 	bl	800533c <puts>
	}
	else if(GPIO_Pin == MIDDLE_Pin){
		key = down;
		printf("down clicked\r\n");
	}
}
 80016d8:	e01e      	b.n	8001718 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == TOP_Pin){
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e0:	d106      	bne.n	80016f0 <HAL_GPIO_EXTI_Callback+0x3c>
		key = up;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_GPIO_EXTI_Callback+0x70>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	701a      	strb	r2, [r3, #0]
		printf("up clicked\r\n");
 80016e8:	4810      	ldr	r0, [pc, #64]	; (800172c <HAL_GPIO_EXTI_Callback+0x78>)
 80016ea:	f003 fe27 	bl	800533c <puts>
}
 80016ee:	e013      	b.n	8001718 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == RIGHT_Pin){
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016f6:	d106      	bne.n	8001706 <HAL_GPIO_EXTI_Callback+0x52>
		key = right;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_GPIO_EXTI_Callback+0x70>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	701a      	strb	r2, [r3, #0]
		printf("right clicked\r\n");
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001700:	f003 fe1c 	bl	800533c <puts>
}
 8001704:	e008      	b.n	8001718 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == MIDDLE_Pin){
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_GPIO_EXTI_Callback+0x64>
		key = down;
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_GPIO_EXTI_Callback+0x70>)
 800170e:	2204      	movs	r2, #4
 8001710:	701a      	strb	r2, [r3, #0]
		printf("down clicked\r\n");
 8001712:	4808      	ldr	r0, [pc, #32]	; (8001734 <HAL_GPIO_EXTI_Callback+0x80>)
 8001714:	f003 fe12 	bl	800533c <puts>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08006974 	.word	0x08006974
 8001724:	2000026c 	.word	0x2000026c
 8001728:	08006980 	.word	0x08006980
 800172c:	08006990 	.word	0x08006990
 8001730:	0800699c 	.word	0x0800699c
 8001734:	080069ac 	.word	0x080069ac

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x44>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_MspInit+0x44>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_MspInit+0x44>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_MspInit+0x44>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_MspInit+0x44>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_MspInit+0x44>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_I2C_MspInit+0x7c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d127      	bne.n	80017fe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_I2C_MspInit+0x80>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a16      	ldr	r2, [pc, #88]	; (800180c <HAL_I2C_MspInit+0x80>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_I2C_MspInit+0x80>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c6:	2303      	movs	r3, #3
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ca:	2312      	movs	r3, #18
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017d6:	2304      	movs	r3, #4
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <HAL_I2C_MspInit+0x84>)
 80017e2:	f000 fb71 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_I2C_MspInit+0x80>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_I2C_MspInit+0x80>)
 80017ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_I2C_MspInit+0x80>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40005800 	.word	0x40005800
 800180c:	40021000 	.word	0x40021000
 8001810:	48001400 	.word	0x48001400

08001814 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_SPI_MspInit+0x7c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d128      	bne.n	8001888 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_SPI_MspInit+0x80>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_SPI_MspInit+0x80>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_SPI_MspInit+0x80>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_SPI_MspInit+0x80>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_SPI_MspInit+0x80>)
 8001854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001858:	6153      	str	r3, [r2, #20]
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_SPI_MspInit+0x80>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001866:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001878:	2305      	movs	r3, #5
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_SPI_MspInit+0x84>)
 8001884:	f000 fb20 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40003800 	.word	0x40003800
 8001894:	40021000 	.word	0x40021000
 8001898:	48000400 	.word	0x48000400

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <HAL_UART_MspInit+0xdc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d129      	bne.n	8001912 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a2e      	ldr	r2, [pc, #184]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ee:	230c      	movs	r3, #12
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fe:	2307      	movs	r3, #7
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f000 fadc 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001910:	e02d      	b.n	800196e <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <HAL_UART_MspInit+0xe4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d128      	bne.n	800196e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_UART_MspInit+0xe0>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	4a16      	ldr	r2, [pc, #88]	; (800197c <HAL_UART_MspInit+0xe0>)
 8001922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001926:	61d3      	str	r3, [r2, #28]
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_UART_MspInit+0xe0>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0xe0>)
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_UART_MspInit+0xe0>)
 800193a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193e:	6153      	str	r3, [r2, #20]
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0xe0>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800194c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800195e:	2307      	movs	r3, #7
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <HAL_UART_MspInit+0xe8>)
 800196a:	f000 faad 	bl	8001ec8 <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	3730      	adds	r7, #48	; 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004400 	.word	0x40004400
 800197c:	40021000 	.word	0x40021000
 8001980:	40004800 	.word	0x40004800
 8001984:	48000400 	.word	0x48000400

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 f922 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f000 fbfb 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}

080019ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 80019ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019f2:	f000 fbf3 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 80019f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019fa:	f000 fbef 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 80019fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a02:	f000 fbeb 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e00a      	b.n	8001a32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1c:	f3af 8000 	nop.w
 8001a20:	4601      	mov	r1, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	b2ca      	uxtb	r2, r1
 8001a2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf0      	blt.n	8001a1c <_read+0x12>
  }

  return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_isatty>:

int _isatty(int file)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f003 fb76 	bl	80051cc <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20004000 	.word	0x20004000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	20000278 	.word	0x20000278
 8001b14:	20000290 	.word	0x20000290

08001b18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SystemInit+0x20>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <SystemInit+0x20>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b40:	f7ff ffea 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b46:	490d      	ldr	r1, [pc, #52]	; (8001b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <LoopForever+0xe>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	; (8001b88 <LoopForever+0x16>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f003 fb35 	bl	80051d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b6e:	f7ff fb7b 	bl	8001268 <main>

08001b72 <LoopForever>:

LoopForever:
    b LoopForever
 8001b72:	e7fe      	b.n	8001b72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b74:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b80:	08006b08 	.word	0x08006b08
  ldr r2, =_sbss
 8001b84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b88:	20000290 	.word	0x20000290

08001b8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC1_IRQHandler>
	...

08001b90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x28>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x28>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f94f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fdca 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000

08001bbc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	2000027c 	.word	0x2000027c

08001c44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000027c 	.word	0x2000027c

08001c5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e14e      	b.n	8002176 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8140 	beq.w	8002170 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d005      	beq.n	8001f08 <HAL_GPIO_Init+0x40>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d130      	bne.n	8001f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3e:	2201      	movs	r2, #1
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f003 0201 	and.w	r2, r3, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d017      	beq.n	8001fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d123      	bne.n	8001ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	6939      	ldr	r1, [r7, #16]
 8001ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0203 	and.w	r2, r3, #3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 809a 	beq.w	8002170 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203c:	4b55      	ldr	r3, [pc, #340]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b52      	ldr	r3, [pc, #328]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	220f      	movs	r2, #15
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800207e:	d013      	beq.n	80020a8 <HAL_GPIO_Init+0x1e0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a46      	ldr	r2, [pc, #280]	; (800219c <HAL_GPIO_Init+0x2d4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00d      	beq.n	80020a4 <HAL_GPIO_Init+0x1dc>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a45      	ldr	r2, [pc, #276]	; (80021a0 <HAL_GPIO_Init+0x2d8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <HAL_GPIO_Init+0x1d8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a44      	ldr	r2, [pc, #272]	; (80021a4 <HAL_GPIO_Init+0x2dc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_GPIO_Init+0x1d4>
 8002098:	2303      	movs	r3, #3
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 800209c:	2305      	movs	r3, #5
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a8:	2300      	movs	r3, #0
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ba:	4937      	ldr	r1, [pc, #220]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c8:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020ec:	4a2e      	ldr	r2, [pc, #184]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002116:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002140:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	f47f aea9 	bne.w	8001ed8 <HAL_GPIO_Init+0x10>
  }
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40021000 	.word	0x40021000
 8002198:	40010000 	.word	0x40010000
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800
 80021a4:	48000c00 	.word	0x48000c00
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fa5a 	bl	80016b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e081      	b.n	8002322 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff faaa 	bl	800178c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e006      	b.n	8002294 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002292:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d104      	bne.n	80022a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69d9      	ldr	r1, [r3, #28]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 80f9 	bne.w	8002546 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_I2C_Mem_Write+0x34>
 800235a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0ed      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_I2C_Mem_Write+0x4e>
 8002376:	2302      	movs	r3, #2
 8002378:	e0e6      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002382:	f7ff fc5f 	bl	8001c44 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2319      	movs	r3, #25
 800238e:	2201      	movs	r2, #1
 8002390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fbcd 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0d1      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2221      	movs	r2, #33	; 0x21
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023cc:	88f8      	ldrh	r0, [r7, #6]
 80023ce:	893a      	ldrh	r2, [r7, #8]
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4603      	mov	r3, r0
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fadd 	bl	800299c <I2C_RequestMemoryWrite>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0a9      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	d90e      	bls.n	800241c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	22ff      	movs	r2, #255	; 0xff
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fd47 	bl	8002ea8 <I2C_TransferConfig>
 800241a:	e00f      	b.n	800243c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	b2da      	uxtb	r2, r3
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fd36 	bl	8002ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fbc6 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e07b      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d034      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x1c8>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	d130      	bne.n	80024f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fb49 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e04d      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2bff      	cmp	r3, #255	; 0xff
 80024b4:	d90e      	bls.n	80024d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	8979      	ldrh	r1, [r7, #10]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fceb 	bl	8002ea8 <I2C_TransferConfig>
 80024d2:	e00f      	b.n	80024f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	8979      	ldrh	r1, [r7, #10]
 80024e6:	2300      	movs	r3, #0
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fcda 	bl	8002ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d19e      	bne.n	800243c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fbac 	bl	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e01a      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2220      	movs	r2, #32
 8002518:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_I2C_Mem_Write+0x224>)
 8002526:	400b      	ands	r3, r1
 8002528:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	fe00e800 	.word	0xfe00e800

08002554 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	4608      	mov	r0, r1
 800255e:	4611      	mov	r1, r2
 8002560:	461a      	mov	r2, r3
 8002562:	4603      	mov	r3, r0
 8002564:	817b      	strh	r3, [r7, #10]
 8002566:	460b      	mov	r3, r1
 8002568:	813b      	strh	r3, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b20      	cmp	r3, #32
 8002578:	f040 80fd 	bne.w	8002776 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_I2C_Mem_Read+0x34>
 8002582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0f1      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x4e>
 800259e:	2302      	movs	r3, #2
 80025a0:	e0ea      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025aa:	f7ff fb4b 	bl	8001c44 <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2319      	movs	r3, #25
 80025b6:	2201      	movs	r2, #1
 80025b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fab9 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d5      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2222      	movs	r2, #34	; 0x22
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2240      	movs	r2, #64	; 0x40
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025f4:	88f8      	ldrh	r0, [r7, #6]
 80025f6:	893a      	ldrh	r2, [r7, #8]
 80025f8:	8979      	ldrh	r1, [r7, #10]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4603      	mov	r3, r0
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fa1d 	bl	8002a44 <I2C_RequestMemoryRead>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0ad      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2bff      	cmp	r3, #255	; 0xff
 8002624:	d90e      	bls.n	8002644 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22ff      	movs	r2, #255	; 0xff
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	b2da      	uxtb	r2, r3
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	4b52      	ldr	r3, [pc, #328]	; (8002780 <HAL_I2C_Mem_Read+0x22c>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fc33 	bl	8002ea8 <I2C_TransferConfig>
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	b2da      	uxtb	r2, r3
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_I2C_Mem_Read+0x22c>)
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fc22 	bl	8002ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	2200      	movs	r2, #0
 800266c:	2104      	movs	r1, #4
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa60 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07c      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d034      	beq.n	8002724 <HAL_I2C_Mem_Read+0x1d0>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d130      	bne.n	8002724 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2200      	movs	r2, #0
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fa31 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e04d      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2bff      	cmp	r3, #255	; 0xff
 80026e4:	d90e      	bls.n	8002704 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	22ff      	movs	r2, #255	; 0xff
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	8979      	ldrh	r1, [r7, #10]
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fbd3 	bl	8002ea8 <I2C_TransferConfig>
 8002702:	e00f      	b.n	8002724 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	b2da      	uxtb	r2, r3
 8002714:	8979      	ldrh	r1, [r7, #10]
 8002716:	2300      	movs	r3, #0
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fbc2 	bl	8002ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d19a      	bne.n	8002664 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fa94 	bl	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e01a      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2220      	movs	r2, #32
 8002748:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_I2C_Mem_Read+0x230>)
 8002756:	400b      	ands	r3, r1
 8002758:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
  }
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	80002400 	.word	0x80002400
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	460b      	mov	r3, r1
 8002796:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	f040 80f3 	bne.w	8002990 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b8:	d101      	bne.n	80027be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	e0e9      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_I2C_IsDeviceReady+0x44>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0e2      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_I2C_IsDeviceReady+0x72>
 80027ea:	897b      	ldrh	r3, [r7, #10]
 80027ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027f8:	e006      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x80>
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002804:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800280e:	f7ff fa19 	bl	8001c44 <HAL_GetTick>
 8002812:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b20      	cmp	r3, #32
 8002820:	bf0c      	ite	eq
 8002822:	2301      	moveq	r3, #1
 8002824:	2300      	movne	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b10      	cmp	r3, #16
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002840:	e034      	b.n	80028ac <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d01a      	beq.n	8002880 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7ff f9fb 	bl	8001c44 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <HAL_I2C_IsDeviceReady+0xd8>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e088      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b20      	cmp	r3, #32
 800288c:	bf0c      	ite	eq
 800288e:	2301      	moveq	r3, #1
 8002890:	2300      	movne	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_I2C_IsDeviceReady+0x130>
 80028b2:	7fbb      	ldrb	r3, [r7, #30]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0c4      	beq.n	8002842 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d01a      	beq.n	80028fc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2120      	movs	r1, #32
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f92f 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e058      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2220      	movs	r2, #32
 80028e6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e04a      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	2120      	movs	r1, #32
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f914 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e03d      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2210      	movs	r2, #16
 800291c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2220      	movs	r2, #32
 8002924:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d118      	bne.n	8002960 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800293c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	2120      	movs	r1, #32
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f8f3 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e01c      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2220      	movs	r2, #32
 800295e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3301      	adds	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	f63f af39 	bhi.w	80027e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	f043 0220 	orr.w	r2, r3, #32
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	817b      	strh	r3, [r7, #10]
 80029ae:	460b      	mov	r3, r1
 80029b0:	813b      	strh	r3, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <I2C_RequestMemoryWrite+0xa4>)
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fa6f 	bl	8002ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	69b9      	ldr	r1, [r7, #24]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8ff 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e02c      	b.n	8002a38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029e4:	893b      	ldrh	r3, [r7, #8]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
 80029ee:	e015      	b.n	8002a1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	69b9      	ldr	r1, [r7, #24]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8e5 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e012      	b.n	8002a38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a12:	893b      	ldrh	r3, [r7, #8]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2200      	movs	r2, #0
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f884 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	80002000 	.word	0x80002000

08002a44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	460b      	mov	r3, r1
 8002a58:	813b      	strh	r3, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <I2C_RequestMemoryRead+0xa4>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa1c 	bl	8002ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f8ac 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e02c      	b.n	8002ade <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
 8002a94:	e015      	b.n	8002ac2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a96:	893b      	ldrh	r3, [r7, #8]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f892 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e012      	b.n	8002ade <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab8:	893b      	ldrh	r3, [r7, #8]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f831 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	80002000 	.word	0x80002000

08002aec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d103      	bne.n	8002b0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d007      	beq.n	8002b28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	619a      	str	r2, [r3, #24]
  }
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b44:	e031      	b.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d02d      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7ff f879 	bl	8001c44 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d122      	bne.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d113      	bne.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d0be      	beq.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bde:	e033      	b.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f87f 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e031      	b.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d025      	beq.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfc:	f7ff f822 	bl	8001c44 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d302      	bcc.n	8002c12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11a      	bne.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d013      	beq.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d1c4      	bne.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c6c:	e02f      	b.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f838 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02d      	b.n	8002cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	f7fe ffdf 	bl	8001c44 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11a      	bne.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d013      	beq.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d1c8      	bne.n	8002c6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d068      	beq.n	8002de6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d1c:	e049      	b.n	8002db2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d045      	beq.n	8002db2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7fe ff8d 	bl	8001c44 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_IsErrorOccurred+0x54>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d13a      	bne.n	8002db2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5e:	d121      	bne.n	8002da4 <I2C_IsErrorOccurred+0xbc>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d66:	d01d      	beq.n	8002da4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d01a      	beq.n	8002da4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d7e:	f7fe ff61 	bl	8001c44 <HAL_GetTick>
 8002d82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d84:	e00e      	b.n	8002da4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d86:	f7fe ff5d 	bl	8001c44 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b19      	cmp	r3, #25
 8002d92:	d907      	bls.n	8002da4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002da2:	e006      	b.n	8002db2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d1e9      	bne.n	8002d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d003      	beq.n	8002dc8 <I2C_IsErrorOccurred+0xe0>
 8002dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0aa      	beq.n	8002d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fe45 	bl	8002aec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <I2C_IsErrorOccurred+0x1bc>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3728      	adds	r7, #40	; 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	fe00e800 	.word	0xfe00e800

08002ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec0:	7a7b      	ldrb	r3, [r7, #9]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <I2C_TransferConfig+0x60>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	43db      	mvns	r3, r3
 8002eec:	ea02 0103 	and.w	r1, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	03ff63ff 	.word	0x03ff63ff

08002f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d138      	bne.n	8002f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e032      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	; 0x24
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d139      	bne.n	800302c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e033      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2224      	movs	r2, #36	; 0x24
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003042:	af00      	add	r7, sp, #0
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f001 b823 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 817d 	beq.w	8003372 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003078:	4bbc      	ldr	r3, [pc, #752]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b04      	cmp	r3, #4
 8003082:	d00c      	beq.n	800309e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003084:	4bb9      	ldr	r3, [pc, #740]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b08      	cmp	r3, #8
 800308e:	d15c      	bne.n	800314a <HAL_RCC_OscConfig+0x10e>
 8003090:	4bb6      	ldr	r3, [pc, #728]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d155      	bne.n	800314a <HAL_RCC_OscConfig+0x10e>
 800309e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_OscConfig+0x94>
 80030ca:	4ba8      	ldr	r3, [pc, #672]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e015      	b.n	80030fc <HAL_RCC_OscConfig+0xc0>
 80030d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80030f8:	4b9c      	ldr	r3, [pc, #624]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003100:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003104:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003108:	fa92 f2a2 	rbit	r2, r2
 800310c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003110:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 811f 	beq.w	8003370 <HAL_RCC_OscConfig+0x334>
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8116 	bne.w	8003370 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f000 bfaf 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x12e>
 800315c:	4b83      	ldr	r3, [pc, #524]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a82      	ldr	r2, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e036      	b.n	80031d8 <HAL_RCC_OscConfig+0x19c>
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x158>
 800317a:	4b7c      	ldr	r3, [pc, #496]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7b      	ldr	r2, [pc, #492]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b79      	ldr	r3, [pc, #484]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a78      	ldr	r2, [pc, #480]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800318c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e021      	b.n	80031d8 <HAL_RCC_OscConfig+0x19c>
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x184>
 80031a6:	4b71      	ldr	r3, [pc, #452]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a70      	ldr	r2, [pc, #448]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b6e      	ldr	r3, [pc, #440]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6d      	ldr	r2, [pc, #436]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x19c>
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a66      	ldr	r2, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031d8:	4b64      	ldr	r3, [pc, #400]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f023 020f 	bic.w	r2, r3, #15
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	495f      	ldr	r1, [pc, #380]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d059      	beq.n	80032b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fd1f 	bl	8001c44 <HAL_GetTick>
 8003206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe fd1a 	bl	8001c44 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d902      	bls.n	8003222 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	f000 bf43 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003226:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003236:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_RCC_OscConfig+0x218>
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e015      	b.n	8003280 <HAL_RCC_OscConfig+0x244>
 8003254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003258:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003270:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003284:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003288:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003294:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ab      	beq.n	800320c <HAL_RCC_OscConfig+0x1d0>
 80032b4:	e05d      	b.n	8003372 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fcc5 	bl	8001c44 <HAL_GetTick>
 80032ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fcc0 	bl	8001c44 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d902      	bls.n	80032d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	f000 bee9 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80032d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80032ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0x2cc>
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e015      	b.n	8003334 <HAL_RCC_OscConfig+0x2f8>
 8003308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800331c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003320:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003324:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003338:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800333c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003340:	fa92 f2a2 	rbit	r2, r2
 8003344:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003348:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ab      	bne.n	80032c0 <HAL_RCC_OscConfig+0x284>
 8003368:	e003      	b.n	8003372 <HAL_RCC_OscConfig+0x336>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 817d 	beq.w	8003682 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003388:	4ba6      	ldr	r3, [pc, #664]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003394:	4ba3      	ldr	r3, [pc, #652]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d172      	bne.n	8003486 <HAL_RCC_OscConfig+0x44a>
 80033a0:	4ba0      	ldr	r3, [pc, #640]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d16c      	bne.n	8003486 <HAL_RCC_OscConfig+0x44a>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80033be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x3a0>
 80033d6:	4b93      	ldr	r3, [pc, #588]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e013      	b.n	8003404 <HAL_RCC_OscConfig+0x3c8>
 80033dc:	2302      	movs	r3, #2
 80033de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003400:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2202      	movs	r2, #2
 8003406:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800340a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800340e:	fa92 f2a2 	rbit	r2, r2
 8003412:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003416:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCC_OscConfig+0x410>
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f000 be2e 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b75      	ldr	r3, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	21f8      	movs	r1, #248	; 0xf8
 8003462:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800346a:	fa91 f1a1 	rbit	r1, r1
 800346e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003472:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003476:	fab1 f181 	clz	r1, r1
 800347a:	b2c9      	uxtb	r1, r1
 800347c:	408b      	lsls	r3, r1
 800347e:	4969      	ldr	r1, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003484:	e0fd      	b.n	8003682 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8088 	beq.w	80035a8 <HAL_RCC_OscConfig+0x56c>
 8003498:	2301      	movs	r3, #1
 800349a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80034aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fbbe 	bl	8001c44 <HAL_GetTick>
 80034c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe fbb9 	bl	8001c44 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	f000 bde2 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80034f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0x4d8>
 800350e:	4b45      	ldr	r3, [pc, #276]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e013      	b.n	800353c <HAL_RCC_OscConfig+0x500>
 8003514:	2302      	movs	r3, #2
 8003516:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003526:	2302      	movs	r3, #2
 8003528:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800352c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2202      	movs	r2, #2
 800353e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003542:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003546:	fa92 f2a2 	rbit	r2, r2
 800354a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800354e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003552:	fab2 f282 	clz	r2, r2
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f042 0220 	orr.w	r2, r2, #32
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f002 021f 	and.w	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0af      	beq.n	80034ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	21f8      	movs	r1, #248	; 0xf8
 8003584:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800358c:	fa91 f1a1 	rbit	r1, r1
 8003590:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003594:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003598:	fab1 f181 	clz	r1, r1
 800359c:	b2c9      	uxtb	r1, r1
 800359e:	408b      	lsls	r3, r1
 80035a0:	4920      	ldr	r1, [pc, #128]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
 80035a6:	e06c      	b.n	8003682 <HAL_RCC_OscConfig+0x646>
 80035a8:	2301      	movs	r3, #1
 80035aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80035ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	461a      	mov	r2, r3
 80035d0:	2300      	movs	r3, #0
 80035d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fb36 	bl	8001c44 <HAL_GetTick>
 80035d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035de:	f7fe fb31 	bl	8001c44 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d902      	bls.n	80035f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	f000 bd5a 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80035f4:	2302      	movs	r3, #2
 80035f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d104      	bne.n	8003628 <HAL_RCC_OscConfig+0x5ec>
 800361e:	4b01      	ldr	r3, [pc, #4]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	e015      	b.n	8003650 <HAL_RCC_OscConfig+0x614>
 8003624:	40021000 	.word	0x40021000
 8003628:	2302      	movs	r3, #2
 800362a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800363a:	2302      	movs	r3, #2
 800363c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003640:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800364c:	4bc8      	ldr	r3, [pc, #800]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2202      	movs	r2, #2
 8003652:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003656:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800365a:	fa92 f2a2 	rbit	r2, r2
 800365e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003662:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003666:	fab2 f282 	clz	r2, r2
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f042 0220 	orr.w	r2, r2, #32
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	f002 021f 	and.w	r2, r2, #31
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ad      	bne.n	80035de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8110 	beq.w	80038b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d079      	beq.n	800379c <HAL_RCC_OscConfig+0x760>
 80036a8:	2301      	movs	r3, #1
 80036aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80036ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	4bab      	ldr	r3, [pc, #684]	; (8003974 <HAL_RCC_OscConfig+0x938>)
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	461a      	mov	r2, r3
 80036ce:	2301      	movs	r3, #1
 80036d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fab7 	bl	8001c44 <HAL_GetTick>
 80036d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fe fab2 	bl	8001c44 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d902      	bls.n	80036f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	f000 bcdb 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80036f2:	2302      	movs	r3, #2
 80036f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800370c:	2202      	movs	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003730:	2202      	movs	r2, #2
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	fa93 f2a3 	rbit	r2, r3
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800374a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374c:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 800374e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003758:	2102      	movs	r1, #2
 800375a:	6019      	str	r1, [r3, #0]
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f1a3 	rbit	r1, r3
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003772:	6019      	str	r1, [r3, #0]
  return result;
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2101      	movs	r1, #1
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0a0      	beq.n	80036dc <HAL_RCC_OscConfig+0x6a0>
 800379a:	e08d      	b.n	80038b8 <HAL_RCC_OscConfig+0x87c>
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037be:	601a      	str	r2, [r3, #0]
  return result;
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCC_OscConfig+0x938>)
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fe fa31 	bl	8001c44 <HAL_GetTick>
 80037e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fe fa2c 	bl	8001c44 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d902      	bls.n	80037fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	f000 bc55 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003806:	2202      	movs	r2, #2
 8003808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800382a:	2202      	movs	r2, #2
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800384e:	2202      	movs	r2, #2
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	fa93 f2a3 	rbit	r2, r3
 8003860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003864:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003868:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 800386c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003876:	2102      	movs	r1, #2
 8003878:	6019      	str	r1, [r3, #0]
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f1a3 	rbit	r1, r3
 8003888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003890:	6019      	str	r1, [r3, #0]
  return result;
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d197      	bne.n	80037e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 81a1 	beq.w	8003c10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d4:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d116      	bne.n	800390e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	61d3      	str	r3, [r2, #28]
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003906:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11a      	bne.n	8003950 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391a:	4b17      	ldr	r3, [pc, #92]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fe f98d 	bl	8001c44 <HAL_GetTick>
 800392a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	e009      	b.n	8003944 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fe f988 	bl	8001c44 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b64      	cmp	r3, #100	; 0x64
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e3b1      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10d      	bne.n	800397c <HAL_RCC_OscConfig+0x940>
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a02      	ldr	r2, [pc, #8]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	e03c      	b.n	80039e8 <HAL_RCC_OscConfig+0x9ac>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	10908120 	.word	0x10908120
 8003978:	40007000 	.word	0x40007000
 800397c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10c      	bne.n	80039a6 <HAL_RCC_OscConfig+0x96a>
 800398c:	4bc1      	ldr	r3, [pc, #772]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4ac0      	ldr	r2, [pc, #768]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6213      	str	r3, [r2, #32]
 8003998:	4bbe      	ldr	r3, [pc, #760]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4abd      	ldr	r2, [pc, #756]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 800399e:	f023 0304 	bic.w	r3, r3, #4
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	e020      	b.n	80039e8 <HAL_RCC_OscConfig+0x9ac>
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x994>
 80039b6:	4bb7      	ldr	r3, [pc, #732]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4ab6      	ldr	r2, [pc, #728]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
 80039c2:	4bb4      	ldr	r3, [pc, #720]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4ab3      	ldr	r2, [pc, #716]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0x9ac>
 80039d0:	4bb0      	ldr	r3, [pc, #704]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4aaf      	ldr	r2, [pc, #700]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4bad      	ldr	r3, [pc, #692]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4aac      	ldr	r2, [pc, #688]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8081 	beq.w	8003afc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fa:	f7fe f923 	bl	8001c44 <HAL_GetTick>
 80039fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe f91e 	bl	8001c44 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e345      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a24:	2202      	movs	r2, #2
 8003a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	fa93 f2a3 	rbit	r2, r3
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a48:	2202      	movs	r2, #2
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a62:	601a      	str	r2, [r3, #0]
  return result;
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_OscConfig+0xa4c>
 8003a82:	4b84      	ldr	r3, [pc, #528]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	e013      	b.n	8003ab0 <HAL_RCC_OscConfig+0xa74>
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a90:	2202      	movs	r2, #2
 8003a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	fa93 f2a3 	rbit	r2, r3
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ab8:	2102      	movs	r1, #2
 8003aba:	6011      	str	r1, [r2, #0]
 8003abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	fa92 f1a2 	rbit	r1, r2
 8003aca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ace:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ad2:	6011      	str	r1, [r2, #0]
  return result;
 8003ad4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	fab2 f282 	clz	r2, r2
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f002 021f 	and.w	r2, r2, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d084      	beq.n	8003a04 <HAL_RCC_OscConfig+0x9c8>
 8003afa:	e07f      	b.n	8003bfc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afc:	f7fe f8a2 	bl	8001c44 <HAL_GetTick>
 8003b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b04:	e00b      	b.n	8003b1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe f89d 	bl	8001c44 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e2c4      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b26:	2202      	movs	r2, #2
 8003b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	fa93 f2a3 	rbit	r2, r3
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fa93 f2a3 	rbit	r2, r3
 8003b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b64:	601a      	str	r2, [r3, #0]
  return result;
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f043 0302 	orr.w	r3, r3, #2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d102      	bne.n	8003b8a <HAL_RCC_OscConfig+0xb4e>
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	e013      	b.n	8003bb2 <HAL_RCC_OscConfig+0xb76>
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bba:	2102      	movs	r1, #2
 8003bbc:	6011      	str	r1, [r2, #0]
 8003bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	fa92 f1a2 	rbit	r1, r2
 8003bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bd4:	6011      	str	r1, [r2, #0]
  return result;
 8003bd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f002 021f 	and.w	r2, r2, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d184      	bne.n	8003b06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bfc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8242 	beq.w	80040a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	f000 8213 	beq.w	8004056 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f040 8162 	bne.w	8003f06 <HAL_RCC_OscConfig+0xeca>
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	fa93 f2a3 	rbit	r2, r3
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c66:	601a      	str	r2, [r3, #0]
  return result;
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	461a      	mov	r2, r3
 8003c84:	2300      	movs	r3, #0
 8003c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd ffdc 	bl	8001c44 <HAL_GetTick>
 8003c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c90:	e00c      	b.n	8003cac <HAL_RCC_OscConfig+0xc70>
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd ffd4 	bl	8001c44 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1fd      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	fa93 f2a3 	rbit	r2, r3
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cd0:	601a      	str	r2, [r3, #0]
  return result;
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_OscConfig+0xcba>
 8003cf0:	4bb0      	ldr	r3, [pc, #704]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	e027      	b.n	8003d46 <HAL_RCC_OscConfig+0xd0a>
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fa93 f2a3 	rbit	r2, r3
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	fa93 f2a3 	rbit	r2, r3
 8003d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4b9c      	ldr	r3, [pc, #624]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d52:	6011      	str	r1, [r2, #0]
 8003d54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	fa92 f1a2 	rbit	r1, r2
 8003d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d6a:	6011      	str	r1, [r2, #0]
  return result;
 8003d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	fab2 f282 	clz	r2, r2
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	f042 0220 	orr.w	r2, r2, #32
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	f002 021f 	and.w	r2, r2, #31
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d182      	bne.n	8003c98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	430b      	orrs	r3, r1
 8003db4:	497f      	ldr	r1, [pc, #508]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dcc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	fa93 f2a3 	rbit	r2, r3
 8003dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dde:	601a      	str	r2, [r3, #0]
  return result;
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003de8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003df4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd ff20 	bl	8001c44 <HAL_GetTick>
 8003e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e08:	e009      	b.n	8003e1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7fd ff1b 	bl	8001c44 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e144      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	fa93 f2a3 	rbit	r2, r3
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e42:	601a      	str	r2, [r3, #0]
  return result;
 8003e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d102      	bne.n	8003e68 <HAL_RCC_OscConfig+0xe2c>
 8003e62:	4b54      	ldr	r3, [pc, #336]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	e027      	b.n	8003eb8 <HAL_RCC_OscConfig+0xe7c>
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	fa93 f2a3 	rbit	r2, r3
 8003e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ebc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ec0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	fa92 f1a2 	rbit	r1, r2
 8003ed4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003edc:	6011      	str	r1, [r2, #0]
  return result;
 8003ede:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d082      	beq.n	8003e0a <HAL_RCC_OscConfig+0xdce>
 8003f04:	e0cf      	b.n	80040a6 <HAL_RCC_OscConfig+0x106a>
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f2a:	601a      	str	r2, [r3, #0]
  return result;
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	461a      	mov	r2, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fe7a 	bl	8001c44 <HAL_GetTick>
 8003f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f54:	e009      	b.n	8003f6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fd fe75 	bl	8001c44 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e09e      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f2a3 	rbit	r2, r3
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f8e:	601a      	str	r2, [r3, #0]
  return result;
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d104      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xf7c>
 8003fae:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	e029      	b.n	8004008 <HAL_RCC_OscConfig+0xfcc>
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	fa93 f2a3 	rbit	r2, r3
 8003fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCC_OscConfig+0x1078>)
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800400c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004014:	6011      	str	r1, [r2, #0]
 8004016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fa92 f1a2 	rbit	r1, r2
 8004024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004028:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800402c:	6011      	str	r1, [r2, #0]
  return result;
 800402e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004032:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f042 0220 	orr.w	r2, r2, #32
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	f002 021f 	and.w	r2, r2, #31
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d180      	bne.n	8003f56 <HAL_RCC_OscConfig+0xf1a>
 8004054:	e027      	b.n	80040a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e01e      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_OscConfig+0x1078>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004072:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004076:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	429a      	cmp	r2, r3
 8004088:	d10b      	bne.n	80040a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800408a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800408e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b09e      	sub	sp, #120	; 0x78
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e162      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b90      	ldr	r3, [pc, #576]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 0207 	bic.w	r2, r3, #7
 80040e6:	498b      	ldr	r1, [pc, #556]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b89      	ldr	r3, [pc, #548]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e14a      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b82      	ldr	r3, [pc, #520]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	497f      	ldr	r1, [pc, #508]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80dc 	beq.w	80042e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d13c      	bne.n	80041ae <HAL_RCC_ClockConfig+0xf6>
 8004134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004138:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <HAL_RCC_ClockConfig+0xa6>
 8004158:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	e00f      	b.n	800417e <HAL_RCC_ClockConfig+0xc6>
 800415e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004162:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	667b      	str	r3, [r7, #100]	; 0x64
 800416c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004170:	663b      	str	r3, [r7, #96]	; 0x60
 8004172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417a:	4b67      	ldr	r3, [pc, #412]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004182:	65ba      	str	r2, [r7, #88]	; 0x58
 8004184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004186:	fa92 f2a2 	rbit	r2, r2
 800418a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800418c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800418e:	fab2 f282 	clz	r2, r2
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	f042 0220 	orr.w	r2, r2, #32
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	f002 021f 	and.w	r2, r2, #31
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d17b      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0f3      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d13c      	bne.n	8004230 <HAL_RCC_ClockConfig+0x178>
 80041b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x128>
 80041da:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e00f      	b.n	8004200 <HAL_RCC_ClockConfig+0x148>
 80041e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	647b      	str	r3, [r7, #68]	; 0x44
 80041ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
 80041f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fc:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004204:	63ba      	str	r2, [r7, #56]	; 0x38
 8004206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004208:	fa92 f2a2 	rbit	r2, r2
 800420c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800420e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004210:	fab2 f282 	clz	r2, r2
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f042 0220 	orr.w	r2, r2, #32
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f002 021f 	and.w	r2, r2, #31
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f202 	lsl.w	r2, r1, r2
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d13a      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b2      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
 8004230:	2302      	movs	r3, #2
 8004232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d102      	bne.n	8004258 <HAL_RCC_ClockConfig+0x1a0>
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	e00d      	b.n	8004274 <HAL_RCC_ClockConfig+0x1bc>
 8004258:	2302      	movs	r3, #2
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	2302      	movs	r3, #2
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	4b29      	ldr	r3, [pc, #164]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2202      	movs	r2, #2
 8004276:	61ba      	str	r2, [r7, #24]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	fa92 f2a2 	rbit	r2, r2
 800427e:	617a      	str	r2, [r7, #20]
  return result;
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	fab2 f282 	clz	r2, r2
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	f042 0220 	orr.w	r2, r2, #32
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f002 021f 	and.w	r2, r2, #31
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e079      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	491a      	ldr	r1, [pc, #104]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fd fcc6 	bl	8001c44 <HAL_GetTick>
 80042b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd fcc2 	bl	8001c44 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e061      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d214      	bcs.n	800431c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	4906      	ldr	r1, [pc, #24]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e040      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
 8004314:	40022000 	.word	0x40022000
 8004318:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	491a      	ldr	r1, [pc, #104]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4912      	ldr	r1, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800435a:	f000 f829 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800435e:	4601      	mov	r1, r0
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004368:	22f0      	movs	r2, #240	; 0xf0
 800436a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	fa92 f2a2 	rbit	r2, r2
 8004372:	60fa      	str	r2, [r7, #12]
  return result;
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	fab2 f282 	clz	r2, r2
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	40d3      	lsrs	r3, r2
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x2ec>)
 8004380:	5cd3      	ldrb	r3, [r2, r3]
 8004382:	fa21 f303 	lsr.w	r3, r1, r3
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_RCC_ClockConfig+0x2f0>)
 8004388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_RCC_ClockConfig+0x2f4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fc14 	bl	8001bbc <HAL_InitTick>
  
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3778      	adds	r7, #120	; 0x78
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	080069bc 	.word	0x080069bc
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b08b      	sub	sp, #44	; 0x2c
 80043b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x30>
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x36>
 80043de:	e03c      	b.n	800445a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043e2:	623b      	str	r3, [r7, #32]
      break;
 80043e4:	e03c      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	fa92 f2a2 	rbit	r2, r2
 80043f8:	607a      	str	r2, [r7, #4]
  return result;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	fab2 f282 	clz	r2, r2
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	40d3      	lsrs	r3, r2
 8004404:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc0>)
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	220f      	movs	r2, #15
 8004414:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	fa92 f2a2 	rbit	r2, r2
 800441c:	60fa      	str	r2, [r7, #12]
  return result;
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	40d3      	lsrs	r3, r2
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <HAL_RCC_GetSysClockFreq+0xcc>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004438:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	e004      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <HAL_RCC_GetSysClockFreq+0xd0>)
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	623b      	str	r3, [r7, #32]
      break;
 8004458:	e002      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800445c:	623b      	str	r3, [r7, #32]
      break;
 800445e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004460:	6a3b      	ldr	r3, [r7, #32]
}
 8004462:	4618      	mov	r0, r3
 8004464:	372c      	adds	r7, #44	; 0x2c
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	007a1200 	.word	0x007a1200
 8004478:	080069d4 	.word	0x080069d4
 800447c:	080069e4 	.word	0x080069e4
 8004480:	003d0900 	.word	0x003d0900

08004484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000000 	.word	0x20000000

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044a2:	f7ff ffef 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a6:	4601      	mov	r1, r0
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	fa92 f2a2 	rbit	r2, r2
 80044bc:	603a      	str	r2, [r7, #0]
  return result;
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	fab2 f282 	clz	r2, r2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	40d3      	lsrs	r3, r2
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	080069cc 	.word	0x080069cc

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044e6:	f7ff ffcd 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044ea:	4601      	mov	r1, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	fa92 f2a2 	rbit	r2, r2
 8004500:	603a      	str	r2, [r7, #0]
  return result;
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	fab2 f282 	clz	r2, r2
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	40d3      	lsrs	r3, r2
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x40>)
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000
 8004520:	080069cc 	.word	0x080069cc

08004524 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b092      	sub	sp, #72	; 0x48
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80d4 	beq.w	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004548:	4b4e      	ldr	r3, [pc, #312]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10e      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4a4a      	ldr	r2, [pc, #296]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455e:	61d3      	str	r3, [r2, #28]
 8004560:	4b48      	ldr	r3, [pc, #288]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b45      	ldr	r3, [pc, #276]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b42      	ldr	r3, [pc, #264]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a41      	ldr	r2, [pc, #260]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fd fb5b 	bl	8001c44 <HAL_GetTick>
 800458e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fd fb57 	bl	8001c44 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	; 0x64
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e13c      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b38      	ldr	r3, [pc, #224]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8084 	beq.w	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d07c      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045d0:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	461a      	mov	r2, r3
 80045fa:	2301      	movs	r3, #1
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04b      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fd fb07 	bl	8001c44 <HAL_GetTick>
 8004636:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	e00a      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fd fb03 	bl	8001c44 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e0e6      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004650:	2302      	movs	r3, #2
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
 800465c:	2302      	movs	r3, #2
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	61fb      	str	r3, [r7, #28]
  return result;
 8004668:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d108      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800467e:	4b01      	ldr	r3, [pc, #4]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	e00d      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004684:	40021000 	.word	0x40021000
 8004688:	40007000 	.word	0x40007000
 800468c:	10908100 	.word	0x10908100
 8004690:	2302      	movs	r3, #2
 8004692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	4b62      	ldr	r3, [pc, #392]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2202      	movs	r2, #2
 80046a2:	613a      	str	r2, [r7, #16]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	fa92 f2a2 	rbit	r2, r2
 80046aa:	60fa      	str	r2, [r7, #12]
  return result;
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fab2 f282 	clz	r2, r2
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	f002 021f 	and.w	r2, r2, #31
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f202 	lsl.w	r2, r1, r2
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0b7      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046ca:	4b57      	ldr	r3, [pc, #348]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4954      	ldr	r1, [pc, #336]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e4:	4b50      	ldr	r3, [pc, #320]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	4a4f      	ldr	r2, [pc, #316]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046fc:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f023 0203 	bic.w	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4947      	ldr	r1, [pc, #284]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800470a:	4313      	orrs	r3, r2
 800470c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800471a:	4b43      	ldr	r3, [pc, #268]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f023 0210 	bic.w	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4940      	ldr	r1, [pc, #256]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004728:	4313      	orrs	r3, r2
 800472a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004738:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f023 0220 	bic.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	4938      	ldr	r1, [pc, #224]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004746:	4313      	orrs	r3, r2
 8004748:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004756:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4931      	ldr	r1, [pc, #196]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004764:	4313      	orrs	r3, r2
 8004766:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4929      	ldr	r1, [pc, #164]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004792:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	4922      	ldr	r1, [pc, #136]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	491a      	ldr	r1, [pc, #104]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	4913      	ldr	r1, [pc, #76]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	490b      	ldr	r1, [pc, #44]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004818:	4313      	orrs	r3, r2
 800481a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3748      	adds	r7, #72	; 0x48
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e09d      	b.n	800497a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484e:	d009      	beq.n	8004864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
 8004856:	e005      	b.n	8004864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc ffc8 	bl	8001814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a4:	d902      	bls.n	80048ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e002      	b.n	80048b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ba:	d007      	beq.n	80048cc <HAL_SPI_Init+0xa0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	ea42 0103 	orr.w	r1, r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	f003 0204 	and.w	r2, r3, #4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004948:	ea42 0103 	orr.w	r1, r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e040      	b.n	8004a16 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fc ff79 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2224      	movs	r2, #36	; 0x24
 80049ae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8b7 	bl	8004b34 <UART_SetConfig>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e022      	b.n	8004a16 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9e1 	bl	8004da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa68 	bl	8004ee4 <UART_CheckIdleState>
 8004a14:	4603      	mov	r3, r0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b08a      	sub	sp, #40	; 0x28
 8004a22:	af02      	add	r7, sp, #8
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d178      	bne.n	8004b28 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_UART_Transmit+0x24>
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e071      	b.n	8004b2a <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2221      	movs	r2, #33	; 0x21
 8004a52:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a54:	f7fd f8f6 	bl	8001c44 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	88fa      	ldrh	r2, [r7, #6]
 8004a5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d108      	bne.n	8004a86 <HAL_UART_Transmit+0x68>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	e003      	b.n	8004a8e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a8e:	e030      	b.n	8004af2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	2180      	movs	r1, #128	; 0x80
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 faca 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e03c      	b.n	8004b2a <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	3302      	adds	r3, #2
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	e008      	b.n	8004ae0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3301      	adds	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1c8      	bne.n	8004a90 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2140      	movs	r1, #64	; 0x40
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fa93 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e005      	b.n	8004b2a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e000      	b.n	8004b2a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b8a      	ldr	r3, [pc, #552]	; (8004d88 <UART_SetConfig+0x254>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	6979      	ldr	r1, [r7, #20]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a78      	ldr	r2, [pc, #480]	; (8004d8c <UART_SetConfig+0x258>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d120      	bne.n	8004bf2 <UART_SetConfig+0xbe>
 8004bb0:	4b77      	ldr	r3, [pc, #476]	; (8004d90 <UART_SetConfig+0x25c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d817      	bhi.n	8004bec <UART_SetConfig+0xb8>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x90>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004be7 	.word	0x08004be7
 8004bd0:	08004bdb 	.word	0x08004bdb
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e01d      	b.n	8004c16 <UART_SetConfig+0xe2>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e01a      	b.n	8004c16 <UART_SetConfig+0xe2>
 8004be0:	2304      	movs	r3, #4
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e017      	b.n	8004c16 <UART_SetConfig+0xe2>
 8004be6:	2308      	movs	r3, #8
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e014      	b.n	8004c16 <UART_SetConfig+0xe2>
 8004bec:	2310      	movs	r3, #16
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e011      	b.n	8004c16 <UART_SetConfig+0xe2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a67      	ldr	r2, [pc, #412]	; (8004d94 <UART_SetConfig+0x260>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d102      	bne.n	8004c02 <UART_SetConfig+0xce>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e009      	b.n	8004c16 <UART_SetConfig+0xe2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a64      	ldr	r2, [pc, #400]	; (8004d98 <UART_SetConfig+0x264>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d102      	bne.n	8004c12 <UART_SetConfig+0xde>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e001      	b.n	8004c16 <UART_SetConfig+0xe2>
 8004c12:	2310      	movs	r3, #16
 8004c14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1e:	d15a      	bne.n	8004cd6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c20:	7ffb      	ldrb	r3, [r7, #31]
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d827      	bhi.n	8004c76 <UART_SetConfig+0x142>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0xf8>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c67 	.word	0x08004c67
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c77 	.word	0x08004c77
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c50:	f7ff fc24 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8004c54:	61b8      	str	r0, [r7, #24]
        break;
 8004c56:	e013      	b.n	8004c80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c58:	f7ff fc42 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8004c5c:	61b8      	str	r0, [r7, #24]
        break;
 8004c5e:	e00f      	b.n	8004c80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b4e      	ldr	r3, [pc, #312]	; (8004d9c <UART_SetConfig+0x268>)
 8004c62:	61bb      	str	r3, [r7, #24]
        break;
 8004c64:	e00c      	b.n	8004c80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7ff fba3 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004c6a:	61b8      	str	r0, [r7, #24]
        break;
 8004c6c:	e008      	b.n	8004c80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c72:	61bb      	str	r3, [r7, #24]
        break;
 8004c74:	e004      	b.n	8004c80 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d074      	beq.n	8004d70 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	005a      	lsls	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d916      	bls.n	8004cd0 <UART_SetConfig+0x19c>
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d212      	bcs.n	8004cd0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f023 030f 	bic.w	r3, r3, #15
 8004cb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	89fa      	ldrh	r2, [r7, #14]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e04f      	b.n	8004d70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77bb      	strb	r3, [r7, #30]
 8004cd4:	e04c      	b.n	8004d70 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cd6:	7ffb      	ldrb	r3, [r7, #31]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d828      	bhi.n	8004d2e <UART_SetConfig+0x1fa>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x1b0>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	08004d2f 	.word	0x08004d2f
 8004cf4:	08004d1f 	.word	0x08004d1f
 8004cf8:	08004d2f 	.word	0x08004d2f
 8004cfc:	08004d2f 	.word	0x08004d2f
 8004d00:	08004d2f 	.word	0x08004d2f
 8004d04:	08004d27 	.word	0x08004d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7ff fbc8 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8004d0c:	61b8      	str	r0, [r7, #24]
        break;
 8004d0e:	e013      	b.n	8004d38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d10:	f7ff fbe6 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8004d14:	61b8      	str	r0, [r7, #24]
        break;
 8004d16:	e00f      	b.n	8004d38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d18:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <UART_SetConfig+0x268>)
 8004d1a:	61bb      	str	r3, [r7, #24]
        break;
 8004d1c:	e00c      	b.n	8004d38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1e:	f7ff fb47 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004d22:	61b8      	str	r0, [r7, #24]
        break;
 8004d24:	e008      	b.n	8004d38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d2a:	61bb      	str	r3, [r7, #24]
        break;
 8004d2c:	e004      	b.n	8004d38 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	77bb      	strb	r3, [r7, #30]
        break;
 8004d36:	bf00      	nop
    }

    if (pclk != 0U)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d018      	beq.n	8004d70 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	085a      	lsrs	r2, r3, #1
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	441a      	add	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d909      	bls.n	8004d6c <UART_SetConfig+0x238>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5e:	d205      	bcs.n	8004d6c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	e001      	b.n	8004d70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	efff69f3 	.word	0xefff69f3
 8004d8c:	40013800 	.word	0x40013800
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40004400 	.word	0x40004400
 8004d98:	40004800 	.word	0x40004800
 8004d9c:	007a1200 	.word	0x007a1200

08004da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9e:	d10a      	bne.n	8004eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b098      	sub	sp, #96	; 0x60
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef4:	f7fc fea6 	bl	8001c44 <HAL_GetTick>
 8004ef8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d12e      	bne.n	8004f66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f88c 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d021      	beq.n	8004f66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f36:	653b      	str	r3, [r7, #80]	; 0x50
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44
 8004f42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e6      	bne.n	8004f22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e062      	b.n	800502c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d149      	bne.n	8005008 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f856 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d03c      	beq.n	8005008 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
 8004fae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe0:	61fa      	str	r2, [r7, #28]
 8004fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	617b      	str	r3, [r7, #20]
   return(result);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e5      	bne.n	8004fc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e011      	b.n	800502c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3758      	adds	r7, #88	; 0x58
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005044:	e049      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d045      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fc fdf9 	bl	8001c44 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <UART_WaitOnFlagUntilTimeout+0x30>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e048      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d031      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b08      	cmp	r3, #8
 8005082:	d110      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2208      	movs	r2, #8
 800508a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f838 	bl	8005102 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2208      	movs	r2, #8
 8005096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e029      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	d111      	bne.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f81e 	bl	8005102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e00f      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d0a6      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005102:	b480      	push	{r7}
 8005104:	b095      	sub	sp, #84	; 0x54
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005128:	643b      	str	r3, [r7, #64]	; 0x40
 800512a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800512e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e6      	bne.n	800510a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	61fb      	str	r3, [r7, #28]
   return(result);
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800515c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e5      	bne.n	800513c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	2b01      	cmp	r3, #1
 8005176:	d118      	bne.n	80051aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	60bb      	str	r3, [r7, #8]
   return(result);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f023 0310 	bic.w	r3, r3, #16
 800518c:	647b      	str	r3, [r7, #68]	; 0x44
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6979      	ldr	r1, [r7, #20]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	613b      	str	r3, [r7, #16]
   return(result);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e6      	bne.n	8005178 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051be:	bf00      	nop
 80051c0:	3754      	adds	r7, #84	; 0x54
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <__errno>:
 80051cc:	4b01      	ldr	r3, [pc, #4]	; (80051d4 <__errno+0x8>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000000c 	.word	0x2000000c

080051d8 <__libc_init_array>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4d0d      	ldr	r5, [pc, #52]	; (8005210 <__libc_init_array+0x38>)
 80051dc:	4c0d      	ldr	r4, [pc, #52]	; (8005214 <__libc_init_array+0x3c>)
 80051de:	1b64      	subs	r4, r4, r5
 80051e0:	10a4      	asrs	r4, r4, #2
 80051e2:	2600      	movs	r6, #0
 80051e4:	42a6      	cmp	r6, r4
 80051e6:	d109      	bne.n	80051fc <__libc_init_array+0x24>
 80051e8:	4d0b      	ldr	r5, [pc, #44]	; (8005218 <__libc_init_array+0x40>)
 80051ea:	4c0c      	ldr	r4, [pc, #48]	; (800521c <__libc_init_array+0x44>)
 80051ec:	f001 fb7a 	bl	80068e4 <_init>
 80051f0:	1b64      	subs	r4, r4, r5
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	2600      	movs	r6, #0
 80051f6:	42a6      	cmp	r6, r4
 80051f8:	d105      	bne.n	8005206 <__libc_init_array+0x2e>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005200:	4798      	blx	r3
 8005202:	3601      	adds	r6, #1
 8005204:	e7ee      	b.n	80051e4 <__libc_init_array+0xc>
 8005206:	f855 3b04 	ldr.w	r3, [r5], #4
 800520a:	4798      	blx	r3
 800520c:	3601      	adds	r6, #1
 800520e:	e7f2      	b.n	80051f6 <__libc_init_array+0x1e>
 8005210:	08006b00 	.word	0x08006b00
 8005214:	08006b00 	.word	0x08006b00
 8005218:	08006b00 	.word	0x08006b00
 800521c:	08006b04 	.word	0x08006b04

08005220 <memset>:
 8005220:	4402      	add	r2, r0
 8005222:	4603      	mov	r3, r0
 8005224:	4293      	cmp	r3, r2
 8005226:	d100      	bne.n	800522a <memset+0xa>
 8005228:	4770      	bx	lr
 800522a:	f803 1b01 	strb.w	r1, [r3], #1
 800522e:	e7f9      	b.n	8005224 <memset+0x4>

08005230 <iprintf>:
 8005230:	b40f      	push	{r0, r1, r2, r3}
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <iprintf+0x2c>)
 8005234:	b513      	push	{r0, r1, r4, lr}
 8005236:	681c      	ldr	r4, [r3, #0]
 8005238:	b124      	cbz	r4, 8005244 <iprintf+0x14>
 800523a:	69a3      	ldr	r3, [r4, #24]
 800523c:	b913      	cbnz	r3, 8005244 <iprintf+0x14>
 800523e:	4620      	mov	r0, r4
 8005240:	f000 fa5e 	bl	8005700 <__sinit>
 8005244:	ab05      	add	r3, sp, #20
 8005246:	9a04      	ldr	r2, [sp, #16]
 8005248:	68a1      	ldr	r1, [r4, #8]
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	4620      	mov	r0, r4
 800524e:	f000 fc67 	bl	8005b20 <_vfiprintf_r>
 8005252:	b002      	add	sp, #8
 8005254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005258:	b004      	add	sp, #16
 800525a:	4770      	bx	lr
 800525c:	2000000c 	.word	0x2000000c

08005260 <_puts_r>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	460e      	mov	r6, r1
 8005264:	4605      	mov	r5, r0
 8005266:	b118      	cbz	r0, 8005270 <_puts_r+0x10>
 8005268:	6983      	ldr	r3, [r0, #24]
 800526a:	b90b      	cbnz	r3, 8005270 <_puts_r+0x10>
 800526c:	f000 fa48 	bl	8005700 <__sinit>
 8005270:	69ab      	ldr	r3, [r5, #24]
 8005272:	68ac      	ldr	r4, [r5, #8]
 8005274:	b913      	cbnz	r3, 800527c <_puts_r+0x1c>
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fa42 	bl	8005700 <__sinit>
 800527c:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <_puts_r+0xd0>)
 800527e:	429c      	cmp	r4, r3
 8005280:	d120      	bne.n	80052c4 <_puts_r+0x64>
 8005282:	686c      	ldr	r4, [r5, #4]
 8005284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005286:	07db      	lsls	r3, r3, #31
 8005288:	d405      	bmi.n	8005296 <_puts_r+0x36>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	0598      	lsls	r0, r3, #22
 800528e:	d402      	bmi.n	8005296 <_puts_r+0x36>
 8005290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005292:	f000 fad3 	bl	800583c <__retarget_lock_acquire_recursive>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	0719      	lsls	r1, r3, #28
 800529a:	d51d      	bpl.n	80052d8 <_puts_r+0x78>
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	b1db      	cbz	r3, 80052d8 <_puts_r+0x78>
 80052a0:	3e01      	subs	r6, #1
 80052a2:	68a3      	ldr	r3, [r4, #8]
 80052a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60a3      	str	r3, [r4, #8]
 80052ac:	bb39      	cbnz	r1, 80052fe <_puts_r+0x9e>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da38      	bge.n	8005324 <_puts_r+0xc4>
 80052b2:	4622      	mov	r2, r4
 80052b4:	210a      	movs	r1, #10
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 f848 	bl	800534c <__swbuf_r>
 80052bc:	3001      	adds	r0, #1
 80052be:	d011      	beq.n	80052e4 <_puts_r+0x84>
 80052c0:	250a      	movs	r5, #10
 80052c2:	e011      	b.n	80052e8 <_puts_r+0x88>
 80052c4:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <_puts_r+0xd4>)
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d101      	bne.n	80052ce <_puts_r+0x6e>
 80052ca:	68ac      	ldr	r4, [r5, #8]
 80052cc:	e7da      	b.n	8005284 <_puts_r+0x24>
 80052ce:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <_puts_r+0xd8>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	bf08      	it	eq
 80052d4:	68ec      	ldreq	r4, [r5, #12]
 80052d6:	e7d5      	b.n	8005284 <_puts_r+0x24>
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f888 	bl	80053f0 <__swsetup_r>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d0dd      	beq.n	80052a0 <_puts_r+0x40>
 80052e4:	f04f 35ff 	mov.w	r5, #4294967295
 80052e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ea:	07da      	lsls	r2, r3, #31
 80052ec:	d405      	bmi.n	80052fa <_puts_r+0x9a>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	059b      	lsls	r3, r3, #22
 80052f2:	d402      	bmi.n	80052fa <_puts_r+0x9a>
 80052f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052f6:	f000 faa2 	bl	800583e <__retarget_lock_release_recursive>
 80052fa:	4628      	mov	r0, r5
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da04      	bge.n	800530c <_puts_r+0xac>
 8005302:	69a2      	ldr	r2, [r4, #24]
 8005304:	429a      	cmp	r2, r3
 8005306:	dc06      	bgt.n	8005316 <_puts_r+0xb6>
 8005308:	290a      	cmp	r1, #10
 800530a:	d004      	beq.n	8005316 <_puts_r+0xb6>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	6022      	str	r2, [r4, #0]
 8005312:	7019      	strb	r1, [r3, #0]
 8005314:	e7c5      	b.n	80052a2 <_puts_r+0x42>
 8005316:	4622      	mov	r2, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f000 f817 	bl	800534c <__swbuf_r>
 800531e:	3001      	adds	r0, #1
 8005320:	d1bf      	bne.n	80052a2 <_puts_r+0x42>
 8005322:	e7df      	b.n	80052e4 <_puts_r+0x84>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	250a      	movs	r5, #10
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	701d      	strb	r5, [r3, #0]
 800532e:	e7db      	b.n	80052e8 <_puts_r+0x88>
 8005330:	08006a18 	.word	0x08006a18
 8005334:	08006a38 	.word	0x08006a38
 8005338:	080069f8 	.word	0x080069f8

0800533c <puts>:
 800533c:	4b02      	ldr	r3, [pc, #8]	; (8005348 <puts+0xc>)
 800533e:	4601      	mov	r1, r0
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	f7ff bf8d 	b.w	8005260 <_puts_r>
 8005346:	bf00      	nop
 8005348:	2000000c 	.word	0x2000000c

0800534c <__swbuf_r>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	460e      	mov	r6, r1
 8005350:	4614      	mov	r4, r2
 8005352:	4605      	mov	r5, r0
 8005354:	b118      	cbz	r0, 800535e <__swbuf_r+0x12>
 8005356:	6983      	ldr	r3, [r0, #24]
 8005358:	b90b      	cbnz	r3, 800535e <__swbuf_r+0x12>
 800535a:	f000 f9d1 	bl	8005700 <__sinit>
 800535e:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <__swbuf_r+0x98>)
 8005360:	429c      	cmp	r4, r3
 8005362:	d12b      	bne.n	80053bc <__swbuf_r+0x70>
 8005364:	686c      	ldr	r4, [r5, #4]
 8005366:	69a3      	ldr	r3, [r4, #24]
 8005368:	60a3      	str	r3, [r4, #8]
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	071a      	lsls	r2, r3, #28
 800536e:	d52f      	bpl.n	80053d0 <__swbuf_r+0x84>
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	b36b      	cbz	r3, 80053d0 <__swbuf_r+0x84>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	1ac0      	subs	r0, r0, r3
 800537a:	6963      	ldr	r3, [r4, #20]
 800537c:	b2f6      	uxtb	r6, r6
 800537e:	4283      	cmp	r3, r0
 8005380:	4637      	mov	r7, r6
 8005382:	dc04      	bgt.n	800538e <__swbuf_r+0x42>
 8005384:	4621      	mov	r1, r4
 8005386:	4628      	mov	r0, r5
 8005388:	f000 f926 	bl	80055d8 <_fflush_r>
 800538c:	bb30      	cbnz	r0, 80053dc <__swbuf_r+0x90>
 800538e:	68a3      	ldr	r3, [r4, #8]
 8005390:	3b01      	subs	r3, #1
 8005392:	60a3      	str	r3, [r4, #8]
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	701e      	strb	r6, [r3, #0]
 800539c:	6963      	ldr	r3, [r4, #20]
 800539e:	3001      	adds	r0, #1
 80053a0:	4283      	cmp	r3, r0
 80053a2:	d004      	beq.n	80053ae <__swbuf_r+0x62>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	07db      	lsls	r3, r3, #31
 80053a8:	d506      	bpl.n	80053b8 <__swbuf_r+0x6c>
 80053aa:	2e0a      	cmp	r6, #10
 80053ac:	d104      	bne.n	80053b8 <__swbuf_r+0x6c>
 80053ae:	4621      	mov	r1, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 f911 	bl	80055d8 <_fflush_r>
 80053b6:	b988      	cbnz	r0, 80053dc <__swbuf_r+0x90>
 80053b8:	4638      	mov	r0, r7
 80053ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <__swbuf_r+0x9c>)
 80053be:	429c      	cmp	r4, r3
 80053c0:	d101      	bne.n	80053c6 <__swbuf_r+0x7a>
 80053c2:	68ac      	ldr	r4, [r5, #8]
 80053c4:	e7cf      	b.n	8005366 <__swbuf_r+0x1a>
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <__swbuf_r+0xa0>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	bf08      	it	eq
 80053cc:	68ec      	ldreq	r4, [r5, #12]
 80053ce:	e7ca      	b.n	8005366 <__swbuf_r+0x1a>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4628      	mov	r0, r5
 80053d4:	f000 f80c 	bl	80053f0 <__swsetup_r>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d0cb      	beq.n	8005374 <__swbuf_r+0x28>
 80053dc:	f04f 37ff 	mov.w	r7, #4294967295
 80053e0:	e7ea      	b.n	80053b8 <__swbuf_r+0x6c>
 80053e2:	bf00      	nop
 80053e4:	08006a18 	.word	0x08006a18
 80053e8:	08006a38 	.word	0x08006a38
 80053ec:	080069f8 	.word	0x080069f8

080053f0 <__swsetup_r>:
 80053f0:	4b32      	ldr	r3, [pc, #200]	; (80054bc <__swsetup_r+0xcc>)
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	681d      	ldr	r5, [r3, #0]
 80053f6:	4606      	mov	r6, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	b125      	cbz	r5, 8005406 <__swsetup_r+0x16>
 80053fc:	69ab      	ldr	r3, [r5, #24]
 80053fe:	b913      	cbnz	r3, 8005406 <__swsetup_r+0x16>
 8005400:	4628      	mov	r0, r5
 8005402:	f000 f97d 	bl	8005700 <__sinit>
 8005406:	4b2e      	ldr	r3, [pc, #184]	; (80054c0 <__swsetup_r+0xd0>)
 8005408:	429c      	cmp	r4, r3
 800540a:	d10f      	bne.n	800542c <__swsetup_r+0x3c>
 800540c:	686c      	ldr	r4, [r5, #4]
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005414:	0719      	lsls	r1, r3, #28
 8005416:	d42c      	bmi.n	8005472 <__swsetup_r+0x82>
 8005418:	06dd      	lsls	r5, r3, #27
 800541a:	d411      	bmi.n	8005440 <__swsetup_r+0x50>
 800541c:	2309      	movs	r3, #9
 800541e:	6033      	str	r3, [r6, #0]
 8005420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005424:	81a3      	strh	r3, [r4, #12]
 8005426:	f04f 30ff 	mov.w	r0, #4294967295
 800542a:	e03e      	b.n	80054aa <__swsetup_r+0xba>
 800542c:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <__swsetup_r+0xd4>)
 800542e:	429c      	cmp	r4, r3
 8005430:	d101      	bne.n	8005436 <__swsetup_r+0x46>
 8005432:	68ac      	ldr	r4, [r5, #8]
 8005434:	e7eb      	b.n	800540e <__swsetup_r+0x1e>
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <__swsetup_r+0xd8>)
 8005438:	429c      	cmp	r4, r3
 800543a:	bf08      	it	eq
 800543c:	68ec      	ldreq	r4, [r5, #12]
 800543e:	e7e6      	b.n	800540e <__swsetup_r+0x1e>
 8005440:	0758      	lsls	r0, r3, #29
 8005442:	d512      	bpl.n	800546a <__swsetup_r+0x7a>
 8005444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005446:	b141      	cbz	r1, 800545a <__swsetup_r+0x6a>
 8005448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800544c:	4299      	cmp	r1, r3
 800544e:	d002      	beq.n	8005456 <__swsetup_r+0x66>
 8005450:	4630      	mov	r0, r6
 8005452:	f000 fa5b 	bl	800590c <_free_r>
 8005456:	2300      	movs	r3, #0
 8005458:	6363      	str	r3, [r4, #52]	; 0x34
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	2300      	movs	r3, #0
 8005464:	6063      	str	r3, [r4, #4]
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	f043 0308 	orr.w	r3, r3, #8
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	b94b      	cbnz	r3, 800548a <__swsetup_r+0x9a>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800547c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005480:	d003      	beq.n	800548a <__swsetup_r+0x9a>
 8005482:	4621      	mov	r1, r4
 8005484:	4630      	mov	r0, r6
 8005486:	f000 fa01 	bl	800588c <__smakebuf_r>
 800548a:	89a0      	ldrh	r0, [r4, #12]
 800548c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005490:	f010 0301 	ands.w	r3, r0, #1
 8005494:	d00a      	beq.n	80054ac <__swsetup_r+0xbc>
 8005496:	2300      	movs	r3, #0
 8005498:	60a3      	str	r3, [r4, #8]
 800549a:	6963      	ldr	r3, [r4, #20]
 800549c:	425b      	negs	r3, r3
 800549e:	61a3      	str	r3, [r4, #24]
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	b943      	cbnz	r3, 80054b6 <__swsetup_r+0xc6>
 80054a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054a8:	d1ba      	bne.n	8005420 <__swsetup_r+0x30>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	0781      	lsls	r1, r0, #30
 80054ae:	bf58      	it	pl
 80054b0:	6963      	ldrpl	r3, [r4, #20]
 80054b2:	60a3      	str	r3, [r4, #8]
 80054b4:	e7f4      	b.n	80054a0 <__swsetup_r+0xb0>
 80054b6:	2000      	movs	r0, #0
 80054b8:	e7f7      	b.n	80054aa <__swsetup_r+0xba>
 80054ba:	bf00      	nop
 80054bc:	2000000c 	.word	0x2000000c
 80054c0:	08006a18 	.word	0x08006a18
 80054c4:	08006a38 	.word	0x08006a38
 80054c8:	080069f8 	.word	0x080069f8

080054cc <__sflush_r>:
 80054cc:	898a      	ldrh	r2, [r1, #12]
 80054ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d2:	4605      	mov	r5, r0
 80054d4:	0710      	lsls	r0, r2, #28
 80054d6:	460c      	mov	r4, r1
 80054d8:	d458      	bmi.n	800558c <__sflush_r+0xc0>
 80054da:	684b      	ldr	r3, [r1, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dc05      	bgt.n	80054ec <__sflush_r+0x20>
 80054e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	dc02      	bgt.n	80054ec <__sflush_r+0x20>
 80054e6:	2000      	movs	r0, #0
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d0f9      	beq.n	80054e6 <__sflush_r+0x1a>
 80054f2:	2300      	movs	r3, #0
 80054f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054f8:	682f      	ldr	r7, [r5, #0]
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	d032      	beq.n	8005564 <__sflush_r+0x98>
 80054fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	075a      	lsls	r2, r3, #29
 8005504:	d505      	bpl.n	8005512 <__sflush_r+0x46>
 8005506:	6863      	ldr	r3, [r4, #4]
 8005508:	1ac0      	subs	r0, r0, r3
 800550a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800550c:	b10b      	cbz	r3, 8005512 <__sflush_r+0x46>
 800550e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005510:	1ac0      	subs	r0, r0, r3
 8005512:	2300      	movs	r3, #0
 8005514:	4602      	mov	r2, r0
 8005516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005518:	6a21      	ldr	r1, [r4, #32]
 800551a:	4628      	mov	r0, r5
 800551c:	47b0      	blx	r6
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	d106      	bne.n	8005532 <__sflush_r+0x66>
 8005524:	6829      	ldr	r1, [r5, #0]
 8005526:	291d      	cmp	r1, #29
 8005528:	d82c      	bhi.n	8005584 <__sflush_r+0xb8>
 800552a:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <__sflush_r+0x108>)
 800552c:	40ca      	lsrs	r2, r1
 800552e:	07d6      	lsls	r6, r2, #31
 8005530:	d528      	bpl.n	8005584 <__sflush_r+0xb8>
 8005532:	2200      	movs	r2, #0
 8005534:	6062      	str	r2, [r4, #4]
 8005536:	04d9      	lsls	r1, r3, #19
 8005538:	6922      	ldr	r2, [r4, #16]
 800553a:	6022      	str	r2, [r4, #0]
 800553c:	d504      	bpl.n	8005548 <__sflush_r+0x7c>
 800553e:	1c42      	adds	r2, r0, #1
 8005540:	d101      	bne.n	8005546 <__sflush_r+0x7a>
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	b903      	cbnz	r3, 8005548 <__sflush_r+0x7c>
 8005546:	6560      	str	r0, [r4, #84]	; 0x54
 8005548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800554a:	602f      	str	r7, [r5, #0]
 800554c:	2900      	cmp	r1, #0
 800554e:	d0ca      	beq.n	80054e6 <__sflush_r+0x1a>
 8005550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005554:	4299      	cmp	r1, r3
 8005556:	d002      	beq.n	800555e <__sflush_r+0x92>
 8005558:	4628      	mov	r0, r5
 800555a:	f000 f9d7 	bl	800590c <_free_r>
 800555e:	2000      	movs	r0, #0
 8005560:	6360      	str	r0, [r4, #52]	; 0x34
 8005562:	e7c1      	b.n	80054e8 <__sflush_r+0x1c>
 8005564:	6a21      	ldr	r1, [r4, #32]
 8005566:	2301      	movs	r3, #1
 8005568:	4628      	mov	r0, r5
 800556a:	47b0      	blx	r6
 800556c:	1c41      	adds	r1, r0, #1
 800556e:	d1c7      	bne.n	8005500 <__sflush_r+0x34>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0c4      	beq.n	8005500 <__sflush_r+0x34>
 8005576:	2b1d      	cmp	r3, #29
 8005578:	d001      	beq.n	800557e <__sflush_r+0xb2>
 800557a:	2b16      	cmp	r3, #22
 800557c:	d101      	bne.n	8005582 <__sflush_r+0xb6>
 800557e:	602f      	str	r7, [r5, #0]
 8005580:	e7b1      	b.n	80054e6 <__sflush_r+0x1a>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	e7ad      	b.n	80054e8 <__sflush_r+0x1c>
 800558c:	690f      	ldr	r7, [r1, #16]
 800558e:	2f00      	cmp	r7, #0
 8005590:	d0a9      	beq.n	80054e6 <__sflush_r+0x1a>
 8005592:	0793      	lsls	r3, r2, #30
 8005594:	680e      	ldr	r6, [r1, #0]
 8005596:	bf08      	it	eq
 8005598:	694b      	ldreq	r3, [r1, #20]
 800559a:	600f      	str	r7, [r1, #0]
 800559c:	bf18      	it	ne
 800559e:	2300      	movne	r3, #0
 80055a0:	eba6 0807 	sub.w	r8, r6, r7
 80055a4:	608b      	str	r3, [r1, #8]
 80055a6:	f1b8 0f00 	cmp.w	r8, #0
 80055aa:	dd9c      	ble.n	80054e6 <__sflush_r+0x1a>
 80055ac:	6a21      	ldr	r1, [r4, #32]
 80055ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055b0:	4643      	mov	r3, r8
 80055b2:	463a      	mov	r2, r7
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b0      	blx	r6
 80055b8:	2800      	cmp	r0, #0
 80055ba:	dc06      	bgt.n	80055ca <__sflush_r+0xfe>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	e78e      	b.n	80054e8 <__sflush_r+0x1c>
 80055ca:	4407      	add	r7, r0
 80055cc:	eba8 0800 	sub.w	r8, r8, r0
 80055d0:	e7e9      	b.n	80055a6 <__sflush_r+0xda>
 80055d2:	bf00      	nop
 80055d4:	20400001 	.word	0x20400001

080055d8 <_fflush_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	690b      	ldr	r3, [r1, #16]
 80055dc:	4605      	mov	r5, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	b913      	cbnz	r3, 80055e8 <_fflush_r+0x10>
 80055e2:	2500      	movs	r5, #0
 80055e4:	4628      	mov	r0, r5
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	b118      	cbz	r0, 80055f2 <_fflush_r+0x1a>
 80055ea:	6983      	ldr	r3, [r0, #24]
 80055ec:	b90b      	cbnz	r3, 80055f2 <_fflush_r+0x1a>
 80055ee:	f000 f887 	bl	8005700 <__sinit>
 80055f2:	4b14      	ldr	r3, [pc, #80]	; (8005644 <_fflush_r+0x6c>)
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d11b      	bne.n	8005630 <_fflush_r+0x58>
 80055f8:	686c      	ldr	r4, [r5, #4]
 80055fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0ef      	beq.n	80055e2 <_fflush_r+0xa>
 8005602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005604:	07d0      	lsls	r0, r2, #31
 8005606:	d404      	bmi.n	8005612 <_fflush_r+0x3a>
 8005608:	0599      	lsls	r1, r3, #22
 800560a:	d402      	bmi.n	8005612 <_fflush_r+0x3a>
 800560c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560e:	f000 f915 	bl	800583c <__retarget_lock_acquire_recursive>
 8005612:	4628      	mov	r0, r5
 8005614:	4621      	mov	r1, r4
 8005616:	f7ff ff59 	bl	80054cc <__sflush_r>
 800561a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800561c:	07da      	lsls	r2, r3, #31
 800561e:	4605      	mov	r5, r0
 8005620:	d4e0      	bmi.n	80055e4 <_fflush_r+0xc>
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	059b      	lsls	r3, r3, #22
 8005626:	d4dd      	bmi.n	80055e4 <_fflush_r+0xc>
 8005628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800562a:	f000 f908 	bl	800583e <__retarget_lock_release_recursive>
 800562e:	e7d9      	b.n	80055e4 <_fflush_r+0xc>
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <_fflush_r+0x70>)
 8005632:	429c      	cmp	r4, r3
 8005634:	d101      	bne.n	800563a <_fflush_r+0x62>
 8005636:	68ac      	ldr	r4, [r5, #8]
 8005638:	e7df      	b.n	80055fa <_fflush_r+0x22>
 800563a:	4b04      	ldr	r3, [pc, #16]	; (800564c <_fflush_r+0x74>)
 800563c:	429c      	cmp	r4, r3
 800563e:	bf08      	it	eq
 8005640:	68ec      	ldreq	r4, [r5, #12]
 8005642:	e7da      	b.n	80055fa <_fflush_r+0x22>
 8005644:	08006a18 	.word	0x08006a18
 8005648:	08006a38 	.word	0x08006a38
 800564c:	080069f8 	.word	0x080069f8

08005650 <std>:
 8005650:	2300      	movs	r3, #0
 8005652:	b510      	push	{r4, lr}
 8005654:	4604      	mov	r4, r0
 8005656:	e9c0 3300 	strd	r3, r3, [r0]
 800565a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565e:	6083      	str	r3, [r0, #8]
 8005660:	8181      	strh	r1, [r0, #12]
 8005662:	6643      	str	r3, [r0, #100]	; 0x64
 8005664:	81c2      	strh	r2, [r0, #14]
 8005666:	6183      	str	r3, [r0, #24]
 8005668:	4619      	mov	r1, r3
 800566a:	2208      	movs	r2, #8
 800566c:	305c      	adds	r0, #92	; 0x5c
 800566e:	f7ff fdd7 	bl	8005220 <memset>
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <std+0x38>)
 8005674:	6263      	str	r3, [r4, #36]	; 0x24
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <std+0x3c>)
 8005678:	62a3      	str	r3, [r4, #40]	; 0x28
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <std+0x40>)
 800567c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <std+0x44>)
 8005680:	6224      	str	r4, [r4, #32]
 8005682:	6323      	str	r3, [r4, #48]	; 0x30
 8005684:	bd10      	pop	{r4, pc}
 8005686:	bf00      	nop
 8005688:	080060c9 	.word	0x080060c9
 800568c:	080060eb 	.word	0x080060eb
 8005690:	08006123 	.word	0x08006123
 8005694:	08006147 	.word	0x08006147

08005698 <_cleanup_r>:
 8005698:	4901      	ldr	r1, [pc, #4]	; (80056a0 <_cleanup_r+0x8>)
 800569a:	f000 b8af 	b.w	80057fc <_fwalk_reent>
 800569e:	bf00      	nop
 80056a0:	080055d9 	.word	0x080055d9

080056a4 <__sfmoreglue>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	2268      	movs	r2, #104	; 0x68
 80056a8:	1e4d      	subs	r5, r1, #1
 80056aa:	4355      	muls	r5, r2
 80056ac:	460e      	mov	r6, r1
 80056ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056b2:	f000 f997 	bl	80059e4 <_malloc_r>
 80056b6:	4604      	mov	r4, r0
 80056b8:	b140      	cbz	r0, 80056cc <__sfmoreglue+0x28>
 80056ba:	2100      	movs	r1, #0
 80056bc:	e9c0 1600 	strd	r1, r6, [r0]
 80056c0:	300c      	adds	r0, #12
 80056c2:	60a0      	str	r0, [r4, #8]
 80056c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056c8:	f7ff fdaa 	bl	8005220 <memset>
 80056cc:	4620      	mov	r0, r4
 80056ce:	bd70      	pop	{r4, r5, r6, pc}

080056d0 <__sfp_lock_acquire>:
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <__sfp_lock_acquire+0x8>)
 80056d2:	f000 b8b3 	b.w	800583c <__retarget_lock_acquire_recursive>
 80056d6:	bf00      	nop
 80056d8:	20000281 	.word	0x20000281

080056dc <__sfp_lock_release>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__sfp_lock_release+0x8>)
 80056de:	f000 b8ae 	b.w	800583e <__retarget_lock_release_recursive>
 80056e2:	bf00      	nop
 80056e4:	20000281 	.word	0x20000281

080056e8 <__sinit_lock_acquire>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__sinit_lock_acquire+0x8>)
 80056ea:	f000 b8a7 	b.w	800583c <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	20000282 	.word	0x20000282

080056f4 <__sinit_lock_release>:
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <__sinit_lock_release+0x8>)
 80056f6:	f000 b8a2 	b.w	800583e <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	20000282 	.word	0x20000282

08005700 <__sinit>:
 8005700:	b510      	push	{r4, lr}
 8005702:	4604      	mov	r4, r0
 8005704:	f7ff fff0 	bl	80056e8 <__sinit_lock_acquire>
 8005708:	69a3      	ldr	r3, [r4, #24]
 800570a:	b11b      	cbz	r3, 8005714 <__sinit+0x14>
 800570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005710:	f7ff bff0 	b.w	80056f4 <__sinit_lock_release>
 8005714:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005718:	6523      	str	r3, [r4, #80]	; 0x50
 800571a:	4b13      	ldr	r3, [pc, #76]	; (8005768 <__sinit+0x68>)
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <__sinit+0x6c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	62a2      	str	r2, [r4, #40]	; 0x28
 8005722:	42a3      	cmp	r3, r4
 8005724:	bf04      	itt	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	61a3      	streq	r3, [r4, #24]
 800572a:	4620      	mov	r0, r4
 800572c:	f000 f820 	bl	8005770 <__sfp>
 8005730:	6060      	str	r0, [r4, #4]
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f81c 	bl	8005770 <__sfp>
 8005738:	60a0      	str	r0, [r4, #8]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 f818 	bl	8005770 <__sfp>
 8005740:	2200      	movs	r2, #0
 8005742:	60e0      	str	r0, [r4, #12]
 8005744:	2104      	movs	r1, #4
 8005746:	6860      	ldr	r0, [r4, #4]
 8005748:	f7ff ff82 	bl	8005650 <std>
 800574c:	68a0      	ldr	r0, [r4, #8]
 800574e:	2201      	movs	r2, #1
 8005750:	2109      	movs	r1, #9
 8005752:	f7ff ff7d 	bl	8005650 <std>
 8005756:	68e0      	ldr	r0, [r4, #12]
 8005758:	2202      	movs	r2, #2
 800575a:	2112      	movs	r1, #18
 800575c:	f7ff ff78 	bl	8005650 <std>
 8005760:	2301      	movs	r3, #1
 8005762:	61a3      	str	r3, [r4, #24]
 8005764:	e7d2      	b.n	800570c <__sinit+0xc>
 8005766:	bf00      	nop
 8005768:	080069f4 	.word	0x080069f4
 800576c:	08005699 	.word	0x08005699

08005770 <__sfp>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	4607      	mov	r7, r0
 8005774:	f7ff ffac 	bl	80056d0 <__sfp_lock_acquire>
 8005778:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <__sfp+0x84>)
 800577a:	681e      	ldr	r6, [r3, #0]
 800577c:	69b3      	ldr	r3, [r6, #24]
 800577e:	b913      	cbnz	r3, 8005786 <__sfp+0x16>
 8005780:	4630      	mov	r0, r6
 8005782:	f7ff ffbd 	bl	8005700 <__sinit>
 8005786:	3648      	adds	r6, #72	; 0x48
 8005788:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800578c:	3b01      	subs	r3, #1
 800578e:	d503      	bpl.n	8005798 <__sfp+0x28>
 8005790:	6833      	ldr	r3, [r6, #0]
 8005792:	b30b      	cbz	r3, 80057d8 <__sfp+0x68>
 8005794:	6836      	ldr	r6, [r6, #0]
 8005796:	e7f7      	b.n	8005788 <__sfp+0x18>
 8005798:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800579c:	b9d5      	cbnz	r5, 80057d4 <__sfp+0x64>
 800579e:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <__sfp+0x88>)
 80057a0:	60e3      	str	r3, [r4, #12]
 80057a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057a6:	6665      	str	r5, [r4, #100]	; 0x64
 80057a8:	f000 f847 	bl	800583a <__retarget_lock_init_recursive>
 80057ac:	f7ff ff96 	bl	80056dc <__sfp_lock_release>
 80057b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057b8:	6025      	str	r5, [r4, #0]
 80057ba:	61a5      	str	r5, [r4, #24]
 80057bc:	2208      	movs	r2, #8
 80057be:	4629      	mov	r1, r5
 80057c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057c4:	f7ff fd2c 	bl	8005220 <memset>
 80057c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057d0:	4620      	mov	r0, r4
 80057d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d4:	3468      	adds	r4, #104	; 0x68
 80057d6:	e7d9      	b.n	800578c <__sfp+0x1c>
 80057d8:	2104      	movs	r1, #4
 80057da:	4638      	mov	r0, r7
 80057dc:	f7ff ff62 	bl	80056a4 <__sfmoreglue>
 80057e0:	4604      	mov	r4, r0
 80057e2:	6030      	str	r0, [r6, #0]
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d1d5      	bne.n	8005794 <__sfp+0x24>
 80057e8:	f7ff ff78 	bl	80056dc <__sfp_lock_release>
 80057ec:	230c      	movs	r3, #12
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	e7ee      	b.n	80057d0 <__sfp+0x60>
 80057f2:	bf00      	nop
 80057f4:	080069f4 	.word	0x080069f4
 80057f8:	ffff0001 	.word	0xffff0001

080057fc <_fwalk_reent>:
 80057fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005800:	4606      	mov	r6, r0
 8005802:	4688      	mov	r8, r1
 8005804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005808:	2700      	movs	r7, #0
 800580a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800580e:	f1b9 0901 	subs.w	r9, r9, #1
 8005812:	d505      	bpl.n	8005820 <_fwalk_reent+0x24>
 8005814:	6824      	ldr	r4, [r4, #0]
 8005816:	2c00      	cmp	r4, #0
 8005818:	d1f7      	bne.n	800580a <_fwalk_reent+0xe>
 800581a:	4638      	mov	r0, r7
 800581c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005820:	89ab      	ldrh	r3, [r5, #12]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d907      	bls.n	8005836 <_fwalk_reent+0x3a>
 8005826:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800582a:	3301      	adds	r3, #1
 800582c:	d003      	beq.n	8005836 <_fwalk_reent+0x3a>
 800582e:	4629      	mov	r1, r5
 8005830:	4630      	mov	r0, r6
 8005832:	47c0      	blx	r8
 8005834:	4307      	orrs	r7, r0
 8005836:	3568      	adds	r5, #104	; 0x68
 8005838:	e7e9      	b.n	800580e <_fwalk_reent+0x12>

0800583a <__retarget_lock_init_recursive>:
 800583a:	4770      	bx	lr

0800583c <__retarget_lock_acquire_recursive>:
 800583c:	4770      	bx	lr

0800583e <__retarget_lock_release_recursive>:
 800583e:	4770      	bx	lr

08005840 <__swhatbuf_r>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	460e      	mov	r6, r1
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	2900      	cmp	r1, #0
 800584a:	b096      	sub	sp, #88	; 0x58
 800584c:	4614      	mov	r4, r2
 800584e:	461d      	mov	r5, r3
 8005850:	da08      	bge.n	8005864 <__swhatbuf_r+0x24>
 8005852:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	602a      	str	r2, [r5, #0]
 800585a:	061a      	lsls	r2, r3, #24
 800585c:	d410      	bmi.n	8005880 <__swhatbuf_r+0x40>
 800585e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005862:	e00e      	b.n	8005882 <__swhatbuf_r+0x42>
 8005864:	466a      	mov	r2, sp
 8005866:	f000 fc95 	bl	8006194 <_fstat_r>
 800586a:	2800      	cmp	r0, #0
 800586c:	dbf1      	blt.n	8005852 <__swhatbuf_r+0x12>
 800586e:	9a01      	ldr	r2, [sp, #4]
 8005870:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005874:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005878:	425a      	negs	r2, r3
 800587a:	415a      	adcs	r2, r3
 800587c:	602a      	str	r2, [r5, #0]
 800587e:	e7ee      	b.n	800585e <__swhatbuf_r+0x1e>
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	2000      	movs	r0, #0
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	b016      	add	sp, #88	; 0x58
 8005888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800588c <__smakebuf_r>:
 800588c:	898b      	ldrh	r3, [r1, #12]
 800588e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005890:	079d      	lsls	r5, r3, #30
 8005892:	4606      	mov	r6, r0
 8005894:	460c      	mov	r4, r1
 8005896:	d507      	bpl.n	80058a8 <__smakebuf_r+0x1c>
 8005898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	2301      	movs	r3, #1
 80058a2:	6163      	str	r3, [r4, #20]
 80058a4:	b002      	add	sp, #8
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	ab01      	add	r3, sp, #4
 80058aa:	466a      	mov	r2, sp
 80058ac:	f7ff ffc8 	bl	8005840 <__swhatbuf_r>
 80058b0:	9900      	ldr	r1, [sp, #0]
 80058b2:	4605      	mov	r5, r0
 80058b4:	4630      	mov	r0, r6
 80058b6:	f000 f895 	bl	80059e4 <_malloc_r>
 80058ba:	b948      	cbnz	r0, 80058d0 <__smakebuf_r+0x44>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	059a      	lsls	r2, r3, #22
 80058c2:	d4ef      	bmi.n	80058a4 <__smakebuf_r+0x18>
 80058c4:	f023 0303 	bic.w	r3, r3, #3
 80058c8:	f043 0302 	orr.w	r3, r3, #2
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	e7e3      	b.n	8005898 <__smakebuf_r+0xc>
 80058d0:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <__smakebuf_r+0x7c>)
 80058d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	6020      	str	r0, [r4, #0]
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	9b00      	ldr	r3, [sp, #0]
 80058e0:	6163      	str	r3, [r4, #20]
 80058e2:	9b01      	ldr	r3, [sp, #4]
 80058e4:	6120      	str	r0, [r4, #16]
 80058e6:	b15b      	cbz	r3, 8005900 <__smakebuf_r+0x74>
 80058e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 fc63 	bl	80061b8 <_isatty_r>
 80058f2:	b128      	cbz	r0, 8005900 <__smakebuf_r+0x74>
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	89a0      	ldrh	r0, [r4, #12]
 8005902:	4305      	orrs	r5, r0
 8005904:	81a5      	strh	r5, [r4, #12]
 8005906:	e7cd      	b.n	80058a4 <__smakebuf_r+0x18>
 8005908:	08005699 	.word	0x08005699

0800590c <_free_r>:
 800590c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800590e:	2900      	cmp	r1, #0
 8005910:	d044      	beq.n	800599c <_free_r+0x90>
 8005912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005916:	9001      	str	r0, [sp, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f1a1 0404 	sub.w	r4, r1, #4
 800591e:	bfb8      	it	lt
 8005920:	18e4      	addlt	r4, r4, r3
 8005922:	f000 fc6b 	bl	80061fc <__malloc_lock>
 8005926:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <_free_r+0x94>)
 8005928:	9801      	ldr	r0, [sp, #4]
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	b933      	cbnz	r3, 800593c <_free_r+0x30>
 800592e:	6063      	str	r3, [r4, #4]
 8005930:	6014      	str	r4, [r2, #0]
 8005932:	b003      	add	sp, #12
 8005934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005938:	f000 bc66 	b.w	8006208 <__malloc_unlock>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d908      	bls.n	8005952 <_free_r+0x46>
 8005940:	6825      	ldr	r5, [r4, #0]
 8005942:	1961      	adds	r1, r4, r5
 8005944:	428b      	cmp	r3, r1
 8005946:	bf01      	itttt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	1949      	addeq	r1, r1, r5
 800594e:	6021      	streq	r1, [r4, #0]
 8005950:	e7ed      	b.n	800592e <_free_r+0x22>
 8005952:	461a      	mov	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b10b      	cbz	r3, 800595c <_free_r+0x50>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d9fa      	bls.n	8005952 <_free_r+0x46>
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	1855      	adds	r5, r2, r1
 8005960:	42a5      	cmp	r5, r4
 8005962:	d10b      	bne.n	800597c <_free_r+0x70>
 8005964:	6824      	ldr	r4, [r4, #0]
 8005966:	4421      	add	r1, r4
 8005968:	1854      	adds	r4, r2, r1
 800596a:	42a3      	cmp	r3, r4
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	d1e0      	bne.n	8005932 <_free_r+0x26>
 8005970:	681c      	ldr	r4, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	6053      	str	r3, [r2, #4]
 8005976:	4421      	add	r1, r4
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	e7da      	b.n	8005932 <_free_r+0x26>
 800597c:	d902      	bls.n	8005984 <_free_r+0x78>
 800597e:	230c      	movs	r3, #12
 8005980:	6003      	str	r3, [r0, #0]
 8005982:	e7d6      	b.n	8005932 <_free_r+0x26>
 8005984:	6825      	ldr	r5, [r4, #0]
 8005986:	1961      	adds	r1, r4, r5
 8005988:	428b      	cmp	r3, r1
 800598a:	bf04      	itt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	bf04      	itt	eq
 8005994:	1949      	addeq	r1, r1, r5
 8005996:	6021      	streq	r1, [r4, #0]
 8005998:	6054      	str	r4, [r2, #4]
 800599a:	e7ca      	b.n	8005932 <_free_r+0x26>
 800599c:	b003      	add	sp, #12
 800599e:	bd30      	pop	{r4, r5, pc}
 80059a0:	20000284 	.word	0x20000284

080059a4 <sbrk_aligned>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4e0e      	ldr	r6, [pc, #56]	; (80059e0 <sbrk_aligned+0x3c>)
 80059a8:	460c      	mov	r4, r1
 80059aa:	6831      	ldr	r1, [r6, #0]
 80059ac:	4605      	mov	r5, r0
 80059ae:	b911      	cbnz	r1, 80059b6 <sbrk_aligned+0x12>
 80059b0:	f000 fb7a 	bl	80060a8 <_sbrk_r>
 80059b4:	6030      	str	r0, [r6, #0]
 80059b6:	4621      	mov	r1, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 fb75 	bl	80060a8 <_sbrk_r>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d00a      	beq.n	80059d8 <sbrk_aligned+0x34>
 80059c2:	1cc4      	adds	r4, r0, #3
 80059c4:	f024 0403 	bic.w	r4, r4, #3
 80059c8:	42a0      	cmp	r0, r4
 80059ca:	d007      	beq.n	80059dc <sbrk_aligned+0x38>
 80059cc:	1a21      	subs	r1, r4, r0
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fb6a 	bl	80060a8 <_sbrk_r>
 80059d4:	3001      	adds	r0, #1
 80059d6:	d101      	bne.n	80059dc <sbrk_aligned+0x38>
 80059d8:	f04f 34ff 	mov.w	r4, #4294967295
 80059dc:	4620      	mov	r0, r4
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	20000288 	.word	0x20000288

080059e4 <_malloc_r>:
 80059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e8:	1ccd      	adds	r5, r1, #3
 80059ea:	f025 0503 	bic.w	r5, r5, #3
 80059ee:	3508      	adds	r5, #8
 80059f0:	2d0c      	cmp	r5, #12
 80059f2:	bf38      	it	cc
 80059f4:	250c      	movcc	r5, #12
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	4607      	mov	r7, r0
 80059fa:	db01      	blt.n	8005a00 <_malloc_r+0x1c>
 80059fc:	42a9      	cmp	r1, r5
 80059fe:	d905      	bls.n	8005a0c <_malloc_r+0x28>
 8005a00:	230c      	movs	r3, #12
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	2600      	movs	r6, #0
 8005a06:	4630      	mov	r0, r6
 8005a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a0c:	4e2e      	ldr	r6, [pc, #184]	; (8005ac8 <_malloc_r+0xe4>)
 8005a0e:	f000 fbf5 	bl	80061fc <__malloc_lock>
 8005a12:	6833      	ldr	r3, [r6, #0]
 8005a14:	461c      	mov	r4, r3
 8005a16:	bb34      	cbnz	r4, 8005a66 <_malloc_r+0x82>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	f7ff ffc2 	bl	80059a4 <sbrk_aligned>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	4604      	mov	r4, r0
 8005a24:	d14d      	bne.n	8005ac2 <_malloc_r+0xde>
 8005a26:	6834      	ldr	r4, [r6, #0]
 8005a28:	4626      	mov	r6, r4
 8005a2a:	2e00      	cmp	r6, #0
 8005a2c:	d140      	bne.n	8005ab0 <_malloc_r+0xcc>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	4631      	mov	r1, r6
 8005a32:	4638      	mov	r0, r7
 8005a34:	eb04 0803 	add.w	r8, r4, r3
 8005a38:	f000 fb36 	bl	80060a8 <_sbrk_r>
 8005a3c:	4580      	cmp	r8, r0
 8005a3e:	d13a      	bne.n	8005ab6 <_malloc_r+0xd2>
 8005a40:	6821      	ldr	r1, [r4, #0]
 8005a42:	3503      	adds	r5, #3
 8005a44:	1a6d      	subs	r5, r5, r1
 8005a46:	f025 0503 	bic.w	r5, r5, #3
 8005a4a:	3508      	adds	r5, #8
 8005a4c:	2d0c      	cmp	r5, #12
 8005a4e:	bf38      	it	cc
 8005a50:	250c      	movcc	r5, #12
 8005a52:	4629      	mov	r1, r5
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff ffa5 	bl	80059a4 <sbrk_aligned>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d02b      	beq.n	8005ab6 <_malloc_r+0xd2>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	442b      	add	r3, r5
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	e00e      	b.n	8005a84 <_malloc_r+0xa0>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	1b52      	subs	r2, r2, r5
 8005a6a:	d41e      	bmi.n	8005aaa <_malloc_r+0xc6>
 8005a6c:	2a0b      	cmp	r2, #11
 8005a6e:	d916      	bls.n	8005a9e <_malloc_r+0xba>
 8005a70:	1961      	adds	r1, r4, r5
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	6025      	str	r5, [r4, #0]
 8005a76:	bf18      	it	ne
 8005a78:	6059      	strne	r1, [r3, #4]
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	bf08      	it	eq
 8005a7e:	6031      	streq	r1, [r6, #0]
 8005a80:	5162      	str	r2, [r4, r5]
 8005a82:	604b      	str	r3, [r1, #4]
 8005a84:	4638      	mov	r0, r7
 8005a86:	f104 060b 	add.w	r6, r4, #11
 8005a8a:	f000 fbbd 	bl	8006208 <__malloc_unlock>
 8005a8e:	f026 0607 	bic.w	r6, r6, #7
 8005a92:	1d23      	adds	r3, r4, #4
 8005a94:	1af2      	subs	r2, r6, r3
 8005a96:	d0b6      	beq.n	8005a06 <_malloc_r+0x22>
 8005a98:	1b9b      	subs	r3, r3, r6
 8005a9a:	50a3      	str	r3, [r4, r2]
 8005a9c:	e7b3      	b.n	8005a06 <_malloc_r+0x22>
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	bf0c      	ite	eq
 8005aa4:	6032      	streq	r2, [r6, #0]
 8005aa6:	605a      	strne	r2, [r3, #4]
 8005aa8:	e7ec      	b.n	8005a84 <_malloc_r+0xa0>
 8005aaa:	4623      	mov	r3, r4
 8005aac:	6864      	ldr	r4, [r4, #4]
 8005aae:	e7b2      	b.n	8005a16 <_malloc_r+0x32>
 8005ab0:	4634      	mov	r4, r6
 8005ab2:	6876      	ldr	r6, [r6, #4]
 8005ab4:	e7b9      	b.n	8005a2a <_malloc_r+0x46>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4638      	mov	r0, r7
 8005abc:	f000 fba4 	bl	8006208 <__malloc_unlock>
 8005ac0:	e7a1      	b.n	8005a06 <_malloc_r+0x22>
 8005ac2:	6025      	str	r5, [r4, #0]
 8005ac4:	e7de      	b.n	8005a84 <_malloc_r+0xa0>
 8005ac6:	bf00      	nop
 8005ac8:	20000284 	.word	0x20000284

08005acc <__sfputc_r>:
 8005acc:	6893      	ldr	r3, [r2, #8]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	b410      	push	{r4}
 8005ad4:	6093      	str	r3, [r2, #8]
 8005ad6:	da08      	bge.n	8005aea <__sfputc_r+0x1e>
 8005ad8:	6994      	ldr	r4, [r2, #24]
 8005ada:	42a3      	cmp	r3, r4
 8005adc:	db01      	blt.n	8005ae2 <__sfputc_r+0x16>
 8005ade:	290a      	cmp	r1, #10
 8005ae0:	d103      	bne.n	8005aea <__sfputc_r+0x1e>
 8005ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae6:	f7ff bc31 	b.w	800534c <__swbuf_r>
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	1c58      	adds	r0, r3, #1
 8005aee:	6010      	str	r0, [r2, #0]
 8005af0:	7019      	strb	r1, [r3, #0]
 8005af2:	4608      	mov	r0, r1
 8005af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <__sfputs_r>:
 8005afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afc:	4606      	mov	r6, r0
 8005afe:	460f      	mov	r7, r1
 8005b00:	4614      	mov	r4, r2
 8005b02:	18d5      	adds	r5, r2, r3
 8005b04:	42ac      	cmp	r4, r5
 8005b06:	d101      	bne.n	8005b0c <__sfputs_r+0x12>
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e007      	b.n	8005b1c <__sfputs_r+0x22>
 8005b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b10:	463a      	mov	r2, r7
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7ff ffda 	bl	8005acc <__sfputc_r>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d1f3      	bne.n	8005b04 <__sfputs_r+0xa>
 8005b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b20 <_vfiprintf_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	460d      	mov	r5, r1
 8005b26:	b09d      	sub	sp, #116	; 0x74
 8005b28:	4614      	mov	r4, r2
 8005b2a:	4698      	mov	r8, r3
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	b118      	cbz	r0, 8005b38 <_vfiprintf_r+0x18>
 8005b30:	6983      	ldr	r3, [r0, #24]
 8005b32:	b90b      	cbnz	r3, 8005b38 <_vfiprintf_r+0x18>
 8005b34:	f7ff fde4 	bl	8005700 <__sinit>
 8005b38:	4b89      	ldr	r3, [pc, #548]	; (8005d60 <_vfiprintf_r+0x240>)
 8005b3a:	429d      	cmp	r5, r3
 8005b3c:	d11b      	bne.n	8005b76 <_vfiprintf_r+0x56>
 8005b3e:	6875      	ldr	r5, [r6, #4]
 8005b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	d405      	bmi.n	8005b52 <_vfiprintf_r+0x32>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	059a      	lsls	r2, r3, #22
 8005b4a:	d402      	bmi.n	8005b52 <_vfiprintf_r+0x32>
 8005b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b4e:	f7ff fe75 	bl	800583c <__retarget_lock_acquire_recursive>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	071b      	lsls	r3, r3, #28
 8005b56:	d501      	bpl.n	8005b5c <_vfiprintf_r+0x3c>
 8005b58:	692b      	ldr	r3, [r5, #16]
 8005b5a:	b9eb      	cbnz	r3, 8005b98 <_vfiprintf_r+0x78>
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f7ff fc46 	bl	80053f0 <__swsetup_r>
 8005b64:	b1c0      	cbz	r0, 8005b98 <_vfiprintf_r+0x78>
 8005b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b68:	07dc      	lsls	r4, r3, #31
 8005b6a:	d50e      	bpl.n	8005b8a <_vfiprintf_r+0x6a>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	b01d      	add	sp, #116	; 0x74
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <_vfiprintf_r+0x244>)
 8005b78:	429d      	cmp	r5, r3
 8005b7a:	d101      	bne.n	8005b80 <_vfiprintf_r+0x60>
 8005b7c:	68b5      	ldr	r5, [r6, #8]
 8005b7e:	e7df      	b.n	8005b40 <_vfiprintf_r+0x20>
 8005b80:	4b79      	ldr	r3, [pc, #484]	; (8005d68 <_vfiprintf_r+0x248>)
 8005b82:	429d      	cmp	r5, r3
 8005b84:	bf08      	it	eq
 8005b86:	68f5      	ldreq	r5, [r6, #12]
 8005b88:	e7da      	b.n	8005b40 <_vfiprintf_r+0x20>
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	0598      	lsls	r0, r3, #22
 8005b8e:	d4ed      	bmi.n	8005b6c <_vfiprintf_r+0x4c>
 8005b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b92:	f7ff fe54 	bl	800583e <__retarget_lock_release_recursive>
 8005b96:	e7e9      	b.n	8005b6c <_vfiprintf_r+0x4c>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ba6:	2330      	movs	r3, #48	; 0x30
 8005ba8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d6c <_vfiprintf_r+0x24c>
 8005bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb0:	f04f 0901 	mov.w	r9, #1
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	469a      	mov	sl, r3
 8005bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bbc:	b10a      	cbz	r2, 8005bc2 <_vfiprintf_r+0xa2>
 8005bbe:	2a25      	cmp	r2, #37	; 0x25
 8005bc0:	d1f9      	bne.n	8005bb6 <_vfiprintf_r+0x96>
 8005bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc6:	d00b      	beq.n	8005be0 <_vfiprintf_r+0xc0>
 8005bc8:	465b      	mov	r3, fp
 8005bca:	4622      	mov	r2, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ff93 	bl	8005afa <__sfputs_r>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f000 80aa 	beq.w	8005d2e <_vfiprintf_r+0x20e>
 8005bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bdc:	445a      	add	r2, fp
 8005bde:	9209      	str	r2, [sp, #36]	; 0x24
 8005be0:	f89a 3000 	ldrb.w	r3, [sl]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a2 	beq.w	8005d2e <_vfiprintf_r+0x20e>
 8005bea:	2300      	movs	r3, #0
 8005bec:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf4:	f10a 0a01 	add.w	sl, sl, #1
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	9307      	str	r3, [sp, #28]
 8005bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c00:	931a      	str	r3, [sp, #104]	; 0x68
 8005c02:	4654      	mov	r4, sl
 8005c04:	2205      	movs	r2, #5
 8005c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0a:	4858      	ldr	r0, [pc, #352]	; (8005d6c <_vfiprintf_r+0x24c>)
 8005c0c:	f7fa fae0 	bl	80001d0 <memchr>
 8005c10:	9a04      	ldr	r2, [sp, #16]
 8005c12:	b9d8      	cbnz	r0, 8005c4c <_vfiprintf_r+0x12c>
 8005c14:	06d1      	lsls	r1, r2, #27
 8005c16:	bf44      	itt	mi
 8005c18:	2320      	movmi	r3, #32
 8005c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c1e:	0713      	lsls	r3, r2, #28
 8005c20:	bf44      	itt	mi
 8005c22:	232b      	movmi	r3, #43	; 0x2b
 8005c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c28:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2e:	d015      	beq.n	8005c5c <_vfiprintf_r+0x13c>
 8005c30:	9a07      	ldr	r2, [sp, #28]
 8005c32:	4654      	mov	r4, sl
 8005c34:	2000      	movs	r0, #0
 8005c36:	f04f 0c0a 	mov.w	ip, #10
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c40:	3b30      	subs	r3, #48	; 0x30
 8005c42:	2b09      	cmp	r3, #9
 8005c44:	d94e      	bls.n	8005ce4 <_vfiprintf_r+0x1c4>
 8005c46:	b1b0      	cbz	r0, 8005c76 <_vfiprintf_r+0x156>
 8005c48:	9207      	str	r2, [sp, #28]
 8005c4a:	e014      	b.n	8005c76 <_vfiprintf_r+0x156>
 8005c4c:	eba0 0308 	sub.w	r3, r0, r8
 8005c50:	fa09 f303 	lsl.w	r3, r9, r3
 8005c54:	4313      	orrs	r3, r2
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	46a2      	mov	sl, r4
 8005c5a:	e7d2      	b.n	8005c02 <_vfiprintf_r+0xe2>
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	1d19      	adds	r1, r3, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	9103      	str	r1, [sp, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bfbb      	ittet	lt
 8005c68:	425b      	neglt	r3, r3
 8005c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c6e:	9307      	strge	r3, [sp, #28]
 8005c70:	9307      	strlt	r3, [sp, #28]
 8005c72:	bfb8      	it	lt
 8005c74:	9204      	strlt	r2, [sp, #16]
 8005c76:	7823      	ldrb	r3, [r4, #0]
 8005c78:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7a:	d10c      	bne.n	8005c96 <_vfiprintf_r+0x176>
 8005c7c:	7863      	ldrb	r3, [r4, #1]
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d135      	bne.n	8005cee <_vfiprintf_r+0x1ce>
 8005c82:	9b03      	ldr	r3, [sp, #12]
 8005c84:	1d1a      	adds	r2, r3, #4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	9203      	str	r2, [sp, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfb8      	it	lt
 8005c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c92:	3402      	adds	r4, #2
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d7c <_vfiprintf_r+0x25c>
 8005c9a:	7821      	ldrb	r1, [r4, #0]
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	4650      	mov	r0, sl
 8005ca0:	f7fa fa96 	bl	80001d0 <memchr>
 8005ca4:	b140      	cbz	r0, 8005cb8 <_vfiprintf_r+0x198>
 8005ca6:	2340      	movs	r3, #64	; 0x40
 8005ca8:	eba0 000a 	sub.w	r0, r0, sl
 8005cac:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb0:	9b04      	ldr	r3, [sp, #16]
 8005cb2:	4303      	orrs	r3, r0
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbc:	482c      	ldr	r0, [pc, #176]	; (8005d70 <_vfiprintf_r+0x250>)
 8005cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc2:	2206      	movs	r2, #6
 8005cc4:	f7fa fa84 	bl	80001d0 <memchr>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d03f      	beq.n	8005d4c <_vfiprintf_r+0x22c>
 8005ccc:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <_vfiprintf_r+0x254>)
 8005cce:	bb1b      	cbnz	r3, 8005d18 <_vfiprintf_r+0x1f8>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	3307      	adds	r3, #7
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	3308      	adds	r3, #8
 8005cda:	9303      	str	r3, [sp, #12]
 8005cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cde:	443b      	add	r3, r7
 8005ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce2:	e767      	b.n	8005bb4 <_vfiprintf_r+0x94>
 8005ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ce8:	460c      	mov	r4, r1
 8005cea:	2001      	movs	r0, #1
 8005cec:	e7a5      	b.n	8005c3a <_vfiprintf_r+0x11a>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	3401      	adds	r4, #1
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f04f 0c0a 	mov.w	ip, #10
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d00:	3a30      	subs	r2, #48	; 0x30
 8005d02:	2a09      	cmp	r2, #9
 8005d04:	d903      	bls.n	8005d0e <_vfiprintf_r+0x1ee>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0c5      	beq.n	8005c96 <_vfiprintf_r+0x176>
 8005d0a:	9105      	str	r1, [sp, #20]
 8005d0c:	e7c3      	b.n	8005c96 <_vfiprintf_r+0x176>
 8005d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d12:	4604      	mov	r4, r0
 8005d14:	2301      	movs	r3, #1
 8005d16:	e7f0      	b.n	8005cfa <_vfiprintf_r+0x1da>
 8005d18:	ab03      	add	r3, sp, #12
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <_vfiprintf_r+0x258>)
 8005d20:	a904      	add	r1, sp, #16
 8005d22:	4630      	mov	r0, r6
 8005d24:	f3af 8000 	nop.w
 8005d28:	4607      	mov	r7, r0
 8005d2a:	1c78      	adds	r0, r7, #1
 8005d2c:	d1d6      	bne.n	8005cdc <_vfiprintf_r+0x1bc>
 8005d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d30:	07d9      	lsls	r1, r3, #31
 8005d32:	d405      	bmi.n	8005d40 <_vfiprintf_r+0x220>
 8005d34:	89ab      	ldrh	r3, [r5, #12]
 8005d36:	059a      	lsls	r2, r3, #22
 8005d38:	d402      	bmi.n	8005d40 <_vfiprintf_r+0x220>
 8005d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d3c:	f7ff fd7f 	bl	800583e <__retarget_lock_release_recursive>
 8005d40:	89ab      	ldrh	r3, [r5, #12]
 8005d42:	065b      	lsls	r3, r3, #25
 8005d44:	f53f af12 	bmi.w	8005b6c <_vfiprintf_r+0x4c>
 8005d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4a:	e711      	b.n	8005b70 <_vfiprintf_r+0x50>
 8005d4c:	ab03      	add	r3, sp, #12
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	462a      	mov	r2, r5
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <_vfiprintf_r+0x258>)
 8005d54:	a904      	add	r1, sp, #16
 8005d56:	4630      	mov	r0, r6
 8005d58:	f000 f880 	bl	8005e5c <_printf_i>
 8005d5c:	e7e4      	b.n	8005d28 <_vfiprintf_r+0x208>
 8005d5e:	bf00      	nop
 8005d60:	08006a18 	.word	0x08006a18
 8005d64:	08006a38 	.word	0x08006a38
 8005d68:	080069f8 	.word	0x080069f8
 8005d6c:	08006a58 	.word	0x08006a58
 8005d70:	08006a62 	.word	0x08006a62
 8005d74:	00000000 	.word	0x00000000
 8005d78:	08005afb 	.word	0x08005afb
 8005d7c:	08006a5e 	.word	0x08006a5e

08005d80 <_printf_common>:
 8005d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	4616      	mov	r6, r2
 8005d86:	4699      	mov	r9, r3
 8005d88:	688a      	ldr	r2, [r1, #8]
 8005d8a:	690b      	ldr	r3, [r1, #16]
 8005d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d90:	4293      	cmp	r3, r2
 8005d92:	bfb8      	it	lt
 8005d94:	4613      	movlt	r3, r2
 8005d96:	6033      	str	r3, [r6, #0]
 8005d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	b10a      	cbz	r2, 8005da6 <_printf_common+0x26>
 8005da2:	3301      	adds	r3, #1
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	0699      	lsls	r1, r3, #26
 8005daa:	bf42      	ittt	mi
 8005dac:	6833      	ldrmi	r3, [r6, #0]
 8005dae:	3302      	addmi	r3, #2
 8005db0:	6033      	strmi	r3, [r6, #0]
 8005db2:	6825      	ldr	r5, [r4, #0]
 8005db4:	f015 0506 	ands.w	r5, r5, #6
 8005db8:	d106      	bne.n	8005dc8 <_printf_common+0x48>
 8005dba:	f104 0a19 	add.w	sl, r4, #25
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	6832      	ldr	r2, [r6, #0]
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dc26      	bgt.n	8005e16 <_printf_common+0x96>
 8005dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dcc:	1e13      	subs	r3, r2, #0
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	bf18      	it	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	0692      	lsls	r2, r2, #26
 8005dd6:	d42b      	bmi.n	8005e30 <_printf_common+0xb0>
 8005dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ddc:	4649      	mov	r1, r9
 8005dde:	4638      	mov	r0, r7
 8005de0:	47c0      	blx	r8
 8005de2:	3001      	adds	r0, #1
 8005de4:	d01e      	beq.n	8005e24 <_printf_common+0xa4>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	68e5      	ldr	r5, [r4, #12]
 8005dea:	6832      	ldr	r2, [r6, #0]
 8005dec:	f003 0306 	and.w	r3, r3, #6
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	bf08      	it	eq
 8005df4:	1aad      	subeq	r5, r5, r2
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	6922      	ldr	r2, [r4, #16]
 8005dfa:	bf0c      	ite	eq
 8005dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e00:	2500      	movne	r5, #0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	bfc4      	itt	gt
 8005e06:	1a9b      	subgt	r3, r3, r2
 8005e08:	18ed      	addgt	r5, r5, r3
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	341a      	adds	r4, #26
 8005e0e:	42b5      	cmp	r5, r6
 8005e10:	d11a      	bne.n	8005e48 <_printf_common+0xc8>
 8005e12:	2000      	movs	r0, #0
 8005e14:	e008      	b.n	8005e28 <_printf_common+0xa8>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4652      	mov	r2, sl
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	47c0      	blx	r8
 8005e20:	3001      	adds	r0, #1
 8005e22:	d103      	bne.n	8005e2c <_printf_common+0xac>
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2c:	3501      	adds	r5, #1
 8005e2e:	e7c6      	b.n	8005dbe <_printf_common+0x3e>
 8005e30:	18e1      	adds	r1, r4, r3
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	2030      	movs	r0, #48	; 0x30
 8005e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e3a:	4422      	add	r2, r4
 8005e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e44:	3302      	adds	r3, #2
 8005e46:	e7c7      	b.n	8005dd8 <_printf_common+0x58>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	3001      	adds	r0, #1
 8005e54:	d0e6      	beq.n	8005e24 <_printf_common+0xa4>
 8005e56:	3601      	adds	r6, #1
 8005e58:	e7d9      	b.n	8005e0e <_printf_common+0x8e>
	...

08005e5c <_printf_i>:
 8005e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	7e0f      	ldrb	r7, [r1, #24]
 8005e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e64:	2f78      	cmp	r7, #120	; 0x78
 8005e66:	4691      	mov	r9, r2
 8005e68:	4680      	mov	r8, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	469a      	mov	sl, r3
 8005e6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e72:	d807      	bhi.n	8005e84 <_printf_i+0x28>
 8005e74:	2f62      	cmp	r7, #98	; 0x62
 8005e76:	d80a      	bhi.n	8005e8e <_printf_i+0x32>
 8005e78:	2f00      	cmp	r7, #0
 8005e7a:	f000 80d8 	beq.w	800602e <_printf_i+0x1d2>
 8005e7e:	2f58      	cmp	r7, #88	; 0x58
 8005e80:	f000 80a3 	beq.w	8005fca <_printf_i+0x16e>
 8005e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e8c:	e03a      	b.n	8005f04 <_printf_i+0xa8>
 8005e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e92:	2b15      	cmp	r3, #21
 8005e94:	d8f6      	bhi.n	8005e84 <_printf_i+0x28>
 8005e96:	a101      	add	r1, pc, #4	; (adr r1, 8005e9c <_printf_i+0x40>)
 8005e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e9c:	08005ef5 	.word	0x08005ef5
 8005ea0:	08005f09 	.word	0x08005f09
 8005ea4:	08005e85 	.word	0x08005e85
 8005ea8:	08005e85 	.word	0x08005e85
 8005eac:	08005e85 	.word	0x08005e85
 8005eb0:	08005e85 	.word	0x08005e85
 8005eb4:	08005f09 	.word	0x08005f09
 8005eb8:	08005e85 	.word	0x08005e85
 8005ebc:	08005e85 	.word	0x08005e85
 8005ec0:	08005e85 	.word	0x08005e85
 8005ec4:	08005e85 	.word	0x08005e85
 8005ec8:	08006015 	.word	0x08006015
 8005ecc:	08005f39 	.word	0x08005f39
 8005ed0:	08005ff7 	.word	0x08005ff7
 8005ed4:	08005e85 	.word	0x08005e85
 8005ed8:	08005e85 	.word	0x08005e85
 8005edc:	08006037 	.word	0x08006037
 8005ee0:	08005e85 	.word	0x08005e85
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005e85 	.word	0x08005e85
 8005eec:	08005e85 	.word	0x08005e85
 8005ef0:	08005fff 	.word	0x08005fff
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	1d1a      	adds	r2, r3, #4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	602a      	str	r2, [r5, #0]
 8005efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0a3      	b.n	8006050 <_printf_i+0x1f4>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	6829      	ldr	r1, [r5, #0]
 8005f0c:	0606      	lsls	r6, r0, #24
 8005f0e:	f101 0304 	add.w	r3, r1, #4
 8005f12:	d50a      	bpl.n	8005f2a <_printf_i+0xce>
 8005f14:	680e      	ldr	r6, [r1, #0]
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	2e00      	cmp	r6, #0
 8005f1a:	da03      	bge.n	8005f24 <_printf_i+0xc8>
 8005f1c:	232d      	movs	r3, #45	; 0x2d
 8005f1e:	4276      	negs	r6, r6
 8005f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f24:	485e      	ldr	r0, [pc, #376]	; (80060a0 <_printf_i+0x244>)
 8005f26:	230a      	movs	r3, #10
 8005f28:	e019      	b.n	8005f5e <_printf_i+0x102>
 8005f2a:	680e      	ldr	r6, [r1, #0]
 8005f2c:	602b      	str	r3, [r5, #0]
 8005f2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f32:	bf18      	it	ne
 8005f34:	b236      	sxthne	r6, r6
 8005f36:	e7ef      	b.n	8005f18 <_printf_i+0xbc>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	6820      	ldr	r0, [r4, #0]
 8005f3c:	1d19      	adds	r1, r3, #4
 8005f3e:	6029      	str	r1, [r5, #0]
 8005f40:	0601      	lsls	r1, r0, #24
 8005f42:	d501      	bpl.n	8005f48 <_printf_i+0xec>
 8005f44:	681e      	ldr	r6, [r3, #0]
 8005f46:	e002      	b.n	8005f4e <_printf_i+0xf2>
 8005f48:	0646      	lsls	r6, r0, #25
 8005f4a:	d5fb      	bpl.n	8005f44 <_printf_i+0xe8>
 8005f4c:	881e      	ldrh	r6, [r3, #0]
 8005f4e:	4854      	ldr	r0, [pc, #336]	; (80060a0 <_printf_i+0x244>)
 8005f50:	2f6f      	cmp	r7, #111	; 0x6f
 8005f52:	bf0c      	ite	eq
 8005f54:	2308      	moveq	r3, #8
 8005f56:	230a      	movne	r3, #10
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f5e:	6865      	ldr	r5, [r4, #4]
 8005f60:	60a5      	str	r5, [r4, #8]
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	bfa2      	ittt	ge
 8005f66:	6821      	ldrge	r1, [r4, #0]
 8005f68:	f021 0104 	bicge.w	r1, r1, #4
 8005f6c:	6021      	strge	r1, [r4, #0]
 8005f6e:	b90e      	cbnz	r6, 8005f74 <_printf_i+0x118>
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	d04d      	beq.n	8006010 <_printf_i+0x1b4>
 8005f74:	4615      	mov	r5, r2
 8005f76:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f7a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f7e:	5dc7      	ldrb	r7, [r0, r7]
 8005f80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f84:	4637      	mov	r7, r6
 8005f86:	42bb      	cmp	r3, r7
 8005f88:	460e      	mov	r6, r1
 8005f8a:	d9f4      	bls.n	8005f76 <_printf_i+0x11a>
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d10b      	bne.n	8005fa8 <_printf_i+0x14c>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	07de      	lsls	r6, r3, #31
 8005f94:	d508      	bpl.n	8005fa8 <_printf_i+0x14c>
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	4299      	cmp	r1, r3
 8005f9c:	bfde      	ittt	le
 8005f9e:	2330      	movle	r3, #48	; 0x30
 8005fa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fa8:	1b52      	subs	r2, r2, r5
 8005faa:	6122      	str	r2, [r4, #16]
 8005fac:	f8cd a000 	str.w	sl, [sp]
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	aa03      	add	r2, sp, #12
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f7ff fee2 	bl	8005d80 <_printf_common>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d14c      	bne.n	800605a <_printf_i+0x1fe>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	b004      	add	sp, #16
 8005fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fca:	4835      	ldr	r0, [pc, #212]	; (80060a0 <_printf_i+0x244>)
 8005fcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fd0:	6829      	ldr	r1, [r5, #0]
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fd8:	6029      	str	r1, [r5, #0]
 8005fda:	061d      	lsls	r5, r3, #24
 8005fdc:	d514      	bpl.n	8006008 <_printf_i+0x1ac>
 8005fde:	07df      	lsls	r7, r3, #31
 8005fe0:	bf44      	itt	mi
 8005fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fe6:	6023      	strmi	r3, [r4, #0]
 8005fe8:	b91e      	cbnz	r6, 8005ff2 <_printf_i+0x196>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	f023 0320 	bic.w	r3, r3, #32
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	e7b0      	b.n	8005f58 <_printf_i+0xfc>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	f043 0320 	orr.w	r3, r3, #32
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	2378      	movs	r3, #120	; 0x78
 8006000:	4828      	ldr	r0, [pc, #160]	; (80060a4 <_printf_i+0x248>)
 8006002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006006:	e7e3      	b.n	8005fd0 <_printf_i+0x174>
 8006008:	0659      	lsls	r1, r3, #25
 800600a:	bf48      	it	mi
 800600c:	b2b6      	uxthmi	r6, r6
 800600e:	e7e6      	b.n	8005fde <_printf_i+0x182>
 8006010:	4615      	mov	r5, r2
 8006012:	e7bb      	b.n	8005f8c <_printf_i+0x130>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	6826      	ldr	r6, [r4, #0]
 8006018:	6961      	ldr	r1, [r4, #20]
 800601a:	1d18      	adds	r0, r3, #4
 800601c:	6028      	str	r0, [r5, #0]
 800601e:	0635      	lsls	r5, r6, #24
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	d501      	bpl.n	8006028 <_printf_i+0x1cc>
 8006024:	6019      	str	r1, [r3, #0]
 8006026:	e002      	b.n	800602e <_printf_i+0x1d2>
 8006028:	0670      	lsls	r0, r6, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0x1c8>
 800602c:	8019      	strh	r1, [r3, #0]
 800602e:	2300      	movs	r3, #0
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	4615      	mov	r5, r2
 8006034:	e7ba      	b.n	8005fac <_printf_i+0x150>
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	1d1a      	adds	r2, r3, #4
 800603a:	602a      	str	r2, [r5, #0]
 800603c:	681d      	ldr	r5, [r3, #0]
 800603e:	6862      	ldr	r2, [r4, #4]
 8006040:	2100      	movs	r1, #0
 8006042:	4628      	mov	r0, r5
 8006044:	f7fa f8c4 	bl	80001d0 <memchr>
 8006048:	b108      	cbz	r0, 800604e <_printf_i+0x1f2>
 800604a:	1b40      	subs	r0, r0, r5
 800604c:	6060      	str	r0, [r4, #4]
 800604e:	6863      	ldr	r3, [r4, #4]
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	2300      	movs	r3, #0
 8006054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006058:	e7a8      	b.n	8005fac <_printf_i+0x150>
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	462a      	mov	r2, r5
 800605e:	4649      	mov	r1, r9
 8006060:	4640      	mov	r0, r8
 8006062:	47d0      	blx	sl
 8006064:	3001      	adds	r0, #1
 8006066:	d0ab      	beq.n	8005fc0 <_printf_i+0x164>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	079b      	lsls	r3, r3, #30
 800606c:	d413      	bmi.n	8006096 <_printf_i+0x23a>
 800606e:	68e0      	ldr	r0, [r4, #12]
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	4298      	cmp	r0, r3
 8006074:	bfb8      	it	lt
 8006076:	4618      	movlt	r0, r3
 8006078:	e7a4      	b.n	8005fc4 <_printf_i+0x168>
 800607a:	2301      	movs	r3, #1
 800607c:	4632      	mov	r2, r6
 800607e:	4649      	mov	r1, r9
 8006080:	4640      	mov	r0, r8
 8006082:	47d0      	blx	sl
 8006084:	3001      	adds	r0, #1
 8006086:	d09b      	beq.n	8005fc0 <_printf_i+0x164>
 8006088:	3501      	adds	r5, #1
 800608a:	68e3      	ldr	r3, [r4, #12]
 800608c:	9903      	ldr	r1, [sp, #12]
 800608e:	1a5b      	subs	r3, r3, r1
 8006090:	42ab      	cmp	r3, r5
 8006092:	dcf2      	bgt.n	800607a <_printf_i+0x21e>
 8006094:	e7eb      	b.n	800606e <_printf_i+0x212>
 8006096:	2500      	movs	r5, #0
 8006098:	f104 0619 	add.w	r6, r4, #25
 800609c:	e7f5      	b.n	800608a <_printf_i+0x22e>
 800609e:	bf00      	nop
 80060a0:	08006a69 	.word	0x08006a69
 80060a4:	08006a7a 	.word	0x08006a7a

080060a8 <_sbrk_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d06      	ldr	r5, [pc, #24]	; (80060c4 <_sbrk_r+0x1c>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	f7fb fcfa 	bl	8001aac <_sbrk>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_sbrk_r+0x1a>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_sbrk_r+0x1a>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	2000028c 	.word	0x2000028c

080060c8 <__sread>:
 80060c8:	b510      	push	{r4, lr}
 80060ca:	460c      	mov	r4, r1
 80060cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d0:	f000 f8a0 	bl	8006214 <_read_r>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	bfab      	itete	ge
 80060d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060da:	89a3      	ldrhlt	r3, [r4, #12]
 80060dc:	181b      	addge	r3, r3, r0
 80060de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060e2:	bfac      	ite	ge
 80060e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060e6:	81a3      	strhlt	r3, [r4, #12]
 80060e8:	bd10      	pop	{r4, pc}

080060ea <__swrite>:
 80060ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ee:	461f      	mov	r7, r3
 80060f0:	898b      	ldrh	r3, [r1, #12]
 80060f2:	05db      	lsls	r3, r3, #23
 80060f4:	4605      	mov	r5, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	4616      	mov	r6, r2
 80060fa:	d505      	bpl.n	8006108 <__swrite+0x1e>
 80060fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006100:	2302      	movs	r3, #2
 8006102:	2200      	movs	r2, #0
 8006104:	f000 f868 	bl	80061d8 <_lseek_r>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800610e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	4632      	mov	r2, r6
 8006116:	463b      	mov	r3, r7
 8006118:	4628      	mov	r0, r5
 800611a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800611e:	f000 b817 	b.w	8006150 <_write_r>

08006122 <__sseek>:
 8006122:	b510      	push	{r4, lr}
 8006124:	460c      	mov	r4, r1
 8006126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612a:	f000 f855 	bl	80061d8 <_lseek_r>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	bf15      	itete	ne
 8006134:	6560      	strne	r0, [r4, #84]	; 0x54
 8006136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800613a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800613e:	81a3      	strheq	r3, [r4, #12]
 8006140:	bf18      	it	ne
 8006142:	81a3      	strhne	r3, [r4, #12]
 8006144:	bd10      	pop	{r4, pc}

08006146 <__sclose>:
 8006146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614a:	f000 b813 	b.w	8006174 <_close_r>
	...

08006150 <_write_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d07      	ldr	r5, [pc, #28]	; (8006170 <_write_r+0x20>)
 8006154:	4604      	mov	r4, r0
 8006156:	4608      	mov	r0, r1
 8006158:	4611      	mov	r1, r2
 800615a:	2200      	movs	r2, #0
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fa fd42 	bl	8000be8 <_write>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_write_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_write_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	2000028c 	.word	0x2000028c

08006174 <_close_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d06      	ldr	r5, [pc, #24]	; (8006190 <_close_r+0x1c>)
 8006178:	2300      	movs	r3, #0
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	f7fb fc60 	bl	8001a44 <_close>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_close_r+0x1a>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_close_r+0x1a>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	2000028c 	.word	0x2000028c

08006194 <_fstat_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	; (80061b4 <_fstat_r+0x20>)
 8006198:	2300      	movs	r3, #0
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	f7fb fc5b 	bl	8001a5c <_fstat>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d102      	bne.n	80061b0 <_fstat_r+0x1c>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	b103      	cbz	r3, 80061b0 <_fstat_r+0x1c>
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
 80061b2:	bf00      	nop
 80061b4:	2000028c 	.word	0x2000028c

080061b8 <_isatty_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d06      	ldr	r5, [pc, #24]	; (80061d4 <_isatty_r+0x1c>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	f7fb fc5a 	bl	8001a7c <_isatty>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_isatty_r+0x1a>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_isatty_r+0x1a>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	2000028c 	.word	0x2000028c

080061d8 <_lseek_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	; (80061f8 <_lseek_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fb fc53 	bl	8001a92 <_lseek>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_lseek_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_lseek_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	2000028c 	.word	0x2000028c

080061fc <__malloc_lock>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__malloc_lock+0x8>)
 80061fe:	f7ff bb1d 	b.w	800583c <__retarget_lock_acquire_recursive>
 8006202:	bf00      	nop
 8006204:	20000280 	.word	0x20000280

08006208 <__malloc_unlock>:
 8006208:	4801      	ldr	r0, [pc, #4]	; (8006210 <__malloc_unlock+0x8>)
 800620a:	f7ff bb18 	b.w	800583e <__retarget_lock_release_recursive>
 800620e:	bf00      	nop
 8006210:	20000280 	.word	0x20000280

08006214 <_read_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	; (8006234 <_read_r+0x20>)
 8006218:	4604      	mov	r4, r0
 800621a:	4608      	mov	r0, r1
 800621c:	4611      	mov	r1, r2
 800621e:	2200      	movs	r2, #0
 8006220:	602a      	str	r2, [r5, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f7fb fbf1 	bl	8001a0a <_read>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_read_r+0x1e>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_read_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	2000028c 	.word	0x2000028c

08006238 <atan2>:
 8006238:	f000 b82e 	b.w	8006298 <__ieee754_atan2>

0800623c <sqrt>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	ed2d 8b02 	vpush	{d8}
 8006242:	ec55 4b10 	vmov	r4, r5, d0
 8006246:	f000 f8f1 	bl	800642c <__ieee754_sqrt>
 800624a:	4622      	mov	r2, r4
 800624c:	462b      	mov	r3, r5
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	eeb0 8a40 	vmov.f32	s16, s0
 8006256:	eef0 8a60 	vmov.f32	s17, s1
 800625a:	f7fa fc5f 	bl	8000b1c <__aeabi_dcmpun>
 800625e:	b990      	cbnz	r0, 8006286 <sqrt+0x4a>
 8006260:	2200      	movs	r2, #0
 8006262:	2300      	movs	r3, #0
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f7fa fc30 	bl	8000acc <__aeabi_dcmplt>
 800626c:	b158      	cbz	r0, 8006286 <sqrt+0x4a>
 800626e:	f7fe ffad 	bl	80051cc <__errno>
 8006272:	2321      	movs	r3, #33	; 0x21
 8006274:	6003      	str	r3, [r0, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	2300      	movs	r3, #0
 800627a:	4610      	mov	r0, r2
 800627c:	4619      	mov	r1, r3
 800627e:	f7fa fadd 	bl	800083c <__aeabi_ddiv>
 8006282:	ec41 0b18 	vmov	d8, r0, r1
 8006286:	eeb0 0a48 	vmov.f32	s0, s16
 800628a:	eef0 0a68 	vmov.f32	s1, s17
 800628e:	ecbd 8b02 	vpop	{d8}
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	0000      	movs	r0, r0
	...

08006298 <__ieee754_atan2>:
 8006298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800629c:	ec57 6b11 	vmov	r6, r7, d1
 80062a0:	4273      	negs	r3, r6
 80062a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006428 <__ieee754_atan2+0x190>
 80062a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80062aa:	4333      	orrs	r3, r6
 80062ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80062b0:	4573      	cmp	r3, lr
 80062b2:	ec51 0b10 	vmov	r0, r1, d0
 80062b6:	ee11 8a10 	vmov	r8, s2
 80062ba:	d80a      	bhi.n	80062d2 <__ieee754_atan2+0x3a>
 80062bc:	4244      	negs	r4, r0
 80062be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80062c2:	4304      	orrs	r4, r0
 80062c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80062c8:	4574      	cmp	r4, lr
 80062ca:	ee10 9a10 	vmov	r9, s0
 80062ce:	468c      	mov	ip, r1
 80062d0:	d907      	bls.n	80062e2 <__ieee754_atan2+0x4a>
 80062d2:	4632      	mov	r2, r6
 80062d4:	463b      	mov	r3, r7
 80062d6:	f7f9 ffd1 	bl	800027c <__adddf3>
 80062da:	ec41 0b10 	vmov	d0, r0, r1
 80062de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80062e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80062ea:	4334      	orrs	r4, r6
 80062ec:	d103      	bne.n	80062f6 <__ieee754_atan2+0x5e>
 80062ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062f2:	f000 b94d 	b.w	8006590 <atan>
 80062f6:	17bc      	asrs	r4, r7, #30
 80062f8:	f004 0402 	and.w	r4, r4, #2
 80062fc:	ea53 0909 	orrs.w	r9, r3, r9
 8006300:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006304:	d107      	bne.n	8006316 <__ieee754_atan2+0x7e>
 8006306:	2c02      	cmp	r4, #2
 8006308:	d060      	beq.n	80063cc <__ieee754_atan2+0x134>
 800630a:	2c03      	cmp	r4, #3
 800630c:	d1e5      	bne.n	80062da <__ieee754_atan2+0x42>
 800630e:	a142      	add	r1, pc, #264	; (adr r1, 8006418 <__ieee754_atan2+0x180>)
 8006310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006314:	e7e1      	b.n	80062da <__ieee754_atan2+0x42>
 8006316:	ea52 0808 	orrs.w	r8, r2, r8
 800631a:	d106      	bne.n	800632a <__ieee754_atan2+0x92>
 800631c:	f1bc 0f00 	cmp.w	ip, #0
 8006320:	da5f      	bge.n	80063e2 <__ieee754_atan2+0x14a>
 8006322:	a13f      	add	r1, pc, #252	; (adr r1, 8006420 <__ieee754_atan2+0x188>)
 8006324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006328:	e7d7      	b.n	80062da <__ieee754_atan2+0x42>
 800632a:	4572      	cmp	r2, lr
 800632c:	d10f      	bne.n	800634e <__ieee754_atan2+0xb6>
 800632e:	4293      	cmp	r3, r2
 8006330:	f104 34ff 	add.w	r4, r4, #4294967295
 8006334:	d107      	bne.n	8006346 <__ieee754_atan2+0xae>
 8006336:	2c02      	cmp	r4, #2
 8006338:	d84c      	bhi.n	80063d4 <__ieee754_atan2+0x13c>
 800633a:	4b35      	ldr	r3, [pc, #212]	; (8006410 <__ieee754_atan2+0x178>)
 800633c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006340:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006344:	e7c9      	b.n	80062da <__ieee754_atan2+0x42>
 8006346:	2c02      	cmp	r4, #2
 8006348:	d848      	bhi.n	80063dc <__ieee754_atan2+0x144>
 800634a:	4b32      	ldr	r3, [pc, #200]	; (8006414 <__ieee754_atan2+0x17c>)
 800634c:	e7f6      	b.n	800633c <__ieee754_atan2+0xa4>
 800634e:	4573      	cmp	r3, lr
 8006350:	d0e4      	beq.n	800631c <__ieee754_atan2+0x84>
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006358:	ea4f 5223 	mov.w	r2, r3, asr #20
 800635c:	da1e      	bge.n	800639c <__ieee754_atan2+0x104>
 800635e:	2f00      	cmp	r7, #0
 8006360:	da01      	bge.n	8006366 <__ieee754_atan2+0xce>
 8006362:	323c      	adds	r2, #60	; 0x3c
 8006364:	db1e      	blt.n	80063a4 <__ieee754_atan2+0x10c>
 8006366:	4632      	mov	r2, r6
 8006368:	463b      	mov	r3, r7
 800636a:	f7fa fa67 	bl	800083c <__aeabi_ddiv>
 800636e:	ec41 0b10 	vmov	d0, r0, r1
 8006372:	f000 faad 	bl	80068d0 <fabs>
 8006376:	f000 f90b 	bl	8006590 <atan>
 800637a:	ec51 0b10 	vmov	r0, r1, d0
 800637e:	2c01      	cmp	r4, #1
 8006380:	d013      	beq.n	80063aa <__ieee754_atan2+0x112>
 8006382:	2c02      	cmp	r4, #2
 8006384:	d015      	beq.n	80063b2 <__ieee754_atan2+0x11a>
 8006386:	2c00      	cmp	r4, #0
 8006388:	d0a7      	beq.n	80062da <__ieee754_atan2+0x42>
 800638a:	a319      	add	r3, pc, #100	; (adr r3, 80063f0 <__ieee754_atan2+0x158>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7f9 ff72 	bl	8000278 <__aeabi_dsub>
 8006394:	a318      	add	r3, pc, #96	; (adr r3, 80063f8 <__ieee754_atan2+0x160>)
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	e014      	b.n	80063c6 <__ieee754_atan2+0x12e>
 800639c:	a118      	add	r1, pc, #96	; (adr r1, 8006400 <__ieee754_atan2+0x168>)
 800639e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a2:	e7ec      	b.n	800637e <__ieee754_atan2+0xe6>
 80063a4:	2000      	movs	r0, #0
 80063a6:	2100      	movs	r1, #0
 80063a8:	e7e9      	b.n	800637e <__ieee754_atan2+0xe6>
 80063aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063ae:	4619      	mov	r1, r3
 80063b0:	e793      	b.n	80062da <__ieee754_atan2+0x42>
 80063b2:	a30f      	add	r3, pc, #60	; (adr r3, 80063f0 <__ieee754_atan2+0x158>)
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f7f9 ff5e 	bl	8000278 <__aeabi_dsub>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	a10d      	add	r1, pc, #52	; (adr r1, 80063f8 <__ieee754_atan2+0x160>)
 80063c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063c6:	f7f9 ff57 	bl	8000278 <__aeabi_dsub>
 80063ca:	e786      	b.n	80062da <__ieee754_atan2+0x42>
 80063cc:	a10a      	add	r1, pc, #40	; (adr r1, 80063f8 <__ieee754_atan2+0x160>)
 80063ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d2:	e782      	b.n	80062da <__ieee754_atan2+0x42>
 80063d4:	a10c      	add	r1, pc, #48	; (adr r1, 8006408 <__ieee754_atan2+0x170>)
 80063d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063da:	e77e      	b.n	80062da <__ieee754_atan2+0x42>
 80063dc:	2000      	movs	r0, #0
 80063de:	2100      	movs	r1, #0
 80063e0:	e77b      	b.n	80062da <__ieee754_atan2+0x42>
 80063e2:	a107      	add	r1, pc, #28	; (adr r1, 8006400 <__ieee754_atan2+0x168>)
 80063e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063e8:	e777      	b.n	80062da <__ieee754_atan2+0x42>
 80063ea:	bf00      	nop
 80063ec:	f3af 8000 	nop.w
 80063f0:	33145c07 	.word	0x33145c07
 80063f4:	3ca1a626 	.word	0x3ca1a626
 80063f8:	54442d18 	.word	0x54442d18
 80063fc:	400921fb 	.word	0x400921fb
 8006400:	54442d18 	.word	0x54442d18
 8006404:	3ff921fb 	.word	0x3ff921fb
 8006408:	54442d18 	.word	0x54442d18
 800640c:	3fe921fb 	.word	0x3fe921fb
 8006410:	08006a90 	.word	0x08006a90
 8006414:	08006aa8 	.word	0x08006aa8
 8006418:	54442d18 	.word	0x54442d18
 800641c:	c00921fb 	.word	0xc00921fb
 8006420:	54442d18 	.word	0x54442d18
 8006424:	bff921fb 	.word	0xbff921fb
 8006428:	7ff00000 	.word	0x7ff00000

0800642c <__ieee754_sqrt>:
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	ec55 4b10 	vmov	r4, r5, d0
 8006434:	4e55      	ldr	r6, [pc, #340]	; (800658c <__ieee754_sqrt+0x160>)
 8006436:	43ae      	bics	r6, r5
 8006438:	ee10 0a10 	vmov	r0, s0
 800643c:	ee10 3a10 	vmov	r3, s0
 8006440:	462a      	mov	r2, r5
 8006442:	4629      	mov	r1, r5
 8006444:	d110      	bne.n	8006468 <__ieee754_sqrt+0x3c>
 8006446:	ee10 2a10 	vmov	r2, s0
 800644a:	462b      	mov	r3, r5
 800644c:	f7fa f8cc 	bl	80005e8 <__aeabi_dmul>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4620      	mov	r0, r4
 8006456:	4629      	mov	r1, r5
 8006458:	f7f9 ff10 	bl	800027c <__adddf3>
 800645c:	4604      	mov	r4, r0
 800645e:	460d      	mov	r5, r1
 8006460:	ec45 4b10 	vmov	d0, r4, r5
 8006464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006468:	2d00      	cmp	r5, #0
 800646a:	dc10      	bgt.n	800648e <__ieee754_sqrt+0x62>
 800646c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006470:	4330      	orrs	r0, r6
 8006472:	d0f5      	beq.n	8006460 <__ieee754_sqrt+0x34>
 8006474:	b15d      	cbz	r5, 800648e <__ieee754_sqrt+0x62>
 8006476:	ee10 2a10 	vmov	r2, s0
 800647a:	462b      	mov	r3, r5
 800647c:	ee10 0a10 	vmov	r0, s0
 8006480:	f7f9 fefa 	bl	8000278 <__aeabi_dsub>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	f7fa f9d8 	bl	800083c <__aeabi_ddiv>
 800648c:	e7e6      	b.n	800645c <__ieee754_sqrt+0x30>
 800648e:	1512      	asrs	r2, r2, #20
 8006490:	d074      	beq.n	800657c <__ieee754_sqrt+0x150>
 8006492:	07d4      	lsls	r4, r2, #31
 8006494:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006498:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800649c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80064a0:	bf5e      	ittt	pl
 80064a2:	0fda      	lsrpl	r2, r3, #31
 80064a4:	005b      	lslpl	r3, r3, #1
 80064a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80064aa:	2400      	movs	r4, #0
 80064ac:	0fda      	lsrs	r2, r3, #31
 80064ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80064b2:	107f      	asrs	r7, r7, #1
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	2516      	movs	r5, #22
 80064b8:	4620      	mov	r0, r4
 80064ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80064be:	1886      	adds	r6, r0, r2
 80064c0:	428e      	cmp	r6, r1
 80064c2:	bfde      	ittt	le
 80064c4:	1b89      	suble	r1, r1, r6
 80064c6:	18b0      	addle	r0, r6, r2
 80064c8:	18a4      	addle	r4, r4, r2
 80064ca:	0049      	lsls	r1, r1, #1
 80064cc:	3d01      	subs	r5, #1
 80064ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80064d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80064d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064da:	d1f0      	bne.n	80064be <__ieee754_sqrt+0x92>
 80064dc:	462a      	mov	r2, r5
 80064de:	f04f 0e20 	mov.w	lr, #32
 80064e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80064e6:	4281      	cmp	r1, r0
 80064e8:	eb06 0c05 	add.w	ip, r6, r5
 80064ec:	dc02      	bgt.n	80064f4 <__ieee754_sqrt+0xc8>
 80064ee:	d113      	bne.n	8006518 <__ieee754_sqrt+0xec>
 80064f0:	459c      	cmp	ip, r3
 80064f2:	d811      	bhi.n	8006518 <__ieee754_sqrt+0xec>
 80064f4:	f1bc 0f00 	cmp.w	ip, #0
 80064f8:	eb0c 0506 	add.w	r5, ip, r6
 80064fc:	da43      	bge.n	8006586 <__ieee754_sqrt+0x15a>
 80064fe:	2d00      	cmp	r5, #0
 8006500:	db41      	blt.n	8006586 <__ieee754_sqrt+0x15a>
 8006502:	f100 0801 	add.w	r8, r0, #1
 8006506:	1a09      	subs	r1, r1, r0
 8006508:	459c      	cmp	ip, r3
 800650a:	bf88      	it	hi
 800650c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006510:	eba3 030c 	sub.w	r3, r3, ip
 8006514:	4432      	add	r2, r6
 8006516:	4640      	mov	r0, r8
 8006518:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800651c:	f1be 0e01 	subs.w	lr, lr, #1
 8006520:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006524:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006528:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800652c:	d1db      	bne.n	80064e6 <__ieee754_sqrt+0xba>
 800652e:	430b      	orrs	r3, r1
 8006530:	d006      	beq.n	8006540 <__ieee754_sqrt+0x114>
 8006532:	1c50      	adds	r0, r2, #1
 8006534:	bf13      	iteet	ne
 8006536:	3201      	addne	r2, #1
 8006538:	3401      	addeq	r4, #1
 800653a:	4672      	moveq	r2, lr
 800653c:	f022 0201 	bicne.w	r2, r2, #1
 8006540:	1063      	asrs	r3, r4, #1
 8006542:	0852      	lsrs	r2, r2, #1
 8006544:	07e1      	lsls	r1, r4, #31
 8006546:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800654a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800654e:	bf48      	it	mi
 8006550:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006554:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006558:	4614      	mov	r4, r2
 800655a:	e781      	b.n	8006460 <__ieee754_sqrt+0x34>
 800655c:	0ad9      	lsrs	r1, r3, #11
 800655e:	3815      	subs	r0, #21
 8006560:	055b      	lsls	r3, r3, #21
 8006562:	2900      	cmp	r1, #0
 8006564:	d0fa      	beq.n	800655c <__ieee754_sqrt+0x130>
 8006566:	02cd      	lsls	r5, r1, #11
 8006568:	d50a      	bpl.n	8006580 <__ieee754_sqrt+0x154>
 800656a:	f1c2 0420 	rsb	r4, r2, #32
 800656e:	fa23 f404 	lsr.w	r4, r3, r4
 8006572:	1e55      	subs	r5, r2, #1
 8006574:	4093      	lsls	r3, r2
 8006576:	4321      	orrs	r1, r4
 8006578:	1b42      	subs	r2, r0, r5
 800657a:	e78a      	b.n	8006492 <__ieee754_sqrt+0x66>
 800657c:	4610      	mov	r0, r2
 800657e:	e7f0      	b.n	8006562 <__ieee754_sqrt+0x136>
 8006580:	0049      	lsls	r1, r1, #1
 8006582:	3201      	adds	r2, #1
 8006584:	e7ef      	b.n	8006566 <__ieee754_sqrt+0x13a>
 8006586:	4680      	mov	r8, r0
 8006588:	e7bd      	b.n	8006506 <__ieee754_sqrt+0xda>
 800658a:	bf00      	nop
 800658c:	7ff00000 	.word	0x7ff00000

08006590 <atan>:
 8006590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ec55 4b10 	vmov	r4, r5, d0
 8006598:	4bc3      	ldr	r3, [pc, #780]	; (80068a8 <atan+0x318>)
 800659a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800659e:	429e      	cmp	r6, r3
 80065a0:	46ab      	mov	fp, r5
 80065a2:	dd18      	ble.n	80065d6 <atan+0x46>
 80065a4:	4bc1      	ldr	r3, [pc, #772]	; (80068ac <atan+0x31c>)
 80065a6:	429e      	cmp	r6, r3
 80065a8:	dc01      	bgt.n	80065ae <atan+0x1e>
 80065aa:	d109      	bne.n	80065c0 <atan+0x30>
 80065ac:	b144      	cbz	r4, 80065c0 <atan+0x30>
 80065ae:	4622      	mov	r2, r4
 80065b0:	462b      	mov	r3, r5
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7f9 fe61 	bl	800027c <__adddf3>
 80065ba:	4604      	mov	r4, r0
 80065bc:	460d      	mov	r5, r1
 80065be:	e006      	b.n	80065ce <atan+0x3e>
 80065c0:	f1bb 0f00 	cmp.w	fp, #0
 80065c4:	f300 8131 	bgt.w	800682a <atan+0x29a>
 80065c8:	a59b      	add	r5, pc, #620	; (adr r5, 8006838 <atan+0x2a8>)
 80065ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80065ce:	ec45 4b10 	vmov	d0, r4, r5
 80065d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d6:	4bb6      	ldr	r3, [pc, #728]	; (80068b0 <atan+0x320>)
 80065d8:	429e      	cmp	r6, r3
 80065da:	dc14      	bgt.n	8006606 <atan+0x76>
 80065dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80065e0:	429e      	cmp	r6, r3
 80065e2:	dc0d      	bgt.n	8006600 <atan+0x70>
 80065e4:	a396      	add	r3, pc, #600	; (adr r3, 8006840 <atan+0x2b0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	ee10 0a10 	vmov	r0, s0
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7f9 fe44 	bl	800027c <__adddf3>
 80065f4:	4baf      	ldr	r3, [pc, #700]	; (80068b4 <atan+0x324>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	f7fa fa86 	bl	8000b08 <__aeabi_dcmpgt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d1e6      	bne.n	80065ce <atan+0x3e>
 8006600:	f04f 3aff 	mov.w	sl, #4294967295
 8006604:	e02b      	b.n	800665e <atan+0xce>
 8006606:	f000 f963 	bl	80068d0 <fabs>
 800660a:	4bab      	ldr	r3, [pc, #684]	; (80068b8 <atan+0x328>)
 800660c:	429e      	cmp	r6, r3
 800660e:	ec55 4b10 	vmov	r4, r5, d0
 8006612:	f300 80bf 	bgt.w	8006794 <atan+0x204>
 8006616:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800661a:	429e      	cmp	r6, r3
 800661c:	f300 80a0 	bgt.w	8006760 <atan+0x1d0>
 8006620:	ee10 2a10 	vmov	r2, s0
 8006624:	ee10 0a10 	vmov	r0, s0
 8006628:	462b      	mov	r3, r5
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fe26 	bl	800027c <__adddf3>
 8006630:	4ba0      	ldr	r3, [pc, #640]	; (80068b4 <atan+0x324>)
 8006632:	2200      	movs	r2, #0
 8006634:	f7f9 fe20 	bl	8000278 <__aeabi_dsub>
 8006638:	2200      	movs	r2, #0
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006642:	4620      	mov	r0, r4
 8006644:	4629      	mov	r1, r5
 8006646:	f7f9 fe19 	bl	800027c <__adddf3>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7fa f8f3 	bl	800083c <__aeabi_ddiv>
 8006656:	f04f 0a00 	mov.w	sl, #0
 800665a:	4604      	mov	r4, r0
 800665c:	460d      	mov	r5, r1
 800665e:	4622      	mov	r2, r4
 8006660:	462b      	mov	r3, r5
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	f7f9 ffbf 	bl	80005e8 <__aeabi_dmul>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4680      	mov	r8, r0
 8006670:	4689      	mov	r9, r1
 8006672:	f7f9 ffb9 	bl	80005e8 <__aeabi_dmul>
 8006676:	a374      	add	r3, pc, #464	; (adr r3, 8006848 <atan+0x2b8>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	4606      	mov	r6, r0
 800667e:	460f      	mov	r7, r1
 8006680:	f7f9 ffb2 	bl	80005e8 <__aeabi_dmul>
 8006684:	a372      	add	r3, pc, #456	; (adr r3, 8006850 <atan+0x2c0>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 fdf7 	bl	800027c <__adddf3>
 800668e:	4632      	mov	r2, r6
 8006690:	463b      	mov	r3, r7
 8006692:	f7f9 ffa9 	bl	80005e8 <__aeabi_dmul>
 8006696:	a370      	add	r3, pc, #448	; (adr r3, 8006858 <atan+0x2c8>)
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f7f9 fdee 	bl	800027c <__adddf3>
 80066a0:	4632      	mov	r2, r6
 80066a2:	463b      	mov	r3, r7
 80066a4:	f7f9 ffa0 	bl	80005e8 <__aeabi_dmul>
 80066a8:	a36d      	add	r3, pc, #436	; (adr r3, 8006860 <atan+0x2d0>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 fde5 	bl	800027c <__adddf3>
 80066b2:	4632      	mov	r2, r6
 80066b4:	463b      	mov	r3, r7
 80066b6:	f7f9 ff97 	bl	80005e8 <__aeabi_dmul>
 80066ba:	a36b      	add	r3, pc, #428	; (adr r3, 8006868 <atan+0x2d8>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 fddc 	bl	800027c <__adddf3>
 80066c4:	4632      	mov	r2, r6
 80066c6:	463b      	mov	r3, r7
 80066c8:	f7f9 ff8e 	bl	80005e8 <__aeabi_dmul>
 80066cc:	a368      	add	r3, pc, #416	; (adr r3, 8006870 <atan+0x2e0>)
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f7f9 fdd3 	bl	800027c <__adddf3>
 80066d6:	4642      	mov	r2, r8
 80066d8:	464b      	mov	r3, r9
 80066da:	f7f9 ff85 	bl	80005e8 <__aeabi_dmul>
 80066de:	a366      	add	r3, pc, #408	; (adr r3, 8006878 <atan+0x2e8>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	4680      	mov	r8, r0
 80066e6:	4689      	mov	r9, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7f9 ff7c 	bl	80005e8 <__aeabi_dmul>
 80066f0:	a363      	add	r3, pc, #396	; (adr r3, 8006880 <atan+0x2f0>)
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	f7f9 fdbf 	bl	8000278 <__aeabi_dsub>
 80066fa:	4632      	mov	r2, r6
 80066fc:	463b      	mov	r3, r7
 80066fe:	f7f9 ff73 	bl	80005e8 <__aeabi_dmul>
 8006702:	a361      	add	r3, pc, #388	; (adr r3, 8006888 <atan+0x2f8>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 fdb6 	bl	8000278 <__aeabi_dsub>
 800670c:	4632      	mov	r2, r6
 800670e:	463b      	mov	r3, r7
 8006710:	f7f9 ff6a 	bl	80005e8 <__aeabi_dmul>
 8006714:	a35e      	add	r3, pc, #376	; (adr r3, 8006890 <atan+0x300>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fdad 	bl	8000278 <__aeabi_dsub>
 800671e:	4632      	mov	r2, r6
 8006720:	463b      	mov	r3, r7
 8006722:	f7f9 ff61 	bl	80005e8 <__aeabi_dmul>
 8006726:	a35c      	add	r3, pc, #368	; (adr r3, 8006898 <atan+0x308>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f7f9 fda4 	bl	8000278 <__aeabi_dsub>
 8006730:	4632      	mov	r2, r6
 8006732:	463b      	mov	r3, r7
 8006734:	f7f9 ff58 	bl	80005e8 <__aeabi_dmul>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4640      	mov	r0, r8
 800673e:	4649      	mov	r1, r9
 8006740:	f7f9 fd9c 	bl	800027c <__adddf3>
 8006744:	4622      	mov	r2, r4
 8006746:	462b      	mov	r3, r5
 8006748:	f7f9 ff4e 	bl	80005e8 <__aeabi_dmul>
 800674c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	d14b      	bne.n	80067ee <atan+0x25e>
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7f9 fd8d 	bl	8000278 <__aeabi_dsub>
 800675e:	e72c      	b.n	80065ba <atan+0x2a>
 8006760:	ee10 0a10 	vmov	r0, s0
 8006764:	4b53      	ldr	r3, [pc, #332]	; (80068b4 <atan+0x324>)
 8006766:	2200      	movs	r2, #0
 8006768:	4629      	mov	r1, r5
 800676a:	f7f9 fd85 	bl	8000278 <__aeabi_dsub>
 800676e:	4b51      	ldr	r3, [pc, #324]	; (80068b4 <atan+0x324>)
 8006770:	4606      	mov	r6, r0
 8006772:	460f      	mov	r7, r1
 8006774:	2200      	movs	r2, #0
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	f7f9 fd7f 	bl	800027c <__adddf3>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4630      	mov	r0, r6
 8006784:	4639      	mov	r1, r7
 8006786:	f7fa f859 	bl	800083c <__aeabi_ddiv>
 800678a:	f04f 0a01 	mov.w	sl, #1
 800678e:	4604      	mov	r4, r0
 8006790:	460d      	mov	r5, r1
 8006792:	e764      	b.n	800665e <atan+0xce>
 8006794:	4b49      	ldr	r3, [pc, #292]	; (80068bc <atan+0x32c>)
 8006796:	429e      	cmp	r6, r3
 8006798:	da1d      	bge.n	80067d6 <atan+0x246>
 800679a:	ee10 0a10 	vmov	r0, s0
 800679e:	4b48      	ldr	r3, [pc, #288]	; (80068c0 <atan+0x330>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7f9 fd68 	bl	8000278 <__aeabi_dsub>
 80067a8:	4b45      	ldr	r3, [pc, #276]	; (80068c0 <atan+0x330>)
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	2200      	movs	r2, #0
 80067b0:	4620      	mov	r0, r4
 80067b2:	4629      	mov	r1, r5
 80067b4:	f7f9 ff18 	bl	80005e8 <__aeabi_dmul>
 80067b8:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <atan+0x324>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	f7f9 fd5e 	bl	800027c <__adddf3>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7fa f838 	bl	800083c <__aeabi_ddiv>
 80067cc:	f04f 0a02 	mov.w	sl, #2
 80067d0:	4604      	mov	r4, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	e743      	b.n	800665e <atan+0xce>
 80067d6:	462b      	mov	r3, r5
 80067d8:	ee10 2a10 	vmov	r2, s0
 80067dc:	4939      	ldr	r1, [pc, #228]	; (80068c4 <atan+0x334>)
 80067de:	2000      	movs	r0, #0
 80067e0:	f7fa f82c 	bl	800083c <__aeabi_ddiv>
 80067e4:	f04f 0a03 	mov.w	sl, #3
 80067e8:	4604      	mov	r4, r0
 80067ea:	460d      	mov	r5, r1
 80067ec:	e737      	b.n	800665e <atan+0xce>
 80067ee:	4b36      	ldr	r3, [pc, #216]	; (80068c8 <atan+0x338>)
 80067f0:	4e36      	ldr	r6, [pc, #216]	; (80068cc <atan+0x33c>)
 80067f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80067f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80067fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80067fe:	f7f9 fd3b 	bl	8000278 <__aeabi_dsub>
 8006802:	4622      	mov	r2, r4
 8006804:	462b      	mov	r3, r5
 8006806:	f7f9 fd37 	bl	8000278 <__aeabi_dsub>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006812:	f7f9 fd31 	bl	8000278 <__aeabi_dsub>
 8006816:	f1bb 0f00 	cmp.w	fp, #0
 800681a:	4604      	mov	r4, r0
 800681c:	460d      	mov	r5, r1
 800681e:	f6bf aed6 	bge.w	80065ce <atan+0x3e>
 8006822:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006826:	461d      	mov	r5, r3
 8006828:	e6d1      	b.n	80065ce <atan+0x3e>
 800682a:	a51d      	add	r5, pc, #116	; (adr r5, 80068a0 <atan+0x310>)
 800682c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006830:	e6cd      	b.n	80065ce <atan+0x3e>
 8006832:	bf00      	nop
 8006834:	f3af 8000 	nop.w
 8006838:	54442d18 	.word	0x54442d18
 800683c:	bff921fb 	.word	0xbff921fb
 8006840:	8800759c 	.word	0x8800759c
 8006844:	7e37e43c 	.word	0x7e37e43c
 8006848:	e322da11 	.word	0xe322da11
 800684c:	3f90ad3a 	.word	0x3f90ad3a
 8006850:	24760deb 	.word	0x24760deb
 8006854:	3fa97b4b 	.word	0x3fa97b4b
 8006858:	a0d03d51 	.word	0xa0d03d51
 800685c:	3fb10d66 	.word	0x3fb10d66
 8006860:	c54c206e 	.word	0xc54c206e
 8006864:	3fb745cd 	.word	0x3fb745cd
 8006868:	920083ff 	.word	0x920083ff
 800686c:	3fc24924 	.word	0x3fc24924
 8006870:	5555550d 	.word	0x5555550d
 8006874:	3fd55555 	.word	0x3fd55555
 8006878:	2c6a6c2f 	.word	0x2c6a6c2f
 800687c:	bfa2b444 	.word	0xbfa2b444
 8006880:	52defd9a 	.word	0x52defd9a
 8006884:	3fadde2d 	.word	0x3fadde2d
 8006888:	af749a6d 	.word	0xaf749a6d
 800688c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006890:	fe231671 	.word	0xfe231671
 8006894:	3fbc71c6 	.word	0x3fbc71c6
 8006898:	9998ebc4 	.word	0x9998ebc4
 800689c:	3fc99999 	.word	0x3fc99999
 80068a0:	54442d18 	.word	0x54442d18
 80068a4:	3ff921fb 	.word	0x3ff921fb
 80068a8:	440fffff 	.word	0x440fffff
 80068ac:	7ff00000 	.word	0x7ff00000
 80068b0:	3fdbffff 	.word	0x3fdbffff
 80068b4:	3ff00000 	.word	0x3ff00000
 80068b8:	3ff2ffff 	.word	0x3ff2ffff
 80068bc:	40038000 	.word	0x40038000
 80068c0:	3ff80000 	.word	0x3ff80000
 80068c4:	bff00000 	.word	0xbff00000
 80068c8:	08006ae0 	.word	0x08006ae0
 80068cc:	08006ac0 	.word	0x08006ac0

080068d0 <fabs>:
 80068d0:	ec51 0b10 	vmov	r0, r1, d0
 80068d4:	ee10 2a10 	vmov	r2, s0
 80068d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068dc:	ec43 2b10 	vmov	d0, r2, r3
 80068e0:	4770      	bx	lr
	...

080068e4 <_init>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr

080068f0 <_fini>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr
