
PE2_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007560  08007560  00017560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007788  08007788  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007788  08007788  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007788  08007788  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000078  08007808  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08007808  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001039c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c2  00000000  00000000  00030444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00032608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00033360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016698  00000000  00000000  00033fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d14  00000000  00000000  0004a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008559a  00000000  00000000  0005c38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d0  00000000  00000000  000e1978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007544 	.word	0x08007544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007544 	.word	0x08007544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <_write>:
uint8_t key = 0;
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;

int _write(int file, char *ptr, int len) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d003      	beq.n	8000c02 <_write+0x1a>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d015      	beq.n	8000c2c <_write+0x44>
 8000c00:	e029      	b.n	8000c56 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <_write+0x90>)
 8000c0e:	f004 fd39 	bl	8005684 <HAL_UART_Transmit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d024      	beq.n	8000c66 <_write+0x7e>
			errno = EIO;
 8000c1c:	f005 f908 	bl	8005e30 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2205      	movs	r2, #5
 8000c24:	601a      	str	r2, [r3, #0]
			return -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e020      	b.n	8000c6e <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <_write+0x90>)
 8000c38:	f004 fd24 	bl	8005684 <HAL_UART_Transmit>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d011      	beq.n	8000c6a <_write+0x82>
			errno = EIO;
 8000c46:	f005 f8f3 	bl	8005e30 <__errno>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	601a      	str	r2, [r3, #0]
			return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e00b      	b.n	8000c6e <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8000c56:	f005 f8eb 	bl	8005e30 <__errno>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	601a      	str	r2, [r3, #0]
        return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e003      	b.n	8000c6e <_write+0x86>
        break;
 8000c66:	bf00      	nop
 8000c68:	e000      	b.n	8000c6c <_write+0x84>
        break;
 8000c6a:	bf00      	nop
    }
    return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001d4 	.word	0x200001d4

08000c7c <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	f107 030f 	add.w	r3, r7, #15
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	21d0      	movs	r1, #208	; 0xd0
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <read_MPU_mem+0x40>)
 8000c9e:	f001 ffb3 	bl	8002c08 <HAL_I2C_Mem_Read>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <read_MPU_mem+0x30>
		return data;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	e002      	b.n	8000cb2 <read_MPU_mem+0x36>
	}
	else{
		printf("mem not read\r\n");
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <read_MPU_mem+0x44>)
 8000cae:	f005 f977 	bl	8005fa0 <puts>
	}
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000094 	.word	0x20000094
 8000cc0:	08007560 	.word	0x08007560

08000cc4 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	21d1      	movs	r1, #209	; 0xd1
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <write_MPU_mem+0x40>)
 8000cea:	f001 fe79 	bl	80029e0 <HAL_I2C_Mem_Write>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <write_MPU_mem+0x44>)
 8000cf6:	f005 f953 	bl	8005fa0 <puts>
    }
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000094 	.word	0x20000094
 8000d08:	08007570 	.word	0x08007570

08000d0c <read_MPU>:

void read_MPU(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint8_t LSByte = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = 1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	71bb      	strb	r3, [r7, #6]

	MSByte = read_MPU_mem(REG_GYRO_XOUT158);
 8000d1a:	2043      	movs	r0, #67	; 0x43
 8000d1c:	f7ff ffae 	bl	8000c7c <read_MPU_mem>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_XOUT70);
 8000d24:	2044      	movs	r0, #68	; 0x44
 8000d26:	f7ff ffa9 	bl	8000c7c <read_MPU_mem>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]

	gx = ((int16_t)((MSByte << 8) | LSByte)) / 131 + 3;
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <read_MPU+0x160>)
 8000d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d42:	1152      	asrs	r2, r2, #5
 8000d44:	17db      	asrs	r3, r3, #31
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <read_MPU+0x164>)
 8000d54:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_GYRO_YOUT158);
 8000d56:	2045      	movs	r0, #69	; 0x45
 8000d58:	f7ff ff90 	bl	8000c7c <read_MPU_mem>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_YOUT70);
 8000d60:	2046      	movs	r0, #70	; 0x46
 8000d62:	f7ff ff8b 	bl	8000c7c <read_MPU_mem>
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]

	gy = ((int16_t)((MSByte << 8) | LSByte)) / 131;
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <read_MPU+0x160>)
 8000d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7e:	1152      	asrs	r2, r2, #5
 8000d80:	17db      	asrs	r3, r3, #31
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <read_MPU+0x168>)
 8000d88:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_GYRO_ZOUT158);
 8000d8a:	2047      	movs	r0, #71	; 0x47
 8000d8c:	f7ff ff76 	bl	8000c7c <read_MPU_mem>
 8000d90:	4603      	mov	r3, r0
 8000d92:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_GYRO_ZOUT70);
 8000d94:	2048      	movs	r0, #72	; 0x48
 8000d96:	f7ff ff71 	bl	8000c7c <read_MPU_mem>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]

	gz = ((int16_t)((MSByte << 8) | LSByte)) / 131 + 1;
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <read_MPU+0x160>)
 8000dae:	fb82 1203 	smull	r1, r2, r2, r3
 8000db2:	1152      	asrs	r2, r2, #5
 8000db4:	17db      	asrs	r3, r3, #31
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <read_MPU+0x16c>)
 8000dc4:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_XOUT158);
 8000dc6:	203b      	movs	r0, #59	; 0x3b
 8000dc8:	f7ff ff58 	bl	8000c7c <read_MPU_mem>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_XOUT70);
 8000dd0:	203c      	movs	r0, #60	; 0x3c
 8000dd2:	f7ff ff53 	bl	8000c7c <read_MPU_mem>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]

	ax = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da02      	bge.n	8000df2 <read_MPU+0xe6>
 8000dec:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000df0:	333f      	adds	r3, #63	; 0x3f
 8000df2:	139b      	asrs	r3, r3, #14
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <read_MPU+0x170>)
 8000df8:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8000dfa:	203d      	movs	r0, #61	; 0x3d
 8000dfc:	f7ff ff3e 	bl	8000c7c <read_MPU_mem>
 8000e00:	4603      	mov	r3, r0
 8000e02:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8000e04:	203e      	movs	r0, #62	; 0x3e
 8000e06:	f7ff ff39 	bl	8000c7c <read_MPU_mem>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]

	ay = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da02      	bge.n	8000e26 <read_MPU+0x11a>
 8000e20:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e24:	333f      	adds	r3, #63	; 0x3f
 8000e26:	139b      	asrs	r3, r3, #14
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <read_MPU+0x174>)
 8000e2c:	801a      	strh	r2, [r3, #0]

	MSByte = read_MPU_mem(REG_ACCEL_ZOUT158);
 8000e2e:	203f      	movs	r0, #63	; 0x3f
 8000e30:	f7ff ff24 	bl	8000c7c <read_MPU_mem>
 8000e34:	4603      	mov	r3, r0
 8000e36:	71bb      	strb	r3, [r7, #6]
	LSByte = read_MPU_mem(REG_ACCEL_ZOUT70);
 8000e38:	2040      	movs	r0, #64	; 0x40
 8000e3a:	f7ff ff1f 	bl	8000c7c <read_MPU_mem>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]

	az = ((int16_t)((MSByte << 8) | LSByte)) / 16384;
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da02      	bge.n	8000e5a <read_MPU+0x14e>
 8000e54:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e58:	333f      	adds	r3, #63	; 0x3f
 8000e5a:	139b      	asrs	r3, r3, #14
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <read_MPU+0x178>)
 8000e60:	801a      	strh	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	3e88cb3d 	.word	0x3e88cb3d
 8000e70:	2000025c 	.word	0x2000025c
 8000e74:	20000260 	.word	0x20000260
 8000e78:	20000264 	.word	0x20000264
 8000e7c:	2000025e 	.word	0x2000025e
 8000e80:	20000262 	.word	0x20000262
 8000e84:	20000266 	.word	0x20000266

08000e88 <wrap>:

static float wrap(float angle,float limit){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e92:	edc7 0a00 	vstr	s1, [r7]
  while (angle >  limit) angle -= 2*limit;
 8000e96:	e009      	b.n	8000eac <wrap+0x24>
 8000e98:	edd7 7a00 	vldr	s15, [r7]
 8000e9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ea0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000eac:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eb0:	edd7 7a00 	vldr	s15, [r7]
 8000eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	dcec      	bgt.n	8000e98 <wrap+0x10>
  while (angle < -limit) angle += 2*limit;
 8000ebe:	e009      	b.n	8000ed4 <wrap+0x4c>
 8000ec0:	edd7 7a00 	vldr	s15, [r7]
 8000ec4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ec8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ed4:	edd7 7a00 	vldr	s15, [r7]
 8000ed8:	eef1 7a67 	vneg.f32	s15, s15
 8000edc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	d4ea      	bmi.n	8000ec0 <wrap+0x38>
  return angle;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	ee07 3a90 	vmov	s15, r3
}
 8000ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <update_MPU_vars>:

void update_MPU_vars(){
 8000f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
	read_MPU();
 8000f08:	f7ff ff00 	bl	8000d0c <read_MPU>

	float sgZ = az<0 ? -1 : 1; // allow one angle to go from -180 to +180 degrees
 8000f0c:	4bbe      	ldr	r3, [pc, #760]	; (8001208 <update_MPU_vars+0x308>)
 8000f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da01      	bge.n	8000f1a <update_MPU_vars+0x1a>
 8000f16:	4bbd      	ldr	r3, [pc, #756]	; (800120c <update_MPU_vars+0x30c>)
 8000f18:	e001      	b.n	8000f1e <update_MPU_vars+0x1e>
 8000f1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f1e:	617b      	str	r3, [r7, #20]
	float angleAccX =   atan2(ay, sgZ*sqrt(az*az + ax*ax)) * 57.29578 ; // [-180,+180] deg
 8000f20:	4bbb      	ldr	r3, [pc, #748]	; (8001210 <update_MPU_vars+0x310>)
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_i2d>
 8000f2c:	4682      	mov	sl, r0
 8000f2e:	468b      	mov	fp, r1
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f7ff fb01 	bl	8000538 <__aeabi_f2d>
 8000f36:	4680      	mov	r8, r0
 8000f38:	4689      	mov	r9, r1
 8000f3a:	4bb3      	ldr	r3, [pc, #716]	; (8001208 <update_MPU_vars+0x308>)
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4bb1      	ldr	r3, [pc, #708]	; (8001208 <update_MPU_vars+0x308>)
 8000f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f48:	fb03 f202 	mul.w	r2, r3, r2
 8000f4c:	4bb1      	ldr	r3, [pc, #708]	; (8001214 <update_MPU_vars+0x314>)
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	4619      	mov	r1, r3
 8000f54:	4baf      	ldr	r3, [pc, #700]	; (8001214 <update_MPU_vars+0x314>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	fb01 f303 	mul.w	r3, r1, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fad7 	bl	8000514 <__aeabi_i2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	ec43 2b10 	vmov	d0, r2, r3
 8000f6e:	f005 ff97 	bl	8006ea0 <sqrt>
 8000f72:	ec53 2b10 	vmov	r2, r3, d0
 8000f76:	4640      	mov	r0, r8
 8000f78:	4649      	mov	r1, r9
 8000f7a:	f7ff fb35 	bl	80005e8 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	ec43 2b17 	vmov	d7, r2, r3
 8000f86:	eeb0 1a47 	vmov.f32	s2, s14
 8000f8a:	eef0 1a67 	vmov.f32	s3, s15
 8000f8e:	ec4b ab10 	vmov	d0, sl, fp
 8000f92:	f005 ff83 	bl	8006e9c <atan2>
 8000f96:	ec51 0b10 	vmov	r0, r1, d0
 8000f9a:	a393      	add	r3, pc, #588	; (adr r3, 80011e8 <update_MPU_vars+0x2e8>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fb22 	bl	80005e8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fdcc 	bl	8000b48 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	613b      	str	r3, [r7, #16]
	float angleAccY = - atan2(ax,     sqrt(az*az + ax*ay)) * 57.29578 ; // [- 90,+ 90] deg
 8000fb4:	4b97      	ldr	r3, [pc, #604]	; (8001214 <update_MPU_vars+0x314>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff faaa 	bl	8000514 <__aeabi_i2d>
 8000fc0:	4680      	mov	r8, r0
 8000fc2:	4689      	mov	r9, r1
 8000fc4:	4b90      	ldr	r3, [pc, #576]	; (8001208 <update_MPU_vars+0x308>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <update_MPU_vars+0x308>)
 8000fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd2:	fb03 f202 	mul.w	r2, r3, r2
 8000fd6:	4b8f      	ldr	r3, [pc, #572]	; (8001214 <update_MPU_vars+0x314>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <update_MPU_vars+0x310>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	4413      	add	r3, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa92 	bl	8000514 <__aeabi_i2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	ec43 2b10 	vmov	d0, r2, r3
 8000ff8:	f005 ff52 	bl	8006ea0 <sqrt>
 8000ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8001000:	eef0 7a60 	vmov.f32	s15, s1
 8001004:	eeb0 1a47 	vmov.f32	s2, s14
 8001008:	eef0 1a67 	vmov.f32	s3, s15
 800100c:	ec49 8b10 	vmov	d0, r8, r9
 8001010:	f005 ff44 	bl	8006e9c <atan2>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	4614      	mov	r4, r2
 800101a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800101e:	a372      	add	r3, pc, #456	; (adr r3, 80011e8 <update_MPU_vars+0x2e8>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff fade 	bl	80005e8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd88 	bl	8000b48 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	60fb      	str	r3, [r7, #12]

	uint32_t mil = millis = HAL_GetTick();;
 800103c:	f001 f944 	bl	80022c8 <HAL_GetTick>
 8001040:	4603      	mov	r3, r0
 8001042:	4a75      	ldr	r2, [pc, #468]	; (8001218 <update_MPU_vars+0x318>)
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b74      	ldr	r3, [pc, #464]	; (8001218 <update_MPU_vars+0x318>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60bb      	str	r3, [r7, #8]
	float dt = (mil - premillis) * 1e-3;
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <update_MPU_vars+0x31c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa4d 	bl	80004f4 <__aeabi_ui2d>
 800105a:	a365      	add	r3, pc, #404	; (adr r3, 80011f0 <update_MPU_vars+0x2f0>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fac2 	bl	80005e8 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd6c 	bl	8000b48 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
	premillis = mil;
 8001074:	4a69      	ldr	r2, [pc, #420]	; (800121c <update_MPU_vars+0x31c>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6013      	str	r3, [r2, #0]

	angleX = wrap(0.98*(angleAccX + wrap(angleX + gx*dt - angleAccX,180)) + (1.0 - 0.98)*angleAccX,180);
 800107a:	4b69      	ldr	r3, [pc, #420]	; (8001220 <update_MPU_vars+0x320>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001088:	edd7 7a01 	vldr	s15, [r7, #4]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4b64      	ldr	r3, [pc, #400]	; (8001224 <update_MPU_vars+0x324>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109a:	edd7 7a04 	vldr	s15, [r7, #16]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a2:	eddf 0a61 	vldr	s1, [pc, #388]	; 8001228 <update_MPU_vars+0x328>
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f7ff feed 	bl	8000e88 <wrap>
 80010ae:	eeb0 7a40 	vmov.f32	s14, s0
 80010b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa3b 	bl	8000538 <__aeabi_f2d>
 80010c2:	a34d      	add	r3, pc, #308	; (adr r3, 80011f8 <update_MPU_vars+0x2f8>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fa8e 	bl	80005e8 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	461d      	mov	r5, r3
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f7ff fa2f 	bl	8000538 <__aeabi_f2d>
 80010da:	a349      	add	r3, pc, #292	; (adr r3, 8001200 <update_MPU_vars+0x300>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fa82 	bl	80005e8 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff f8c6 	bl	800027c <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd26 	bl	8000b48 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8001228 <update_MPU_vars+0x328>
 8001102:	ee00 3a10 	vmov	s0, r3
 8001106:	f7ff febf 	bl	8000e88 <wrap>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	4b45      	ldr	r3, [pc, #276]	; (8001224 <update_MPU_vars+0x324>)
 8001110:	edc3 7a00 	vstr	s15, [r3]
	angleY = wrap(0.98*(angleAccY + wrap(angleY + sgZ*gy*dt - angleAccY, 90)) + (1.0 - 0.98)*angleAccY, 90);
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <update_MPU_vars+0x32c>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001122:	edd7 7a05 	vldr	s15, [r7, #20]
 8001126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112a:	edd7 7a01 	vldr	s15, [r7, #4]
 800112e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <update_MPU_vars+0x330>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800113c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001234 <update_MPU_vars+0x334>
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	f7ff fe9c 	bl	8000e88 <wrap>
 8001150:	eeb0 7a40 	vmov.f32	s14, s0
 8001154:	edd7 7a03 	vldr	s15, [r7, #12]
 8001158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115c:	ee17 0a90 	vmov	r0, s15
 8001160:	f7ff f9ea 	bl	8000538 <__aeabi_f2d>
 8001164:	a324      	add	r3, pc, #144	; (adr r3, 80011f8 <update_MPU_vars+0x2f8>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa3d 	bl	80005e8 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4614      	mov	r4, r2
 8001174:	461d      	mov	r5, r3
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff f9de 	bl	8000538 <__aeabi_f2d>
 800117c:	a320      	add	r3, pc, #128	; (adr r3, 8001200 <update_MPU_vars+0x300>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa31 	bl	80005e8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff f875 	bl	800027c <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fcd5 	bl	8000b48 <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001234 <update_MPU_vars+0x334>
 80011a4:	ee00 3a10 	vmov	s0, r3
 80011a8:	f7ff fe6e 	bl	8000e88 <wrap>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <update_MPU_vars+0x330>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
	angleZ += gz*dt;
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <update_MPU_vars+0x338>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <update_MPU_vars+0x33c>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <update_MPU_vars+0x33c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011e6:	bf00      	nop
 80011e8:	1e7967cb 	.word	0x1e7967cb
 80011ec:	404ca5dc 	.word	0x404ca5dc
 80011f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011f4:	3f50624d 	.word	0x3f50624d
 80011f8:	f5c28f5c 	.word	0xf5c28f5c
 80011fc:	3fef5c28 	.word	0x3fef5c28
 8001200:	47ae1480 	.word	0x47ae1480
 8001204:	3f947ae1 	.word	0x3f947ae1
 8001208:	20000266 	.word	0x20000266
 800120c:	bf800000 	.word	0xbf800000
 8001210:	20000262 	.word	0x20000262
 8001214:	2000025e 	.word	0x2000025e
 8001218:	20000278 	.word	0x20000278
 800121c:	2000027c 	.word	0x2000027c
 8001220:	2000025c 	.word	0x2000025c
 8001224:	20000268 	.word	0x20000268
 8001228:	43340000 	.word	0x43340000
 800122c:	20000260 	.word	0x20000260
 8001230:	2000026c 	.word	0x2000026c
 8001234:	42b40000 	.word	0x42b40000
 8001238:	20000264 	.word	0x20000264
 800123c:	20000270 	.word	0x20000270

08001240 <init_MPU>:
void init_MPU(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8001244:	2100      	movs	r1, #0
 8001246:	206b      	movs	r0, #107	; 0x6b
 8001248:	f7ff fd3c 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 800124c:	2107      	movs	r1, #7
 800124e:	2019      	movs	r0, #25
 8001250:	f7ff fd38 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8001254:	2100      	movs	r1, #0
 8001256:	201b      	movs	r0, #27
 8001258:	f7ff fd34 	bl	8000cc4 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	201c      	movs	r0, #28
 8001260:	f7ff fd30 	bl	8000cc4 <write_MPU_mem>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 ffd1 	bl	8002214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f8f7 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 fa29 	bl	80016cc <MX_GPIO_Init>
  MX_I2C2_Init();
 800127a:	f000 f949 	bl	8001510 <MX_I2C2_Init>
  MX_SPI2_Init();
 800127e:	f000 f987 	bl	8001590 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001282:	f000 f9c3 	bl	800160c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001286:	f000 f9f1 	bl	800166c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	2201      	movs	r2, #1
 800128e:	21d0      	movs	r1, #208	; 0xd0
 8001290:	486a      	ldr	r0, [pc, #424]	; (800143c <main+0x1d4>)
 8001292:	f001 fdd3 	bl	8002e3c <HAL_I2C_IsDeviceReady>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <main+0x40>
	  printf("succesfully communicated\n\r");
 800129c:	4868      	ldr	r0, [pc, #416]	; (8001440 <main+0x1d8>)
 800129e:	f004 fdf9 	bl	8005e94 <iprintf>
	  init_MPU();
 80012a2:	f7ff ffcd 	bl	8001240 <init_MPU>
 80012a6:	e002      	b.n	80012ae <main+0x46>
  }
  else{
	  printf("i2C not found\n\r");
 80012a8:	4866      	ldr	r0, [pc, #408]	; (8001444 <main+0x1dc>)
 80012aa:	f004 fdf3 	bl	8005e94 <iprintf>
  }
  float factor = 1;
 80012ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012b2:	607b      	str	r3, [r7, #4]

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 fe13 	bl	8001ee0 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 ff64 	bl	8002188 <Displ_CLS>



  for (int y = 0; y < 10; y++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	e054      	b.n	8001370 <main+0x108>
      for (int x = 0; x < 10; x++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	e04b      	b.n	8001364 <main+0xfc>
          for (int j = 0; j < 10; j++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e042      	b.n	8001358 <main+0xf0>
              for (int i = 0; i < 32; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	e039      	b.n	800134c <main+0xe4>
                  if (i < 2 || j < 2) {
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	dd02      	ble.n	80012e4 <main+0x7c>
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	dc18      	bgt.n	8001316 <main+0xae>
                      Displ_Pixel((x*32) + i, (y*10) + j, D_GREEN);
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	015b      	lsls	r3, r3, #5
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	b298      	uxth	r0, r3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	b29a      	uxth	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800130e:	4619      	mov	r1, r3
 8001310:	f000 ff14 	bl	800213c <Displ_Pixel>
 8001314:	e017      	b.n	8001346 <main+0xde>
                  } else {
                      Displ_Pixel((x*32) + i, (y*10) + j, GREEN);
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	b29b      	uxth	r3, r3
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	b29a      	uxth	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	b29b      	uxth	r3, r3
 8001322:	4413      	add	r3, r2
 8001324:	b298      	uxth	r0, r3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	b29b      	uxth	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4413      	add	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001340:	4619      	mov	r1, r3
 8001342:	f000 fefb 	bl	800213c <Displ_Pixel>
              for (int i = 0; i < 32; i++) {
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	3301      	adds	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b1f      	cmp	r3, #31
 8001350:	ddc2      	ble.n	80012d8 <main+0x70>
          for (int j = 0; j < 10; j++) {
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b09      	cmp	r3, #9
 800135c:	ddb9      	ble.n	80012d2 <main+0x6a>
      for (int x = 0; x < 10; x++) {
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	3301      	adds	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b09      	cmp	r3, #9
 8001368:	ddb0      	ble.n	80012cc <main+0x64>
  for (int y = 0; y < 10; y++) {
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b09      	cmp	r3, #9
 8001374:	dda7      	ble.n	80012c6 <main+0x5e>
          }
      }

  }

  for (int j = 0; j < 3; j++) {
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e018      	b.n	80013ae <main+0x146>
      for (int i = 0; i < 90; i++) {
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	e00f      	b.n	80013a2 <main+0x13a>
          Displ_Pixel((320/2) - 45 + i, 240 - 5 + j, RED);
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	b29b      	uxth	r3, r3
 8001386:	3373      	adds	r3, #115	; 0x73
 8001388:	b298      	uxth	r0, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	b29b      	uxth	r3, r3
 800138e:	33eb      	adds	r3, #235	; 0xeb
 8001390:	b29b      	uxth	r3, r3
 8001392:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001396:	4619      	mov	r1, r3
 8001398:	f000 fed0 	bl	800213c <Displ_Pixel>
      for (int i = 0; i < 90; i++) {
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b59      	cmp	r3, #89	; 0x59
 80013a6:	ddec      	ble.n	8001382 <main+0x11a>
  for (int j = 0; j < 3; j++) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	dde3      	ble.n	800137c <main+0x114>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 80013b4:	2064      	movs	r0, #100	; 0x64
 80013b6:	f000 ff93 	bl	80022e0 <HAL_Delay>
      update_MPU_vars();
 80013ba:	f7ff fda1 	bl	8000f00 <update_MPU_vars>
      printf("angleX:%d, angleY:%d, angleZ:%d\n\r",(int16_t)angleX,(int16_t)angleY,(int16_t)angleZ);
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <main+0x1e0>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c8:	ee17 3a90 	vmov	r3, s15
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <main+0x1e4>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013da:	ee17 3a90 	vmov	r3, s15
 80013de:	b21b      	sxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <main+0x1e8>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ec:	ee17 3a90 	vmov	r3, s15
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <main+0x1ec>)
 80013f4:	f004 fd4e 	bl	8005e94 <iprintf>
      if ((int16_t)angleX > 20){
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <main+0x1e0>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	b21b      	sxth	r3, r3
 8001408:	2b14      	cmp	r3, #20
 800140a:	dd03      	ble.n	8001414 <main+0x1ac>
          printf("going right\r\n");
 800140c:	4812      	ldr	r0, [pc, #72]	; (8001458 <main+0x1f0>)
 800140e:	f004 fdc7 	bl	8005fa0 <puts>
 8001412:	e7cf      	b.n	80013b4 <main+0x14c>
      }
      else if ((int16_t)angleX < -20){
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <main+0x1e0>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141e:	ee17 3a90 	vmov	r3, s15
 8001422:	b21b      	sxth	r3, r3
 8001424:	f113 0f14 	cmn.w	r3, #20
 8001428:	da03      	bge.n	8001432 <main+0x1ca>
          printf("going left\r\n");
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <main+0x1f4>)
 800142c:	f004 fdb8 	bl	8005fa0 <puts>
 8001430:	e7c0      	b.n	80013b4 <main+0x14c>
      }
      else{
          printf("level\r\n");
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <main+0x1f8>)
 8001434:	f004 fdb4 	bl	8005fa0 <puts>
      HAL_Delay(100);
 8001438:	e7bc      	b.n	80013b4 <main+0x14c>
 800143a:	bf00      	nop
 800143c:	20000094 	.word	0x20000094
 8001440:	08007584 	.word	0x08007584
 8001444:	080075a0 	.word	0x080075a0
 8001448:	20000268 	.word	0x20000268
 800144c:	2000026c 	.word	0x2000026c
 8001450:	20000270 	.word	0x20000270
 8001454:	080075b0 	.word	0x080075b0
 8001458:	080075d4 	.word	0x080075d4
 800145c:	080075e4 	.word	0x080075e4
 8001460:	080075f0 	.word	0x080075f0

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b09c      	sub	sp, #112	; 0x70
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800146e:	2228      	movs	r2, #40	; 0x28
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fd06 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2230      	movs	r2, #48	; 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fcf8 	bl	8005e84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2310      	movs	r3, #16
 800149e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014a8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 f91c 	bl	80036f0 <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80014be:	f000 f9e5 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	230f      	movs	r3, #15
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c6:	2302      	movs	r3, #2
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014dc:	2102      	movs	r1, #2
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 f944 	bl	800476c <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80014ea:	f000 f9cf 	bl	800188c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fb6d 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001504:	f000 f9c2 	bl	800188c <Error_Handler>
  }
}
 8001508:	bf00      	nop
 800150a:	3770      	adds	r7, #112	; 0x70
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_I2C2_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_I2C2_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_I2C2_Init+0x74>)
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <MX_I2C2_Init+0x7c>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_I2C2_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_I2C2_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_I2C2_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_I2C2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_I2C2_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_I2C2_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_I2C2_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_I2C2_Init+0x74>)
 800154c:	f001 f9b8 	bl	80028c0 <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001556:	f000 f999 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <MX_I2C2_Init+0x74>)
 800155e:	f002 f82f 	bl	80035c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 f990 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_I2C2_Init+0x74>)
 8001570:	f002 f871 	bl	8003656 <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 f987 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000094 	.word	0x20000094
 8001588:	40005800 	.word	0x40005800
 800158c:	2000090e 	.word	0x2000090e

08001590 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_SPI2_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <MX_SPI2_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_SPI2_Init+0x74>)
 800159c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_SPI2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_SPI2_Init+0x74>)
 80015aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_SPI2_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_SPI2_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_SPI2_Init+0x74>)
 80015be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_SPI2_Init+0x74>)
 80015c6:	2208      	movs	r2, #8
 80015c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_SPI2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_SPI2_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_SPI2_Init+0x74>)
 80015de:	2207      	movs	r2, #7
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_SPI2_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_SPI2_Init+0x74>)
 80015ea:	2208      	movs	r2, #8
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_SPI2_Init+0x74>)
 80015f0:	f003 fc76 	bl	8004ee0 <HAL_SPI_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 f947 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000e8 	.word	0x200000e8
 8001608:	40003800 	.word	0x40003800

0800160c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <MX_USART2_UART_Init+0x5c>)
 8001614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001618:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800161c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001650:	f003 ffca 	bl	80055e8 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800165a:	f000 f917 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000014c 	.word	0x2000014c
 8001668:	40004400 	.word	0x40004400

0800166c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <MX_USART3_UART_Init+0x5c>)
 8001674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001678:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800167c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 80016b0:	f003 ff9a 	bl	80055e8 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 f8e7 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200001d4 	.word	0x200001d4
 80016c8:	40004800 	.word	0x40004800

080016cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b46      	ldr	r3, [pc, #280]	; (80017fc <MX_GPIO_Init+0x130>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a45      	ldr	r2, [pc, #276]	; (80017fc <MX_GPIO_Init+0x130>)
 80016e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <MX_GPIO_Init+0x130>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4b40      	ldr	r3, [pc, #256]	; (80017fc <MX_GPIO_Init+0x130>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <MX_GPIO_Init+0x130>)
 8001700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <MX_GPIO_Init+0x130>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <MX_GPIO_Init+0x130>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a39      	ldr	r2, [pc, #228]	; (80017fc <MX_GPIO_Init+0x130>)
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <MX_GPIO_Init+0x130>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <MX_GPIO_Init+0x130>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a33      	ldr	r2, [pc, #204]	; (80017fc <MX_GPIO_Init+0x130>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <MX_GPIO_Init+0x130>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001748:	482d      	ldr	r0, [pc, #180]	; (8001800 <MX_GPIO_Init+0x134>)
 800174a:	f001 f889 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f001 f882 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 800175c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001762:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4824      	ldr	r0, [pc, #144]	; (8001804 <MX_GPIO_Init+0x138>)
 8001774:	f000 feea 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8001778:	2301      	movs	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001782:	2301      	movs	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f000 fedc 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4814      	ldr	r0, [pc, #80]	; (8001800 <MX_GPIO_Init+0x134>)
 80017ae:	f000 fecd 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 80017b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f000 febd 	bl	800254c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2006      	movs	r0, #6
 80017d8:	f000 fe81 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017dc:	2006      	movs	r0, #6
 80017de:	f000 fe9a 	bl	8002516 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2028      	movs	r0, #40	; 0x28
 80017e8:	f000 fe79 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ec:	2028      	movs	r0, #40	; 0x28
 80017ee:	f000 fe92 	bl	8002516 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000400 	.word	0x48000400
 8001804:	48000800 	.word	0x48000800

08001808 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
	printf("interupt!\r\n");
 8001812:	4818      	ldr	r0, [pc, #96]	; (8001874 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001814:	f004 fbc4 	bl	8005fa0 <puts>
	if(GPIO_Pin == LEFT_Pin){
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800181e:	d106      	bne.n	800182e <HAL_GPIO_EXTI_Callback+0x26>
		key = left;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_GPIO_EXTI_Callback+0x70>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
		printf("left clicked\r\n");
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <HAL_GPIO_EXTI_Callback+0x74>)
 8001828:	f004 fbba 	bl	8005fa0 <puts>
	}
	else if(GPIO_Pin == MIDDLE_Pin){
		key = down;
		printf("down clicked\r\n");
	}
}
 800182c:	e01e      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == TOP_Pin){
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001834:	d106      	bne.n	8001844 <HAL_GPIO_EXTI_Callback+0x3c>
		key = up;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_GPIO_EXTI_Callback+0x70>)
 8001838:	2202      	movs	r2, #2
 800183a:	701a      	strb	r2, [r3, #0]
		printf("up clicked\r\n");
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <HAL_GPIO_EXTI_Callback+0x78>)
 800183e:	f004 fbaf 	bl	8005fa0 <puts>
}
 8001842:	e013      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == RIGHT_Pin){
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800184a:	d106      	bne.n	800185a <HAL_GPIO_EXTI_Callback+0x52>
		key = right;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_GPIO_EXTI_Callback+0x70>)
 800184e:	2203      	movs	r2, #3
 8001850:	701a      	strb	r2, [r3, #0]
		printf("right clicked\r\n");
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001854:	f004 fba4 	bl	8005fa0 <puts>
}
 8001858:	e008      	b.n	800186c <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == MIDDLE_Pin){
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x64>
		key = down;
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_GPIO_EXTI_Callback+0x70>)
 8001862:	2204      	movs	r2, #4
 8001864:	701a      	strb	r2, [r3, #0]
		printf("down clicked\r\n");
 8001866:	4808      	ldr	r0, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_Callback+0x80>)
 8001868:	f004 fb9a 	bl	8005fa0 <puts>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	080075f8 	.word	0x080075f8
 8001878:	20000274 	.word	0x20000274
 800187c:	08007604 	.word	0x08007604
 8001880:	08007614 	.word	0x08007614
 8001884:	08007620 	.word	0x08007620
 8001888:	08007630 	.word	0x08007630

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_I2C_MspInit+0x7c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d127      	bne.n	8001952 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_I2C_MspInit+0x80>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a16      	ldr	r2, [pc, #88]	; (8001960 <HAL_I2C_MspInit+0x80>)
 8001908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_I2C_MspInit+0x80>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800191a:	2303      	movs	r3, #3
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191e:	2312      	movs	r3, #18
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800192a:	2304      	movs	r3, #4
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <HAL_I2C_MspInit+0x84>)
 8001936:	f000 fe09 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_I2C_MspInit+0x80>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_I2C_MspInit+0x80>)
 8001940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_I2C_MspInit+0x80>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40005800 	.word	0x40005800
 8001960:	40021000 	.word	0x40021000
 8001964:	48001400 	.word	0x48001400

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_SPI_MspInit+0x7c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d128      	bne.n	80019dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_SPI_MspInit+0x80>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <HAL_SPI_MspInit+0x80>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HAL_SPI_MspInit+0x80>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_SPI_MspInit+0x80>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <HAL_SPI_MspInit+0x80>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ac:	6153      	str	r3, [r2, #20]
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_SPI_MspInit+0x80>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80019ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019cc:	2305      	movs	r3, #5
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_SPI_MspInit+0x84>)
 80019d8:	f000 fdb8 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40003800 	.word	0x40003800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000400 	.word	0x48000400

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2f      	ldr	r2, [pc, #188]	; (8001acc <HAL_UART_MspInit+0xdc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d129      	bne.n	8001a66 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a12:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	6153      	str	r3, [r2, #20]
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a42:	230c      	movs	r3, #12
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a52:	2307      	movs	r3, #7
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f000 fd74 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a64:	e02d      	b.n	8001ac2 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_UART_MspInit+0xe4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d128      	bne.n	8001ac2 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7a:	61d3      	str	r3, [r2, #28]
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a92:	6153      	str	r3, [r2, #20]
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_UART_MspInit+0xe0>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aa0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <HAL_UART_MspInit+0xe8>)
 8001abe:	f000 fd45 	bl	800254c <HAL_GPIO_Init>
}
 8001ac2:	bf00      	nop
 8001ac4:	3730      	adds	r7, #48	; 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40004400 	.word	0x40004400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40004800 	.word	0x40004800
 8001ad8:	48000400 	.word	0x48000400

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 fbba 	bl	80022a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 feab 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8001b42:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b46:	f000 fea3 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8001b4a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b4e:	f000 fe9f 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8001b52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b56:	f000 fe9b 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e00a      	b.n	8001b86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b70:	f3af 8000 	nop.w
 8001b74:	4601      	mov	r1, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	b2ca      	uxtb	r2, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbf0      	blt.n	8001b70 <_read+0x12>
  }

  return len;
 8001b8e:	687b      	ldr	r3, [r7, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_isatty>:

int _isatty(int file)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c30:	f004 f8fe 	bl	8005e30 <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	220c      	movs	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20004000 	.word	0x20004000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	20000280 	.word	0x20000280
 8001c68:	200002c8 	.word	0x200002c8

08001c6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <SystemInit+0x20>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <SystemInit+0x20>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8001c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f000 fdc8 	bl	8002830 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d017      	beq.n	8001cd6 <Displ_Select+0x46>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <Displ_Select+0x4c>)
 8001cae:	f000 fdd7 	bl	8002860 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <Displ_Select+0x50>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	490a      	ldr	r1, [pc, #40]	; (8001ce0 <Displ_Select+0x50>)
 8001cb8:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <Displ_Select+0x50>)
 8001cc2:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <Displ_Select+0x50>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f000 fdc5 	bl	8002860 <HAL_GPIO_WritePin>
		}
	}
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	40003800 	.word	0x40003800

08001ce4 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6039      	str	r1, [r7, #0]
 8001cec:	4611      	mov	r1, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	80bb      	strh	r3, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8001cfc:	bf00      	nop
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <Displ_Transmit+0x90>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0fa      	beq.n	8001cfe <Displ_Transmit+0x1a>

	Displ_Select();
 8001d08:	f7ff ffc2 	bl	8001c90 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f000 fda2 	bl	8002860 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d016      	beq.n	8001d50 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8001d22:	88bb      	ldrh	r3, [r7, #4]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e00b      	b.n	8001d48 <Displ_Transmit+0x64>
			*data32=__REV16(*data32);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	ba5b      	rev16	r3, r3
 8001d3a:	60bb      	str	r3, [r7, #8]
  return result;
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3304      	adds	r3, #4
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3ef      	bcc.n	8001d30 <Displ_Transmit+0x4c>
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <Displ_Transmit+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8001d56:	88ba      	ldrh	r2, [r7, #4]
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <Displ_Transmit+0x94>)
 8001d60:	f003 f969 	bl	8005036 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <Displ_Transmit+0x90>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000004 	.word	0x20000004
 8001d78:	200000e8 	.word	0x200000e8

08001d7c <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8001d86:	1df9      	adds	r1, r7, #7
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff ffa9 	bl	8001ce4 <Displ_Transmit>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	4613      	mov	r3, r2
 8001da6:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	2001      	movs	r0, #1
 8001db8:	f7ff ff94 	bl	8001ce4 <Displ_Transmit>
 8001dbc:	e000      	b.n	8001dc0 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8001dbe:	bf00      	nop
}
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	Displ_Select();
 8001dcc:	f7ff ff60 	bl	8001c90 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f000 fd41 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 fa7e 	bl	80022e0 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8001de4:	2201      	movs	r2, #1
 8001de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f000 fd37 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001df2:	2096      	movs	r0, #150	; 0x96
 8001df4:	f000 fa74 	bl	80022e0 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8001df8:	203a      	movs	r0, #58	; 0x3a
 8001dfa:	f7ff ffbf 	bl	8001d7c <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2101      	movs	r1, #1
 8001e02:	4810      	ldr	r0, [pc, #64]	; (8001e44 <ILI9XXX_Init+0x7c>)
 8001e04:	f7ff ffc9 	bl	8001d9a <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8001e08:	20b0      	movs	r0, #176	; 0xb0
 8001e0a:	f7ff ffb7 	bl	8001d7c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2101      	movs	r1, #1
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <ILI9XXX_Init+0x80>)
 8001e14:	f7ff ffc1 	bl	8001d9a <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8001e18:	20b0      	movs	r0, #176	; 0xb0
 8001e1a:	f7ff ffaf 	bl	8001d7c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2101      	movs	r1, #1
 8001e22:	4809      	ldr	r0, [pc, #36]	; (8001e48 <ILI9XXX_Init+0x80>)
 8001e24:	f7ff ffb9 	bl	8001d9a <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8001e28:	2011      	movs	r0, #17
 8001e2a:	f7ff ffa7 	bl	8001d7c <Displ_WriteCommand>
	HAL_Delay(120);
 8001e2e:	2078      	movs	r0, #120	; 0x78
 8001e30:	f000 fa56 	bl	80022e0 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8001e34:	2029      	movs	r0, #41	; 0x29
 8001e36:	f7ff ffa1 	bl	8001d7c <Displ_WriteCommand>
	HAL_Delay(5);
 8001e3a:	2005      	movs	r0, #5
 8001e3c:	f000 fa50 	bl	80022e0 <HAL_Delay>

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	08007640 	.word	0x08007640
 8001e48:	08007644 	.word	0x08007644

08001e4c <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4604      	mov	r4, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	80fb      	strh	r3, [r7, #6]
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80bb      	strh	r3, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]
 8001e66:	4613      	mov	r3, r2
 8001e68:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	061a      	lsls	r2, r3, #24
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e76:	431a      	orrs	r2, r3
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	0a12      	lsrs	r2, r2, #8
 8001e84:	b292      	uxth	r2, r2
 8001e86:	431a      	orrs	r2, r3
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <Displ_SetAddressWindow+0x90>)
 8001e8a:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8001e8c:	202a      	movs	r0, #42	; 0x2a
 8001e8e:	f7ff ff75 	bl	8001d7c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2104      	movs	r1, #4
 8001e96:	4811      	ldr	r0, [pc, #68]	; (8001edc <Displ_SetAddressWindow+0x90>)
 8001e98:	f7ff ff7f 	bl	8001d9a <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8001e9c:	883b      	ldrh	r3, [r7, #0]
 8001e9e:	061a      	lsls	r2, r3, #24
 8001ea0:	883b      	ldrh	r3, [r7, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	88bb      	ldrh	r3, [r7, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	88ba      	ldrh	r2, [r7, #4]
 8001eb4:	0a12      	lsrs	r2, r2, #8
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <Displ_SetAddressWindow+0x90>)
 8001ebc:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8001ebe:	202b      	movs	r0, #43	; 0x2b
 8001ec0:	f7ff ff5c 	bl	8001d7c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <Displ_SetAddressWindow+0x90>)
 8001eca:	f7ff ff66 	bl	8001d9a <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8001ece:	202c      	movs	r0, #44	; 0x2c
 8001ed0:	f7ff ff54 	bl	8001d7c <Displ_WriteCommand>
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}
 8001edc:	200002ac 	.word	0x200002ac

08001ee0 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef4:	f000 fcb4 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <Displ_Init+0x38>)
 8001f00:	f000 fcae 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8001f04:	f7ff ff60 	bl	8001dc8 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f806 	bl	8001f1c <Displ_Orientation>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	48000400 	.word	0x48000400

08001f1c <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d837      	bhi.n	8001f9c <Displ_Orientation+0x80>
 8001f2c:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <Displ_Orientation+0x18>)
 8001f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f32:	bf00      	nop
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f5b 	.word	0x08001f5b
 8001f3c:	08001f71 	.word	0x08001f71
 8001f40:	08001f87 	.word	0x08001f87
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <Displ_Orientation+0xa0>)
 8001f46:	2288      	movs	r2, #136	; 0x88
 8001f48:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <Displ_Orientation+0xa4>)
 8001f4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f50:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <Displ_Orientation+0xa8>)
 8001f54:	22f0      	movs	r2, #240	; 0xf0
 8001f56:	801a      	strh	r2, [r3, #0]
			break;
 8001f58:	e020      	b.n	8001f9c <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <Displ_Orientation+0xa0>)
 8001f5c:	22e8      	movs	r2, #232	; 0xe8
 8001f5e:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <Displ_Orientation+0xa4>)
 8001f62:	22f0      	movs	r2, #240	; 0xf0
 8001f64:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <Displ_Orientation+0xa8>)
 8001f68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f6c:	801a      	strh	r2, [r3, #0]
			break;
 8001f6e:	e015      	b.n	8001f9c <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <Displ_Orientation+0xa0>)
 8001f72:	2248      	movs	r2, #72	; 0x48
 8001f74:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <Displ_Orientation+0xa4>)
 8001f78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f7c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <Displ_Orientation+0xa8>)
 8001f80:	22f0      	movs	r2, #240	; 0xf0
 8001f82:	801a      	strh	r2, [r3, #0]
			break;
 8001f84:	e00a      	b.n	8001f9c <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <Displ_Orientation+0xa0>)
 8001f88:	2228      	movs	r2, #40	; 0x28
 8001f8a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <Displ_Orientation+0xa4>)
 8001f8e:	22f0      	movs	r2, #240	; 0xf0
 8001f90:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <Displ_Orientation+0xa8>)
 8001f94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f98:	801a      	strh	r2, [r3, #0]
			break;
 8001f9a:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8001f9c:	2036      	movs	r0, #54	; 0x36
 8001f9e:	f7ff feed 	bl	8001d7c <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <Displ_Orientation+0xa0>)
 8001fa8:	f7ff fef7 	bl	8001d9a <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <Displ_Orientation+0xac>)
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	7013      	strb	r3, [r2, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200002b0 	.word	0x200002b0
 8001fc0:	20000288 	.word	0x20000288
 8001fc4:	20000286 	.word	0x20000286
 8001fc8:	20000284 	.word	0x20000284

08001fcc <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b08b      	sub	sp, #44	; 0x2c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4623      	mov	r3, r4
 8001fdc:	80fb      	strh	r3, [r7, #6]
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80bb      	strh	r3, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	807b      	strh	r3, [r7, #2]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <Displ_FillArea+0x15c>)
 8001fee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	f280 8093 	bge.w	800211e <Displ_FillArea+0x152>
 8001ff8:	88bb      	ldrh	r3, [r7, #4]
 8001ffa:	4a4c      	ldr	r2, [pc, #304]	; (800212c <Displ_FillArea+0x160>)
 8001ffc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002000:	4293      	cmp	r3, r2
 8002002:	f280 808c 	bge.w	800211e <Displ_FillArea+0x152>
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8088 	beq.w	800211e <Displ_FillArea+0x152>
 800200e:	883b      	ldrh	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8084 	beq.w	800211e <Displ_FillArea+0x152>

	x1=x + w - 1;
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	4413      	add	r3, r2
 800201c:	3b01      	subs	r3, #1
 800201e:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8002020:	4b41      	ldr	r3, [pc, #260]	; (8002128 <Displ_FillArea+0x15c>)
 8002022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002026:	461a      	mov	r2, r3
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	4293      	cmp	r3, r2
 800202c:	d903      	bls.n	8002036 <Displ_FillArea+0x6a>
		x1=_width;
 800202e:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <Displ_FillArea+0x15c>)
 8002030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002034:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	883b      	ldrh	r3, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	3b01      	subs	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002040:	4b3a      	ldr	r3, [pc, #232]	; (800212c <Displ_FillArea+0x160>)
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	461a      	mov	r2, r3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	4293      	cmp	r3, r2
 800204c:	d903      	bls.n	8002056 <Displ_FillArea+0x8a>
		y1=_height;
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <Displ_FillArea+0x160>)
 8002050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002054:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8002056:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	431a      	orrs	r2, r3
 8002064:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 800206c:	88bb      	ldrh	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	3301      	adds	r3, #1
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	6a39      	ldr	r1, [r7, #32]
 8002078:	1a8a      	subs	r2, r1, r2
 800207a:	3201      	adds	r2, #1
 800207c:	fb02 f303 	mul.w	r3, r2, r3
 8002080:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <Displ_FillArea+0x164>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b07      	cmp	r3, #7
 800208c:	d804      	bhi.n	8002098 <Displ_FillArea+0xcc>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3301      	adds	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	e001      	b.n	800209c <Displ_FillArea+0xd0>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8002098:	2304      	movs	r3, #4
 800209a:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
 80020a0:	e007      	b.n	80020b2 <Displ_FillArea+0xe6>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1d1a      	adds	r2, r3, #4
 80020a6:	617a      	str	r2, [r7, #20]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	3301      	adds	r3, #1
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3f3      	bcc.n	80020a2 <Displ_FillArea+0xd6>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	88b9      	ldrh	r1, [r7, #4]
 80020c4:	88f8      	ldrh	r0, [r7, #6]
 80020c6:	f7ff fec1 	bl	8001e4c <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	e009      	b.n	80020ea <Displ_FillArea+0x11e>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <Displ_FillArea+0x164>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	2110      	movs	r1, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe5b 	bl	8001d9a <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	3301      	adds	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3f1      	bcc.n	80020d6 <Displ_FillArea+0x10a>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <Displ_FillArea+0x164>)
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	005a      	lsls	r2, r3, #1
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	f7ff fe49 	bl	8001d9a <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <Displ_FillArea+0x164>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a09      	ldr	r2, [pc, #36]	; (8002134 <Displ_FillArea+0x168>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <Displ_FillArea+0x14a>
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <Displ_FillArea+0x16c>)
 8002114:	e000      	b.n	8002118 <Displ_FillArea+0x14c>
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <Displ_FillArea+0x168>)
 8002118:	4a05      	ldr	r2, [pc, #20]	; (8002130 <Displ_FillArea+0x164>)
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e000      	b.n	8002120 <Displ_FillArea+0x154>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800211e:	bf00      	nop

}
 8002120:	372c      	adds	r7, #44	; 0x2c
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	20000286 	.word	0x20000286
 800212c:	20000288 	.word	0x20000288
 8002130:	20000008 	.word	0x20000008
 8002134:	2000028c 	.word	0x2000028c
 8002138:	2000029c 	.word	0x2000029c

0800213c <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af02      	add	r7, sp, #8
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
 8002146:	460b      	mov	r3, r1
 8002148:	80bb      	strh	r3, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <Displ_Pixel+0x44>)
 8002152:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002156:	4293      	cmp	r3, r2
 8002158:	da0e      	bge.n	8002178 <Displ_Pixel+0x3c>
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <Displ_Pixel+0x48>)
 800215e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002162:	4293      	cmp	r3, r2
 8002164:	da08      	bge.n	8002178 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8002166:	88b9      	ldrh	r1, [r7, #4]
 8002168:	88f8      	ldrh	r0, [r7, #6]
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	2201      	movs	r2, #1
 8002172:	f7ff ff2b 	bl	8001fcc <Displ_FillArea>
 8002176:	e000      	b.n	800217a <Displ_Pixel+0x3e>
        return;
 8002178:	bf00      	nop

}
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000286 	.word	0x20000286
 8002184:	20000288 	.word	0x20000288

08002188 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af02      	add	r7, sp, #8
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <Displ_CLS+0x30>)
 8002194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <Displ_CLS+0x34>)
 800219c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a0:	b299      	uxth	r1, r3
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	460b      	mov	r3, r1
 80021a8:	2100      	movs	r1, #0
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff ff0e 	bl	8001fcc <Displ_FillArea>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000286 	.word	0x20000286
 80021bc:	20000288 	.word	0x20000288

080021c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021c4:	f7ff fd52 	bl	8001c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <LoopForever+0x6>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	; (8002200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <LoopForever+0xe>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	; (800220c <LoopForever+0x16>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ee:	f003 fe25 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021f2:	f7ff f839 	bl	8001268 <main>

080021f6 <LoopForever>:

LoopForever:
    b LoopForever
 80021f6:	e7fe      	b.n	80021f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002204:	08007790 	.word	0x08007790
  ldr r2, =_sbss
 8002208:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800220c:	200002c8 	.word	0x200002c8

08002210 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC1_IRQHandler>
	...

08002214 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_Init+0x28>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_Init+0x28>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 f94f 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222a:	200f      	movs	r0, #15
 800222c:	f000 f808 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002230:	f7ff fb32 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000

08002240 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x54>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x58>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002256:	fbb3 f3f1 	udiv	r3, r3, r1
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f967 	bl	8002532 <HAL_SYSTICK_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00e      	b.n	800228c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d80a      	bhi.n	800228a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002274:	2200      	movs	r2, #0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f000 f92f 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_InitTick+0x5c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000000 	.word	0x20000000
 8002298:	20000010 	.word	0x20000010
 800229c:	2000000c 	.word	0x2000000c

080022a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000010 	.word	0x20000010
 80022c4:	200002b4 	.word	0x200002b4

080022c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200002b4 	.word	0x200002b4

080022e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff ffee 	bl	80022c8 <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_Delay+0x44>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffde 	bl	80022c8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000010 	.word	0x20000010

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <__NVIC_EnableIRQ+0x38>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f7ff ff8e 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff29 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff3e 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff8e 	bl	800241c <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff31 	bl	800238c <__NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffa2 	bl	8002484 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e14e      	b.n	80027fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8140 	beq.w	80027f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d005      	beq.n	800258c <HAL_GPIO_Init+0x40>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d130      	bne.n	80025ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c2:	2201      	movs	r2, #1
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0201 	and.w	r2, r3, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d017      	beq.n	800262a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d123      	bne.n	800267e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	6939      	ldr	r1, [r7, #16]
 800267a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 809a 	beq.w	80027f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c0:	4b55      	ldr	r3, [pc, #340]	; (8002818 <HAL_GPIO_Init+0x2cc>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_GPIO_Init+0x2cc>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b52      	ldr	r3, [pc, #328]	; (8002818 <HAL_GPIO_Init+0x2cc>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026d8:	4a50      	ldr	r2, [pc, #320]	; (800281c <HAL_GPIO_Init+0x2d0>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002702:	d013      	beq.n	800272c <HAL_GPIO_Init+0x1e0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a46      	ldr	r2, [pc, #280]	; (8002820 <HAL_GPIO_Init+0x2d4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00d      	beq.n	8002728 <HAL_GPIO_Init+0x1dc>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a45      	ldr	r2, [pc, #276]	; (8002824 <HAL_GPIO_Init+0x2d8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x1d8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a44      	ldr	r2, [pc, #272]	; (8002828 <HAL_GPIO_Init+0x2dc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_GPIO_Init+0x1d4>
 800271c:	2303      	movs	r3, #3
 800271e:	e006      	b.n	800272e <HAL_GPIO_Init+0x1e2>
 8002720:	2305      	movs	r3, #5
 8002722:	e004      	b.n	800272e <HAL_GPIO_Init+0x1e2>
 8002724:	2302      	movs	r3, #2
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x1e2>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_GPIO_Init+0x1e2>
 800272c:	2300      	movs	r3, #0
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	f002 0203 	and.w	r2, r2, #3
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	4093      	lsls	r3, r2
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800273e:	4937      	ldr	r1, [pc, #220]	; (800281c <HAL_GPIO_Init+0x2d0>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <HAL_GPIO_Init+0x2e0>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002770:	4a2e      	ldr	r2, [pc, #184]	; (800282c <HAL_GPIO_Init+0x2e0>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_GPIO_Init+0x2e0>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_GPIO_Init+0x2e0>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a0:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_GPIO_Init+0x2e0>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_GPIO_Init+0x2e0>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_GPIO_Init+0x2e0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_GPIO_Init+0x2e0>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3301      	adds	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	f47f aea9 	bne.w	800255c <HAL_GPIO_Init+0x10>
  }
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000
 800281c:	40010000 	.word	0x40010000
 8002820:	48000400 	.word	0x48000400
 8002824:	48000800 	.word	0x48000800
 8002828:	48000c00 	.word	0x48000c00
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e001      	b.n	8002852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800287c:	e002      	b.n	8002884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028a6:	4a05      	ldr	r2, [pc, #20]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe ffaa 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e081      	b.n	80029d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fffa 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002910:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002920:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e006      	b.n	8002948 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002946:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d104      	bne.n	800295a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800297c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	460b      	mov	r3, r1
 80029f4:	813b      	strh	r3, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	f040 80f9 	bne.w	8002bfa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_I2C_Mem_Write+0x34>
 8002a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0ed      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Mem_Write+0x4e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0e6      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a36:	f7ff fc47 	bl	80022c8 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fbcd 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0d1      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2221      	movs	r2, #33	; 0x21
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a80:	88f8      	ldrh	r0, [r7, #6]
 8002a82:	893a      	ldrh	r2, [r7, #8]
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fadd 	bl	8003050 <I2C_RequestMemoryWrite>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0a9      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2bff      	cmp	r3, #255	; 0xff
 8002ab0:	d90e      	bls.n	8002ad0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	22ff      	movs	r2, #255	; 0xff
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	8979      	ldrh	r1, [r7, #10]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fd47 	bl	800355c <I2C_TransferConfig>
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fd36 	bl	800355c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fbc6 	bl	8003286 <I2C_WaitOnTXISFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e07b      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d034      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x1c8>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d130      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fb49 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04d      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2bff      	cmp	r3, #255	; 0xff
 8002b68:	d90e      	bls.n	8002b88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	; 0xff
 8002b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fceb 	bl	800355c <I2C_TransferConfig>
 8002b86:	e00f      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	8979      	ldrh	r1, [r7, #10]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fcda 	bl	800355c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d19e      	bne.n	8002af0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fbac 	bl	8003314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e01a      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_I2C_Mem_Write+0x224>)
 8002bda:	400b      	ands	r3, r1
 8002bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
  }
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	fe00e800 	.word	0xfe00e800

08002c08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	f040 80fd 	bne.w	8002e2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x34>
 8002c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0f1      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_Mem_Read+0x4e>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e0ea      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c5e:	f7ff fb33 	bl	80022c8 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2319      	movs	r3, #25
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fab9 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0d5      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2222      	movs	r2, #34	; 0x22
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2240      	movs	r2, #64	; 0x40
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca8:	88f8      	ldrh	r0, [r7, #6]
 8002caa:	893a      	ldrh	r2, [r7, #8]
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fa1d 	bl	80030f8 <I2C_RequestMemoryRead>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0ad      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d90e      	bls.n	8002cf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	22ff      	movs	r2, #255	; 0xff
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <HAL_I2C_Mem_Read+0x22c>)
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fc33 	bl	800355c <I2C_TransferConfig>
 8002cf6:	e00f      	b.n	8002d18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <HAL_I2C_Mem_Read+0x22c>)
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fc22 	bl	800355c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2104      	movs	r1, #4
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fa60 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07c      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d034      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x1d0>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d130      	bne.n	8002dd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fa31 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e04d      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d90e      	bls.n	8002db8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fbd3 	bl	800355c <I2C_TransferConfig>
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fbc2 	bl	800355c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d19a      	bne.n	8002d18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa94 	bl	8003314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e01a      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_I2C_Mem_Read+0x230>)
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	80002400 	.word	0x80002400
 8002e38:	fe00e800 	.word	0xfe00e800

08002e3c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	f040 80f3 	bne.w	8003044 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0e9      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_I2C_IsDeviceReady+0x44>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0e2      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2224      	movs	r2, #36	; 0x24
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <HAL_I2C_IsDeviceReady+0x72>
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eac:	e006      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x80>
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ec2:	f7ff fa01 	bl	80022c8 <HAL_GetTick>
 8002ec6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ef4:	e034      	b.n	8002f60 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d01a      	beq.n	8002f34 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7ff f9e3 	bl	80022c8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <HAL_I2C_IsDeviceReady+0xd8>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10f      	bne.n	8002f34 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e088      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	bf0c      	ite	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	2300      	movne	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_I2C_IsDeviceReady+0x130>
 8002f66:	7fbb      	ldrb	r3, [r7, #30]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0c4      	beq.n	8002ef6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d01a      	beq.n	8002fb0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2120      	movs	r1, #32
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f92f 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e058      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e04a      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2120      	movs	r1, #32
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f914 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e03d      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d118      	bne.n	8003014 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ff0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f8f3 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e01c      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2220      	movs	r2, #32
 8003012:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	f63f af39 	bhi.w	8002e96 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	460b      	mov	r3, r1
 8003064:	813b      	strh	r3, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <I2C_RequestMemoryWrite+0xa4>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fa6f 	bl	800355c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	69b9      	ldr	r1, [r7, #24]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8ff 	bl	8003286 <I2C_WaitOnTXISFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e02c      	b.n	80030ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003098:	893b      	ldrh	r3, [r7, #8]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
 80030a2:	e015      	b.n	80030d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030a4:	893b      	ldrh	r3, [r7, #8]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	69b9      	ldr	r1, [r7, #24]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8e5 	bl	8003286 <I2C_WaitOnTXISFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e012      	b.n	80030ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c6:	893b      	ldrh	r3, [r7, #8]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f884 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	80002000 	.word	0x80002000

080030f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	4608      	mov	r0, r1
 8003102:	4611      	mov	r1, r2
 8003104:	461a      	mov	r2, r3
 8003106:	4603      	mov	r3, r0
 8003108:	817b      	strh	r3, [r7, #10]
 800310a:	460b      	mov	r3, r1
 800310c:	813b      	strh	r3, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	8979      	ldrh	r1, [r7, #10]
 8003118:	4b20      	ldr	r3, [pc, #128]	; (800319c <I2C_RequestMemoryRead+0xa4>)
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fa1c 	bl	800355c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f8ac 	bl	8003286 <I2C_WaitOnTXISFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e02c      	b.n	8003192 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d105      	bne.n	800314a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800313e:	893b      	ldrh	r3, [r7, #8]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
 8003148:	e015      	b.n	8003176 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	b29b      	uxth	r3, r3
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f892 	bl	8003286 <I2C_WaitOnTXISFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e012      	b.n	8003192 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800316c:	893b      	ldrh	r3, [r7, #8]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2200      	movs	r2, #0
 800317e:	2140      	movs	r1, #64	; 0x40
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f831 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	80002000 	.word	0x80002000

080031a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d103      	bne.n	80031be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d007      	beq.n	80031dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	619a      	str	r2, [r3, #24]
  }
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f8:	e031      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d02d      	beq.n	800325e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7ff f861 	bl	80022c8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d122      	bne.n	800325e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d113      	bne.n	800325e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00f      	b.n	800327e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d0be      	beq.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003292:	e033      	b.n	80032fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f87f 	bl	800339c <I2C_IsErrorOccurred>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e031      	b.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d025      	beq.n	80032fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7ff f80a 	bl	80022c8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d11a      	bne.n	80032fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d013      	beq.n	80032fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e007      	b.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d1c4      	bne.n	8003294 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003320:	e02f      	b.n	8003382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f838 	bl	800339c <I2C_IsErrorOccurred>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02d      	b.n	8003392 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fe ffc7 	bl	80022c8 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11a      	bne.n	8003382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d013      	beq.n	8003382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e007      	b.n	8003392 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d1c8      	bne.n	8003322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d068      	beq.n	800349a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2210      	movs	r2, #16
 80033ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d0:	e049      	b.n	8003466 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d045      	beq.n	8003466 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe ff75 	bl	80022c8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_IsErrorOccurred+0x54>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d13a      	bne.n	8003466 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003402:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800340e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003412:	d121      	bne.n	8003458 <I2C_IsErrorOccurred+0xbc>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341a:	d01d      	beq.n	8003458 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b20      	cmp	r3, #32
 8003420:	d01a      	beq.n	8003458 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003430:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003432:	f7fe ff49 	bl	80022c8 <HAL_GetTick>
 8003436:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003438:	e00e      	b.n	8003458 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800343a:	f7fe ff45 	bl	80022c8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b19      	cmp	r3, #25
 8003446:	d907      	bls.n	8003458 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	f043 0320 	orr.w	r3, r3, #32
 800344e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003456:	e006      	b.n	8003466 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b20      	cmp	r3, #32
 8003464:	d1e9      	bne.n	800343a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b20      	cmp	r3, #32
 8003472:	d003      	beq.n	800347c <I2C_IsErrorOccurred+0xe0>
 8003474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0aa      	beq.n	80033d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800347c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003480:	2b00      	cmp	r3, #0
 8003482:	d103      	bne.n	800348c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2220      	movs	r2, #32
 800348a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f043 0308 	orr.w	r3, r3, #8
 80034d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	f043 0302 	orr.w	r3, r3, #2
 80034f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01c      	beq.n	800354a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff fe45 	bl	80031a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <I2C_IsErrorOccurred+0x1bc>)
 8003522:	400b      	ands	r3, r1
 8003524:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800354a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800354e:	4618      	mov	r0, r3
 8003550:	3728      	adds	r7, #40	; 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	fe00e800 	.word	0xfe00e800

0800355c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	4613      	mov	r3, r2
 800356c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003574:	7a7b      	ldrb	r3, [r7, #9]
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800357c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	4313      	orrs	r3, r2
 8003586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800358a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	0d5b      	lsrs	r3, r3, #21
 8003596:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <I2C_TransferConfig+0x60>)
 800359c:	430b      	orrs	r3, r1
 800359e:	43db      	mvns	r3, r3
 80035a0:	ea02 0103 	and.w	r1, r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	03ff63ff 	.word	0x03ff63ff

080035c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d138      	bne.n	8003648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e032      	b.n	800364a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6819      	ldr	r1, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	d139      	bne.n	80036e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003676:	2302      	movs	r3, #2
 8003678:	e033      	b.n	80036e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2224      	movs	r2, #36	; 0x24
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003700:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f001 b823 	b.w	800475c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 817d 	beq.w	8003a26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800372c:	4bbc      	ldr	r3, [pc, #752]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b04      	cmp	r3, #4
 8003736:	d00c      	beq.n	8003752 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003738:	4bb9      	ldr	r3, [pc, #740]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d15c      	bne.n	80037fe <HAL_RCC_OscConfig+0x10e>
 8003744:	4bb6      	ldr	r3, [pc, #728]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003750:	d155      	bne.n	80037fe <HAL_RCC_OscConfig+0x10e>
 8003752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003756:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003766:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x94>
 800377e:	4ba8      	ldr	r3, [pc, #672]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e015      	b.n	80037b0 <HAL_RCC_OscConfig+0xc0>
 8003784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003788:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80037ac:	4b9c      	ldr	r3, [pc, #624]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80037b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80037bc:	fa92 f2a2 	rbit	r2, r2
 80037c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80037c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f002 021f 	and.w	r2, r2, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 811f 	beq.w	8003a24 <HAL_RCC_OscConfig+0x334>
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 8116 	bne.w	8003a24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f000 bfaf 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x12e>
 8003810:	4b83      	ldr	r3, [pc, #524]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a82      	ldr	r2, [pc, #520]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e036      	b.n	800388c <HAL_RCC_OscConfig+0x19c>
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x158>
 800382e:	4b7c      	ldr	r3, [pc, #496]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7b      	ldr	r2, [pc, #492]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b79      	ldr	r3, [pc, #484]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a78      	ldr	r2, [pc, #480]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e021      	b.n	800388c <HAL_RCC_OscConfig+0x19c>
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x184>
 800385a:	4b71      	ldr	r3, [pc, #452]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a70      	ldr	r2, [pc, #448]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b6e      	ldr	r3, [pc, #440]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6d      	ldr	r2, [pc, #436]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0x19c>
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 800387a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a66      	ldr	r2, [pc, #408]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800388c:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f023 020f 	bic.w	r2, r3, #15
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	495f      	ldr	r1, [pc, #380]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d059      	beq.n	800396a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fd07 	bl	80022c8 <HAL_GetTick>
 80038ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fd02 	bl	80022c8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b64      	cmp	r3, #100	; 0x64
 80038ce:	d902      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f000 bf43 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
 80038d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80038ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_RCC_OscConfig+0x218>
 8003902:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e015      	b.n	8003934 <HAL_RCC_OscConfig+0x244>
 8003908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800390c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800391c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003920:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003924:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003930:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003938:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800393c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003940:	fa92 f2a2 	rbit	r2, r2
 8003944:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003948:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f042 0220 	orr.w	r2, r2, #32
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	f002 021f 	and.w	r2, r2, #31
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ab      	beq.n	80038c0 <HAL_RCC_OscConfig+0x1d0>
 8003968:	e05d      	b.n	8003a26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe fcad 	bl	80022c8 <HAL_GetTick>
 800396e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe fca8 	bl	80022c8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b64      	cmp	r3, #100	; 0x64
 8003982:	d902      	bls.n	800398a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	f000 bee9 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
 800398a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800399e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0x2cc>
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e015      	b.n	80039e8 <HAL_RCC_OscConfig+0x2f8>
 80039bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_RCC_OscConfig+0x330>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80039f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80039f4:	fa92 f2a2 	rbit	r2, r2
 80039f8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80039fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f002 021f 	and.w	r2, r2, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ab      	bne.n	8003974 <HAL_RCC_OscConfig+0x284>
 8003a1c:	e003      	b.n	8003a26 <HAL_RCC_OscConfig+0x336>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 817d 	beq.w	8003d36 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a3c:	4ba6      	ldr	r3, [pc, #664]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a48:	4ba3      	ldr	r3, [pc, #652]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d172      	bne.n	8003b3a <HAL_RCC_OscConfig+0x44a>
 8003a54:	4ba0      	ldr	r3, [pc, #640]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d16c      	bne.n	8003b3a <HAL_RCC_OscConfig+0x44a>
 8003a60:	2302      	movs	r3, #2
 8003a62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003a72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x3a0>
 8003a8a:	4b93      	ldr	r3, [pc, #588]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	e013      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3c8>
 8003a90:	2302      	movs	r3, #2
 8003a92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003aa8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ab4:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003abe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ac2:	fa92 f2a2 	rbit	r2, r2
 8003ac6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003aca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ace:	fab2 f282 	clz	r2, r2
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	f042 0220 	orr.w	r2, r2, #32
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	f002 021f 	and.w	r2, r2, #31
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCC_OscConfig+0x410>
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f000 be2e 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	21f8      	movs	r1, #248	; 0xf8
 8003b16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b1e:	fa91 f1a1 	rbit	r1, r1
 8003b22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b2a:	fab1 f181 	clz	r1, r1
 8003b2e:	b2c9      	uxtb	r1, r1
 8003b30:	408b      	lsls	r3, r1
 8003b32:	4969      	ldr	r1, [pc, #420]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b38:	e0fd      	b.n	8003d36 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8088 	beq.w	8003c5c <HAL_RCC_OscConfig+0x56c>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003b5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	461a      	mov	r2, r3
 8003b74:	2301      	movs	r3, #1
 8003b76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fba6 	bl	80022c8 <HAL_GetTick>
 8003b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fe fba1 	bl	80022c8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	f000 bde2 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003baa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4d8>
 8003bc2:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	e013      	b.n	8003bf0 <HAL_RCC_OscConfig+0x500>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003bda:	2302      	movs	r3, #2
 8003bdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003be0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003bec:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003bf6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003bfa:	fa92 f2a2 	rbit	r2, r2
 8003bfe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003c02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c06:	fab2 f282 	clz	r2, r2
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	f042 0220 	orr.w	r2, r2, #32
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	f002 021f 	and.w	r2, r2, #31
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0af      	beq.n	8003b82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	21f8      	movs	r1, #248	; 0xf8
 8003c38:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c40:	fa91 f1a1 	rbit	r1, r1
 8003c44:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003c48:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003c4c:	fab1 f181 	clz	r1, r1
 8003c50:	b2c9      	uxtb	r1, r1
 8003c52:	408b      	lsls	r3, r1
 8003c54:	4920      	ldr	r1, [pc, #128]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
 8003c5a:	e06c      	b.n	8003d36 <HAL_RCC_OscConfig+0x646>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003c6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	461a      	mov	r2, r3
 8003c84:	2300      	movs	r3, #0
 8003c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe fb1e 	bl	80022c8 <HAL_GetTick>
 8003c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fe fb19 	bl	80022c8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d902      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	f000 bd5a 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d104      	bne.n	8003cdc <HAL_RCC_OscConfig+0x5ec>
 8003cd2:	4b01      	ldr	r3, [pc, #4]	; (8003cd8 <HAL_RCC_OscConfig+0x5e8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	e015      	b.n	8003d04 <HAL_RCC_OscConfig+0x614>
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cee:	2302      	movs	r3, #2
 8003cf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d00:	4bc8      	ldr	r3, [pc, #800]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2202      	movs	r2, #2
 8003d06:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003d0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d0e:	fa92 f2a2 	rbit	r2, r2
 8003d12:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003d16:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d1a:	fab2 f282 	clz	r2, r2
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f042 0220 	orr.w	r2, r2, #32
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	f002 021f 	and.w	r2, r2, #31
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ad      	bne.n	8003c92 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8110 	beq.w	8003f6c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d079      	beq.n	8003e50 <HAL_RCC_OscConfig+0x760>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4bab      	ldr	r3, [pc, #684]	; (8004028 <HAL_RCC_OscConfig+0x938>)
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	461a      	mov	r2, r3
 8003d82:	2301      	movs	r3, #1
 8003d84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d86:	f7fe fa9f 	bl	80022c8 <HAL_GetTick>
 8003d8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fe fa9a 	bl	80022c8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d902      	bls.n	8003da6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	f000 bcdb 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
 8003da6:	2302      	movs	r3, #2
 8003da8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	fa93 f2a3 	rbit	r2, r3
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de4:	2202      	movs	r2, #2
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003dfe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e00:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8003e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	6019      	str	r1, [r3, #0]
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	fa93 f1a3 	rbit	r1, r3
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e26:	6019      	str	r1, [r3, #0]
  return result;
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0a0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x6a0>
 8003e4e:	e08d      	b.n	8003f6c <HAL_RCC_OscConfig+0x87c>
 8003e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fa93 f2a3 	rbit	r2, r3
 8003e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e72:	601a      	str	r2, [r3, #0]
  return result;
 8003e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b68      	ldr	r3, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x938>)
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e92:	f7fe fa19 	bl	80022c8 <HAL_GetTick>
 8003e96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fe fa14 	bl	80022c8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	f000 bc55 	b.w	800475c <HAL_RCC_OscConfig+0x106c>
 8003eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003eba:	2202      	movs	r2, #2
 8003ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	fa93 f2a3 	rbit	r2, r3
 8003ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ede:	2202      	movs	r2, #2
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f02:	2202      	movs	r2, #2
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	fa93 f2a3 	rbit	r2, r3
 8003f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8003f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	6019      	str	r1, [r3, #0]
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	fa93 f1a3 	rbit	r1, r3
 8003f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f44:	6019      	str	r1, [r3, #0]
  return result;
 8003f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d197      	bne.n	8003e9c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 81a1 	beq.w	80042c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f88:	4b26      	ldr	r3, [pc, #152]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d116      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f94:	4b23      	ldr	r3, [pc, #140]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4a22      	ldr	r2, [pc, #136]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	61d3      	str	r3, [r2, #28]
 8003fa0:	4b20      	ldr	r3, [pc, #128]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003fba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_RCC_OscConfig+0x93c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11a      	bne.n	8004004 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fce:	4b17      	ldr	r3, [pc, #92]	; (800402c <HAL_RCC_OscConfig+0x93c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_RCC_OscConfig+0x93c>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fda:	f7fe f975 	bl	80022c8 <HAL_GetTick>
 8003fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe2:	e009      	b.n	8003ff8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe4:	f7fe f970 	bl	80022c8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b64      	cmp	r3, #100	; 0x64
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e3b1      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RCC_OscConfig+0x93c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10d      	bne.n	8004030 <HAL_RCC_OscConfig+0x940>
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a02      	ldr	r2, [pc, #8]	; (8004024 <HAL_RCC_OscConfig+0x934>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	e03c      	b.n	800409c <HAL_RCC_OscConfig+0x9ac>
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000
 8004028:	10908120 	.word	0x10908120
 800402c:	40007000 	.word	0x40007000
 8004030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10c      	bne.n	800405a <HAL_RCC_OscConfig+0x96a>
 8004040:	4bc1      	ldr	r3, [pc, #772]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4ac0      	ldr	r2, [pc, #768]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	6213      	str	r3, [r2, #32]
 800404c:	4bbe      	ldr	r3, [pc, #760]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4abd      	ldr	r2, [pc, #756]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004052:	f023 0304 	bic.w	r3, r3, #4
 8004056:	6213      	str	r3, [r2, #32]
 8004058:	e020      	b.n	800409c <HAL_RCC_OscConfig+0x9ac>
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b05      	cmp	r3, #5
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x994>
 800406a:	4bb7      	ldr	r3, [pc, #732]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4ab6      	ldr	r2, [pc, #728]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	6213      	str	r3, [r2, #32]
 8004076:	4bb4      	ldr	r3, [pc, #720]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	4ab3      	ldr	r2, [pc, #716]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6213      	str	r3, [r2, #32]
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0x9ac>
 8004084:	4bb0      	ldr	r3, [pc, #704]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4aaf      	ldr	r2, [pc, #700]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	6213      	str	r3, [r2, #32]
 8004090:	4bad      	ldr	r3, [pc, #692]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4aac      	ldr	r2, [pc, #688]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004096:	f023 0304 	bic.w	r3, r3, #4
 800409a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8081 	beq.w	80041b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fe f90b 	bl	80022c8 <HAL_GetTick>
 80040b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7fe f906 	bl	80022c8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e345      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
 80040d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040d8:	2202      	movs	r2, #2
 80040da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	fa93 f2a3 	rbit	r2, r3
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80040fc:	2202      	movs	r2, #2
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fa93 f2a3 	rbit	r2, r3
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004116:	601a      	str	r2, [r3, #0]
  return result;
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004120:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d102      	bne.n	800413c <HAL_RCC_OscConfig+0xa4c>
 8004136:	4b84      	ldr	r3, [pc, #528]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	e013      	b.n	8004164 <HAL_RCC_OscConfig+0xa74>
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004144:	2202      	movs	r2, #2
 8004146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	fa93 f2a3 	rbit	r2, r3
 8004156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	4b79      	ldr	r3, [pc, #484]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004168:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800416c:	2102      	movs	r1, #2
 800416e:	6011      	str	r1, [r2, #0]
 8004170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004174:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	fa92 f1a2 	rbit	r1, r2
 800417e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004182:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004186:	6011      	str	r1, [r2, #0]
  return result;
 8004188:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800418c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	fab2 f282 	clz	r2, r2
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	f002 021f 	and.w	r2, r2, #31
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f202 	lsl.w	r2, r1, r2
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d084      	beq.n	80040b8 <HAL_RCC_OscConfig+0x9c8>
 80041ae:	e07f      	b.n	80042b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b0:	f7fe f88a 	bl	80022c8 <HAL_GetTick>
 80041b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b8:	e00b      	b.n	80041d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fe f885 	bl	80022c8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e2c4      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
 80041d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041da:	2202      	movs	r2, #2
 80041dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	fa93 f2a3 	rbit	r2, r3
 80041ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80041fe:	2202      	movs	r2, #2
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	fa93 f2a3 	rbit	r2, r3
 8004210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004214:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004218:	601a      	str	r2, [r3, #0]
  return result;
 800421a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004222:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d102      	bne.n	800423e <HAL_RCC_OscConfig+0xb4e>
 8004238:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	e013      	b.n	8004266 <HAL_RCC_OscConfig+0xb76>
 800423e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004242:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004246:	2202      	movs	r2, #2
 8004248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	fa93 f2a3 	rbit	r2, r3
 8004258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	4b39      	ldr	r3, [pc, #228]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800426a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800426e:	2102      	movs	r1, #2
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004276:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	fa92 f1a2 	rbit	r1, r2
 8004280:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004284:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004288:	6011      	str	r1, [r2, #0]
  return result;
 800428a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800428e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	fab2 f282 	clz	r2, r2
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	f002 021f 	and.w	r2, r2, #31
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d184      	bne.n	80041ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b8:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8242 	beq.w	800475a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d6:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <HAL_RCC_OscConfig+0xc58>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	f000 8213 	beq.w	800470a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	f040 8162 	bne.w	80045ba <HAL_RCC_OscConfig+0xeca>
 80042f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80042fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004308:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	fa93 f2a3 	rbit	r2, r3
 8004312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004316:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800431a:	601a      	str	r2, [r3, #0]
  return result;
 800431c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004320:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004324:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004330:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	461a      	mov	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fd ffc4 	bl	80022c8 <HAL_GetTick>
 8004340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004344:	e00c      	b.n	8004360 <HAL_RCC_OscConfig+0xc70>
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd ffbc 	bl	80022c8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1fd      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800436c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	fa93 f2a3 	rbit	r2, r3
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004384:	601a      	str	r2, [r3, #0]
  return result;
 8004386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800438e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_OscConfig+0xcba>
 80043a4:	4bb0      	ldr	r3, [pc, #704]	; (8004668 <HAL_RCC_OscConfig+0xf78>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	e027      	b.n	80043fa <HAL_RCC_OscConfig+0xd0a>
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80043b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fa93 f2a3 	rbit	r2, r3
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80043d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f2a3 	rbit	r2, r3
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	4b9c      	ldr	r3, [pc, #624]	; (8004668 <HAL_RCC_OscConfig+0xf78>)
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004402:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004406:	6011      	str	r1, [r2, #0]
 8004408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	fa92 f1a2 	rbit	r1, r2
 8004416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800441a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800441e:	6011      	str	r1, [r2, #0]
  return result;
 8004420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004424:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f042 0220 	orr.w	r2, r2, #32
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f002 021f 	and.w	r2, r2, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d182      	bne.n	800434c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004446:	4b88      	ldr	r3, [pc, #544]	; (8004668 <HAL_RCC_OscConfig+0xf78>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800445a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	430b      	orrs	r3, r1
 8004468:	497f      	ldr	r1, [pc, #508]	; (8004668 <HAL_RCC_OscConfig+0xf78>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
 800446e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004472:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800447a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004480:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	fa93 f2a3 	rbit	r2, r3
 800448a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004492:	601a      	str	r2, [r3, #0]
  return result;
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800449c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	2301      	movs	r3, #1
 80044b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fd ff08 	bl	80022c8 <HAL_GetTick>
 80044b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044bc:	e009      	b.n	80044d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044be:	f7fd ff03 	bl	80022c8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e144      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80044da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	fa93 f2a3 	rbit	r2, r3
 80044ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80044f6:	601a      	str	r2, [r3, #0]
  return result;
 80044f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004500:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HAL_RCC_OscConfig+0xe2c>
 8004516:	4b54      	ldr	r3, [pc, #336]	; (8004668 <HAL_RCC_OscConfig+0xf78>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	e027      	b.n	800456c <HAL_RCC_OscConfig+0xe7c>
 800451c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004520:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	fa93 f2a3 	rbit	r2, r3
 8004538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800454a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004554:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004562:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCC_OscConfig+0xf78>)
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004570:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004574:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004578:	6011      	str	r1, [r2, #0]
 800457a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800457e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	fa92 f1a2 	rbit	r1, r2
 8004588:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800458c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004590:	6011      	str	r1, [r2, #0]
  return result;
 8004592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004596:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	fab2 f282 	clz	r2, r2
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	f042 0220 	orr.w	r2, r2, #32
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	f002 021f 	and.w	r2, r2, #31
 80045ac:	2101      	movs	r1, #1
 80045ae:	fa01 f202 	lsl.w	r2, r1, r2
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d082      	beq.n	80044be <HAL_RCC_OscConfig+0xdce>
 80045b8:	e0cf      	b.n	800475a <HAL_RCC_OscConfig+0x106a>
 80045ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80045c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	fa93 f2a3 	rbit	r2, r3
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045de:	601a      	str	r2, [r3, #0]
  return result;
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fd fe62 	bl	80022c8 <HAL_GetTick>
 8004604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004608:	e009      	b.n	800461e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460a:	f7fd fe5d 	bl	80022c8 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e09e      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
 800461e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004622:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800462a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004630:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	fa93 f2a3 	rbit	r2, r3
 800463a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004642:	601a      	str	r2, [r3, #0]
  return result;
 8004644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004648:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800464c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464e:	fab3 f383 	clz	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	d104      	bne.n	800466c <HAL_RCC_OscConfig+0xf7c>
 8004662:	4b01      	ldr	r3, [pc, #4]	; (8004668 <HAL_RCC_OscConfig+0xf78>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	e029      	b.n	80046bc <HAL_RCC_OscConfig+0xfcc>
 8004668:	40021000 	.word	0x40021000
 800466c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004670:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f2a3 	rbit	r2, r3
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800469a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	fa93 f2a3 	rbit	r2, r3
 80046ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_RCC_OscConfig+0x1078>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80046c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	fa92 f1a2 	rbit	r1, r2
 80046d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046e0:	6011      	str	r1, [r2, #0]
  return result;
 80046e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	fab2 f282 	clz	r2, r2
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f042 0220 	orr.w	r2, r2, #32
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	f002 021f 	and.w	r2, r2, #31
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d180      	bne.n	800460a <HAL_RCC_OscConfig+0xf1a>
 8004708:	e027      	b.n	800475a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e01e      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_RCC_OscConfig+0x1078>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004726:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800472a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	429a      	cmp	r2, r3
 800473c:	d10b      	bne.n	8004756 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800473e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004752:	429a      	cmp	r2, r3
 8004754:	d001      	beq.n	800475a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b09e      	sub	sp, #120	; 0x78
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e162      	b.n	8004a4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b90      	ldr	r3, [pc, #576]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d910      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b8d      	ldr	r3, [pc, #564]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 0207 	bic.w	r2, r3, #7
 800479a:	498b      	ldr	r1, [pc, #556]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b89      	ldr	r3, [pc, #548]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e14a      	b.n	8004a4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b82      	ldr	r3, [pc, #520]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	497f      	ldr	r1, [pc, #508]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80dc 	beq.w	8004998 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d13c      	bne.n	8004862 <HAL_RCC_ClockConfig+0xf6>
 80047e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d102      	bne.n	8004812 <HAL_RCC_ClockConfig+0xa6>
 800480c:	4b6f      	ldr	r3, [pc, #444]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	e00f      	b.n	8004832 <HAL_RCC_ClockConfig+0xc6>
 8004812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004816:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	667b      	str	r3, [r7, #100]	; 0x64
 8004820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
 8004826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800482e:	4b67      	ldr	r3, [pc, #412]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004836:	65ba      	str	r2, [r7, #88]	; 0x58
 8004838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800483a:	fa92 f2a2 	rbit	r2, r2
 800483e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004840:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004842:	fab2 f282 	clz	r2, r2
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	f042 0220 	orr.w	r2, r2, #32
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f002 021f 	and.w	r2, r2, #31
 8004852:	2101      	movs	r1, #1
 8004854:	fa01 f202 	lsl.w	r2, r1, r2
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d17b      	bne.n	8004956 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0f3      	b.n	8004a4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d13c      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x178>
 800486a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800486e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d102      	bne.n	8004894 <HAL_RCC_ClockConfig+0x128>
 800488e:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	e00f      	b.n	80048b4 <HAL_RCC_ClockConfig+0x148>
 8004894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004898:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489c:	fa93 f3a3 	rbit	r3, r3
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
 80048a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a6:	643b      	str	r3, [r7, #64]	; 0x40
 80048a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	4b46      	ldr	r3, [pc, #280]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80048ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048bc:	fa92 f2a2 	rbit	r2, r2
 80048c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c4:	fab2 f282 	clz	r2, r2
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	f042 0220 	orr.w	r2, r2, #32
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	f002 021f 	and.w	r2, r2, #31
 80048d4:	2101      	movs	r1, #1
 80048d6:	fa01 f202 	lsl.w	r2, r1, r2
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d13a      	bne.n	8004956 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0b2      	b.n	8004a4a <HAL_RCC_ClockConfig+0x2de>
 80048e4:	2302      	movs	r3, #2
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d102      	bne.n	800490c <HAL_RCC_ClockConfig+0x1a0>
 8004906:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e00d      	b.n	8004928 <HAL_RCC_ClockConfig+0x1bc>
 800490c:	2302      	movs	r3, #2
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	2302      	movs	r3, #2
 800491a:	623b      	str	r3, [r7, #32]
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	4b29      	ldr	r3, [pc, #164]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2202      	movs	r2, #2
 800492a:	61ba      	str	r2, [r7, #24]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	fa92 f2a2 	rbit	r2, r2
 8004932:	617a      	str	r2, [r7, #20]
  return result;
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	fab2 f282 	clz	r2, r2
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	f042 0220 	orr.w	r2, r2, #32
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	f002 021f 	and.w	r2, r2, #31
 8004946:	2101      	movs	r1, #1
 8004948:	fa01 f202 	lsl.w	r2, r1, r2
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e079      	b.n	8004a4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	491a      	ldr	r1, [pc, #104]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004968:	f7fd fcae 	bl	80022c8 <HAL_GetTick>
 800496c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fd fcaa 	bl	80022c8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	; 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e061      	b.n	8004a4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	4b11      	ldr	r3, [pc, #68]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 020c 	and.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	429a      	cmp	r2, r3
 8004996:	d1eb      	bne.n	8004970 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d214      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 0207 	bic.w	r2, r3, #7
 80049ae:	4906      	ldr	r1, [pc, #24]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e040      	b.n	8004a4a <HAL_RCC_ClockConfig+0x2de>
 80049c8:	40022000 	.word	0x40022000
 80049cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_RCC_ClockConfig+0x2e8>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	491a      	ldr	r1, [pc, #104]	; (8004a54 <HAL_RCC_ClockConfig+0x2e8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <HAL_RCC_ClockConfig+0x2e8>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4912      	ldr	r1, [pc, #72]	; (8004a54 <HAL_RCC_ClockConfig+0x2e8>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a0e:	f000 f829 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a12:	4601      	mov	r1, r0
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <HAL_RCC_ClockConfig+0x2e8>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1c:	22f0      	movs	r2, #240	; 0xf0
 8004a1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	fa92 f2a2 	rbit	r2, r2
 8004a26:	60fa      	str	r2, [r7, #12]
  return result;
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	fab2 f282 	clz	r2, r2
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	40d3      	lsrs	r3, r2
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x2ec>)
 8004a34:	5cd3      	ldrb	r3, [r2, r3]
 8004a36:	fa21 f303 	lsr.w	r3, r1, r3
 8004a3a:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <HAL_RCC_ClockConfig+0x2f0>)
 8004a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a3e:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <HAL_RCC_ClockConfig+0x2f4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fbfc 	bl	8002240 <HAL_InitTick>
  
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3778      	adds	r7, #120	; 0x78
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	08007648 	.word	0x08007648
 8004a5c:	20000000 	.word	0x20000000
 8004a60:	2000000c 	.word	0x2000000c

08004a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b08b      	sub	sp, #44	; 0x2c
 8004a68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a7e:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d002      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x30>
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d003      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x36>
 8004a92:	e03c      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a94:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a96:	623b      	str	r3, [r7, #32]
      break;
 8004a98:	e03c      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004aa0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004aa4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	fa92 f2a2 	rbit	r2, r2
 8004aac:	607a      	str	r2, [r7, #4]
  return result;
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	fab2 f282 	clz	r2, r2
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	40d3      	lsrs	r3, r2
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004aba:	5cd3      	ldrb	r3, [r2, r3]
 8004abc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	fa92 f2a2 	rbit	r2, r2
 8004ad0:	60fa      	str	r2, [r7, #12]
  return result;
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	fab2 f282 	clz	r2, r2
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	40d3      	lsrs	r3, r2
 8004adc:	4a14      	ldr	r2, [pc, #80]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ade:	5cd3      	ldrb	r3, [r2, r3]
 8004ae0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004aec:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	e004      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	623b      	str	r3, [r7, #32]
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b10:	623b      	str	r3, [r7, #32]
      break;
 8004b12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b14:	6a3b      	ldr	r3, [r7, #32]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	372c      	adds	r7, #44	; 0x2c
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	007a1200 	.word	0x007a1200
 8004b2c:	08007660 	.word	0x08007660
 8004b30:	08007670 	.word	0x08007670
 8004b34:	003d0900 	.word	0x003d0900

08004b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000000 	.word	0x20000000

08004b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b56:	f7ff ffef 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	fa92 f2a2 	rbit	r2, r2
 8004b70:	603a      	str	r2, [r7, #0]
  return result;
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	fab2 f282 	clz	r2, r2
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	40d3      	lsrs	r3, r2
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	08007658 	.word	0x08007658

08004b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004b9a:	f7ff ffcd 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b9e:	4601      	mov	r1, r0
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ba8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004bac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	fa92 f2a2 	rbit	r2, r2
 8004bb4:	603a      	str	r2, [r7, #0]
  return result;
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	fab2 f282 	clz	r2, r2
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	40d3      	lsrs	r3, r2
 8004bc0:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
 8004bc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	08007658 	.word	0x08007658

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b092      	sub	sp, #72	; 0x48
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80d4 	beq.w	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfc:	4b4e      	ldr	r3, [pc, #312]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10e      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b4b      	ldr	r3, [pc, #300]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4a4a      	ldr	r2, [pc, #296]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c12:	61d3      	str	r3, [r2, #28]
 8004c14:	4b48      	ldr	r3, [pc, #288]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d118      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c32:	4b42      	ldr	r3, [pc, #264]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a41      	ldr	r2, [pc, #260]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fb43 	bl	80022c8 <HAL_GetTick>
 8004c42:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	e008      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c46:	f7fd fb3f 	bl	80022c8 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b64      	cmp	r3, #100	; 0x64
 8004c52:	d901      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e13c      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c64:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8084 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d07c      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c84:	4b2c      	ldr	r3, [pc, #176]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b26      	ldr	r3, [pc, #152]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	461a      	mov	r2, r3
 8004cae:	2301      	movs	r3, #1
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cd6:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d04b      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fd faef 	bl	80022c8 <HAL_GetTick>
 8004cea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd faeb 	bl	80022c8 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0e6      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004d04:	2302      	movs	r3, #2
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	fa93 f3a3 	rbit	r3, r3
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	2302      	movs	r3, #2
 8004d12:	623b      	str	r3, [r7, #32]
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	61fb      	str	r3, [r7, #28]
  return result;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f043 0302 	orr.w	r3, r3, #2
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d108      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d32:	4b01      	ldr	r3, [pc, #4]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	e00d      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	10908100 	.word	0x10908100
 8004d44:	2302      	movs	r3, #2
 8004d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	4b62      	ldr	r3, [pc, #392]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2202      	movs	r2, #2
 8004d56:	613a      	str	r2, [r7, #16]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	fa92 f2a2 	rbit	r2, r2
 8004d5e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	fab2 f282 	clz	r2, r2
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	f002 021f 	and.w	r2, r2, #31
 8004d72:	2101      	movs	r1, #1
 8004d74:	fa01 f202 	lsl.w	r2, r1, r2
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0b7      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d7e:	4b57      	ldr	r3, [pc, #348]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4954      	ldr	r1, [pc, #336]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b50      	ldr	r3, [pc, #320]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4a4f      	ldr	r2, [pc, #316]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db0:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	f023 0203 	bic.w	r2, r3, #3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4947      	ldr	r1, [pc, #284]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d008      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dce:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f023 0210 	bic.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4940      	ldr	r1, [pc, #256]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dec:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	f023 0220 	bic.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	4938      	ldr	r1, [pc, #224]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0a:	4b34      	ldr	r3, [pc, #208]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	4931      	ldr	r1, [pc, #196]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e28:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4929      	ldr	r1, [pc, #164]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004e46:	4b25      	ldr	r3, [pc, #148]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4922      	ldr	r1, [pc, #136]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e64:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	491a      	ldr	r1, [pc, #104]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	4913      	ldr	r1, [pc, #76]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004ea0:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	490b      	ldr	r1, [pc, #44]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	4904      	ldr	r1, [pc, #16]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3748      	adds	r7, #72	; 0x48
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000

08004ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e09d      	b.n	800502e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d108      	bne.n	8004f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f02:	d009      	beq.n	8004f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]
 8004f0a:	e005      	b.n	8004f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc fd18 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f58:	d902      	bls.n	8004f60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e002      	b.n	8004f66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f6e:	d007      	beq.n	8004f80 <HAL_SPI_Init+0xa0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	ea42 0103 	orr.w	r1, r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 0204 	and.w	r2, r3, #4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ffc:	ea42 0103 	orr.w	r1, r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b088      	sub	sp, #32
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_SPI_Transmit+0x22>
 8005054:	2302      	movs	r3, #2
 8005056:	e15f      	b.n	8005318 <HAL_SPI_Transmit+0x2e2>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005060:	f7fd f932 	bl	80022c8 <HAL_GetTick>
 8005064:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	d002      	beq.n	800507c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005076:	2302      	movs	r3, #2
 8005078:	77fb      	strb	r3, [r7, #31]
    goto error;
 800507a:	e148      	b.n	800530e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_SPI_Transmit+0x52>
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800508c:	e13f      	b.n	800530e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2203      	movs	r2, #3
 8005092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d8:	d10f      	bne.n	80050fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d007      	beq.n	8005118 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005120:	d94f      	bls.n	80051c2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_Transmit+0xfa>
 800512a:	8afb      	ldrh	r3, [r7, #22]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d142      	bne.n	80051b6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	1c9a      	adds	r2, r3, #2
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005154:	e02f      	b.n	80051b6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d112      	bne.n	800518a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	881a      	ldrh	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	1c9a      	adds	r2, r3, #2
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005188:	e015      	b.n	80051b6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800518a:	f7fd f89d 	bl	80022c8 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d803      	bhi.n	80051a2 <HAL_SPI_Transmit+0x16c>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d102      	bne.n	80051a8 <HAL_SPI_Transmit+0x172>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80051b4:	e0ab      	b.n	800530e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ca      	bne.n	8005156 <HAL_SPI_Transmit+0x120>
 80051c0:	e080      	b.n	80052c4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Transmit+0x19a>
 80051ca:	8afb      	ldrh	r3, [r7, #22]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d174      	bne.n	80052ba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d912      	bls.n	8005200 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	881a      	ldrh	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	1c9a      	adds	r2, r3, #2
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b02      	subs	r3, #2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051fe:	e05c      	b.n	80052ba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005226:	e048      	b.n	80052ba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d12b      	bne.n	800528e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d912      	bls.n	8005266 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	881a      	ldrh	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b02      	subs	r3, #2
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005264:	e029      	b.n	80052ba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800528c:	e015      	b.n	80052ba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528e:	f7fd f81b 	bl	80022c8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d803      	bhi.n	80052a6 <HAL_SPI_Transmit+0x270>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d102      	bne.n	80052ac <HAL_SPI_Transmit+0x276>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80052b8:	e029      	b.n	800530e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1b1      	bne.n	8005228 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f947 	bl	800555c <SPI_EndRxTxTransaction>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e003      	b.n	800530e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005316:	7ffb      	ldrb	r3, [r7, #31]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005330:	f7fc ffca 	bl	80022c8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	4413      	add	r3, r2
 800533e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005340:	f7fc ffc2 	bl	80022c8 <HAL_GetTick>
 8005344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005346:	4b39      	ldr	r3, [pc, #228]	; (800542c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	015b      	lsls	r3, r3, #5
 800534c:	0d1b      	lsrs	r3, r3, #20
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	fb02 f303 	mul.w	r3, r2, r3
 8005354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005356:	e054      	b.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d050      	beq.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005360:	f7fc ffb2 	bl	80022c8 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	429a      	cmp	r2, r3
 800536e:	d902      	bls.n	8005376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d13d      	bne.n	80053f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538e:	d111      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005398:	d004      	beq.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d107      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d10f      	bne.n	80053de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e017      	b.n	8005422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3b01      	subs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	429a      	cmp	r2, r3
 800541e:	d19b      	bne.n	8005358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000000 	.word	0x20000000

08005430 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005442:	f7fc ff41 	bl	80022c8 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	4413      	add	r3, r2
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005452:	f7fc ff39 	bl	80022c8 <HAL_GetTick>
 8005456:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005460:	4b3d      	ldr	r3, [pc, #244]	; (8005558 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	00da      	lsls	r2, r3, #3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	0d1b      	lsrs	r3, r3, #20
 8005470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005478:	e060      	b.n	800553c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005480:	d107      	bne.n	8005492 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005490:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d050      	beq.n	800553c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800549a:	f7fc ff15 	bl	80022c8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d902      	bls.n	80054b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d13d      	bne.n	800552c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c8:	d111      	bne.n	80054ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d2:	d004      	beq.n	80054de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054dc:	d107      	bne.n	80054ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	d10f      	bne.n	8005518 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005516:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e010      	b.n	800554e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	3b01      	subs	r3, #1
 800553a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	429a      	cmp	r2, r3
 800554a:	d196      	bne.n	800547a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000

0800555c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff ff5b 	bl	8005430 <SPI_WaitFifoStateUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e027      	b.n	80055e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7ff fec0 	bl	8005320 <SPI_WaitFlagStateUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e014      	b.n	80055e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2200      	movs	r2, #0
 80055be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ff34 	bl	8005430 <SPI_WaitFifoStateUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e000      	b.n	80055e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e040      	b.n	800567c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc f9f0 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8b6 	bl	8005798 <UART_SetConfig>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e022      	b.n	800567c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9e0 	bl	8005a04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fa67 	bl	8005b48 <UART_CheckIdleState>
 800567a:	4603      	mov	r3, r0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005698:	2b20      	cmp	r3, #32
 800569a:	d178      	bne.n	800578e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_Transmit+0x24>
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e071      	b.n	8005790 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2221      	movs	r2, #33	; 0x21
 80056b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ba:	f7fc fe05 	bl	80022c8 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d8:	d108      	bne.n	80056ec <HAL_UART_Transmit+0x68>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e003      	b.n	80056f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056f4:	e030      	b.n	8005758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fac9 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e03c      	b.n	8005790 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005728:	b292      	uxth	r2, r2
 800572a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	3302      	adds	r3, #2
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e008      	b.n	8005746 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	b292      	uxth	r2, r2
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1c8      	bne.n	80056f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2200      	movs	r2, #0
 800576c:	2140      	movs	r1, #64	; 0x40
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fa92 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e005      	b.n	8005790 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <UART_SetConfig+0x254>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	6979      	ldr	r1, [r7, #20]
 80057cc:	430b      	orrs	r3, r1
 80057ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a78      	ldr	r2, [pc, #480]	; (80059f0 <UART_SetConfig+0x258>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d120      	bne.n	8005856 <UART_SetConfig+0xbe>
 8005814:	4b77      	ldr	r3, [pc, #476]	; (80059f4 <UART_SetConfig+0x25c>)
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b03      	cmp	r3, #3
 800581e:	d817      	bhi.n	8005850 <UART_SetConfig+0xb8>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x90>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005839 	.word	0x08005839
 800582c:	08005845 	.word	0x08005845
 8005830:	0800584b 	.word	0x0800584b
 8005834:	0800583f 	.word	0x0800583f
 8005838:	2300      	movs	r3, #0
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e01d      	b.n	800587a <UART_SetConfig+0xe2>
 800583e:	2302      	movs	r3, #2
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e01a      	b.n	800587a <UART_SetConfig+0xe2>
 8005844:	2304      	movs	r3, #4
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e017      	b.n	800587a <UART_SetConfig+0xe2>
 800584a:	2308      	movs	r3, #8
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e014      	b.n	800587a <UART_SetConfig+0xe2>
 8005850:	2310      	movs	r3, #16
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e011      	b.n	800587a <UART_SetConfig+0xe2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a67      	ldr	r2, [pc, #412]	; (80059f8 <UART_SetConfig+0x260>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d102      	bne.n	8005866 <UART_SetConfig+0xce>
 8005860:	2300      	movs	r3, #0
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e009      	b.n	800587a <UART_SetConfig+0xe2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a64      	ldr	r2, [pc, #400]	; (80059fc <UART_SetConfig+0x264>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d102      	bne.n	8005876 <UART_SetConfig+0xde>
 8005870:	2300      	movs	r3, #0
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e001      	b.n	800587a <UART_SetConfig+0xe2>
 8005876:	2310      	movs	r3, #16
 8005878:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005882:	d15a      	bne.n	800593a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005884:	7ffb      	ldrb	r3, [r7, #31]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d827      	bhi.n	80058da <UART_SetConfig+0x142>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0xf8>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058c5 	.word	0x080058c5
 800589c:	080058db 	.word	0x080058db
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058db 	.word	0x080058db
 80058a8:	080058db 	.word	0x080058db
 80058ac:	080058db 	.word	0x080058db
 80058b0:	080058d3 	.word	0x080058d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b4:	f7ff f94c 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 80058b8:	61b8      	str	r0, [r7, #24]
        break;
 80058ba:	e013      	b.n	80058e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7ff f96a 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 80058c0:	61b8      	str	r0, [r7, #24]
        break;
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c4:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <UART_SetConfig+0x268>)
 80058c6:	61bb      	str	r3, [r7, #24]
        break;
 80058c8:	e00c      	b.n	80058e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ca:	f7ff f8cb 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80058ce:	61b8      	str	r0, [r7, #24]
        break;
 80058d0:	e008      	b.n	80058e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	61bb      	str	r3, [r7, #24]
        break;
 80058d8:	e004      	b.n	80058e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	77bb      	strb	r3, [r7, #30]
        break;
 80058e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d074      	beq.n	80059d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	005a      	lsls	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	d916      	bls.n	8005934 <UART_SetConfig+0x19c>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d212      	bcs.n	8005934 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f023 030f 	bic.w	r3, r3, #15
 8005916:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	b29b      	uxth	r3, r3
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	b29a      	uxth	r2, r3
 8005924:	89fb      	ldrh	r3, [r7, #14]
 8005926:	4313      	orrs	r3, r2
 8005928:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	89fa      	ldrh	r2, [r7, #14]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e04f      	b.n	80059d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	77bb      	strb	r3, [r7, #30]
 8005938:	e04c      	b.n	80059d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800593a:	7ffb      	ldrb	r3, [r7, #31]
 800593c:	2b08      	cmp	r3, #8
 800593e:	d828      	bhi.n	8005992 <UART_SetConfig+0x1fa>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0x1b0>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800596d 	.word	0x0800596d
 800594c:	08005975 	.word	0x08005975
 8005950:	0800597d 	.word	0x0800597d
 8005954:	08005993 	.word	0x08005993
 8005958:	08005983 	.word	0x08005983
 800595c:	08005993 	.word	0x08005993
 8005960:	08005993 	.word	0x08005993
 8005964:	08005993 	.word	0x08005993
 8005968:	0800598b 	.word	0x0800598b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7ff f8f0 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8005970:	61b8      	str	r0, [r7, #24]
        break;
 8005972:	e013      	b.n	800599c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005974:	f7ff f90e 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 8005978:	61b8      	str	r0, [r7, #24]
        break;
 800597a:	e00f      	b.n	800599c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <UART_SetConfig+0x268>)
 800597e:	61bb      	str	r3, [r7, #24]
        break;
 8005980:	e00c      	b.n	800599c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7ff f86f 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8005986:	61b8      	str	r0, [r7, #24]
        break;
 8005988:	e008      	b.n	800599c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598e:	61bb      	str	r3, [r7, #24]
        break;
 8005990:	e004      	b.n	800599c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	77bb      	strb	r3, [r7, #30]
        break;
 800599a:	bf00      	nop
    }

    if (pclk != 0U)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d018      	beq.n	80059d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	085a      	lsrs	r2, r3, #1
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	441a      	add	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b0f      	cmp	r3, #15
 80059ba:	d909      	bls.n	80059d0 <UART_SetConfig+0x238>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c2:	d205      	bcs.n	80059d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	e001      	b.n	80059d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	efff69f3 	.word	0xefff69f3
 80059f0:	40013800 	.word	0x40013800
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40004400 	.word	0x40004400
 80059fc:	40004800 	.word	0x40004800
 8005a00:	007a1200 	.word	0x007a1200

08005a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01a      	beq.n	8005b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b02:	d10a      	bne.n	8005b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	605a      	str	r2, [r3, #4]
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b098      	sub	sp, #96	; 0x60
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b58:	f7fc fbb6 	bl	80022c8 <HAL_GetTick>
 8005b5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d12e      	bne.n	8005bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f88c 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d021      	beq.n	8005bca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e6      	bne.n	8005b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e062      	b.n	8005c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d149      	bne.n	8005c6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f856 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d03c      	beq.n	8005c6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30
 8005c12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e6      	bne.n	8005bf2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c44:	61fa      	str	r2, [r7, #28]
 8005c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	617b      	str	r3, [r7, #20]
   return(result);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e011      	b.n	8005c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3758      	adds	r7, #88	; 0x58
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca8:	e049      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d045      	beq.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fc fb09 	bl	80022c8 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e048      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d031      	beq.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d110      	bne.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2208      	movs	r2, #8
 8005cee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f838 	bl	8005d66 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e029      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d18:	d111      	bne.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f81e 	bl	8005d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e00f      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d0a6      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b095      	sub	sp, #84	; 0x54
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e6      	bne.n	8005d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e5      	bne.n	8005da0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d118      	bne.n	8005e0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f023 0310 	bic.w	r3, r3, #16
 8005df0:	647b      	str	r3, [r7, #68]	; 0x44
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6979      	ldr	r1, [r7, #20]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	613b      	str	r3, [r7, #16]
   return(result);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e6      	bne.n	8005ddc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e22:	bf00      	nop
 8005e24:	3754      	adds	r7, #84	; 0x54
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000014 	.word	0x20000014

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4d0d      	ldr	r5, [pc, #52]	; (8005e74 <__libc_init_array+0x38>)
 8005e40:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	2600      	movs	r6, #0
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	4d0b      	ldr	r5, [pc, #44]	; (8005e7c <__libc_init_array+0x40>)
 8005e4e:	4c0c      	ldr	r4, [pc, #48]	; (8005e80 <__libc_init_array+0x44>)
 8005e50:	f001 fb78 	bl	8007544 <_init>
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	2600      	movs	r6, #0
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08007788 	.word	0x08007788
 8005e78:	08007788 	.word	0x08007788
 8005e7c:	08007788 	.word	0x08007788
 8005e80:	0800778c 	.word	0x0800778c

08005e84 <memset>:
 8005e84:	4402      	add	r2, r0
 8005e86:	4603      	mov	r3, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <iprintf>:
 8005e94:	b40f      	push	{r0, r1, r2, r3}
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <iprintf+0x2c>)
 8005e98:	b513      	push	{r0, r1, r4, lr}
 8005e9a:	681c      	ldr	r4, [r3, #0]
 8005e9c:	b124      	cbz	r4, 8005ea8 <iprintf+0x14>
 8005e9e:	69a3      	ldr	r3, [r4, #24]
 8005ea0:	b913      	cbnz	r3, 8005ea8 <iprintf+0x14>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 fa5e 	bl	8006364 <__sinit>
 8005ea8:	ab05      	add	r3, sp, #20
 8005eaa:	9a04      	ldr	r2, [sp, #16]
 8005eac:	68a1      	ldr	r1, [r4, #8]
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fc67 	bl	8006784 <_vfiprintf_r>
 8005eb6:	b002      	add	sp, #8
 8005eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ebc:	b004      	add	sp, #16
 8005ebe:	4770      	bx	lr
 8005ec0:	20000014 	.word	0x20000014

08005ec4 <_puts_r>:
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	460e      	mov	r6, r1
 8005ec8:	4605      	mov	r5, r0
 8005eca:	b118      	cbz	r0, 8005ed4 <_puts_r+0x10>
 8005ecc:	6983      	ldr	r3, [r0, #24]
 8005ece:	b90b      	cbnz	r3, 8005ed4 <_puts_r+0x10>
 8005ed0:	f000 fa48 	bl	8006364 <__sinit>
 8005ed4:	69ab      	ldr	r3, [r5, #24]
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	b913      	cbnz	r3, 8005ee0 <_puts_r+0x1c>
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 fa42 	bl	8006364 <__sinit>
 8005ee0:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <_puts_r+0xd0>)
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	d120      	bne.n	8005f28 <_puts_r+0x64>
 8005ee6:	686c      	ldr	r4, [r5, #4]
 8005ee8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eea:	07db      	lsls	r3, r3, #31
 8005eec:	d405      	bmi.n	8005efa <_puts_r+0x36>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	0598      	lsls	r0, r3, #22
 8005ef2:	d402      	bmi.n	8005efa <_puts_r+0x36>
 8005ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ef6:	f000 fad3 	bl	80064a0 <__retarget_lock_acquire_recursive>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	0719      	lsls	r1, r3, #28
 8005efe:	d51d      	bpl.n	8005f3c <_puts_r+0x78>
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	b1db      	cbz	r3, 8005f3c <_puts_r+0x78>
 8005f04:	3e01      	subs	r6, #1
 8005f06:	68a3      	ldr	r3, [r4, #8]
 8005f08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	60a3      	str	r3, [r4, #8]
 8005f10:	bb39      	cbnz	r1, 8005f62 <_puts_r+0x9e>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da38      	bge.n	8005f88 <_puts_r+0xc4>
 8005f16:	4622      	mov	r2, r4
 8005f18:	210a      	movs	r1, #10
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 f848 	bl	8005fb0 <__swbuf_r>
 8005f20:	3001      	adds	r0, #1
 8005f22:	d011      	beq.n	8005f48 <_puts_r+0x84>
 8005f24:	250a      	movs	r5, #10
 8005f26:	e011      	b.n	8005f4c <_puts_r+0x88>
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <_puts_r+0xd4>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d101      	bne.n	8005f32 <_puts_r+0x6e>
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	e7da      	b.n	8005ee8 <_puts_r+0x24>
 8005f32:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <_puts_r+0xd8>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	bf08      	it	eq
 8005f38:	68ec      	ldreq	r4, [r5, #12]
 8005f3a:	e7d5      	b.n	8005ee8 <_puts_r+0x24>
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f888 	bl	8006054 <__swsetup_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d0dd      	beq.n	8005f04 <_puts_r+0x40>
 8005f48:	f04f 35ff 	mov.w	r5, #4294967295
 8005f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f4e:	07da      	lsls	r2, r3, #31
 8005f50:	d405      	bmi.n	8005f5e <_puts_r+0x9a>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	059b      	lsls	r3, r3, #22
 8005f56:	d402      	bmi.n	8005f5e <_puts_r+0x9a>
 8005f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f5a:	f000 faa2 	bl	80064a2 <__retarget_lock_release_recursive>
 8005f5e:	4628      	mov	r0, r5
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da04      	bge.n	8005f70 <_puts_r+0xac>
 8005f66:	69a2      	ldr	r2, [r4, #24]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	dc06      	bgt.n	8005f7a <_puts_r+0xb6>
 8005f6c:	290a      	cmp	r1, #10
 8005f6e:	d004      	beq.n	8005f7a <_puts_r+0xb6>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	6022      	str	r2, [r4, #0]
 8005f76:	7019      	strb	r1, [r3, #0]
 8005f78:	e7c5      	b.n	8005f06 <_puts_r+0x42>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f000 f817 	bl	8005fb0 <__swbuf_r>
 8005f82:	3001      	adds	r0, #1
 8005f84:	d1bf      	bne.n	8005f06 <_puts_r+0x42>
 8005f86:	e7df      	b.n	8005f48 <_puts_r+0x84>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	250a      	movs	r5, #10
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	6022      	str	r2, [r4, #0]
 8005f90:	701d      	strb	r5, [r3, #0]
 8005f92:	e7db      	b.n	8005f4c <_puts_r+0x88>
 8005f94:	080076a4 	.word	0x080076a4
 8005f98:	080076c4 	.word	0x080076c4
 8005f9c:	08007684 	.word	0x08007684

08005fa0 <puts>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <puts+0xc>)
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	f7ff bf8d 	b.w	8005ec4 <_puts_r>
 8005faa:	bf00      	nop
 8005fac:	20000014 	.word	0x20000014

08005fb0 <__swbuf_r>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	460e      	mov	r6, r1
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	b118      	cbz	r0, 8005fc2 <__swbuf_r+0x12>
 8005fba:	6983      	ldr	r3, [r0, #24]
 8005fbc:	b90b      	cbnz	r3, 8005fc2 <__swbuf_r+0x12>
 8005fbe:	f000 f9d1 	bl	8006364 <__sinit>
 8005fc2:	4b21      	ldr	r3, [pc, #132]	; (8006048 <__swbuf_r+0x98>)
 8005fc4:	429c      	cmp	r4, r3
 8005fc6:	d12b      	bne.n	8006020 <__swbuf_r+0x70>
 8005fc8:	686c      	ldr	r4, [r5, #4]
 8005fca:	69a3      	ldr	r3, [r4, #24]
 8005fcc:	60a3      	str	r3, [r4, #8]
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	071a      	lsls	r2, r3, #28
 8005fd2:	d52f      	bpl.n	8006034 <__swbuf_r+0x84>
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	b36b      	cbz	r3, 8006034 <__swbuf_r+0x84>
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	1ac0      	subs	r0, r0, r3
 8005fde:	6963      	ldr	r3, [r4, #20]
 8005fe0:	b2f6      	uxtb	r6, r6
 8005fe2:	4283      	cmp	r3, r0
 8005fe4:	4637      	mov	r7, r6
 8005fe6:	dc04      	bgt.n	8005ff2 <__swbuf_r+0x42>
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 f926 	bl	800623c <_fflush_r>
 8005ff0:	bb30      	cbnz	r0, 8006040 <__swbuf_r+0x90>
 8005ff2:	68a3      	ldr	r3, [r4, #8]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	60a3      	str	r3, [r4, #8]
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	6022      	str	r2, [r4, #0]
 8005ffe:	701e      	strb	r6, [r3, #0]
 8006000:	6963      	ldr	r3, [r4, #20]
 8006002:	3001      	adds	r0, #1
 8006004:	4283      	cmp	r3, r0
 8006006:	d004      	beq.n	8006012 <__swbuf_r+0x62>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d506      	bpl.n	800601c <__swbuf_r+0x6c>
 800600e:	2e0a      	cmp	r6, #10
 8006010:	d104      	bne.n	800601c <__swbuf_r+0x6c>
 8006012:	4621      	mov	r1, r4
 8006014:	4628      	mov	r0, r5
 8006016:	f000 f911 	bl	800623c <_fflush_r>
 800601a:	b988      	cbnz	r0, 8006040 <__swbuf_r+0x90>
 800601c:	4638      	mov	r0, r7
 800601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <__swbuf_r+0x9c>)
 8006022:	429c      	cmp	r4, r3
 8006024:	d101      	bne.n	800602a <__swbuf_r+0x7a>
 8006026:	68ac      	ldr	r4, [r5, #8]
 8006028:	e7cf      	b.n	8005fca <__swbuf_r+0x1a>
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <__swbuf_r+0xa0>)
 800602c:	429c      	cmp	r4, r3
 800602e:	bf08      	it	eq
 8006030:	68ec      	ldreq	r4, [r5, #12]
 8006032:	e7ca      	b.n	8005fca <__swbuf_r+0x1a>
 8006034:	4621      	mov	r1, r4
 8006036:	4628      	mov	r0, r5
 8006038:	f000 f80c 	bl	8006054 <__swsetup_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	d0cb      	beq.n	8005fd8 <__swbuf_r+0x28>
 8006040:	f04f 37ff 	mov.w	r7, #4294967295
 8006044:	e7ea      	b.n	800601c <__swbuf_r+0x6c>
 8006046:	bf00      	nop
 8006048:	080076a4 	.word	0x080076a4
 800604c:	080076c4 	.word	0x080076c4
 8006050:	08007684 	.word	0x08007684

08006054 <__swsetup_r>:
 8006054:	4b32      	ldr	r3, [pc, #200]	; (8006120 <__swsetup_r+0xcc>)
 8006056:	b570      	push	{r4, r5, r6, lr}
 8006058:	681d      	ldr	r5, [r3, #0]
 800605a:	4606      	mov	r6, r0
 800605c:	460c      	mov	r4, r1
 800605e:	b125      	cbz	r5, 800606a <__swsetup_r+0x16>
 8006060:	69ab      	ldr	r3, [r5, #24]
 8006062:	b913      	cbnz	r3, 800606a <__swsetup_r+0x16>
 8006064:	4628      	mov	r0, r5
 8006066:	f000 f97d 	bl	8006364 <__sinit>
 800606a:	4b2e      	ldr	r3, [pc, #184]	; (8006124 <__swsetup_r+0xd0>)
 800606c:	429c      	cmp	r4, r3
 800606e:	d10f      	bne.n	8006090 <__swsetup_r+0x3c>
 8006070:	686c      	ldr	r4, [r5, #4]
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006078:	0719      	lsls	r1, r3, #28
 800607a:	d42c      	bmi.n	80060d6 <__swsetup_r+0x82>
 800607c:	06dd      	lsls	r5, r3, #27
 800607e:	d411      	bmi.n	80060a4 <__swsetup_r+0x50>
 8006080:	2309      	movs	r3, #9
 8006082:	6033      	str	r3, [r6, #0]
 8006084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006088:	81a3      	strh	r3, [r4, #12]
 800608a:	f04f 30ff 	mov.w	r0, #4294967295
 800608e:	e03e      	b.n	800610e <__swsetup_r+0xba>
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <__swsetup_r+0xd4>)
 8006092:	429c      	cmp	r4, r3
 8006094:	d101      	bne.n	800609a <__swsetup_r+0x46>
 8006096:	68ac      	ldr	r4, [r5, #8]
 8006098:	e7eb      	b.n	8006072 <__swsetup_r+0x1e>
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <__swsetup_r+0xd8>)
 800609c:	429c      	cmp	r4, r3
 800609e:	bf08      	it	eq
 80060a0:	68ec      	ldreq	r4, [r5, #12]
 80060a2:	e7e6      	b.n	8006072 <__swsetup_r+0x1e>
 80060a4:	0758      	lsls	r0, r3, #29
 80060a6:	d512      	bpl.n	80060ce <__swsetup_r+0x7a>
 80060a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060aa:	b141      	cbz	r1, 80060be <__swsetup_r+0x6a>
 80060ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b0:	4299      	cmp	r1, r3
 80060b2:	d002      	beq.n	80060ba <__swsetup_r+0x66>
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 fa5b 	bl	8006570 <_free_r>
 80060ba:	2300      	movs	r3, #0
 80060bc:	6363      	str	r3, [r4, #52]	; 0x34
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	2300      	movs	r3, #0
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	f043 0308 	orr.w	r3, r3, #8
 80060d4:	81a3      	strh	r3, [r4, #12]
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	b94b      	cbnz	r3, 80060ee <__swsetup_r+0x9a>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e4:	d003      	beq.n	80060ee <__swsetup_r+0x9a>
 80060e6:	4621      	mov	r1, r4
 80060e8:	4630      	mov	r0, r6
 80060ea:	f000 fa01 	bl	80064f0 <__smakebuf_r>
 80060ee:	89a0      	ldrh	r0, [r4, #12]
 80060f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060f4:	f010 0301 	ands.w	r3, r0, #1
 80060f8:	d00a      	beq.n	8006110 <__swsetup_r+0xbc>
 80060fa:	2300      	movs	r3, #0
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	6963      	ldr	r3, [r4, #20]
 8006100:	425b      	negs	r3, r3
 8006102:	61a3      	str	r3, [r4, #24]
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	b943      	cbnz	r3, 800611a <__swsetup_r+0xc6>
 8006108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800610c:	d1ba      	bne.n	8006084 <__swsetup_r+0x30>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	0781      	lsls	r1, r0, #30
 8006112:	bf58      	it	pl
 8006114:	6963      	ldrpl	r3, [r4, #20]
 8006116:	60a3      	str	r3, [r4, #8]
 8006118:	e7f4      	b.n	8006104 <__swsetup_r+0xb0>
 800611a:	2000      	movs	r0, #0
 800611c:	e7f7      	b.n	800610e <__swsetup_r+0xba>
 800611e:	bf00      	nop
 8006120:	20000014 	.word	0x20000014
 8006124:	080076a4 	.word	0x080076a4
 8006128:	080076c4 	.word	0x080076c4
 800612c:	08007684 	.word	0x08007684

08006130 <__sflush_r>:
 8006130:	898a      	ldrh	r2, [r1, #12]
 8006132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006136:	4605      	mov	r5, r0
 8006138:	0710      	lsls	r0, r2, #28
 800613a:	460c      	mov	r4, r1
 800613c:	d458      	bmi.n	80061f0 <__sflush_r+0xc0>
 800613e:	684b      	ldr	r3, [r1, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dc05      	bgt.n	8006150 <__sflush_r+0x20>
 8006144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	dc02      	bgt.n	8006150 <__sflush_r+0x20>
 800614a:	2000      	movs	r0, #0
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006152:	2e00      	cmp	r6, #0
 8006154:	d0f9      	beq.n	800614a <__sflush_r+0x1a>
 8006156:	2300      	movs	r3, #0
 8006158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800615c:	682f      	ldr	r7, [r5, #0]
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	d032      	beq.n	80061c8 <__sflush_r+0x98>
 8006162:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	075a      	lsls	r2, r3, #29
 8006168:	d505      	bpl.n	8006176 <__sflush_r+0x46>
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	1ac0      	subs	r0, r0, r3
 800616e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006170:	b10b      	cbz	r3, 8006176 <__sflush_r+0x46>
 8006172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006174:	1ac0      	subs	r0, r0, r3
 8006176:	2300      	movs	r3, #0
 8006178:	4602      	mov	r2, r0
 800617a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800617c:	6a21      	ldr	r1, [r4, #32]
 800617e:	4628      	mov	r0, r5
 8006180:	47b0      	blx	r6
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	d106      	bne.n	8006196 <__sflush_r+0x66>
 8006188:	6829      	ldr	r1, [r5, #0]
 800618a:	291d      	cmp	r1, #29
 800618c:	d82c      	bhi.n	80061e8 <__sflush_r+0xb8>
 800618e:	4a2a      	ldr	r2, [pc, #168]	; (8006238 <__sflush_r+0x108>)
 8006190:	40ca      	lsrs	r2, r1
 8006192:	07d6      	lsls	r6, r2, #31
 8006194:	d528      	bpl.n	80061e8 <__sflush_r+0xb8>
 8006196:	2200      	movs	r2, #0
 8006198:	6062      	str	r2, [r4, #4]
 800619a:	04d9      	lsls	r1, r3, #19
 800619c:	6922      	ldr	r2, [r4, #16]
 800619e:	6022      	str	r2, [r4, #0]
 80061a0:	d504      	bpl.n	80061ac <__sflush_r+0x7c>
 80061a2:	1c42      	adds	r2, r0, #1
 80061a4:	d101      	bne.n	80061aa <__sflush_r+0x7a>
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	b903      	cbnz	r3, 80061ac <__sflush_r+0x7c>
 80061aa:	6560      	str	r0, [r4, #84]	; 0x54
 80061ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ae:	602f      	str	r7, [r5, #0]
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d0ca      	beq.n	800614a <__sflush_r+0x1a>
 80061b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061b8:	4299      	cmp	r1, r3
 80061ba:	d002      	beq.n	80061c2 <__sflush_r+0x92>
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 f9d7 	bl	8006570 <_free_r>
 80061c2:	2000      	movs	r0, #0
 80061c4:	6360      	str	r0, [r4, #52]	; 0x34
 80061c6:	e7c1      	b.n	800614c <__sflush_r+0x1c>
 80061c8:	6a21      	ldr	r1, [r4, #32]
 80061ca:	2301      	movs	r3, #1
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b0      	blx	r6
 80061d0:	1c41      	adds	r1, r0, #1
 80061d2:	d1c7      	bne.n	8006164 <__sflush_r+0x34>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0c4      	beq.n	8006164 <__sflush_r+0x34>
 80061da:	2b1d      	cmp	r3, #29
 80061dc:	d001      	beq.n	80061e2 <__sflush_r+0xb2>
 80061de:	2b16      	cmp	r3, #22
 80061e0:	d101      	bne.n	80061e6 <__sflush_r+0xb6>
 80061e2:	602f      	str	r7, [r5, #0]
 80061e4:	e7b1      	b.n	800614a <__sflush_r+0x1a>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	e7ad      	b.n	800614c <__sflush_r+0x1c>
 80061f0:	690f      	ldr	r7, [r1, #16]
 80061f2:	2f00      	cmp	r7, #0
 80061f4:	d0a9      	beq.n	800614a <__sflush_r+0x1a>
 80061f6:	0793      	lsls	r3, r2, #30
 80061f8:	680e      	ldr	r6, [r1, #0]
 80061fa:	bf08      	it	eq
 80061fc:	694b      	ldreq	r3, [r1, #20]
 80061fe:	600f      	str	r7, [r1, #0]
 8006200:	bf18      	it	ne
 8006202:	2300      	movne	r3, #0
 8006204:	eba6 0807 	sub.w	r8, r6, r7
 8006208:	608b      	str	r3, [r1, #8]
 800620a:	f1b8 0f00 	cmp.w	r8, #0
 800620e:	dd9c      	ble.n	800614a <__sflush_r+0x1a>
 8006210:	6a21      	ldr	r1, [r4, #32]
 8006212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006214:	4643      	mov	r3, r8
 8006216:	463a      	mov	r2, r7
 8006218:	4628      	mov	r0, r5
 800621a:	47b0      	blx	r6
 800621c:	2800      	cmp	r0, #0
 800621e:	dc06      	bgt.n	800622e <__sflush_r+0xfe>
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	e78e      	b.n	800614c <__sflush_r+0x1c>
 800622e:	4407      	add	r7, r0
 8006230:	eba8 0800 	sub.w	r8, r8, r0
 8006234:	e7e9      	b.n	800620a <__sflush_r+0xda>
 8006236:	bf00      	nop
 8006238:	20400001 	.word	0x20400001

0800623c <_fflush_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	690b      	ldr	r3, [r1, #16]
 8006240:	4605      	mov	r5, r0
 8006242:	460c      	mov	r4, r1
 8006244:	b913      	cbnz	r3, 800624c <_fflush_r+0x10>
 8006246:	2500      	movs	r5, #0
 8006248:	4628      	mov	r0, r5
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	b118      	cbz	r0, 8006256 <_fflush_r+0x1a>
 800624e:	6983      	ldr	r3, [r0, #24]
 8006250:	b90b      	cbnz	r3, 8006256 <_fflush_r+0x1a>
 8006252:	f000 f887 	bl	8006364 <__sinit>
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <_fflush_r+0x6c>)
 8006258:	429c      	cmp	r4, r3
 800625a:	d11b      	bne.n	8006294 <_fflush_r+0x58>
 800625c:	686c      	ldr	r4, [r5, #4]
 800625e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0ef      	beq.n	8006246 <_fflush_r+0xa>
 8006266:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006268:	07d0      	lsls	r0, r2, #31
 800626a:	d404      	bmi.n	8006276 <_fflush_r+0x3a>
 800626c:	0599      	lsls	r1, r3, #22
 800626e:	d402      	bmi.n	8006276 <_fflush_r+0x3a>
 8006270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006272:	f000 f915 	bl	80064a0 <__retarget_lock_acquire_recursive>
 8006276:	4628      	mov	r0, r5
 8006278:	4621      	mov	r1, r4
 800627a:	f7ff ff59 	bl	8006130 <__sflush_r>
 800627e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006280:	07da      	lsls	r2, r3, #31
 8006282:	4605      	mov	r5, r0
 8006284:	d4e0      	bmi.n	8006248 <_fflush_r+0xc>
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	059b      	lsls	r3, r3, #22
 800628a:	d4dd      	bmi.n	8006248 <_fflush_r+0xc>
 800628c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800628e:	f000 f908 	bl	80064a2 <__retarget_lock_release_recursive>
 8006292:	e7d9      	b.n	8006248 <_fflush_r+0xc>
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <_fflush_r+0x70>)
 8006296:	429c      	cmp	r4, r3
 8006298:	d101      	bne.n	800629e <_fflush_r+0x62>
 800629a:	68ac      	ldr	r4, [r5, #8]
 800629c:	e7df      	b.n	800625e <_fflush_r+0x22>
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <_fflush_r+0x74>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	bf08      	it	eq
 80062a4:	68ec      	ldreq	r4, [r5, #12]
 80062a6:	e7da      	b.n	800625e <_fflush_r+0x22>
 80062a8:	080076a4 	.word	0x080076a4
 80062ac:	080076c4 	.word	0x080076c4
 80062b0:	08007684 	.word	0x08007684

080062b4 <std>:
 80062b4:	2300      	movs	r3, #0
 80062b6:	b510      	push	{r4, lr}
 80062b8:	4604      	mov	r4, r0
 80062ba:	e9c0 3300 	strd	r3, r3, [r0]
 80062be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062c2:	6083      	str	r3, [r0, #8]
 80062c4:	8181      	strh	r1, [r0, #12]
 80062c6:	6643      	str	r3, [r0, #100]	; 0x64
 80062c8:	81c2      	strh	r2, [r0, #14]
 80062ca:	6183      	str	r3, [r0, #24]
 80062cc:	4619      	mov	r1, r3
 80062ce:	2208      	movs	r2, #8
 80062d0:	305c      	adds	r0, #92	; 0x5c
 80062d2:	f7ff fdd7 	bl	8005e84 <memset>
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <std+0x38>)
 80062d8:	6263      	str	r3, [r4, #36]	; 0x24
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <std+0x3c>)
 80062dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <std+0x40>)
 80062e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <std+0x44>)
 80062e4:	6224      	str	r4, [r4, #32]
 80062e6:	6323      	str	r3, [r4, #48]	; 0x30
 80062e8:	bd10      	pop	{r4, pc}
 80062ea:	bf00      	nop
 80062ec:	08006d2d 	.word	0x08006d2d
 80062f0:	08006d4f 	.word	0x08006d4f
 80062f4:	08006d87 	.word	0x08006d87
 80062f8:	08006dab 	.word	0x08006dab

080062fc <_cleanup_r>:
 80062fc:	4901      	ldr	r1, [pc, #4]	; (8006304 <_cleanup_r+0x8>)
 80062fe:	f000 b8af 	b.w	8006460 <_fwalk_reent>
 8006302:	bf00      	nop
 8006304:	0800623d 	.word	0x0800623d

08006308 <__sfmoreglue>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	2268      	movs	r2, #104	; 0x68
 800630c:	1e4d      	subs	r5, r1, #1
 800630e:	4355      	muls	r5, r2
 8006310:	460e      	mov	r6, r1
 8006312:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006316:	f000 f997 	bl	8006648 <_malloc_r>
 800631a:	4604      	mov	r4, r0
 800631c:	b140      	cbz	r0, 8006330 <__sfmoreglue+0x28>
 800631e:	2100      	movs	r1, #0
 8006320:	e9c0 1600 	strd	r1, r6, [r0]
 8006324:	300c      	adds	r0, #12
 8006326:	60a0      	str	r0, [r4, #8]
 8006328:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800632c:	f7ff fdaa 	bl	8005e84 <memset>
 8006330:	4620      	mov	r0, r4
 8006332:	bd70      	pop	{r4, r5, r6, pc}

08006334 <__sfp_lock_acquire>:
 8006334:	4801      	ldr	r0, [pc, #4]	; (800633c <__sfp_lock_acquire+0x8>)
 8006336:	f000 b8b3 	b.w	80064a0 <__retarget_lock_acquire_recursive>
 800633a:	bf00      	nop
 800633c:	200002b9 	.word	0x200002b9

08006340 <__sfp_lock_release>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__sfp_lock_release+0x8>)
 8006342:	f000 b8ae 	b.w	80064a2 <__retarget_lock_release_recursive>
 8006346:	bf00      	nop
 8006348:	200002b9 	.word	0x200002b9

0800634c <__sinit_lock_acquire>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__sinit_lock_acquire+0x8>)
 800634e:	f000 b8a7 	b.w	80064a0 <__retarget_lock_acquire_recursive>
 8006352:	bf00      	nop
 8006354:	200002ba 	.word	0x200002ba

08006358 <__sinit_lock_release>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__sinit_lock_release+0x8>)
 800635a:	f000 b8a2 	b.w	80064a2 <__retarget_lock_release_recursive>
 800635e:	bf00      	nop
 8006360:	200002ba 	.word	0x200002ba

08006364 <__sinit>:
 8006364:	b510      	push	{r4, lr}
 8006366:	4604      	mov	r4, r0
 8006368:	f7ff fff0 	bl	800634c <__sinit_lock_acquire>
 800636c:	69a3      	ldr	r3, [r4, #24]
 800636e:	b11b      	cbz	r3, 8006378 <__sinit+0x14>
 8006370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006374:	f7ff bff0 	b.w	8006358 <__sinit_lock_release>
 8006378:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800637c:	6523      	str	r3, [r4, #80]	; 0x50
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <__sinit+0x68>)
 8006380:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <__sinit+0x6c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	62a2      	str	r2, [r4, #40]	; 0x28
 8006386:	42a3      	cmp	r3, r4
 8006388:	bf04      	itt	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	61a3      	streq	r3, [r4, #24]
 800638e:	4620      	mov	r0, r4
 8006390:	f000 f820 	bl	80063d4 <__sfp>
 8006394:	6060      	str	r0, [r4, #4]
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f81c 	bl	80063d4 <__sfp>
 800639c:	60a0      	str	r0, [r4, #8]
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 f818 	bl	80063d4 <__sfp>
 80063a4:	2200      	movs	r2, #0
 80063a6:	60e0      	str	r0, [r4, #12]
 80063a8:	2104      	movs	r1, #4
 80063aa:	6860      	ldr	r0, [r4, #4]
 80063ac:	f7ff ff82 	bl	80062b4 <std>
 80063b0:	68a0      	ldr	r0, [r4, #8]
 80063b2:	2201      	movs	r2, #1
 80063b4:	2109      	movs	r1, #9
 80063b6:	f7ff ff7d 	bl	80062b4 <std>
 80063ba:	68e0      	ldr	r0, [r4, #12]
 80063bc:	2202      	movs	r2, #2
 80063be:	2112      	movs	r1, #18
 80063c0:	f7ff ff78 	bl	80062b4 <std>
 80063c4:	2301      	movs	r3, #1
 80063c6:	61a3      	str	r3, [r4, #24]
 80063c8:	e7d2      	b.n	8006370 <__sinit+0xc>
 80063ca:	bf00      	nop
 80063cc:	08007680 	.word	0x08007680
 80063d0:	080062fd 	.word	0x080062fd

080063d4 <__sfp>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	4607      	mov	r7, r0
 80063d8:	f7ff ffac 	bl	8006334 <__sfp_lock_acquire>
 80063dc:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <__sfp+0x84>)
 80063de:	681e      	ldr	r6, [r3, #0]
 80063e0:	69b3      	ldr	r3, [r6, #24]
 80063e2:	b913      	cbnz	r3, 80063ea <__sfp+0x16>
 80063e4:	4630      	mov	r0, r6
 80063e6:	f7ff ffbd 	bl	8006364 <__sinit>
 80063ea:	3648      	adds	r6, #72	; 0x48
 80063ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	d503      	bpl.n	80063fc <__sfp+0x28>
 80063f4:	6833      	ldr	r3, [r6, #0]
 80063f6:	b30b      	cbz	r3, 800643c <__sfp+0x68>
 80063f8:	6836      	ldr	r6, [r6, #0]
 80063fa:	e7f7      	b.n	80063ec <__sfp+0x18>
 80063fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006400:	b9d5      	cbnz	r5, 8006438 <__sfp+0x64>
 8006402:	4b16      	ldr	r3, [pc, #88]	; (800645c <__sfp+0x88>)
 8006404:	60e3      	str	r3, [r4, #12]
 8006406:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800640a:	6665      	str	r5, [r4, #100]	; 0x64
 800640c:	f000 f847 	bl	800649e <__retarget_lock_init_recursive>
 8006410:	f7ff ff96 	bl	8006340 <__sfp_lock_release>
 8006414:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006418:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800641c:	6025      	str	r5, [r4, #0]
 800641e:	61a5      	str	r5, [r4, #24]
 8006420:	2208      	movs	r2, #8
 8006422:	4629      	mov	r1, r5
 8006424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006428:	f7ff fd2c 	bl	8005e84 <memset>
 800642c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006434:	4620      	mov	r0, r4
 8006436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006438:	3468      	adds	r4, #104	; 0x68
 800643a:	e7d9      	b.n	80063f0 <__sfp+0x1c>
 800643c:	2104      	movs	r1, #4
 800643e:	4638      	mov	r0, r7
 8006440:	f7ff ff62 	bl	8006308 <__sfmoreglue>
 8006444:	4604      	mov	r4, r0
 8006446:	6030      	str	r0, [r6, #0]
 8006448:	2800      	cmp	r0, #0
 800644a:	d1d5      	bne.n	80063f8 <__sfp+0x24>
 800644c:	f7ff ff78 	bl	8006340 <__sfp_lock_release>
 8006450:	230c      	movs	r3, #12
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	e7ee      	b.n	8006434 <__sfp+0x60>
 8006456:	bf00      	nop
 8006458:	08007680 	.word	0x08007680
 800645c:	ffff0001 	.word	0xffff0001

08006460 <_fwalk_reent>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	4606      	mov	r6, r0
 8006466:	4688      	mov	r8, r1
 8006468:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800646c:	2700      	movs	r7, #0
 800646e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006472:	f1b9 0901 	subs.w	r9, r9, #1
 8006476:	d505      	bpl.n	8006484 <_fwalk_reent+0x24>
 8006478:	6824      	ldr	r4, [r4, #0]
 800647a:	2c00      	cmp	r4, #0
 800647c:	d1f7      	bne.n	800646e <_fwalk_reent+0xe>
 800647e:	4638      	mov	r0, r7
 8006480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006484:	89ab      	ldrh	r3, [r5, #12]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d907      	bls.n	800649a <_fwalk_reent+0x3a>
 800648a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800648e:	3301      	adds	r3, #1
 8006490:	d003      	beq.n	800649a <_fwalk_reent+0x3a>
 8006492:	4629      	mov	r1, r5
 8006494:	4630      	mov	r0, r6
 8006496:	47c0      	blx	r8
 8006498:	4307      	orrs	r7, r0
 800649a:	3568      	adds	r5, #104	; 0x68
 800649c:	e7e9      	b.n	8006472 <_fwalk_reent+0x12>

0800649e <__retarget_lock_init_recursive>:
 800649e:	4770      	bx	lr

080064a0 <__retarget_lock_acquire_recursive>:
 80064a0:	4770      	bx	lr

080064a2 <__retarget_lock_release_recursive>:
 80064a2:	4770      	bx	lr

080064a4 <__swhatbuf_r>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	460e      	mov	r6, r1
 80064a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ac:	2900      	cmp	r1, #0
 80064ae:	b096      	sub	sp, #88	; 0x58
 80064b0:	4614      	mov	r4, r2
 80064b2:	461d      	mov	r5, r3
 80064b4:	da08      	bge.n	80064c8 <__swhatbuf_r+0x24>
 80064b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	061a      	lsls	r2, r3, #24
 80064c0:	d410      	bmi.n	80064e4 <__swhatbuf_r+0x40>
 80064c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c6:	e00e      	b.n	80064e6 <__swhatbuf_r+0x42>
 80064c8:	466a      	mov	r2, sp
 80064ca:	f000 fc95 	bl	8006df8 <_fstat_r>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	dbf1      	blt.n	80064b6 <__swhatbuf_r+0x12>
 80064d2:	9a01      	ldr	r2, [sp, #4]
 80064d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064dc:	425a      	negs	r2, r3
 80064de:	415a      	adcs	r2, r3
 80064e0:	602a      	str	r2, [r5, #0]
 80064e2:	e7ee      	b.n	80064c2 <__swhatbuf_r+0x1e>
 80064e4:	2340      	movs	r3, #64	; 0x40
 80064e6:	2000      	movs	r0, #0
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	b016      	add	sp, #88	; 0x58
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080064f0 <__smakebuf_r>:
 80064f0:	898b      	ldrh	r3, [r1, #12]
 80064f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064f4:	079d      	lsls	r5, r3, #30
 80064f6:	4606      	mov	r6, r0
 80064f8:	460c      	mov	r4, r1
 80064fa:	d507      	bpl.n	800650c <__smakebuf_r+0x1c>
 80064fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	2301      	movs	r3, #1
 8006506:	6163      	str	r3, [r4, #20]
 8006508:	b002      	add	sp, #8
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	ab01      	add	r3, sp, #4
 800650e:	466a      	mov	r2, sp
 8006510:	f7ff ffc8 	bl	80064a4 <__swhatbuf_r>
 8006514:	9900      	ldr	r1, [sp, #0]
 8006516:	4605      	mov	r5, r0
 8006518:	4630      	mov	r0, r6
 800651a:	f000 f895 	bl	8006648 <_malloc_r>
 800651e:	b948      	cbnz	r0, 8006534 <__smakebuf_r+0x44>
 8006520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006524:	059a      	lsls	r2, r3, #22
 8006526:	d4ef      	bmi.n	8006508 <__smakebuf_r+0x18>
 8006528:	f023 0303 	bic.w	r3, r3, #3
 800652c:	f043 0302 	orr.w	r3, r3, #2
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	e7e3      	b.n	80064fc <__smakebuf_r+0xc>
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <__smakebuf_r+0x7c>)
 8006536:	62b3      	str	r3, [r6, #40]	; 0x28
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	6020      	str	r0, [r4, #0]
 800653c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	9b00      	ldr	r3, [sp, #0]
 8006544:	6163      	str	r3, [r4, #20]
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	6120      	str	r0, [r4, #16]
 800654a:	b15b      	cbz	r3, 8006564 <__smakebuf_r+0x74>
 800654c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006550:	4630      	mov	r0, r6
 8006552:	f000 fc63 	bl	8006e1c <_isatty_r>
 8006556:	b128      	cbz	r0, 8006564 <__smakebuf_r+0x74>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	81a3      	strh	r3, [r4, #12]
 8006564:	89a0      	ldrh	r0, [r4, #12]
 8006566:	4305      	orrs	r5, r0
 8006568:	81a5      	strh	r5, [r4, #12]
 800656a:	e7cd      	b.n	8006508 <__smakebuf_r+0x18>
 800656c:	080062fd 	.word	0x080062fd

08006570 <_free_r>:
 8006570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006572:	2900      	cmp	r1, #0
 8006574:	d044      	beq.n	8006600 <_free_r+0x90>
 8006576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657a:	9001      	str	r0, [sp, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f1a1 0404 	sub.w	r4, r1, #4
 8006582:	bfb8      	it	lt
 8006584:	18e4      	addlt	r4, r4, r3
 8006586:	f000 fc6b 	bl	8006e60 <__malloc_lock>
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <_free_r+0x94>)
 800658c:	9801      	ldr	r0, [sp, #4]
 800658e:	6813      	ldr	r3, [r2, #0]
 8006590:	b933      	cbnz	r3, 80065a0 <_free_r+0x30>
 8006592:	6063      	str	r3, [r4, #4]
 8006594:	6014      	str	r4, [r2, #0]
 8006596:	b003      	add	sp, #12
 8006598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800659c:	f000 bc66 	b.w	8006e6c <__malloc_unlock>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d908      	bls.n	80065b6 <_free_r+0x46>
 80065a4:	6825      	ldr	r5, [r4, #0]
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf01      	itttt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	1949      	addeq	r1, r1, r5
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	e7ed      	b.n	8006592 <_free_r+0x22>
 80065b6:	461a      	mov	r2, r3
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	b10b      	cbz	r3, 80065c0 <_free_r+0x50>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d9fa      	bls.n	80065b6 <_free_r+0x46>
 80065c0:	6811      	ldr	r1, [r2, #0]
 80065c2:	1855      	adds	r5, r2, r1
 80065c4:	42a5      	cmp	r5, r4
 80065c6:	d10b      	bne.n	80065e0 <_free_r+0x70>
 80065c8:	6824      	ldr	r4, [r4, #0]
 80065ca:	4421      	add	r1, r4
 80065cc:	1854      	adds	r4, r2, r1
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	d1e0      	bne.n	8006596 <_free_r+0x26>
 80065d4:	681c      	ldr	r4, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	6053      	str	r3, [r2, #4]
 80065da:	4421      	add	r1, r4
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	e7da      	b.n	8006596 <_free_r+0x26>
 80065e0:	d902      	bls.n	80065e8 <_free_r+0x78>
 80065e2:	230c      	movs	r3, #12
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	e7d6      	b.n	8006596 <_free_r+0x26>
 80065e8:	6825      	ldr	r5, [r4, #0]
 80065ea:	1961      	adds	r1, r4, r5
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf04      	itt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	bf04      	itt	eq
 80065f8:	1949      	addeq	r1, r1, r5
 80065fa:	6021      	streq	r1, [r4, #0]
 80065fc:	6054      	str	r4, [r2, #4]
 80065fe:	e7ca      	b.n	8006596 <_free_r+0x26>
 8006600:	b003      	add	sp, #12
 8006602:	bd30      	pop	{r4, r5, pc}
 8006604:	200002bc 	.word	0x200002bc

08006608 <sbrk_aligned>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4e0e      	ldr	r6, [pc, #56]	; (8006644 <sbrk_aligned+0x3c>)
 800660c:	460c      	mov	r4, r1
 800660e:	6831      	ldr	r1, [r6, #0]
 8006610:	4605      	mov	r5, r0
 8006612:	b911      	cbnz	r1, 800661a <sbrk_aligned+0x12>
 8006614:	f000 fb7a 	bl	8006d0c <_sbrk_r>
 8006618:	6030      	str	r0, [r6, #0]
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 fb75 	bl	8006d0c <_sbrk_r>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d00a      	beq.n	800663c <sbrk_aligned+0x34>
 8006626:	1cc4      	adds	r4, r0, #3
 8006628:	f024 0403 	bic.w	r4, r4, #3
 800662c:	42a0      	cmp	r0, r4
 800662e:	d007      	beq.n	8006640 <sbrk_aligned+0x38>
 8006630:	1a21      	subs	r1, r4, r0
 8006632:	4628      	mov	r0, r5
 8006634:	f000 fb6a 	bl	8006d0c <_sbrk_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d101      	bne.n	8006640 <sbrk_aligned+0x38>
 800663c:	f04f 34ff 	mov.w	r4, #4294967295
 8006640:	4620      	mov	r0, r4
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	200002c0 	.word	0x200002c0

08006648 <_malloc_r>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	1ccd      	adds	r5, r1, #3
 800664e:	f025 0503 	bic.w	r5, r5, #3
 8006652:	3508      	adds	r5, #8
 8006654:	2d0c      	cmp	r5, #12
 8006656:	bf38      	it	cc
 8006658:	250c      	movcc	r5, #12
 800665a:	2d00      	cmp	r5, #0
 800665c:	4607      	mov	r7, r0
 800665e:	db01      	blt.n	8006664 <_malloc_r+0x1c>
 8006660:	42a9      	cmp	r1, r5
 8006662:	d905      	bls.n	8006670 <_malloc_r+0x28>
 8006664:	230c      	movs	r3, #12
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	2600      	movs	r6, #0
 800666a:	4630      	mov	r0, r6
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006670:	4e2e      	ldr	r6, [pc, #184]	; (800672c <_malloc_r+0xe4>)
 8006672:	f000 fbf5 	bl	8006e60 <__malloc_lock>
 8006676:	6833      	ldr	r3, [r6, #0]
 8006678:	461c      	mov	r4, r3
 800667a:	bb34      	cbnz	r4, 80066ca <_malloc_r+0x82>
 800667c:	4629      	mov	r1, r5
 800667e:	4638      	mov	r0, r7
 8006680:	f7ff ffc2 	bl	8006608 <sbrk_aligned>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	4604      	mov	r4, r0
 8006688:	d14d      	bne.n	8006726 <_malloc_r+0xde>
 800668a:	6834      	ldr	r4, [r6, #0]
 800668c:	4626      	mov	r6, r4
 800668e:	2e00      	cmp	r6, #0
 8006690:	d140      	bne.n	8006714 <_malloc_r+0xcc>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	4631      	mov	r1, r6
 8006696:	4638      	mov	r0, r7
 8006698:	eb04 0803 	add.w	r8, r4, r3
 800669c:	f000 fb36 	bl	8006d0c <_sbrk_r>
 80066a0:	4580      	cmp	r8, r0
 80066a2:	d13a      	bne.n	800671a <_malloc_r+0xd2>
 80066a4:	6821      	ldr	r1, [r4, #0]
 80066a6:	3503      	adds	r5, #3
 80066a8:	1a6d      	subs	r5, r5, r1
 80066aa:	f025 0503 	bic.w	r5, r5, #3
 80066ae:	3508      	adds	r5, #8
 80066b0:	2d0c      	cmp	r5, #12
 80066b2:	bf38      	it	cc
 80066b4:	250c      	movcc	r5, #12
 80066b6:	4629      	mov	r1, r5
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff ffa5 	bl	8006608 <sbrk_aligned>
 80066be:	3001      	adds	r0, #1
 80066c0:	d02b      	beq.n	800671a <_malloc_r+0xd2>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	442b      	add	r3, r5
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	e00e      	b.n	80066e8 <_malloc_r+0xa0>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	1b52      	subs	r2, r2, r5
 80066ce:	d41e      	bmi.n	800670e <_malloc_r+0xc6>
 80066d0:	2a0b      	cmp	r2, #11
 80066d2:	d916      	bls.n	8006702 <_malloc_r+0xba>
 80066d4:	1961      	adds	r1, r4, r5
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	6025      	str	r5, [r4, #0]
 80066da:	bf18      	it	ne
 80066dc:	6059      	strne	r1, [r3, #4]
 80066de:	6863      	ldr	r3, [r4, #4]
 80066e0:	bf08      	it	eq
 80066e2:	6031      	streq	r1, [r6, #0]
 80066e4:	5162      	str	r2, [r4, r5]
 80066e6:	604b      	str	r3, [r1, #4]
 80066e8:	4638      	mov	r0, r7
 80066ea:	f104 060b 	add.w	r6, r4, #11
 80066ee:	f000 fbbd 	bl	8006e6c <__malloc_unlock>
 80066f2:	f026 0607 	bic.w	r6, r6, #7
 80066f6:	1d23      	adds	r3, r4, #4
 80066f8:	1af2      	subs	r2, r6, r3
 80066fa:	d0b6      	beq.n	800666a <_malloc_r+0x22>
 80066fc:	1b9b      	subs	r3, r3, r6
 80066fe:	50a3      	str	r3, [r4, r2]
 8006700:	e7b3      	b.n	800666a <_malloc_r+0x22>
 8006702:	6862      	ldr	r2, [r4, #4]
 8006704:	42a3      	cmp	r3, r4
 8006706:	bf0c      	ite	eq
 8006708:	6032      	streq	r2, [r6, #0]
 800670a:	605a      	strne	r2, [r3, #4]
 800670c:	e7ec      	b.n	80066e8 <_malloc_r+0xa0>
 800670e:	4623      	mov	r3, r4
 8006710:	6864      	ldr	r4, [r4, #4]
 8006712:	e7b2      	b.n	800667a <_malloc_r+0x32>
 8006714:	4634      	mov	r4, r6
 8006716:	6876      	ldr	r6, [r6, #4]
 8006718:	e7b9      	b.n	800668e <_malloc_r+0x46>
 800671a:	230c      	movs	r3, #12
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	4638      	mov	r0, r7
 8006720:	f000 fba4 	bl	8006e6c <__malloc_unlock>
 8006724:	e7a1      	b.n	800666a <_malloc_r+0x22>
 8006726:	6025      	str	r5, [r4, #0]
 8006728:	e7de      	b.n	80066e8 <_malloc_r+0xa0>
 800672a:	bf00      	nop
 800672c:	200002bc 	.word	0x200002bc

08006730 <__sfputc_r>:
 8006730:	6893      	ldr	r3, [r2, #8]
 8006732:	3b01      	subs	r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	b410      	push	{r4}
 8006738:	6093      	str	r3, [r2, #8]
 800673a:	da08      	bge.n	800674e <__sfputc_r+0x1e>
 800673c:	6994      	ldr	r4, [r2, #24]
 800673e:	42a3      	cmp	r3, r4
 8006740:	db01      	blt.n	8006746 <__sfputc_r+0x16>
 8006742:	290a      	cmp	r1, #10
 8006744:	d103      	bne.n	800674e <__sfputc_r+0x1e>
 8006746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800674a:	f7ff bc31 	b.w	8005fb0 <__swbuf_r>
 800674e:	6813      	ldr	r3, [r2, #0]
 8006750:	1c58      	adds	r0, r3, #1
 8006752:	6010      	str	r0, [r2, #0]
 8006754:	7019      	strb	r1, [r3, #0]
 8006756:	4608      	mov	r0, r1
 8006758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800675c:	4770      	bx	lr

0800675e <__sfputs_r>:
 800675e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006760:	4606      	mov	r6, r0
 8006762:	460f      	mov	r7, r1
 8006764:	4614      	mov	r4, r2
 8006766:	18d5      	adds	r5, r2, r3
 8006768:	42ac      	cmp	r4, r5
 800676a:	d101      	bne.n	8006770 <__sfputs_r+0x12>
 800676c:	2000      	movs	r0, #0
 800676e:	e007      	b.n	8006780 <__sfputs_r+0x22>
 8006770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006774:	463a      	mov	r2, r7
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ffda 	bl	8006730 <__sfputc_r>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d1f3      	bne.n	8006768 <__sfputs_r+0xa>
 8006780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006784 <_vfiprintf_r>:
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	460d      	mov	r5, r1
 800678a:	b09d      	sub	sp, #116	; 0x74
 800678c:	4614      	mov	r4, r2
 800678e:	4698      	mov	r8, r3
 8006790:	4606      	mov	r6, r0
 8006792:	b118      	cbz	r0, 800679c <_vfiprintf_r+0x18>
 8006794:	6983      	ldr	r3, [r0, #24]
 8006796:	b90b      	cbnz	r3, 800679c <_vfiprintf_r+0x18>
 8006798:	f7ff fde4 	bl	8006364 <__sinit>
 800679c:	4b89      	ldr	r3, [pc, #548]	; (80069c4 <_vfiprintf_r+0x240>)
 800679e:	429d      	cmp	r5, r3
 80067a0:	d11b      	bne.n	80067da <_vfiprintf_r+0x56>
 80067a2:	6875      	ldr	r5, [r6, #4]
 80067a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a6:	07d9      	lsls	r1, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_vfiprintf_r+0x32>
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	059a      	lsls	r2, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_vfiprintf_r+0x32>
 80067b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067b2:	f7ff fe75 	bl	80064a0 <__retarget_lock_acquire_recursive>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	071b      	lsls	r3, r3, #28
 80067ba:	d501      	bpl.n	80067c0 <_vfiprintf_r+0x3c>
 80067bc:	692b      	ldr	r3, [r5, #16]
 80067be:	b9eb      	cbnz	r3, 80067fc <_vfiprintf_r+0x78>
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7ff fc46 	bl	8006054 <__swsetup_r>
 80067c8:	b1c0      	cbz	r0, 80067fc <_vfiprintf_r+0x78>
 80067ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067cc:	07dc      	lsls	r4, r3, #31
 80067ce:	d50e      	bpl.n	80067ee <_vfiprintf_r+0x6a>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b01d      	add	sp, #116	; 0x74
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067da:	4b7b      	ldr	r3, [pc, #492]	; (80069c8 <_vfiprintf_r+0x244>)
 80067dc:	429d      	cmp	r5, r3
 80067de:	d101      	bne.n	80067e4 <_vfiprintf_r+0x60>
 80067e0:	68b5      	ldr	r5, [r6, #8]
 80067e2:	e7df      	b.n	80067a4 <_vfiprintf_r+0x20>
 80067e4:	4b79      	ldr	r3, [pc, #484]	; (80069cc <_vfiprintf_r+0x248>)
 80067e6:	429d      	cmp	r5, r3
 80067e8:	bf08      	it	eq
 80067ea:	68f5      	ldreq	r5, [r6, #12]
 80067ec:	e7da      	b.n	80067a4 <_vfiprintf_r+0x20>
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	0598      	lsls	r0, r3, #22
 80067f2:	d4ed      	bmi.n	80067d0 <_vfiprintf_r+0x4c>
 80067f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f6:	f7ff fe54 	bl	80064a2 <__retarget_lock_release_recursive>
 80067fa:	e7e9      	b.n	80067d0 <_vfiprintf_r+0x4c>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	2320      	movs	r3, #32
 8006802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006806:	f8cd 800c 	str.w	r8, [sp, #12]
 800680a:	2330      	movs	r3, #48	; 0x30
 800680c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069d0 <_vfiprintf_r+0x24c>
 8006810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006814:	f04f 0901 	mov.w	r9, #1
 8006818:	4623      	mov	r3, r4
 800681a:	469a      	mov	sl, r3
 800681c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006820:	b10a      	cbz	r2, 8006826 <_vfiprintf_r+0xa2>
 8006822:	2a25      	cmp	r2, #37	; 0x25
 8006824:	d1f9      	bne.n	800681a <_vfiprintf_r+0x96>
 8006826:	ebba 0b04 	subs.w	fp, sl, r4
 800682a:	d00b      	beq.n	8006844 <_vfiprintf_r+0xc0>
 800682c:	465b      	mov	r3, fp
 800682e:	4622      	mov	r2, r4
 8006830:	4629      	mov	r1, r5
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff ff93 	bl	800675e <__sfputs_r>
 8006838:	3001      	adds	r0, #1
 800683a:	f000 80aa 	beq.w	8006992 <_vfiprintf_r+0x20e>
 800683e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006840:	445a      	add	r2, fp
 8006842:	9209      	str	r2, [sp, #36]	; 0x24
 8006844:	f89a 3000 	ldrb.w	r3, [sl]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80a2 	beq.w	8006992 <_vfiprintf_r+0x20e>
 800684e:	2300      	movs	r3, #0
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006858:	f10a 0a01 	add.w	sl, sl, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006864:	931a      	str	r3, [sp, #104]	; 0x68
 8006866:	4654      	mov	r4, sl
 8006868:	2205      	movs	r2, #5
 800686a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686e:	4858      	ldr	r0, [pc, #352]	; (80069d0 <_vfiprintf_r+0x24c>)
 8006870:	f7f9 fcae 	bl	80001d0 <memchr>
 8006874:	9a04      	ldr	r2, [sp, #16]
 8006876:	b9d8      	cbnz	r0, 80068b0 <_vfiprintf_r+0x12c>
 8006878:	06d1      	lsls	r1, r2, #27
 800687a:	bf44      	itt	mi
 800687c:	2320      	movmi	r3, #32
 800687e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006882:	0713      	lsls	r3, r2, #28
 8006884:	bf44      	itt	mi
 8006886:	232b      	movmi	r3, #43	; 0x2b
 8006888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800688c:	f89a 3000 	ldrb.w	r3, [sl]
 8006890:	2b2a      	cmp	r3, #42	; 0x2a
 8006892:	d015      	beq.n	80068c0 <_vfiprintf_r+0x13c>
 8006894:	9a07      	ldr	r2, [sp, #28]
 8006896:	4654      	mov	r4, sl
 8006898:	2000      	movs	r0, #0
 800689a:	f04f 0c0a 	mov.w	ip, #10
 800689e:	4621      	mov	r1, r4
 80068a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a4:	3b30      	subs	r3, #48	; 0x30
 80068a6:	2b09      	cmp	r3, #9
 80068a8:	d94e      	bls.n	8006948 <_vfiprintf_r+0x1c4>
 80068aa:	b1b0      	cbz	r0, 80068da <_vfiprintf_r+0x156>
 80068ac:	9207      	str	r2, [sp, #28]
 80068ae:	e014      	b.n	80068da <_vfiprintf_r+0x156>
 80068b0:	eba0 0308 	sub.w	r3, r0, r8
 80068b4:	fa09 f303 	lsl.w	r3, r9, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	46a2      	mov	sl, r4
 80068be:	e7d2      	b.n	8006866 <_vfiprintf_r+0xe2>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	1d19      	adds	r1, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9103      	str	r1, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfbb      	ittet	lt
 80068cc:	425b      	neglt	r3, r3
 80068ce:	f042 0202 	orrlt.w	r2, r2, #2
 80068d2:	9307      	strge	r3, [sp, #28]
 80068d4:	9307      	strlt	r3, [sp, #28]
 80068d6:	bfb8      	it	lt
 80068d8:	9204      	strlt	r2, [sp, #16]
 80068da:	7823      	ldrb	r3, [r4, #0]
 80068dc:	2b2e      	cmp	r3, #46	; 0x2e
 80068de:	d10c      	bne.n	80068fa <_vfiprintf_r+0x176>
 80068e0:	7863      	ldrb	r3, [r4, #1]
 80068e2:	2b2a      	cmp	r3, #42	; 0x2a
 80068e4:	d135      	bne.n	8006952 <_vfiprintf_r+0x1ce>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	1d1a      	adds	r2, r3, #4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	9203      	str	r2, [sp, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfb8      	it	lt
 80068f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80068f6:	3402      	adds	r4, #2
 80068f8:	9305      	str	r3, [sp, #20]
 80068fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069e0 <_vfiprintf_r+0x25c>
 80068fe:	7821      	ldrb	r1, [r4, #0]
 8006900:	2203      	movs	r2, #3
 8006902:	4650      	mov	r0, sl
 8006904:	f7f9 fc64 	bl	80001d0 <memchr>
 8006908:	b140      	cbz	r0, 800691c <_vfiprintf_r+0x198>
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	eba0 000a 	sub.w	r0, r0, sl
 8006910:	fa03 f000 	lsl.w	r0, r3, r0
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	4303      	orrs	r3, r0
 8006918:	3401      	adds	r4, #1
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006920:	482c      	ldr	r0, [pc, #176]	; (80069d4 <_vfiprintf_r+0x250>)
 8006922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006926:	2206      	movs	r2, #6
 8006928:	f7f9 fc52 	bl	80001d0 <memchr>
 800692c:	2800      	cmp	r0, #0
 800692e:	d03f      	beq.n	80069b0 <_vfiprintf_r+0x22c>
 8006930:	4b29      	ldr	r3, [pc, #164]	; (80069d8 <_vfiprintf_r+0x254>)
 8006932:	bb1b      	cbnz	r3, 800697c <_vfiprintf_r+0x1f8>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	3307      	adds	r3, #7
 8006938:	f023 0307 	bic.w	r3, r3, #7
 800693c:	3308      	adds	r3, #8
 800693e:	9303      	str	r3, [sp, #12]
 8006940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006942:	443b      	add	r3, r7
 8006944:	9309      	str	r3, [sp, #36]	; 0x24
 8006946:	e767      	b.n	8006818 <_vfiprintf_r+0x94>
 8006948:	fb0c 3202 	mla	r2, ip, r2, r3
 800694c:	460c      	mov	r4, r1
 800694e:	2001      	movs	r0, #1
 8006950:	e7a5      	b.n	800689e <_vfiprintf_r+0x11a>
 8006952:	2300      	movs	r3, #0
 8006954:	3401      	adds	r4, #1
 8006956:	9305      	str	r3, [sp, #20]
 8006958:	4619      	mov	r1, r3
 800695a:	f04f 0c0a 	mov.w	ip, #10
 800695e:	4620      	mov	r0, r4
 8006960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006964:	3a30      	subs	r2, #48	; 0x30
 8006966:	2a09      	cmp	r2, #9
 8006968:	d903      	bls.n	8006972 <_vfiprintf_r+0x1ee>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0c5      	beq.n	80068fa <_vfiprintf_r+0x176>
 800696e:	9105      	str	r1, [sp, #20]
 8006970:	e7c3      	b.n	80068fa <_vfiprintf_r+0x176>
 8006972:	fb0c 2101 	mla	r1, ip, r1, r2
 8006976:	4604      	mov	r4, r0
 8006978:	2301      	movs	r3, #1
 800697a:	e7f0      	b.n	800695e <_vfiprintf_r+0x1da>
 800697c:	ab03      	add	r3, sp, #12
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	462a      	mov	r2, r5
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <_vfiprintf_r+0x258>)
 8006984:	a904      	add	r1, sp, #16
 8006986:	4630      	mov	r0, r6
 8006988:	f3af 8000 	nop.w
 800698c:	4607      	mov	r7, r0
 800698e:	1c78      	adds	r0, r7, #1
 8006990:	d1d6      	bne.n	8006940 <_vfiprintf_r+0x1bc>
 8006992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006994:	07d9      	lsls	r1, r3, #31
 8006996:	d405      	bmi.n	80069a4 <_vfiprintf_r+0x220>
 8006998:	89ab      	ldrh	r3, [r5, #12]
 800699a:	059a      	lsls	r2, r3, #22
 800699c:	d402      	bmi.n	80069a4 <_vfiprintf_r+0x220>
 800699e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a0:	f7ff fd7f 	bl	80064a2 <__retarget_lock_release_recursive>
 80069a4:	89ab      	ldrh	r3, [r5, #12]
 80069a6:	065b      	lsls	r3, r3, #25
 80069a8:	f53f af12 	bmi.w	80067d0 <_vfiprintf_r+0x4c>
 80069ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ae:	e711      	b.n	80067d4 <_vfiprintf_r+0x50>
 80069b0:	ab03      	add	r3, sp, #12
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	462a      	mov	r2, r5
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <_vfiprintf_r+0x258>)
 80069b8:	a904      	add	r1, sp, #16
 80069ba:	4630      	mov	r0, r6
 80069bc:	f000 f880 	bl	8006ac0 <_printf_i>
 80069c0:	e7e4      	b.n	800698c <_vfiprintf_r+0x208>
 80069c2:	bf00      	nop
 80069c4:	080076a4 	.word	0x080076a4
 80069c8:	080076c4 	.word	0x080076c4
 80069cc:	08007684 	.word	0x08007684
 80069d0:	080076e4 	.word	0x080076e4
 80069d4:	080076ee 	.word	0x080076ee
 80069d8:	00000000 	.word	0x00000000
 80069dc:	0800675f 	.word	0x0800675f
 80069e0:	080076ea 	.word	0x080076ea

080069e4 <_printf_common>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	4616      	mov	r6, r2
 80069ea:	4699      	mov	r9, r3
 80069ec:	688a      	ldr	r2, [r1, #8]
 80069ee:	690b      	ldr	r3, [r1, #16]
 80069f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	bfb8      	it	lt
 80069f8:	4613      	movlt	r3, r2
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a00:	4607      	mov	r7, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	b10a      	cbz	r2, 8006a0a <_printf_common+0x26>
 8006a06:	3301      	adds	r3, #1
 8006a08:	6033      	str	r3, [r6, #0]
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	0699      	lsls	r1, r3, #26
 8006a0e:	bf42      	ittt	mi
 8006a10:	6833      	ldrmi	r3, [r6, #0]
 8006a12:	3302      	addmi	r3, #2
 8006a14:	6033      	strmi	r3, [r6, #0]
 8006a16:	6825      	ldr	r5, [r4, #0]
 8006a18:	f015 0506 	ands.w	r5, r5, #6
 8006a1c:	d106      	bne.n	8006a2c <_printf_common+0x48>
 8006a1e:	f104 0a19 	add.w	sl, r4, #25
 8006a22:	68e3      	ldr	r3, [r4, #12]
 8006a24:	6832      	ldr	r2, [r6, #0]
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dc26      	bgt.n	8006a7a <_printf_common+0x96>
 8006a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a30:	1e13      	subs	r3, r2, #0
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	bf18      	it	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	0692      	lsls	r2, r2, #26
 8006a3a:	d42b      	bmi.n	8006a94 <_printf_common+0xb0>
 8006a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a40:	4649      	mov	r1, r9
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d01e      	beq.n	8006a88 <_printf_common+0xa4>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	68e5      	ldr	r5, [r4, #12]
 8006a4e:	6832      	ldr	r2, [r6, #0]
 8006a50:	f003 0306 	and.w	r3, r3, #6
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	bf08      	it	eq
 8006a58:	1aad      	subeq	r5, r5, r2
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	6922      	ldr	r2, [r4, #16]
 8006a5e:	bf0c      	ite	eq
 8006a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a64:	2500      	movne	r5, #0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	bfc4      	itt	gt
 8006a6a:	1a9b      	subgt	r3, r3, r2
 8006a6c:	18ed      	addgt	r5, r5, r3
 8006a6e:	2600      	movs	r6, #0
 8006a70:	341a      	adds	r4, #26
 8006a72:	42b5      	cmp	r5, r6
 8006a74:	d11a      	bne.n	8006aac <_printf_common+0xc8>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e008      	b.n	8006a8c <_printf_common+0xa8>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4638      	mov	r0, r7
 8006a82:	47c0      	blx	r8
 8006a84:	3001      	adds	r0, #1
 8006a86:	d103      	bne.n	8006a90 <_printf_common+0xac>
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a90:	3501      	adds	r5, #1
 8006a92:	e7c6      	b.n	8006a22 <_printf_common+0x3e>
 8006a94:	18e1      	adds	r1, r4, r3
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	2030      	movs	r0, #48	; 0x30
 8006a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a9e:	4422      	add	r2, r4
 8006aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	e7c7      	b.n	8006a3c <_printf_common+0x58>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4622      	mov	r2, r4
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0e6      	beq.n	8006a88 <_printf_common+0xa4>
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7d9      	b.n	8006a72 <_printf_common+0x8e>
	...

08006ac0 <_printf_i>:
 8006ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	7e0f      	ldrb	r7, [r1, #24]
 8006ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac8:	2f78      	cmp	r7, #120	; 0x78
 8006aca:	4691      	mov	r9, r2
 8006acc:	4680      	mov	r8, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	469a      	mov	sl, r3
 8006ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ad6:	d807      	bhi.n	8006ae8 <_printf_i+0x28>
 8006ad8:	2f62      	cmp	r7, #98	; 0x62
 8006ada:	d80a      	bhi.n	8006af2 <_printf_i+0x32>
 8006adc:	2f00      	cmp	r7, #0
 8006ade:	f000 80d8 	beq.w	8006c92 <_printf_i+0x1d2>
 8006ae2:	2f58      	cmp	r7, #88	; 0x58
 8006ae4:	f000 80a3 	beq.w	8006c2e <_printf_i+0x16e>
 8006ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006af0:	e03a      	b.n	8006b68 <_printf_i+0xa8>
 8006af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006af6:	2b15      	cmp	r3, #21
 8006af8:	d8f6      	bhi.n	8006ae8 <_printf_i+0x28>
 8006afa:	a101      	add	r1, pc, #4	; (adr r1, 8006b00 <_printf_i+0x40>)
 8006afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006ae9 	.word	0x08006ae9
 8006b0c:	08006ae9 	.word	0x08006ae9
 8006b10:	08006ae9 	.word	0x08006ae9
 8006b14:	08006ae9 	.word	0x08006ae9
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006ae9 	.word	0x08006ae9
 8006b20:	08006ae9 	.word	0x08006ae9
 8006b24:	08006ae9 	.word	0x08006ae9
 8006b28:	08006ae9 	.word	0x08006ae9
 8006b2c:	08006c79 	.word	0x08006c79
 8006b30:	08006b9d 	.word	0x08006b9d
 8006b34:	08006c5b 	.word	0x08006c5b
 8006b38:	08006ae9 	.word	0x08006ae9
 8006b3c:	08006ae9 	.word	0x08006ae9
 8006b40:	08006c9b 	.word	0x08006c9b
 8006b44:	08006ae9 	.word	0x08006ae9
 8006b48:	08006b9d 	.word	0x08006b9d
 8006b4c:	08006ae9 	.word	0x08006ae9
 8006b50:	08006ae9 	.word	0x08006ae9
 8006b54:	08006c63 	.word	0x08006c63
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	602a      	str	r2, [r5, #0]
 8006b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0a3      	b.n	8006cb4 <_printf_i+0x1f4>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	6829      	ldr	r1, [r5, #0]
 8006b70:	0606      	lsls	r6, r0, #24
 8006b72:	f101 0304 	add.w	r3, r1, #4
 8006b76:	d50a      	bpl.n	8006b8e <_printf_i+0xce>
 8006b78:	680e      	ldr	r6, [r1, #0]
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	2e00      	cmp	r6, #0
 8006b7e:	da03      	bge.n	8006b88 <_printf_i+0xc8>
 8006b80:	232d      	movs	r3, #45	; 0x2d
 8006b82:	4276      	negs	r6, r6
 8006b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b88:	485e      	ldr	r0, [pc, #376]	; (8006d04 <_printf_i+0x244>)
 8006b8a:	230a      	movs	r3, #10
 8006b8c:	e019      	b.n	8006bc2 <_printf_i+0x102>
 8006b8e:	680e      	ldr	r6, [r1, #0]
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b96:	bf18      	it	ne
 8006b98:	b236      	sxthne	r6, r6
 8006b9a:	e7ef      	b.n	8006b7c <_printf_i+0xbc>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	1d19      	adds	r1, r3, #4
 8006ba2:	6029      	str	r1, [r5, #0]
 8006ba4:	0601      	lsls	r1, r0, #24
 8006ba6:	d501      	bpl.n	8006bac <_printf_i+0xec>
 8006ba8:	681e      	ldr	r6, [r3, #0]
 8006baa:	e002      	b.n	8006bb2 <_printf_i+0xf2>
 8006bac:	0646      	lsls	r6, r0, #25
 8006bae:	d5fb      	bpl.n	8006ba8 <_printf_i+0xe8>
 8006bb0:	881e      	ldrh	r6, [r3, #0]
 8006bb2:	4854      	ldr	r0, [pc, #336]	; (8006d04 <_printf_i+0x244>)
 8006bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2308      	moveq	r3, #8
 8006bba:	230a      	movne	r3, #10
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bc2:	6865      	ldr	r5, [r4, #4]
 8006bc4:	60a5      	str	r5, [r4, #8]
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	bfa2      	ittt	ge
 8006bca:	6821      	ldrge	r1, [r4, #0]
 8006bcc:	f021 0104 	bicge.w	r1, r1, #4
 8006bd0:	6021      	strge	r1, [r4, #0]
 8006bd2:	b90e      	cbnz	r6, 8006bd8 <_printf_i+0x118>
 8006bd4:	2d00      	cmp	r5, #0
 8006bd6:	d04d      	beq.n	8006c74 <_printf_i+0x1b4>
 8006bd8:	4615      	mov	r5, r2
 8006bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bde:	fb03 6711 	mls	r7, r3, r1, r6
 8006be2:	5dc7      	ldrb	r7, [r0, r7]
 8006be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006be8:	4637      	mov	r7, r6
 8006bea:	42bb      	cmp	r3, r7
 8006bec:	460e      	mov	r6, r1
 8006bee:	d9f4      	bls.n	8006bda <_printf_i+0x11a>
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d10b      	bne.n	8006c0c <_printf_i+0x14c>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	07de      	lsls	r6, r3, #31
 8006bf8:	d508      	bpl.n	8006c0c <_printf_i+0x14c>
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	6861      	ldr	r1, [r4, #4]
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	bfde      	ittt	le
 8006c02:	2330      	movle	r3, #48	; 0x30
 8006c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c0c:	1b52      	subs	r2, r2, r5
 8006c0e:	6122      	str	r2, [r4, #16]
 8006c10:	f8cd a000 	str.w	sl, [sp]
 8006c14:	464b      	mov	r3, r9
 8006c16:	aa03      	add	r2, sp, #12
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f7ff fee2 	bl	80069e4 <_printf_common>
 8006c20:	3001      	adds	r0, #1
 8006c22:	d14c      	bne.n	8006cbe <_printf_i+0x1fe>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b004      	add	sp, #16
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	4835      	ldr	r0, [pc, #212]	; (8006d04 <_printf_i+0x244>)
 8006c30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c34:	6829      	ldr	r1, [r5, #0]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c3c:	6029      	str	r1, [r5, #0]
 8006c3e:	061d      	lsls	r5, r3, #24
 8006c40:	d514      	bpl.n	8006c6c <_printf_i+0x1ac>
 8006c42:	07df      	lsls	r7, r3, #31
 8006c44:	bf44      	itt	mi
 8006c46:	f043 0320 	orrmi.w	r3, r3, #32
 8006c4a:	6023      	strmi	r3, [r4, #0]
 8006c4c:	b91e      	cbnz	r6, 8006c56 <_printf_i+0x196>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	f023 0320 	bic.w	r3, r3, #32
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	2310      	movs	r3, #16
 8006c58:	e7b0      	b.n	8006bbc <_printf_i+0xfc>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f043 0320 	orr.w	r3, r3, #32
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	2378      	movs	r3, #120	; 0x78
 8006c64:	4828      	ldr	r0, [pc, #160]	; (8006d08 <_printf_i+0x248>)
 8006c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c6a:	e7e3      	b.n	8006c34 <_printf_i+0x174>
 8006c6c:	0659      	lsls	r1, r3, #25
 8006c6e:	bf48      	it	mi
 8006c70:	b2b6      	uxthmi	r6, r6
 8006c72:	e7e6      	b.n	8006c42 <_printf_i+0x182>
 8006c74:	4615      	mov	r5, r2
 8006c76:	e7bb      	b.n	8006bf0 <_printf_i+0x130>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	6826      	ldr	r6, [r4, #0]
 8006c7c:	6961      	ldr	r1, [r4, #20]
 8006c7e:	1d18      	adds	r0, r3, #4
 8006c80:	6028      	str	r0, [r5, #0]
 8006c82:	0635      	lsls	r5, r6, #24
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0x1cc>
 8006c88:	6019      	str	r1, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <_printf_i+0x1d2>
 8006c8c:	0670      	lsls	r0, r6, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0x1c8>
 8006c90:	8019      	strh	r1, [r3, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	4615      	mov	r5, r2
 8006c98:	e7ba      	b.n	8006c10 <_printf_i+0x150>
 8006c9a:	682b      	ldr	r3, [r5, #0]
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	602a      	str	r2, [r5, #0]
 8006ca0:	681d      	ldr	r5, [r3, #0]
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f7f9 fa92 	bl	80001d0 <memchr>
 8006cac:	b108      	cbz	r0, 8006cb2 <_printf_i+0x1f2>
 8006cae:	1b40      	subs	r0, r0, r5
 8006cb0:	6060      	str	r0, [r4, #4]
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cbc:	e7a8      	b.n	8006c10 <_printf_i+0x150>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	47d0      	blx	sl
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d0ab      	beq.n	8006c24 <_printf_i+0x164>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	079b      	lsls	r3, r3, #30
 8006cd0:	d413      	bmi.n	8006cfa <_printf_i+0x23a>
 8006cd2:	68e0      	ldr	r0, [r4, #12]
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	4298      	cmp	r0, r3
 8006cd8:	bfb8      	it	lt
 8006cda:	4618      	movlt	r0, r3
 8006cdc:	e7a4      	b.n	8006c28 <_printf_i+0x168>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	47d0      	blx	sl
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d09b      	beq.n	8006c24 <_printf_i+0x164>
 8006cec:	3501      	adds	r5, #1
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	9903      	ldr	r1, [sp, #12]
 8006cf2:	1a5b      	subs	r3, r3, r1
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	dcf2      	bgt.n	8006cde <_printf_i+0x21e>
 8006cf8:	e7eb      	b.n	8006cd2 <_printf_i+0x212>
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	f104 0619 	add.w	r6, r4, #25
 8006d00:	e7f5      	b.n	8006cee <_printf_i+0x22e>
 8006d02:	bf00      	nop
 8006d04:	080076f5 	.word	0x080076f5
 8006d08:	08007706 	.word	0x08007706

08006d0c <_sbrk_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	; (8006d28 <_sbrk_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fa ff72 	bl	8001c00 <_sbrk>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_sbrk_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_sbrk_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	200002c4 	.word	0x200002c4

08006d2c <__sread>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	460c      	mov	r4, r1
 8006d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d34:	f000 f8a0 	bl	8006e78 <_read_r>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	bfab      	itete	ge
 8006d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d40:	181b      	addge	r3, r3, r0
 8006d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d46:	bfac      	ite	ge
 8006d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d4a:	81a3      	strhlt	r3, [r4, #12]
 8006d4c:	bd10      	pop	{r4, pc}

08006d4e <__swrite>:
 8006d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d52:	461f      	mov	r7, r3
 8006d54:	898b      	ldrh	r3, [r1, #12]
 8006d56:	05db      	lsls	r3, r3, #23
 8006d58:	4605      	mov	r5, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	d505      	bpl.n	8006d6c <__swrite+0x1e>
 8006d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d64:	2302      	movs	r3, #2
 8006d66:	2200      	movs	r2, #0
 8006d68:	f000 f868 	bl	8006e3c <_lseek_r>
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	4632      	mov	r2, r6
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d82:	f000 b817 	b.w	8006db4 <_write_r>

08006d86 <__sseek>:
 8006d86:	b510      	push	{r4, lr}
 8006d88:	460c      	mov	r4, r1
 8006d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d8e:	f000 f855 	bl	8006e3c <_lseek_r>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	bf15      	itete	ne
 8006d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006da2:	81a3      	strheq	r3, [r4, #12]
 8006da4:	bf18      	it	ne
 8006da6:	81a3      	strhne	r3, [r4, #12]
 8006da8:	bd10      	pop	{r4, pc}

08006daa <__sclose>:
 8006daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dae:	f000 b813 	b.w	8006dd8 <_close_r>
	...

08006db4 <_write_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d07      	ldr	r5, [pc, #28]	; (8006dd4 <_write_r+0x20>)
 8006db8:	4604      	mov	r4, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7f9 ff10 	bl	8000be8 <_write>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_write_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_write_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	200002c4 	.word	0x200002c4

08006dd8 <_close_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d06      	ldr	r5, [pc, #24]	; (8006df4 <_close_r+0x1c>)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	4608      	mov	r0, r1
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	f7fa fed8 	bl	8001b98 <_close>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d102      	bne.n	8006df2 <_close_r+0x1a>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	b103      	cbz	r3, 8006df2 <_close_r+0x1a>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	200002c4 	.word	0x200002c4

08006df8 <_fstat_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_fstat_r+0x20>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f7fa fed3 	bl	8001bb0 <_fstat>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d102      	bne.n	8006e14 <_fstat_r+0x1c>
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	b103      	cbz	r3, 8006e14 <_fstat_r+0x1c>
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	200002c4 	.word	0x200002c4

08006e1c <_isatty_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_isatty_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fa fed2 	bl	8001bd0 <_isatty>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_isatty_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_isatty_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	200002c4 	.word	0x200002c4

08006e3c <_lseek_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d07      	ldr	r5, [pc, #28]	; (8006e5c <_lseek_r+0x20>)
 8006e40:	4604      	mov	r4, r0
 8006e42:	4608      	mov	r0, r1
 8006e44:	4611      	mov	r1, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	602a      	str	r2, [r5, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f7fa fecb 	bl	8001be6 <_lseek>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_lseek_r+0x1e>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_lseek_r+0x1e>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	200002c4 	.word	0x200002c4

08006e60 <__malloc_lock>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__malloc_lock+0x8>)
 8006e62:	f7ff bb1d 	b.w	80064a0 <__retarget_lock_acquire_recursive>
 8006e66:	bf00      	nop
 8006e68:	200002b8 	.word	0x200002b8

08006e6c <__malloc_unlock>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__malloc_unlock+0x8>)
 8006e6e:	f7ff bb18 	b.w	80064a2 <__retarget_lock_release_recursive>
 8006e72:	bf00      	nop
 8006e74:	200002b8 	.word	0x200002b8

08006e78 <_read_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	; (8006e98 <_read_r+0x20>)
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	4608      	mov	r0, r1
 8006e80:	4611      	mov	r1, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f7fa fe69 	bl	8001b5e <_read>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_read_r+0x1e>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_read_r+0x1e>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	200002c4 	.word	0x200002c4

08006e9c <atan2>:
 8006e9c:	f000 b82c 	b.w	8006ef8 <__ieee754_atan2>

08006ea0 <sqrt>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	ed2d 8b02 	vpush	{d8}
 8006ea6:	ec55 4b10 	vmov	r4, r5, d0
 8006eaa:	f000 f8ef 	bl	800708c <__ieee754_sqrt>
 8006eae:	4622      	mov	r2, r4
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8006eba:	eef0 8a60 	vmov.f32	s17, s1
 8006ebe:	f7f9 fe2d 	bl	8000b1c <__aeabi_dcmpun>
 8006ec2:	b990      	cbnz	r0, 8006eea <sqrt+0x4a>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	f7f9 fdfe 	bl	8000acc <__aeabi_dcmplt>
 8006ed0:	b158      	cbz	r0, 8006eea <sqrt+0x4a>
 8006ed2:	f7fe ffad 	bl	8005e30 <__errno>
 8006ed6:	2321      	movs	r3, #33	; 0x21
 8006ed8:	6003      	str	r3, [r0, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	2300      	movs	r3, #0
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f7f9 fcab 	bl	800083c <__aeabi_ddiv>
 8006ee6:	ec41 0b18 	vmov	d8, r0, r1
 8006eea:	eeb0 0a48 	vmov.f32	s0, s16
 8006eee:	eef0 0a68 	vmov.f32	s1, s17
 8006ef2:	ecbd 8b02 	vpop	{d8}
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}

08006ef8 <__ieee754_atan2>:
 8006ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	ec57 6b11 	vmov	r6, r7, d1
 8006f00:	4273      	negs	r3, r6
 8006f02:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007088 <__ieee754_atan2+0x190>
 8006f06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006f0a:	4333      	orrs	r3, r6
 8006f0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006f10:	4573      	cmp	r3, lr
 8006f12:	ec51 0b10 	vmov	r0, r1, d0
 8006f16:	ee11 8a10 	vmov	r8, s2
 8006f1a:	d80a      	bhi.n	8006f32 <__ieee754_atan2+0x3a>
 8006f1c:	4244      	negs	r4, r0
 8006f1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f22:	4304      	orrs	r4, r0
 8006f24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006f28:	4574      	cmp	r4, lr
 8006f2a:	ee10 9a10 	vmov	r9, s0
 8006f2e:	468c      	mov	ip, r1
 8006f30:	d907      	bls.n	8006f42 <__ieee754_atan2+0x4a>
 8006f32:	4632      	mov	r2, r6
 8006f34:	463b      	mov	r3, r7
 8006f36:	f7f9 f9a1 	bl	800027c <__adddf3>
 8006f3a:	ec41 0b10 	vmov	d0, r0, r1
 8006f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006f46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f4a:	4334      	orrs	r4, r6
 8006f4c:	d103      	bne.n	8006f56 <__ieee754_atan2+0x5e>
 8006f4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f52:	f000 b94d 	b.w	80071f0 <atan>
 8006f56:	17bc      	asrs	r4, r7, #30
 8006f58:	f004 0402 	and.w	r4, r4, #2
 8006f5c:	ea53 0909 	orrs.w	r9, r3, r9
 8006f60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006f64:	d107      	bne.n	8006f76 <__ieee754_atan2+0x7e>
 8006f66:	2c02      	cmp	r4, #2
 8006f68:	d060      	beq.n	800702c <__ieee754_atan2+0x134>
 8006f6a:	2c03      	cmp	r4, #3
 8006f6c:	d1e5      	bne.n	8006f3a <__ieee754_atan2+0x42>
 8006f6e:	a142      	add	r1, pc, #264	; (adr r1, 8007078 <__ieee754_atan2+0x180>)
 8006f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f74:	e7e1      	b.n	8006f3a <__ieee754_atan2+0x42>
 8006f76:	ea52 0808 	orrs.w	r8, r2, r8
 8006f7a:	d106      	bne.n	8006f8a <__ieee754_atan2+0x92>
 8006f7c:	f1bc 0f00 	cmp.w	ip, #0
 8006f80:	da5f      	bge.n	8007042 <__ieee754_atan2+0x14a>
 8006f82:	a13f      	add	r1, pc, #252	; (adr r1, 8007080 <__ieee754_atan2+0x188>)
 8006f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f88:	e7d7      	b.n	8006f3a <__ieee754_atan2+0x42>
 8006f8a:	4572      	cmp	r2, lr
 8006f8c:	d10f      	bne.n	8006fae <__ieee754_atan2+0xb6>
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f94:	d107      	bne.n	8006fa6 <__ieee754_atan2+0xae>
 8006f96:	2c02      	cmp	r4, #2
 8006f98:	d84c      	bhi.n	8007034 <__ieee754_atan2+0x13c>
 8006f9a:	4b35      	ldr	r3, [pc, #212]	; (8007070 <__ieee754_atan2+0x178>)
 8006f9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006fa0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006fa4:	e7c9      	b.n	8006f3a <__ieee754_atan2+0x42>
 8006fa6:	2c02      	cmp	r4, #2
 8006fa8:	d848      	bhi.n	800703c <__ieee754_atan2+0x144>
 8006faa:	4b32      	ldr	r3, [pc, #200]	; (8007074 <__ieee754_atan2+0x17c>)
 8006fac:	e7f6      	b.n	8006f9c <__ieee754_atan2+0xa4>
 8006fae:	4573      	cmp	r3, lr
 8006fb0:	d0e4      	beq.n	8006f7c <__ieee754_atan2+0x84>
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006fb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006fbc:	da1e      	bge.n	8006ffc <__ieee754_atan2+0x104>
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	da01      	bge.n	8006fc6 <__ieee754_atan2+0xce>
 8006fc2:	323c      	adds	r2, #60	; 0x3c
 8006fc4:	db1e      	blt.n	8007004 <__ieee754_atan2+0x10c>
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	463b      	mov	r3, r7
 8006fca:	f7f9 fc37 	bl	800083c <__aeabi_ddiv>
 8006fce:	ec41 0b10 	vmov	d0, r0, r1
 8006fd2:	f000 faad 	bl	8007530 <fabs>
 8006fd6:	f000 f90b 	bl	80071f0 <atan>
 8006fda:	ec51 0b10 	vmov	r0, r1, d0
 8006fde:	2c01      	cmp	r4, #1
 8006fe0:	d013      	beq.n	800700a <__ieee754_atan2+0x112>
 8006fe2:	2c02      	cmp	r4, #2
 8006fe4:	d015      	beq.n	8007012 <__ieee754_atan2+0x11a>
 8006fe6:	2c00      	cmp	r4, #0
 8006fe8:	d0a7      	beq.n	8006f3a <__ieee754_atan2+0x42>
 8006fea:	a319      	add	r3, pc, #100	; (adr r3, 8007050 <__ieee754_atan2+0x158>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f7f9 f942 	bl	8000278 <__aeabi_dsub>
 8006ff4:	a318      	add	r3, pc, #96	; (adr r3, 8007058 <__ieee754_atan2+0x160>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	e014      	b.n	8007026 <__ieee754_atan2+0x12e>
 8006ffc:	a118      	add	r1, pc, #96	; (adr r1, 8007060 <__ieee754_atan2+0x168>)
 8006ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007002:	e7ec      	b.n	8006fde <__ieee754_atan2+0xe6>
 8007004:	2000      	movs	r0, #0
 8007006:	2100      	movs	r1, #0
 8007008:	e7e9      	b.n	8006fde <__ieee754_atan2+0xe6>
 800700a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800700e:	4619      	mov	r1, r3
 8007010:	e793      	b.n	8006f3a <__ieee754_atan2+0x42>
 8007012:	a30f      	add	r3, pc, #60	; (adr r3, 8007050 <__ieee754_atan2+0x158>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 f92e 	bl	8000278 <__aeabi_dsub>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	a10d      	add	r1, pc, #52	; (adr r1, 8007058 <__ieee754_atan2+0x160>)
 8007022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007026:	f7f9 f927 	bl	8000278 <__aeabi_dsub>
 800702a:	e786      	b.n	8006f3a <__ieee754_atan2+0x42>
 800702c:	a10a      	add	r1, pc, #40	; (adr r1, 8007058 <__ieee754_atan2+0x160>)
 800702e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007032:	e782      	b.n	8006f3a <__ieee754_atan2+0x42>
 8007034:	a10c      	add	r1, pc, #48	; (adr r1, 8007068 <__ieee754_atan2+0x170>)
 8007036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703a:	e77e      	b.n	8006f3a <__ieee754_atan2+0x42>
 800703c:	2000      	movs	r0, #0
 800703e:	2100      	movs	r1, #0
 8007040:	e77b      	b.n	8006f3a <__ieee754_atan2+0x42>
 8007042:	a107      	add	r1, pc, #28	; (adr r1, 8007060 <__ieee754_atan2+0x168>)
 8007044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007048:	e777      	b.n	8006f3a <__ieee754_atan2+0x42>
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w
 8007050:	33145c07 	.word	0x33145c07
 8007054:	3ca1a626 	.word	0x3ca1a626
 8007058:	54442d18 	.word	0x54442d18
 800705c:	400921fb 	.word	0x400921fb
 8007060:	54442d18 	.word	0x54442d18
 8007064:	3ff921fb 	.word	0x3ff921fb
 8007068:	54442d18 	.word	0x54442d18
 800706c:	3fe921fb 	.word	0x3fe921fb
 8007070:	08007718 	.word	0x08007718
 8007074:	08007730 	.word	0x08007730
 8007078:	54442d18 	.word	0x54442d18
 800707c:	c00921fb 	.word	0xc00921fb
 8007080:	54442d18 	.word	0x54442d18
 8007084:	bff921fb 	.word	0xbff921fb
 8007088:	7ff00000 	.word	0x7ff00000

0800708c <__ieee754_sqrt>:
 800708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007090:	ec55 4b10 	vmov	r4, r5, d0
 8007094:	4e55      	ldr	r6, [pc, #340]	; (80071ec <__ieee754_sqrt+0x160>)
 8007096:	43ae      	bics	r6, r5
 8007098:	ee10 0a10 	vmov	r0, s0
 800709c:	ee10 3a10 	vmov	r3, s0
 80070a0:	462a      	mov	r2, r5
 80070a2:	4629      	mov	r1, r5
 80070a4:	d110      	bne.n	80070c8 <__ieee754_sqrt+0x3c>
 80070a6:	ee10 2a10 	vmov	r2, s0
 80070aa:	462b      	mov	r3, r5
 80070ac:	f7f9 fa9c 	bl	80005e8 <__aeabi_dmul>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4620      	mov	r0, r4
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7f9 f8e0 	bl	800027c <__adddf3>
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	ec45 4b10 	vmov	d0, r4, r5
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	dc10      	bgt.n	80070ee <__ieee754_sqrt+0x62>
 80070cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070d0:	4330      	orrs	r0, r6
 80070d2:	d0f5      	beq.n	80070c0 <__ieee754_sqrt+0x34>
 80070d4:	b15d      	cbz	r5, 80070ee <__ieee754_sqrt+0x62>
 80070d6:	ee10 2a10 	vmov	r2, s0
 80070da:	462b      	mov	r3, r5
 80070dc:	ee10 0a10 	vmov	r0, s0
 80070e0:	f7f9 f8ca 	bl	8000278 <__aeabi_dsub>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	f7f9 fba8 	bl	800083c <__aeabi_ddiv>
 80070ec:	e7e6      	b.n	80070bc <__ieee754_sqrt+0x30>
 80070ee:	1512      	asrs	r2, r2, #20
 80070f0:	d074      	beq.n	80071dc <__ieee754_sqrt+0x150>
 80070f2:	07d4      	lsls	r4, r2, #31
 80070f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80070f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80070fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007100:	bf5e      	ittt	pl
 8007102:	0fda      	lsrpl	r2, r3, #31
 8007104:	005b      	lslpl	r3, r3, #1
 8007106:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800710a:	2400      	movs	r4, #0
 800710c:	0fda      	lsrs	r2, r3, #31
 800710e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007112:	107f      	asrs	r7, r7, #1
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	2516      	movs	r5, #22
 8007118:	4620      	mov	r0, r4
 800711a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800711e:	1886      	adds	r6, r0, r2
 8007120:	428e      	cmp	r6, r1
 8007122:	bfde      	ittt	le
 8007124:	1b89      	suble	r1, r1, r6
 8007126:	18b0      	addle	r0, r6, r2
 8007128:	18a4      	addle	r4, r4, r2
 800712a:	0049      	lsls	r1, r1, #1
 800712c:	3d01      	subs	r5, #1
 800712e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007132:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007136:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800713a:	d1f0      	bne.n	800711e <__ieee754_sqrt+0x92>
 800713c:	462a      	mov	r2, r5
 800713e:	f04f 0e20 	mov.w	lr, #32
 8007142:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007146:	4281      	cmp	r1, r0
 8007148:	eb06 0c05 	add.w	ip, r6, r5
 800714c:	dc02      	bgt.n	8007154 <__ieee754_sqrt+0xc8>
 800714e:	d113      	bne.n	8007178 <__ieee754_sqrt+0xec>
 8007150:	459c      	cmp	ip, r3
 8007152:	d811      	bhi.n	8007178 <__ieee754_sqrt+0xec>
 8007154:	f1bc 0f00 	cmp.w	ip, #0
 8007158:	eb0c 0506 	add.w	r5, ip, r6
 800715c:	da43      	bge.n	80071e6 <__ieee754_sqrt+0x15a>
 800715e:	2d00      	cmp	r5, #0
 8007160:	db41      	blt.n	80071e6 <__ieee754_sqrt+0x15a>
 8007162:	f100 0801 	add.w	r8, r0, #1
 8007166:	1a09      	subs	r1, r1, r0
 8007168:	459c      	cmp	ip, r3
 800716a:	bf88      	it	hi
 800716c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007170:	eba3 030c 	sub.w	r3, r3, ip
 8007174:	4432      	add	r2, r6
 8007176:	4640      	mov	r0, r8
 8007178:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800717c:	f1be 0e01 	subs.w	lr, lr, #1
 8007180:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007184:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007188:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800718c:	d1db      	bne.n	8007146 <__ieee754_sqrt+0xba>
 800718e:	430b      	orrs	r3, r1
 8007190:	d006      	beq.n	80071a0 <__ieee754_sqrt+0x114>
 8007192:	1c50      	adds	r0, r2, #1
 8007194:	bf13      	iteet	ne
 8007196:	3201      	addne	r2, #1
 8007198:	3401      	addeq	r4, #1
 800719a:	4672      	moveq	r2, lr
 800719c:	f022 0201 	bicne.w	r2, r2, #1
 80071a0:	1063      	asrs	r3, r4, #1
 80071a2:	0852      	lsrs	r2, r2, #1
 80071a4:	07e1      	lsls	r1, r4, #31
 80071a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071ae:	bf48      	it	mi
 80071b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80071b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80071b8:	4614      	mov	r4, r2
 80071ba:	e781      	b.n	80070c0 <__ieee754_sqrt+0x34>
 80071bc:	0ad9      	lsrs	r1, r3, #11
 80071be:	3815      	subs	r0, #21
 80071c0:	055b      	lsls	r3, r3, #21
 80071c2:	2900      	cmp	r1, #0
 80071c4:	d0fa      	beq.n	80071bc <__ieee754_sqrt+0x130>
 80071c6:	02cd      	lsls	r5, r1, #11
 80071c8:	d50a      	bpl.n	80071e0 <__ieee754_sqrt+0x154>
 80071ca:	f1c2 0420 	rsb	r4, r2, #32
 80071ce:	fa23 f404 	lsr.w	r4, r3, r4
 80071d2:	1e55      	subs	r5, r2, #1
 80071d4:	4093      	lsls	r3, r2
 80071d6:	4321      	orrs	r1, r4
 80071d8:	1b42      	subs	r2, r0, r5
 80071da:	e78a      	b.n	80070f2 <__ieee754_sqrt+0x66>
 80071dc:	4610      	mov	r0, r2
 80071de:	e7f0      	b.n	80071c2 <__ieee754_sqrt+0x136>
 80071e0:	0049      	lsls	r1, r1, #1
 80071e2:	3201      	adds	r2, #1
 80071e4:	e7ef      	b.n	80071c6 <__ieee754_sqrt+0x13a>
 80071e6:	4680      	mov	r8, r0
 80071e8:	e7bd      	b.n	8007166 <__ieee754_sqrt+0xda>
 80071ea:	bf00      	nop
 80071ec:	7ff00000 	.word	0x7ff00000

080071f0 <atan>:
 80071f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	ec55 4b10 	vmov	r4, r5, d0
 80071f8:	4bc3      	ldr	r3, [pc, #780]	; (8007508 <atan+0x318>)
 80071fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80071fe:	429e      	cmp	r6, r3
 8007200:	46ab      	mov	fp, r5
 8007202:	dd18      	ble.n	8007236 <atan+0x46>
 8007204:	4bc1      	ldr	r3, [pc, #772]	; (800750c <atan+0x31c>)
 8007206:	429e      	cmp	r6, r3
 8007208:	dc01      	bgt.n	800720e <atan+0x1e>
 800720a:	d109      	bne.n	8007220 <atan+0x30>
 800720c:	b144      	cbz	r4, 8007220 <atan+0x30>
 800720e:	4622      	mov	r2, r4
 8007210:	462b      	mov	r3, r5
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 f831 	bl	800027c <__adddf3>
 800721a:	4604      	mov	r4, r0
 800721c:	460d      	mov	r5, r1
 800721e:	e006      	b.n	800722e <atan+0x3e>
 8007220:	f1bb 0f00 	cmp.w	fp, #0
 8007224:	f300 8131 	bgt.w	800748a <atan+0x29a>
 8007228:	a59b      	add	r5, pc, #620	; (adr r5, 8007498 <atan+0x2a8>)
 800722a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800722e:	ec45 4b10 	vmov	d0, r4, r5
 8007232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	4bb6      	ldr	r3, [pc, #728]	; (8007510 <atan+0x320>)
 8007238:	429e      	cmp	r6, r3
 800723a:	dc14      	bgt.n	8007266 <atan+0x76>
 800723c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007240:	429e      	cmp	r6, r3
 8007242:	dc0d      	bgt.n	8007260 <atan+0x70>
 8007244:	a396      	add	r3, pc, #600	; (adr r3, 80074a0 <atan+0x2b0>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	ee10 0a10 	vmov	r0, s0
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 f814 	bl	800027c <__adddf3>
 8007254:	4baf      	ldr	r3, [pc, #700]	; (8007514 <atan+0x324>)
 8007256:	2200      	movs	r2, #0
 8007258:	f7f9 fc56 	bl	8000b08 <__aeabi_dcmpgt>
 800725c:	2800      	cmp	r0, #0
 800725e:	d1e6      	bne.n	800722e <atan+0x3e>
 8007260:	f04f 3aff 	mov.w	sl, #4294967295
 8007264:	e02b      	b.n	80072be <atan+0xce>
 8007266:	f000 f963 	bl	8007530 <fabs>
 800726a:	4bab      	ldr	r3, [pc, #684]	; (8007518 <atan+0x328>)
 800726c:	429e      	cmp	r6, r3
 800726e:	ec55 4b10 	vmov	r4, r5, d0
 8007272:	f300 80bf 	bgt.w	80073f4 <atan+0x204>
 8007276:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800727a:	429e      	cmp	r6, r3
 800727c:	f300 80a0 	bgt.w	80073c0 <atan+0x1d0>
 8007280:	ee10 2a10 	vmov	r2, s0
 8007284:	ee10 0a10 	vmov	r0, s0
 8007288:	462b      	mov	r3, r5
 800728a:	4629      	mov	r1, r5
 800728c:	f7f8 fff6 	bl	800027c <__adddf3>
 8007290:	4ba0      	ldr	r3, [pc, #640]	; (8007514 <atan+0x324>)
 8007292:	2200      	movs	r2, #0
 8007294:	f7f8 fff0 	bl	8000278 <__aeabi_dsub>
 8007298:	2200      	movs	r2, #0
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072a2:	4620      	mov	r0, r4
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7f8 ffe9 	bl	800027c <__adddf3>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4630      	mov	r0, r6
 80072b0:	4639      	mov	r1, r7
 80072b2:	f7f9 fac3 	bl	800083c <__aeabi_ddiv>
 80072b6:	f04f 0a00 	mov.w	sl, #0
 80072ba:	4604      	mov	r4, r0
 80072bc:	460d      	mov	r5, r1
 80072be:	4622      	mov	r2, r4
 80072c0:	462b      	mov	r3, r5
 80072c2:	4620      	mov	r0, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	f7f9 f98f 	bl	80005e8 <__aeabi_dmul>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4680      	mov	r8, r0
 80072d0:	4689      	mov	r9, r1
 80072d2:	f7f9 f989 	bl	80005e8 <__aeabi_dmul>
 80072d6:	a374      	add	r3, pc, #464	; (adr r3, 80074a8 <atan+0x2b8>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	4606      	mov	r6, r0
 80072de:	460f      	mov	r7, r1
 80072e0:	f7f9 f982 	bl	80005e8 <__aeabi_dmul>
 80072e4:	a372      	add	r3, pc, #456	; (adr r3, 80074b0 <atan+0x2c0>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f7f8 ffc7 	bl	800027c <__adddf3>
 80072ee:	4632      	mov	r2, r6
 80072f0:	463b      	mov	r3, r7
 80072f2:	f7f9 f979 	bl	80005e8 <__aeabi_dmul>
 80072f6:	a370      	add	r3, pc, #448	; (adr r3, 80074b8 <atan+0x2c8>)
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f7f8 ffbe 	bl	800027c <__adddf3>
 8007300:	4632      	mov	r2, r6
 8007302:	463b      	mov	r3, r7
 8007304:	f7f9 f970 	bl	80005e8 <__aeabi_dmul>
 8007308:	a36d      	add	r3, pc, #436	; (adr r3, 80074c0 <atan+0x2d0>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f7f8 ffb5 	bl	800027c <__adddf3>
 8007312:	4632      	mov	r2, r6
 8007314:	463b      	mov	r3, r7
 8007316:	f7f9 f967 	bl	80005e8 <__aeabi_dmul>
 800731a:	a36b      	add	r3, pc, #428	; (adr r3, 80074c8 <atan+0x2d8>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f7f8 ffac 	bl	800027c <__adddf3>
 8007324:	4632      	mov	r2, r6
 8007326:	463b      	mov	r3, r7
 8007328:	f7f9 f95e 	bl	80005e8 <__aeabi_dmul>
 800732c:	a368      	add	r3, pc, #416	; (adr r3, 80074d0 <atan+0x2e0>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f8 ffa3 	bl	800027c <__adddf3>
 8007336:	4642      	mov	r2, r8
 8007338:	464b      	mov	r3, r9
 800733a:	f7f9 f955 	bl	80005e8 <__aeabi_dmul>
 800733e:	a366      	add	r3, pc, #408	; (adr r3, 80074d8 <atan+0x2e8>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	4680      	mov	r8, r0
 8007346:	4689      	mov	r9, r1
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 f94c 	bl	80005e8 <__aeabi_dmul>
 8007350:	a363      	add	r3, pc, #396	; (adr r3, 80074e0 <atan+0x2f0>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f8 ff8f 	bl	8000278 <__aeabi_dsub>
 800735a:	4632      	mov	r2, r6
 800735c:	463b      	mov	r3, r7
 800735e:	f7f9 f943 	bl	80005e8 <__aeabi_dmul>
 8007362:	a361      	add	r3, pc, #388	; (adr r3, 80074e8 <atan+0x2f8>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f8 ff86 	bl	8000278 <__aeabi_dsub>
 800736c:	4632      	mov	r2, r6
 800736e:	463b      	mov	r3, r7
 8007370:	f7f9 f93a 	bl	80005e8 <__aeabi_dmul>
 8007374:	a35e      	add	r3, pc, #376	; (adr r3, 80074f0 <atan+0x300>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 ff7d 	bl	8000278 <__aeabi_dsub>
 800737e:	4632      	mov	r2, r6
 8007380:	463b      	mov	r3, r7
 8007382:	f7f9 f931 	bl	80005e8 <__aeabi_dmul>
 8007386:	a35c      	add	r3, pc, #368	; (adr r3, 80074f8 <atan+0x308>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f8 ff74 	bl	8000278 <__aeabi_dsub>
 8007390:	4632      	mov	r2, r6
 8007392:	463b      	mov	r3, r7
 8007394:	f7f9 f928 	bl	80005e8 <__aeabi_dmul>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4640      	mov	r0, r8
 800739e:	4649      	mov	r1, r9
 80073a0:	f7f8 ff6c 	bl	800027c <__adddf3>
 80073a4:	4622      	mov	r2, r4
 80073a6:	462b      	mov	r3, r5
 80073a8:	f7f9 f91e 	bl	80005e8 <__aeabi_dmul>
 80073ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	d14b      	bne.n	800744e <atan+0x25e>
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7f8 ff5d 	bl	8000278 <__aeabi_dsub>
 80073be:	e72c      	b.n	800721a <atan+0x2a>
 80073c0:	ee10 0a10 	vmov	r0, s0
 80073c4:	4b53      	ldr	r3, [pc, #332]	; (8007514 <atan+0x324>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	4629      	mov	r1, r5
 80073ca:	f7f8 ff55 	bl	8000278 <__aeabi_dsub>
 80073ce:	4b51      	ldr	r3, [pc, #324]	; (8007514 <atan+0x324>)
 80073d0:	4606      	mov	r6, r0
 80073d2:	460f      	mov	r7, r1
 80073d4:	2200      	movs	r2, #0
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f8 ff4f 	bl	800027c <__adddf3>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4630      	mov	r0, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7f9 fa29 	bl	800083c <__aeabi_ddiv>
 80073ea:	f04f 0a01 	mov.w	sl, #1
 80073ee:	4604      	mov	r4, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	e764      	b.n	80072be <atan+0xce>
 80073f4:	4b49      	ldr	r3, [pc, #292]	; (800751c <atan+0x32c>)
 80073f6:	429e      	cmp	r6, r3
 80073f8:	da1d      	bge.n	8007436 <atan+0x246>
 80073fa:	ee10 0a10 	vmov	r0, s0
 80073fe:	4b48      	ldr	r3, [pc, #288]	; (8007520 <atan+0x330>)
 8007400:	2200      	movs	r2, #0
 8007402:	4629      	mov	r1, r5
 8007404:	f7f8 ff38 	bl	8000278 <__aeabi_dsub>
 8007408:	4b45      	ldr	r3, [pc, #276]	; (8007520 <atan+0x330>)
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	2200      	movs	r2, #0
 8007410:	4620      	mov	r0, r4
 8007412:	4629      	mov	r1, r5
 8007414:	f7f9 f8e8 	bl	80005e8 <__aeabi_dmul>
 8007418:	4b3e      	ldr	r3, [pc, #248]	; (8007514 <atan+0x324>)
 800741a:	2200      	movs	r2, #0
 800741c:	f7f8 ff2e 	bl	800027c <__adddf3>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f9 fa08 	bl	800083c <__aeabi_ddiv>
 800742c:	f04f 0a02 	mov.w	sl, #2
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	e743      	b.n	80072be <atan+0xce>
 8007436:	462b      	mov	r3, r5
 8007438:	ee10 2a10 	vmov	r2, s0
 800743c:	4939      	ldr	r1, [pc, #228]	; (8007524 <atan+0x334>)
 800743e:	2000      	movs	r0, #0
 8007440:	f7f9 f9fc 	bl	800083c <__aeabi_ddiv>
 8007444:	f04f 0a03 	mov.w	sl, #3
 8007448:	4604      	mov	r4, r0
 800744a:	460d      	mov	r5, r1
 800744c:	e737      	b.n	80072be <atan+0xce>
 800744e:	4b36      	ldr	r3, [pc, #216]	; (8007528 <atan+0x338>)
 8007450:	4e36      	ldr	r6, [pc, #216]	; (800752c <atan+0x33c>)
 8007452:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007456:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800745a:	e9da 2300 	ldrd	r2, r3, [sl]
 800745e:	f7f8 ff0b 	bl	8000278 <__aeabi_dsub>
 8007462:	4622      	mov	r2, r4
 8007464:	462b      	mov	r3, r5
 8007466:	f7f8 ff07 	bl	8000278 <__aeabi_dsub>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007472:	f7f8 ff01 	bl	8000278 <__aeabi_dsub>
 8007476:	f1bb 0f00 	cmp.w	fp, #0
 800747a:	4604      	mov	r4, r0
 800747c:	460d      	mov	r5, r1
 800747e:	f6bf aed6 	bge.w	800722e <atan+0x3e>
 8007482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007486:	461d      	mov	r5, r3
 8007488:	e6d1      	b.n	800722e <atan+0x3e>
 800748a:	a51d      	add	r5, pc, #116	; (adr r5, 8007500 <atan+0x310>)
 800748c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007490:	e6cd      	b.n	800722e <atan+0x3e>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	54442d18 	.word	0x54442d18
 800749c:	bff921fb 	.word	0xbff921fb
 80074a0:	8800759c 	.word	0x8800759c
 80074a4:	7e37e43c 	.word	0x7e37e43c
 80074a8:	e322da11 	.word	0xe322da11
 80074ac:	3f90ad3a 	.word	0x3f90ad3a
 80074b0:	24760deb 	.word	0x24760deb
 80074b4:	3fa97b4b 	.word	0x3fa97b4b
 80074b8:	a0d03d51 	.word	0xa0d03d51
 80074bc:	3fb10d66 	.word	0x3fb10d66
 80074c0:	c54c206e 	.word	0xc54c206e
 80074c4:	3fb745cd 	.word	0x3fb745cd
 80074c8:	920083ff 	.word	0x920083ff
 80074cc:	3fc24924 	.word	0x3fc24924
 80074d0:	5555550d 	.word	0x5555550d
 80074d4:	3fd55555 	.word	0x3fd55555
 80074d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80074dc:	bfa2b444 	.word	0xbfa2b444
 80074e0:	52defd9a 	.word	0x52defd9a
 80074e4:	3fadde2d 	.word	0x3fadde2d
 80074e8:	af749a6d 	.word	0xaf749a6d
 80074ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80074f0:	fe231671 	.word	0xfe231671
 80074f4:	3fbc71c6 	.word	0x3fbc71c6
 80074f8:	9998ebc4 	.word	0x9998ebc4
 80074fc:	3fc99999 	.word	0x3fc99999
 8007500:	54442d18 	.word	0x54442d18
 8007504:	3ff921fb 	.word	0x3ff921fb
 8007508:	440fffff 	.word	0x440fffff
 800750c:	7ff00000 	.word	0x7ff00000
 8007510:	3fdbffff 	.word	0x3fdbffff
 8007514:	3ff00000 	.word	0x3ff00000
 8007518:	3ff2ffff 	.word	0x3ff2ffff
 800751c:	40038000 	.word	0x40038000
 8007520:	3ff80000 	.word	0x3ff80000
 8007524:	bff00000 	.word	0xbff00000
 8007528:	08007768 	.word	0x08007768
 800752c:	08007748 	.word	0x08007748

08007530 <fabs>:
 8007530:	ec51 0b10 	vmov	r0, r1, d0
 8007534:	ee10 2a10 	vmov	r2, s0
 8007538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800753c:	ec43 2b10 	vmov	d0, r2, r3
 8007540:	4770      	bx	lr
	...

08007544 <_init>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr

08007550 <_fini>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr
